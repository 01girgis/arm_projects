
RFID_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004008  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a8  080047a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b0  080047b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080047b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000007c  08004834  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004834  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcfc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e77  00000000  00000000  0002bda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0002dc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  0002e588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022962  00000000  00000000  0002edd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000095f3  00000000  00000000  00051732  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9b7e  00000000  00000000  0005ad25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001248a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002768  00000000  00000000  00124920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080041c0 	.word	0x080041c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	080041c0 	.word	0x080041c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b45      	ldr	r3, [pc, #276]	; (80006e0 <MX_GPIO_Init+0x130>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a44      	ldr	r2, [pc, #272]	; (80006e0 <MX_GPIO_Init+0x130>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b42      	ldr	r3, [pc, #264]	; (80006e0 <MX_GPIO_Init+0x130>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <MX_GPIO_Init+0x130>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a3d      	ldr	r2, [pc, #244]	; (80006e0 <MX_GPIO_Init+0x130>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <MX_GPIO_Init+0x130>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <MX_GPIO_Init+0x130>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <MX_GPIO_Init+0x130>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <MX_GPIO_Init+0x130>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <MX_GPIO_Init+0x130>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a2f      	ldr	r2, [pc, #188]	; (80006e0 <MX_GPIO_Init+0x130>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_GPIO_Init+0x130>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <MX_GPIO_Init+0x130>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <MX_GPIO_Init+0x130>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_GPIO_Init+0x130>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	4823      	ldr	r0, [pc, #140]	; (80006e4 <MX_GPIO_Init+0x134>)
 8000658:	f001 f992 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2104      	movs	r1, #4
 8000660:	4821      	ldr	r0, [pc, #132]	; (80006e8 <MX_GPIO_Init+0x138>)
 8000662:	f001 f98d 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_GPIO_Init+0x13c>)
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	481d      	ldr	r0, [pc, #116]	; (80006f0 <MX_GPIO_Init+0x140>)
 800067c:	f000 fefc 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000680:	230c      	movs	r3, #12
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000690:	2307      	movs	r3, #7
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4812      	ldr	r0, [pc, #72]	; (80006e4 <MX_GPIO_Init+0x134>)
 800069c:	f000 feec 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a0:	2320      	movs	r3, #32
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	480b      	ldr	r0, [pc, #44]	; (80006e4 <MX_GPIO_Init+0x134>)
 80006b8:	f000 fede 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 80006bc:	2304      	movs	r3, #4
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_GPIO_Init+0x138>)
 80006d4:	f000 fed0 	bl	8001478 <HAL_GPIO_Init>

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	10210000 	.word	0x10210000
 80006f0:	40020800 	.word	0x40020800

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fd43 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f873 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f7ff ff55 	bl	80005b0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000706:	f000 f8e9 	bl	80008dc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  /* Array for storing card IDs */
  uint8_t CardID[5];
  /* Known IDs */
  uint8_t MyIDCard[5] = { 0x00, 0x00, 0x00, 0x00, 0x00 };
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	711a      	strb	r2, [r3, #4]
  uint8_t emp[5] = { 0x41, 0x7D, 0xAB, 0x20, 0xB7 };
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <main+0xd4>)
 8000716:	463b      	mov	r3, r7
 8000718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800071c:	6018      	str	r0, [r3, #0]
 800071e:	3304      	adds	r3, #4
 8000720:	7019      	strb	r1, [r3, #0]
  LCD_Init();
 8000722:	f002 fbd5 	bl	8002ed0 <LCD_Init>
  MFRC522_Init(&hspi3);
 8000726:	4829      	ldr	r0, [pc, #164]	; (80007cc <main+0xd8>)
 8000728:	f000 fa36 	bl	8000b98 <MFRC522_Init>

  	/* Infinite loop */
  	while (1) {
  		/* Check if card is present */
  		if (MFRC522_Check(CardID) == MI_OK) {
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fa65 	bl	8000c00 <MFRC522_Check>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d136      	bne.n	80007aa <main+0xb6>
  			/* Check CardID if this is my card or token */
  			if (MFRC522_Compare(CardID, MyIDCard) == MI_OK) {
 800073c:	f107 0208 	add.w	r2, r7, #8
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fa73 	bl	8000c32 <MFRC522_Compare>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <main+0x66>
  				LCD_Printf("Hello Card!\n");
 8000752:	481f      	ldr	r0, [pc, #124]	; (80007d0 <main+0xdc>)
 8000754:	f002 ff6e 	bl	8003634 <LCD_Printf>
 8000758:	e02e      	b.n	80007b8 <main+0xc4>
  				/* Do smth here */
  			} else if (MFRC522_Compare(CardID, emp) == MI_OK) {
 800075a:	463a      	mov	r2, r7
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fa65 	bl	8000c32 <MFRC522_Compare>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d103      	bne.n	8000776 <main+0x82>
  				LCD_Printf("Hello MR. OLENEV.!\n\n\n\n");
 800076e:	4819      	ldr	r0, [pc, #100]	; (80007d4 <main+0xe0>)
 8000770:	f002 ff60 	bl	8003634 <LCD_Printf>
 8000774:	e020      	b.n	80007b8 <main+0xc4>
  				/* Do smth here */
  			} else {
  				LCD_Printf("Unknown card!\n\n");
 8000776:	4818      	ldr	r0, [pc, #96]	; (80007d8 <main+0xe4>)
 8000778:	f002 ff5c 	bl	8003634 <LCD_Printf>
  				/* Print CardID */
  				LCD_Printf("check the techenical support \n");
 800077c:	4817      	ldr	r0, [pc, #92]	; (80007dc <main+0xe8>)
 800077e:	f002 ff59 	bl	8003634 <LCD_Printf>
  				LCD_Printf("0x%02X 0x%02X 0x%02X 0x%02X 0x%02X", CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
 8000782:	7c3b      	ldrb	r3, [r7, #16]
 8000784:	4619      	mov	r1, r3
 8000786:	7c7b      	ldrb	r3, [r7, #17]
 8000788:	4618      	mov	r0, r3
 800078a:	7cbb      	ldrb	r3, [r7, #18]
 800078c:	461c      	mov	r4, r3
 800078e:	7cfb      	ldrb	r3, [r7, #19]
 8000790:	7d3a      	ldrb	r2, [r7, #20]
 8000792:	9201      	str	r2, [sp, #4]
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	4623      	mov	r3, r4
 8000798:	4602      	mov	r2, r0
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <main+0xec>)
 800079c:	f002 ff4a 	bl	8003634 <LCD_Printf>
  				LCD_SetCursor(0, 0);
 80007a0:	2100      	movs	r1, #0
 80007a2:	2000      	movs	r0, #0
 80007a4:	f003 f840 	bl	8003828 <LCD_SetCursor>
 80007a8:	e006      	b.n	80007b8 <main+0xc4>
  				/* Do smth here */
  			}

  		} else {
  			/* No valid card present */
  			LCD_Printf("No card!\n\n");
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <main+0xf0>)
 80007ac:	f002 ff42 	bl	8003634 <LCD_Printf>
  	  		LCD_SetCursor(0, 14);
 80007b0:	210e      	movs	r1, #14
 80007b2:	2000      	movs	r0, #0
 80007b4:	f003 f838 	bl	8003828 <LCD_SetCursor>

  		}
  		LCD_SetCursor(0, 0);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2000      	movs	r0, #0
 80007bc:	f003 f834 	bl	8003828 <LCD_SetCursor>
  		HAL_Delay(100);
 80007c0:	2064      	movs	r0, #100	; 0x64
 80007c2:	f000 fd51 	bl	8001268 <HAL_Delay>
  		if (MFRC522_Check(CardID) == MI_OK) {
 80007c6:	e7b1      	b.n	800072c <main+0x38>
 80007c8:	08004260 	.word	0x08004260
 80007cc:	200001b4 	.word	0x200001b4
 80007d0:	080041d8 	.word	0x080041d8
 80007d4:	080041e8 	.word	0x080041e8
 80007d8:	08004200 	.word	0x08004200
 80007dc:	08004210 	.word	0x08004210
 80007e0:	08004230 	.word	0x08004230
 80007e4:	08004254 	.word	0x08004254

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2234      	movs	r2, #52	; 0x34
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 f8d4 	bl	80039a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <SystemClock_Config+0xdc>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <SystemClock_Config+0xdc>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <SystemClock_Config+0xdc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <SystemClock_Config+0xe0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <SystemClock_Config+0xe0>)
 8000832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <SystemClock_Config+0xe0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000848:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800084c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000858:	2304      	movs	r3, #4
 800085a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800085c:	23b4      	movs	r3, #180	; 0xb4
 800085e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000864:	2302      	movs	r3, #2
 8000866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fb75 	bl	8001f60 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800087c:	f000 f826 	bl	80008cc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000880:	f001 f898 	bl	80019b4 <HAL_PWREx_EnableOverDrive>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800088a:	f000 f81f 	bl	80008cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088e:	230f      	movs	r3, #15
 8000890:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000892:	2302      	movs	r3, #2
 8000894:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	2105      	movs	r1, #5
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 f8d1 	bl	8001a54 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008b8:	f000 f808 	bl	80008cc <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3750      	adds	r7, #80	; 0x50
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_SPI3_Init+0x64>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <MX_SPI3_Init+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI3_Init+0x64>)
 80008e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI3_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_SPI3_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI3_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI3_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI3_Init+0x64>)
 8000908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI3_Init+0x64>)
 8000910:	2210      	movs	r2, #16
 8000912:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_SPI3_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI3_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_SPI3_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI3_Init+0x64>)
 8000928:	220a      	movs	r2, #10
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_SPI3_Init+0x64>)
 800092e:	f001 fd71 	bl	8002414 <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000938:	f7ff ffc8 	bl	80008cc <Error_Handler>
  }

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200001b4 	.word	0x200001b4
 8000944:	40003c00 	.word	0x40003c00

08000948 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <HAL_SPI_MspInit+0x84>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d12c      	bne.n	80009c4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_SPI_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <HAL_SPI_MspInit+0x88>)
 8000974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_SPI_MspInit+0x88>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_SPI_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <HAL_SPI_MspInit+0x88>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_SPI_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b4:	2306      	movs	r3, #6
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_SPI_MspInit+0x8c>)
 80009c0:	f000 fd5a 	bl	8001478 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40003c00 	.word	0x40003c00
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020800 	.word	0x40020800

080009d8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_SPI_MspDeInit+0x30>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d10a      	bne.n	8000a00 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_SPI_MspDeInit+0x34>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_SPI_MspDeInit+0x34>)
 80009f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80009f6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_SPI_MspDeInit+0x38>)
 80009fc:	f000 fece 	bl	800179c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
} 
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40003c00 	.word	0x40003c00
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020800 	.word	0x40020800

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a52:	2007      	movs	r0, #7
 8000a54:	f000 fcdc 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 fbb6 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <_sbrk+0x50>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x16>
		heap_end = &end;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <_sbrk+0x50>)
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <_sbrk+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <_sbrk+0x50>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <_sbrk+0x50>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	466a      	mov	r2, sp
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d907      	bls.n	8000afa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000aea:	f002 ff31 	bl	8003950 <__errno>
 8000aee:	4602      	mov	r2, r0
 8000af0:	230c      	movs	r3, #12
 8000af2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295
 8000af8:	e006      	b.n	8000b08 <_sbrk+0x48>
	}

	heap_end += incr;
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <_sbrk+0x50>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <_sbrk+0x50>)
 8000b04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000098 	.word	0x20000098
 8000b14:	20000218 	.word	0x20000218

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <SystemInit+0x28>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <SystemInit+0x28>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SystemInit+0x28>)
 8000b2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b32:	609a      	str	r2, [r3, #8]
#endif
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b4a:	e003      	b.n	8000b54 <LoopCopyDataInit>

08000b4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b52:	3104      	adds	r1, #4

08000b54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b5c:	d3f6      	bcc.n	8000b4c <CopyDataInit>
  ldr  r2, =_sbss
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b60:	e002      	b.n	8000b68 <LoopFillZerobss>

08000b62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b64:	f842 3b04 	str.w	r3, [r2], #4

08000b68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b6c:	d3f9      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b6e:	f7ff ffd3 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b72:	f002 fef3 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b76:	f7ff fdbd 	bl	80006f4 <main>
  bx  lr    
 8000b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b80:	080047b8 	.word	0x080047b8
  ldr  r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b88:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000b8c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000b90:	20000218 	.word	0x20000218

08000b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC_IRQHandler>
	...

08000b98 <MFRC522_Init>:

/*******************************************************************************
                            Public Functions
*******************************************************************************/

void MFRC522_Init(SPI_HandleTypeDef* hspi) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

	MFRC522_hspi = hspi;
 8000ba0:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MFRC522_Init+0x60>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]

	MFRC522_CS_HIGH();
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2104      	movs	r1, #4
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <MFRC522_Init+0x64>)
 8000bac:	f000 fee8 	bl	8001980 <HAL_GPIO_WritePin>

	MFRC522_Reset();
 8000bb0:	f000 f8fb 	bl	8000daa <MFRC522_Reset>

	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000bb4:	218d      	movs	r1, #141	; 0x8d
 8000bb6:	202a      	movs	r0, #42	; 0x2a
 8000bb8:	f000 f85c 	bl	8000c74 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000bbc:	213e      	movs	r1, #62	; 0x3e
 8000bbe:	202b      	movs	r0, #43	; 0x2b
 8000bc0:	f000 f858 	bl	8000c74 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8000bc4:	211e      	movs	r1, #30
 8000bc6:	202d      	movs	r0, #45	; 0x2d
 8000bc8:	f000 f854 	bl	8000c74 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	202c      	movs	r0, #44	; 0x2c
 8000bd0:	f000 f850 	bl	8000c74 <MFRC522_WriteRegister>

	/* 48dB gain */
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8000bd4:	2170      	movs	r1, #112	; 0x70
 8000bd6:	2026      	movs	r0, #38	; 0x26
 8000bd8:	f000 f84c 	bl	8000c74 <MFRC522_WriteRegister>

	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000bdc:	2140      	movs	r1, #64	; 0x40
 8000bde:	2015      	movs	r0, #21
 8000be0:	f000 f848 	bl	8000c74 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000be4:	213d      	movs	r1, #61	; 0x3d
 8000be6:	2011      	movs	r0, #17
 8000be8:	f000 f844 	bl	8000c74 <MFRC522_WriteRegister>

	MFRC522_AntennaOn();		//Open the antenna
 8000bec:	f000 f8c8 	bl	8000d80 <MFRC522_AntennaOn>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000020c 	.word	0x2000020c
 8000bfc:	40020c00 	.word	0x40020c00

08000c00 <MFRC522_Check>:

MFRC522_Status_t MFRC522_Check(uint8_t* id) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	MFRC522_Status_t status;
	//Find cards, return card type
	status = MFRC522_Request(PICC_REQIDL, id);
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	2026      	movs	r0, #38	; 0x26
 8000c0c:	f000 f8d5 	bl	8000dba <MFRC522_Request>
 8000c10:	4603      	mov	r3, r0
 8000c12:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d104      	bne.n	8000c24 <MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = MFRC522_Anticoll(id);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f9c1 	bl	8000fa2 <MFRC522_Anticoll>
 8000c20:	4603      	mov	r3, r0
 8000c22:	73fb      	strb	r3, [r7, #15]
	}
	MFRC522_Halt();			//Command card into hibernation
 8000c24:	f000 fa43 	bl	80010ae <MFRC522_Halt>

	return status;
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <MFRC522_Compare>:

MFRC522_Status_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 8000c32:	b480      	push	{r7}
 8000c34:	b085      	sub	sp, #20
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e00e      	b.n	8000c60 <MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) {
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	781a      	ldrb	r2, [r3, #0]
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	6839      	ldr	r1, [r7, #0]
 8000c4e:	440b      	add	r3, r1
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d001      	beq.n	8000c5a <MFRC522_Compare+0x28>
			return MI_ERR;
 8000c56:	2302      	movs	r3, #2
 8000c58:	e006      	b.n	8000c68 <MFRC522_Compare+0x36>
	for (i = 0; i < 5; i++) {
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d9ed      	bls.n	8000c42 <MFRC522_Compare+0x10>
		}
	}
	return MI_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <MFRC522_WriteRegister>:
/*******************************************************************************
                            Private Functions
*******************************************************************************/


void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW();
 8000c84:	2200      	movs	r2, #0
 8000c86:	2104      	movs	r1, #4
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MFRC522_WriteRegister+0x48>)
 8000c8a:	f000 fe79 	bl	8001980 <HAL_GPIO_WritePin>
	//Send address
	SPI_Write((addr << 1) & 0x7E);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fa44 	bl	8001128 <SPI_Write>
	//Send data
	SPI_Write(val);
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fa40 	bl	8001128 <SPI_Write>
	//CS high
	MFRC522_CS_HIGH();
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2104      	movs	r1, #4
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <MFRC522_WriteRegister+0x48>)
 8000cae:	f000 fe67 	bl	8001980 <HAL_GPIO_WritePin>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW();
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480f      	ldr	r0, [pc, #60]	; (8000d0c <MFRC522_ReadRegister+0x4c>)
 8000cd0:	f000 fe56 	bl	8001980 <HAL_GPIO_WritePin>

	SPI_Write(((addr << 1) & 0x7E) | 0x80);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fa1d 	bl	8001128 <SPI_Write>
	val = SPI_Read();
 8000cee:	f000 f9f9 	bl	80010e4 <SPI_Read>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH();
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MFRC522_ReadRegister+0x4c>)
 8000cfc:	f000 fe40 	bl	8001980 <HAL_GPIO_WritePin>

	return val;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ffcc 	bl	8000cc0 <MFRC522_ReadRegister>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff9c 	bl	8000c74 <MFRC522_WriteRegister>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ffb2 	bl	8000cc0 <MFRC522_ReadRegister>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b25a      	sxtb	r2, r3
 8000d60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff7e 	bl	8000c74 <MFRC522_WriteRegister>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000d86:	2014      	movs	r0, #20
 8000d88:	f7ff ff9a 	bl	8000cc0 <MFRC522_ReadRegister>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <MFRC522_AntennaOn+0x22>
		MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	2014      	movs	r0, #20
 8000d9e:	f7ff ffb7 	bl	8000d10 <MFRC522_SetBitMask>
	}
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <MFRC522_Reset>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Reset(void) {
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000dae:	210f      	movs	r1, #15
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff ff5f 	bl	8000c74 <MFRC522_WriteRegister>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}

08000dba <MFRC522_Request>:

MFRC522_Status_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af02      	add	r7, sp, #8
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	6039      	str	r1, [r7, #0]
 8000dc4:	71fb      	strb	r3, [r7, #7]
	MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8000dc6:	2107      	movs	r1, #7
 8000dc8:	200d      	movs	r0, #13
 8000dca:	f7ff ff53 	bl	8000c74 <MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	6839      	ldr	r1, [r7, #0]
 8000de0:	200c      	movs	r0, #12
 8000de2:	f000 f80f 	bl	8000e04 <MFRC522_ToCard>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <MFRC522_Request+0x3c>
 8000df0:	89bb      	ldrh	r3, [r7, #12]
 8000df2:	2b10      	cmp	r3, #16
 8000df4:	d001      	beq.n	8000dfa <MFRC522_Request+0x40>
		status = MI_ERR;
 8000df6:	2302      	movs	r3, #2
 8000df8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <MFRC522_ToCard>:

MFRC522_Status_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	4613      	mov	r3, r2
 8000e14:	73bb      	strb	r3, [r7, #14]
	MFRC522_Status_t status = MI_ERR;
 8000e16:	2302      	movs	r3, #2
 8000e18:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	2b0c      	cmp	r3, #12
 8000e26:	d007      	beq.n	8000e38 <MFRC522_ToCard+0x34>
 8000e28:	2b0e      	cmp	r3, #14
 8000e2a:	d000      	beq.n	8000e2e <MFRC522_ToCard+0x2a>
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
		}
		default:
			break;
 8000e2c:	e009      	b.n	8000e42 <MFRC522_ToCard+0x3e>
			irqEn = 0x12;
 8000e2e:	2312      	movs	r3, #18
 8000e30:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000e32:	2310      	movs	r3, #16
 8000e34:	757b      	strb	r3, [r7, #21]
			break;
 8000e36:	e004      	b.n	8000e42 <MFRC522_ToCard+0x3e>
			irqEn = 0x77;
 8000e38:	2377      	movs	r3, #119	; 0x77
 8000e3a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000e3c:	2330      	movs	r3, #48	; 0x30
 8000e3e:	757b      	strb	r3, [r7, #21]
			break;
 8000e40:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000e42:	7dbb      	ldrb	r3, [r7, #22]
 8000e44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f7ff ff11 	bl	8000c74 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	2004      	movs	r0, #4
 8000e56:	f7ff ff75 	bl	8000d44 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	200a      	movs	r0, #10
 8000e5e:	f7ff ff57 	bl	8000d10 <MFRC522_SetBitMask>

	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000e62:	2100      	movs	r1, #0
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff ff05 	bl	8000c74 <MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	827b      	strh	r3, [r7, #18]
 8000e6e:	e00a      	b.n	8000e86 <MFRC522_ToCard+0x82>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000e70:	8a7b      	ldrh	r3, [r7, #18]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2009      	movs	r0, #9
 8000e7c:	f7ff fefa 	bl	8000c74 <MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8000e80:	8a7b      	ldrh	r3, [r7, #18]
 8000e82:	3301      	adds	r3, #1
 8000e84:	827b      	strh	r3, [r7, #18]
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	8a7a      	ldrh	r2, [r7, #18]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d3ef      	bcc.n	8000e70 <MFRC522_ToCard+0x6c>
	}

	//Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	4619      	mov	r1, r3
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff feed 	bl	8000c74 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	2b0c      	cmp	r3, #12
 8000e9e:	d103      	bne.n	8000ea8 <MFRC522_ToCard+0xa4>
		MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	200d      	movs	r0, #13
 8000ea4:	f7ff ff34 	bl	8000d10 <MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000ea8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eac:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000eae:	2004      	movs	r0, #4
 8000eb0:	f7ff ff06 	bl	8000cc0 <MFRC522_ReadRegister>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	753b      	strb	r3, [r7, #20]
		i--;
 8000eb8:	8a7b      	ldrh	r3, [r7, #18]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000ebe:	8a7b      	ldrh	r3, [r7, #18]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00a      	beq.n	8000eda <MFRC522_ToCard+0xd6>
 8000ec4:	7d3b      	ldrb	r3, [r7, #20]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d105      	bne.n	8000eda <MFRC522_ToCard+0xd6>
 8000ece:	7d3a      	ldrb	r2, [r7, #20]
 8000ed0:	7d7b      	ldrb	r3, [r7, #21]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0e9      	beq.n	8000eae <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	200d      	movs	r0, #13
 8000ede:	f7ff ff31 	bl	8000d44 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000ee2:	8a7b      	ldrh	r3, [r7, #18]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d057      	beq.n	8000f98 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000ee8:	2006      	movs	r0, #6
 8000eea:	f7ff fee9 	bl	8000cc0 <MFRC522_ReadRegister>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f003 031b 	and.w	r3, r3, #27
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d14d      	bne.n	8000f94 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 8000efc:	7d3a      	ldrb	r2, [r7, #20]
 8000efe:	7dbb      	ldrb	r3, [r7, #22]
 8000f00:	4013      	ands	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	2b0c      	cmp	r3, #12
 8000f14:	d140      	bne.n	8000f98 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000f16:	200a      	movs	r0, #10
 8000f18:	f7ff fed2 	bl	8000cc0 <MFRC522_ReadRegister>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000f20:	200c      	movs	r0, #12
 8000f22:	f7ff fecd 	bl	8000cc0 <MFRC522_ReadRegister>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 8000f2e:	7c7b      	ldrb	r3, [r7, #17]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00b      	beq.n	8000f4c <MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8000f34:	7d3b      	ldrb	r3, [r7, #20]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	7c7b      	ldrb	r3, [r7, #17]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f48:	801a      	strh	r2, [r3, #0]
 8000f4a:	e005      	b.n	8000f58 <MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 8000f4c:	7d3b      	ldrb	r3, [r7, #20]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f56:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8000f58:	7d3b      	ldrb	r3, [r7, #20]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <MFRC522_ToCard+0x15e>
					n = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 8000f62:	7d3b      	ldrb	r3, [r7, #20]
 8000f64:	2b10      	cmp	r3, #16
 8000f66:	d901      	bls.n	8000f6c <MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	827b      	strh	r3, [r7, #18]
 8000f70:	e00a      	b.n	8000f88 <MFRC522_ToCard+0x184>
					backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8000f72:	8a7b      	ldrh	r3, [r7, #18]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	18d4      	adds	r4, r2, r3
 8000f78:	2009      	movs	r0, #9
 8000f7a:	f7ff fea1 	bl	8000cc0 <MFRC522_ReadRegister>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8000f82:	8a7b      	ldrh	r3, [r7, #18]
 8000f84:	3301      	adds	r3, #1
 8000f86:	827b      	strh	r3, [r7, #18]
 8000f88:	7d3b      	ldrb	r3, [r7, #20]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	8a7a      	ldrh	r2, [r7, #18]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3ef      	bcc.n	8000f72 <MFRC522_ToCard+0x16e>
 8000f92:	e001      	b.n	8000f98 <MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8000f94:	2302      	movs	r3, #2
 8000f96:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd90      	pop	{r4, r7, pc}

08000fa2 <MFRC522_Anticoll>:

MFRC522_Status_t MFRC522_Anticoll(uint8_t* serNum) {
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af02      	add	r7, sp, #8
 8000fa8:	6078      	str	r0, [r7, #4]
	MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000fae:	2100      	movs	r1, #0
 8000fb0:	200d      	movs	r0, #13
 8000fb2:	f7ff fe5f 	bl	8000c74 <MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2293      	movs	r2, #147	; 0x93
 8000fba:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000fc4:	f107 030a 	add.w	r3, r7, #10
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	200c      	movs	r0, #12
 8000fd2:	f7ff ff17 	bl	8000e04 <MFRC522_ToCard>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73bb      	strb	r3, [r7, #14]
 8000fe4:	e009      	b.n	8000ffa <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	7b7b      	ldrb	r3, [r7, #13]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d9f2      	bls.n	8000fe6 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	7b7a      	ldrb	r2, [r7, #13]
 800100a:	429a      	cmp	r2, r3
 800100c:	d001      	beq.n	8001012 <MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800100e:	2302      	movs	r3, #2
 8001010:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	460b      	mov	r3, r1
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 800102a:	2104      	movs	r1, #4
 800102c:	2005      	movs	r0, #5
 800102e:	f7ff fe89 	bl	8000d44 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8001032:	2180      	movs	r1, #128	; 0x80
 8001034:	200a      	movs	r0, #10
 8001036:	f7ff fe6b 	bl	8000d10 <MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	75fb      	strb	r3, [r7, #23]
 800103e:	e00a      	b.n	8001056 <MFRC522_CalculateCRC+0x3a>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	4413      	add	r3, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	2009      	movs	r0, #9
 800104c:	f7ff fe12 	bl	8000c74 <MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	3301      	adds	r3, #1
 8001054:	75fb      	strb	r3, [r7, #23]
 8001056:	7dfa      	ldrb	r2, [r7, #23]
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	429a      	cmp	r2, r3
 800105c:	d3f0      	bcc.n	8001040 <MFRC522_CalculateCRC+0x24>
	}
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800105e:	2103      	movs	r1, #3
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff fe07 	bl	8000c74 <MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8001066:	23ff      	movs	r3, #255	; 0xff
 8001068:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800106a:	2005      	movs	r0, #5
 800106c:	f7ff fe28 	bl	8000cc0 <MFRC522_ReadRegister>
 8001070:	4603      	mov	r3, r0
 8001072:	75bb      	strb	r3, [r7, #22]
		i--;
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	3b01      	subs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <MFRC522_CalculateCRC+0x6e>
 8001080:	7dbb      	ldrb	r3, [r7, #22]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0ef      	beq.n	800106a <MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800108a:	2022      	movs	r0, #34	; 0x22
 800108c:	f7ff fe18 	bl	8000cc0 <MFRC522_ReadRegister>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	1c5c      	adds	r4, r3, #1
 800109c:	2021      	movs	r0, #33	; 0x21
 800109e:	f7ff fe0f 	bl	8000cc0 <MFRC522_ReadRegister>
 80010a2:	4603      	mov	r3, r0
 80010a4:	7023      	strb	r3, [r4, #0]
}
 80010a6:	bf00      	nop
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}

080010ae <MFRC522_Halt>:
	}

	return status;
}

void MFRC522_Halt(void) {
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80010b4:	2350      	movs	r3, #80	; 0x50
 80010b6:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80010bc:	463b      	mov	r3, r7
 80010be:	1c9a      	adds	r2, r3, #2
 80010c0:	463b      	mov	r3, r7
 80010c2:	2102      	movs	r1, #2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffa9 	bl	800101c <MFRC522_CalculateCRC>

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80010ca:	463a      	mov	r2, r7
 80010cc:	4639      	mov	r1, r7
 80010ce:	1dbb      	adds	r3, r7, #6
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	4613      	mov	r3, r2
 80010d4:	2204      	movs	r2, #4
 80010d6:	200c      	movs	r0, #12
 80010d8:	f7ff fe94 	bl	8000e04 <MFRC522_ToCard>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <SPI_Read>:
/**
  * @brief  SPI Read 4 bytes from device
  * @param  None
  * @retval Read data
*/
static uint8_t SPI_Read(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status = HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71fb      	strb	r3, [r7, #7]
	uint8_t readvalue = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71bb      	strb	r3, [r7, #6]
	uint8_t writevalue = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	717b      	strb	r3, [r7, #5]

	status = HAL_SPI_TransmitReceive(MFRC522_hspi, (uint8_t*) &writevalue, (uint8_t*) &readvalue, 1, SpixTimeout);
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <SPI_Read+0x40>)
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	1dba      	adds	r2, r7, #6
 80010fc:	1d79      	adds	r1, r7, #5
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	f001 fb45 	bl	8002794 <HAL_SPI_TransmitReceive>
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]

	/* Check the communication status */
	if(status != HAL_OK) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SPI_Read+0x34>
		/* Execute user timeout callback */
		SPI_Error();
 8001114:	f000 f824 	bl	8001160 <SPI_Error>
	}

	return readvalue;
 8001118:	79bb      	ldrb	r3, [r7, #6]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000020c 	.word	0x2000020c

08001128 <SPI_Write>:
/**
  * @brief  SPI Write a byte to device
  * @param  Value: value to be written
  * @retval None
  */
static void SPI_Write(uint8_t Value) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]

	status = HAL_SPI_Transmit(MFRC522_hspi, (uint8_t*) &Value, 1, SpixTimeout);
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <SPI_Write+0x34>)
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	1df9      	adds	r1, r7, #7
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	2201      	movs	r2, #1
 8001142:	f001 f9f3 	bl	800252c <HAL_SPI_Transmit>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]

	/* Check the communication status */
	if(status != HAL_OK) {
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SPI_Write+0x2c>
		/* Execute user timeout callback */
		SPI_Error();
 8001150:	f000 f806 	bl	8001160 <SPI_Error>
	}
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000020c 	.word	0x2000020c

08001160 <SPI_Error>:
/**
  * @brief  SPI error treatment function
  * @param  None
  * @retval None
  */
static void SPI_Error (void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/* De-initialize the SPI communication BUS */
	HAL_SPI_DeInit(MFRC522_hspi);
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SPI_Error+0x1c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f001 f9b7 	bl	80024dc <HAL_SPI_DeInit>
	LCD_Printf("\nSPI ERROR!!\n\n");
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <SPI_Error+0x20>)
 8001170:	f002 fa60 	bl	8003634 <LCD_Printf>
	/* Re-Initiaize the SPI communication BUS */
	MX_SPI3_Init();
 8001174:	f7ff fbb2 	bl	80008dc <MX_SPI3_Init>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000020c 	.word	0x2000020c
 8001180:	08004268 	.word	0x08004268

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f92f 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fc2c 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f939 	bl	800145e <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f90f 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	20000210 	.word	0x20000210

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000210 	.word	0x20000210

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_Delay+0x40>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000008 	.word	0x20000008

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff8e 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff47 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff5c 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff8e 	bl	8001364 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffb0 	bl	80013cc <SysTick_Config>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	e165      	b.n	8001760 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001494:	2201      	movs	r2, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	f040 8154 	bne.w	800175a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d00b      	beq.n	80014d2 <HAL_GPIO_Init+0x5a>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c6:	2b11      	cmp	r3, #17
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b12      	cmp	r3, #18
 80014d0:	d130      	bne.n	8001534 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001508:	2201      	movs	r2, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f003 0201 	and.w	r2, r3, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0xfc>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b12      	cmp	r3, #18
 8001572:	d123      	bne.n	80015bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	08da      	lsrs	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3208      	adds	r2, #8
 800157c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	691a      	ldr	r2, [r3, #16]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	08da      	lsrs	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3208      	adds	r2, #8
 80015b6:	69b9      	ldr	r1, [r7, #24]
 80015b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0203 	and.w	r2, r3, #3
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80ae 	beq.w	800175a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b5c      	ldr	r3, [pc, #368]	; (8001774 <HAL_GPIO_Init+0x2fc>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a5b      	ldr	r2, [pc, #364]	; (8001774 <HAL_GPIO_Init+0x2fc>)
 8001608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b59      	ldr	r3, [pc, #356]	; (8001774 <HAL_GPIO_Init+0x2fc>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161a:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_GPIO_Init+0x300>)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	3302      	adds	r3, #2
 8001622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	220f      	movs	r2, #15
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4e      	ldr	r2, [pc, #312]	; (800177c <HAL_GPIO_Init+0x304>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d025      	beq.n	8001692 <HAL_GPIO_Init+0x21a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4d      	ldr	r2, [pc, #308]	; (8001780 <HAL_GPIO_Init+0x308>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d01f      	beq.n	800168e <HAL_GPIO_Init+0x216>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_GPIO_Init+0x30c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d019      	beq.n	800168a <HAL_GPIO_Init+0x212>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4b      	ldr	r2, [pc, #300]	; (8001788 <HAL_GPIO_Init+0x310>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d013      	beq.n	8001686 <HAL_GPIO_Init+0x20e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4a      	ldr	r2, [pc, #296]	; (800178c <HAL_GPIO_Init+0x314>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d00d      	beq.n	8001682 <HAL_GPIO_Init+0x20a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a49      	ldr	r2, [pc, #292]	; (8001790 <HAL_GPIO_Init+0x318>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d007      	beq.n	800167e <HAL_GPIO_Init+0x206>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a48      	ldr	r2, [pc, #288]	; (8001794 <HAL_GPIO_Init+0x31c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d101      	bne.n	800167a <HAL_GPIO_Init+0x202>
 8001676:	2306      	movs	r3, #6
 8001678:	e00c      	b.n	8001694 <HAL_GPIO_Init+0x21c>
 800167a:	2307      	movs	r3, #7
 800167c:	e00a      	b.n	8001694 <HAL_GPIO_Init+0x21c>
 800167e:	2305      	movs	r3, #5
 8001680:	e008      	b.n	8001694 <HAL_GPIO_Init+0x21c>
 8001682:	2304      	movs	r3, #4
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x21c>
 8001686:	2303      	movs	r3, #3
 8001688:	e004      	b.n	8001694 <HAL_GPIO_Init+0x21c>
 800168a:	2302      	movs	r3, #2
 800168c:	e002      	b.n	8001694 <HAL_GPIO_Init+0x21c>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_GPIO_Init+0x21c>
 8001692:	2300      	movs	r3, #0
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	f002 0203 	and.w	r2, r2, #3
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	4093      	lsls	r3, r2
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a4:	4934      	ldr	r1, [pc, #208]	; (8001778 <HAL_GPIO_Init+0x300>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_GPIO_Init+0x320>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d6:	4a30      	ldr	r2, [pc, #192]	; (8001798 <HAL_GPIO_Init+0x320>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_GPIO_Init+0x320>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001700:	4a25      	ldr	r2, [pc, #148]	; (8001798 <HAL_GPIO_Init+0x320>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_GPIO_Init+0x320>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172a:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_GPIO_Init+0x320>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_GPIO_Init+0x320>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001754:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_GPIO_Init+0x320>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3301      	adds	r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	2b0f      	cmp	r3, #15
 8001764:	f67f ae96 	bls.w	8001494 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001768:	bf00      	nop
 800176a:	3724      	adds	r7, #36	; 0x24
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40023800 	.word	0x40023800
 8001778:	40013800 	.word	0x40013800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400
 8001784:	40020800 	.word	0x40020800
 8001788:	40020c00 	.word	0x40020c00
 800178c:	40021000 	.word	0x40021000
 8001790:	40021400 	.word	0x40021400
 8001794:	40021800 	.word	0x40021800
 8001798:	40013c00 	.word	0x40013c00

0800179c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e0c7      	b.n	8001948 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b8:	2201      	movs	r2, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	f040 80b7 	bne.w	8001942 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80017d4:	4a61      	ldr	r2, [pc, #388]	; (800195c <HAL_GPIO_DeInit+0x1c0>)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	4013      	ands	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a59      	ldr	r2, [pc, #356]	; (8001960 <HAL_GPIO_DeInit+0x1c4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d025      	beq.n	800184a <HAL_GPIO_DeInit+0xae>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a58      	ldr	r2, [pc, #352]	; (8001964 <HAL_GPIO_DeInit+0x1c8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <HAL_GPIO_DeInit+0xaa>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a57      	ldr	r2, [pc, #348]	; (8001968 <HAL_GPIO_DeInit+0x1cc>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_DeInit+0xa6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a56      	ldr	r2, [pc, #344]	; (800196c <HAL_GPIO_DeInit+0x1d0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_DeInit+0xa2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a55      	ldr	r2, [pc, #340]	; (8001970 <HAL_GPIO_DeInit+0x1d4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_DeInit+0x9e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a54      	ldr	r2, [pc, #336]	; (8001974 <HAL_GPIO_DeInit+0x1d8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_DeInit+0x9a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a53      	ldr	r2, [pc, #332]	; (8001978 <HAL_GPIO_DeInit+0x1dc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_DeInit+0x96>
 800182e:	2306      	movs	r3, #6
 8001830:	e00c      	b.n	800184c <HAL_GPIO_DeInit+0xb0>
 8001832:	2307      	movs	r3, #7
 8001834:	e00a      	b.n	800184c <HAL_GPIO_DeInit+0xb0>
 8001836:	2305      	movs	r3, #5
 8001838:	e008      	b.n	800184c <HAL_GPIO_DeInit+0xb0>
 800183a:	2304      	movs	r3, #4
 800183c:	e006      	b.n	800184c <HAL_GPIO_DeInit+0xb0>
 800183e:	2303      	movs	r3, #3
 8001840:	e004      	b.n	800184c <HAL_GPIO_DeInit+0xb0>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_DeInit+0xb0>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_DeInit+0xb0>
 800184a:	2300      	movs	r3, #0
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	429a      	cmp	r2, r3
 800185a:	d132      	bne.n	80018c2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800185c:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_GPIO_DeInit+0x1e0>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	4945      	ldr	r1, [pc, #276]	; (800197c <HAL_GPIO_DeInit+0x1e0>)
 8001866:	4013      	ands	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800186a:	4b44      	ldr	r3, [pc, #272]	; (800197c <HAL_GPIO_DeInit+0x1e0>)
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	4942      	ldr	r1, [pc, #264]	; (800197c <HAL_GPIO_DeInit+0x1e0>)
 8001874:	4013      	ands	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001878:	4b40      	ldr	r3, [pc, #256]	; (800197c <HAL_GPIO_DeInit+0x1e0>)
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43db      	mvns	r3, r3
 8001880:	493e      	ldr	r1, [pc, #248]	; (800197c <HAL_GPIO_DeInit+0x1e0>)
 8001882:	4013      	ands	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001886:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_GPIO_DeInit+0x1e0>)
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43db      	mvns	r3, r3
 800188e:	493b      	ldr	r1, [pc, #236]	; (800197c <HAL_GPIO_DeInit+0x1e0>)
 8001890:	4013      	ands	r3, r2
 8001892:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80018a4:	4a2d      	ldr	r2, [pc, #180]	; (800195c <HAL_GPIO_DeInit+0x1c0>)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	43da      	mvns	r2, r3
 80018b4:	4829      	ldr	r0, [pc, #164]	; (800195c <HAL_GPIO_DeInit+0x1c0>)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	400a      	ands	r2, r1
 80018bc:	3302      	adds	r3, #2
 80018be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2103      	movs	r1, #3
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	220f      	movs	r2, #15
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	08d2      	lsrs	r2, r2, #3
 80018f8:	4019      	ands	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2103      	movs	r1, #3
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	2101      	movs	r1, #1
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2103      	movs	r1, #3
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	401a      	ands	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b0f      	cmp	r3, #15
 800194c:	f67f af34 	bls.w	80017b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40013800 	.word	0x40013800
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400
 8001968:	40020800 	.word	0x40020800
 800196c:	40020c00 	.word	0x40020c00
 8001970:	40021000 	.word	0x40021000
 8001974:	40021400 	.word	0x40021400
 8001978:	40021800 	.word	0x40021800
 800197c:	40013c00 	.word	0x40013c00

08001980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800199c:	e003      	b.n	80019a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	041a      	lsls	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	619a      	str	r2, [r3, #24]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_PWREx_EnableOverDrive+0x90>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_PWREx_EnableOverDrive+0x90>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_PWREx_EnableOverDrive+0x90>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_PWREx_EnableOverDrive+0x94>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e0:	f7ff fc36 	bl	8001250 <HAL_GetTick>
 80019e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019e6:	e009      	b.n	80019fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019e8:	f7ff fc32 	bl	8001250 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f6:	d901      	bls.n	80019fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e01f      	b.n	8001a3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d1ee      	bne.n	80019e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a10:	f7ff fc1e 	bl	8001250 <HAL_GetTick>
 8001a14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a16:	e009      	b.n	8001a2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a18:	f7ff fc1a 	bl	8001250 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a26:	d901      	bls.n	8001a2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e007      	b.n	8001a3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a38:	d1ee      	bne.n	8001a18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	420e0040 	.word	0x420e0040
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	420e0044 	.word	0x420e0044

08001a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0cc      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d90c      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b65      	ldr	r3, [pc, #404]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0b8      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa8:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac0:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a52      	ldr	r2, [pc, #328]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	494d      	ldr	r1, [pc, #308]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d044      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d119      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b12:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e06f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e067      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f023 0203 	bic.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4934      	ldr	r1, [pc, #208]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b44:	f7ff fb84 	bl	8001250 <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7ff fb80 	bl	8001250 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e04f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 020c 	and.w	r2, r3, #12
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1eb      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d20c      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e032      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4916      	ldr	r1, [pc, #88]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	490e      	ldr	r1, [pc, #56]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bda:	f000 f821 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bde:	4601      	mov	r1, r0
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
 8001bee:	fa21 f303 	lsr.w	r3, r1, r3
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fae4 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08004278 	.word	0x08004278
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c3a:	4bc6      	ldr	r3, [pc, #792]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	f200 817e 	bhi.w	8001f44 <HAL_RCC_GetSysClockFreq+0x324>
 8001c48:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <HAL_RCC_GetSysClockFreq+0x30>)
 8001c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4e:	bf00      	nop
 8001c50:	08001c85 	.word	0x08001c85
 8001c54:	08001f45 	.word	0x08001f45
 8001c58:	08001f45 	.word	0x08001f45
 8001c5c:	08001f45 	.word	0x08001f45
 8001c60:	08001c8b 	.word	0x08001c8b
 8001c64:	08001f45 	.word	0x08001f45
 8001c68:	08001f45 	.word	0x08001f45
 8001c6c:	08001f45 	.word	0x08001f45
 8001c70:	08001c91 	.word	0x08001c91
 8001c74:	08001f45 	.word	0x08001f45
 8001c78:	08001f45 	.word	0x08001f45
 8001c7c:	08001f45 	.word	0x08001f45
 8001c80:	08001ded 	.word	0x08001ded
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4bb4      	ldr	r3, [pc, #720]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x338>)
 8001c86:	613b      	str	r3, [r7, #16]
       break;
 8001c88:	e15f      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c8a:	4bb4      	ldr	r3, [pc, #720]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x33c>)
 8001c8c:	613b      	str	r3, [r7, #16]
      break;
 8001c8e:	e15c      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c90:	4bb0      	ldr	r3, [pc, #704]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c98:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9a:	4bae      	ldr	r3, [pc, #696]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d04a      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	4bab      	ldr	r3, [pc, #684]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	f04f 0400 	mov.w	r4, #0
 8001cb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	ea03 0501 	and.w	r5, r3, r1
 8001cbc:	ea04 0602 	and.w	r6, r4, r2
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	4632      	mov	r2, r6
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f04f 0400 	mov.w	r4, #0
 8001ccc:	0154      	lsls	r4, r2, #5
 8001cce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cd2:	014b      	lsls	r3, r1, #5
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	1b49      	subs	r1, r1, r5
 8001cda:	eb62 0206 	sbc.w	r2, r2, r6
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	f04f 0400 	mov.w	r4, #0
 8001ce6:	0194      	lsls	r4, r2, #6
 8001ce8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cec:	018b      	lsls	r3, r1, #6
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	eb64 0402 	sbc.w	r4, r4, r2
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	00e2      	lsls	r2, r4, #3
 8001cfe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d02:	00d9      	lsls	r1, r3, #3
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	195b      	adds	r3, r3, r5
 8001d0a:	eb44 0406 	adc.w	r4, r4, r6
 8001d0e:	f04f 0100 	mov.w	r1, #0
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	0262      	lsls	r2, r4, #9
 8001d18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d1c:	0259      	lsls	r1, r3, #9
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4614      	mov	r4, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	4621      	mov	r1, r4
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f04f 0400 	mov.w	r4, #0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	f7fe fabe 	bl	80002b0 <__aeabi_uldivmod>
 8001d34:	4603      	mov	r3, r0
 8001d36:	460c      	mov	r4, r1
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e049      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3c:	4b85      	ldr	r3, [pc, #532]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	f04f 0400 	mov.w	r4, #0
 8001d46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	ea03 0501 	and.w	r5, r3, r1
 8001d52:	ea04 0602 	and.w	r6, r4, r2
 8001d56:	4629      	mov	r1, r5
 8001d58:	4632      	mov	r2, r6
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	f04f 0400 	mov.w	r4, #0
 8001d62:	0154      	lsls	r4, r2, #5
 8001d64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d68:	014b      	lsls	r3, r1, #5
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	1b49      	subs	r1, r1, r5
 8001d70:	eb62 0206 	sbc.w	r2, r2, r6
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	f04f 0400 	mov.w	r4, #0
 8001d7c:	0194      	lsls	r4, r2, #6
 8001d7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d82:	018b      	lsls	r3, r1, #6
 8001d84:	1a5b      	subs	r3, r3, r1
 8001d86:	eb64 0402 	sbc.w	r4, r4, r2
 8001d8a:	f04f 0100 	mov.w	r1, #0
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	00e2      	lsls	r2, r4, #3
 8001d94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d98:	00d9      	lsls	r1, r3, #3
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4614      	mov	r4, r2
 8001d9e:	195b      	adds	r3, r3, r5
 8001da0:	eb44 0406 	adc.w	r4, r4, r6
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	02a2      	lsls	r2, r4, #10
 8001dae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001db2:	0299      	lsls	r1, r3, #10
 8001db4:	460b      	mov	r3, r1
 8001db6:	4614      	mov	r4, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	4621      	mov	r1, r4
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f04f 0400 	mov.w	r4, #0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4623      	mov	r3, r4
 8001dc6:	f7fe fa73 	bl	80002b0 <__aeabi_uldivmod>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	460c      	mov	r4, r1
 8001dce:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dd0:	4b60      	ldr	r3, [pc, #384]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	613b      	str	r3, [r7, #16]
      break;
 8001dea:	e0ae      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df6:	4b57      	ldr	r3, [pc, #348]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d04a      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e02:	4b54      	ldr	r3, [pc, #336]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	f04f 0400 	mov.w	r4, #0
 8001e0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	ea03 0501 	and.w	r5, r3, r1
 8001e18:	ea04 0602 	and.w	r6, r4, r2
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	4632      	mov	r2, r6
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	f04f 0400 	mov.w	r4, #0
 8001e28:	0154      	lsls	r4, r2, #5
 8001e2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e2e:	014b      	lsls	r3, r1, #5
 8001e30:	4619      	mov	r1, r3
 8001e32:	4622      	mov	r2, r4
 8001e34:	1b49      	subs	r1, r1, r5
 8001e36:	eb62 0206 	sbc.w	r2, r2, r6
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	f04f 0400 	mov.w	r4, #0
 8001e42:	0194      	lsls	r4, r2, #6
 8001e44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e48:	018b      	lsls	r3, r1, #6
 8001e4a:	1a5b      	subs	r3, r3, r1
 8001e4c:	eb64 0402 	sbc.w	r4, r4, r2
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	00e2      	lsls	r2, r4, #3
 8001e5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e5e:	00d9      	lsls	r1, r3, #3
 8001e60:	460b      	mov	r3, r1
 8001e62:	4614      	mov	r4, r2
 8001e64:	195b      	adds	r3, r3, r5
 8001e66:	eb44 0406 	adc.w	r4, r4, r6
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	0262      	lsls	r2, r4, #9
 8001e74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e78:	0259      	lsls	r1, r3, #9
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4614      	mov	r4, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	4621      	mov	r1, r4
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f04f 0400 	mov.w	r4, #0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4623      	mov	r3, r4
 8001e8c:	f7fe fa10 	bl	80002b0 <__aeabi_uldivmod>
 8001e90:	4603      	mov	r3, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e049      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e98:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	f04f 0400 	mov.w	r4, #0
 8001ea2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	ea03 0501 	and.w	r5, r3, r1
 8001eae:	ea04 0602 	and.w	r6, r4, r2
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	4632      	mov	r2, r6
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	f04f 0400 	mov.w	r4, #0
 8001ebe:	0154      	lsls	r4, r2, #5
 8001ec0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ec4:	014b      	lsls	r3, r1, #5
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4622      	mov	r2, r4
 8001eca:	1b49      	subs	r1, r1, r5
 8001ecc:	eb62 0206 	sbc.w	r2, r2, r6
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f04f 0400 	mov.w	r4, #0
 8001ed8:	0194      	lsls	r4, r2, #6
 8001eda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ede:	018b      	lsls	r3, r1, #6
 8001ee0:	1a5b      	subs	r3, r3, r1
 8001ee2:	eb64 0402 	sbc.w	r4, r4, r2
 8001ee6:	f04f 0100 	mov.w	r1, #0
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	00e2      	lsls	r2, r4, #3
 8001ef0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ef4:	00d9      	lsls	r1, r3, #3
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4614      	mov	r4, r2
 8001efa:	195b      	adds	r3, r3, r5
 8001efc:	eb44 0406 	adc.w	r4, r4, r6
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	02a2      	lsls	r2, r4, #10
 8001f0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f0e:	0299      	lsls	r1, r3, #10
 8001f10:	460b      	mov	r3, r1
 8001f12:	4614      	mov	r4, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	4621      	mov	r1, r4
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f04f 0400 	mov.w	r4, #0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4623      	mov	r3, r4
 8001f22:	f7fe f9c5 	bl	80002b0 <__aeabi_uldivmod>
 8001f26:	4603      	mov	r3, r0
 8001f28:	460c      	mov	r4, r1
 8001f2a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	0f1b      	lsrs	r3, r3, #28
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	613b      	str	r3, [r7, #16]
      break;
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x338>)
 8001f46:	613b      	str	r3, [r7, #16]
      break;
 8001f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4a:	693b      	ldr	r3, [r7, #16]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	007a1200 	.word	0x007a1200

08001f60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8083 	beq.w	8002080 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f7a:	4b95      	ldr	r3, [pc, #596]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d019      	beq.n	8001fba <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f86:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f92:	4b8f      	ldr	r3, [pc, #572]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9e:	d00c      	beq.n	8001fba <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa0:	4b8b      	ldr	r3, [pc, #556]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fa8:	2b0c      	cmp	r3, #12
 8001faa:	d112      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fac:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	4b85      	ldr	r3, [pc, #532]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d05b      	beq.n	800207e <HAL_RCC_OscConfig+0x11e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d157      	bne.n	800207e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e216      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x8a>
 8001fdc:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a7b      	ldr	r2, [pc, #492]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	e01d      	b.n	8002026 <HAL_RCC_OscConfig+0xc6>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff2:	d10c      	bne.n	800200e <HAL_RCC_OscConfig+0xae>
 8001ff4:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a75      	ldr	r2, [pc, #468]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b73      	ldr	r3, [pc, #460]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a72      	ldr	r2, [pc, #456]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8002006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	e00b      	b.n	8002026 <HAL_RCC_OscConfig+0xc6>
 800200e:	4b70      	ldr	r3, [pc, #448]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a6f      	ldr	r2, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8002014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6d      	ldr	r3, [pc, #436]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6c      	ldr	r2, [pc, #432]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8002020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d013      	beq.n	8002056 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7ff f90f 	bl	8001250 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002036:	f7ff f90b 	bl	8001250 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	; 0x64
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1db      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002048:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0xd6>
 8002054:	e014      	b.n	8002080 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7ff f8fb 	bl	8001250 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205e:	f7ff f8f7 	bl	8001250 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b64      	cmp	r3, #100	; 0x64
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1c7      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002070:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0xfe>
 800207c:	e000      	b.n	8002080 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d06f      	beq.n	800216c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	d017      	beq.n	80020c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002098:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020a4:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b0:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d11c      	bne.n	80020f6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020bc:	4b44      	ldr	r3, [pc, #272]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d116      	bne.n	80020f6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c8:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_OscConfig+0x180>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e18f      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4938      	ldr	r1, [pc, #224]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f4:	e03a      	b.n	800216c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d020      	beq.n	8002140 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fe:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff f8a4 	bl	8001250 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210c:	f7ff f8a0 	bl	8001250 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e170      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4925      	ldr	r1, [pc, #148]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
 800213e:	e015      	b.n	800216c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002140:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7ff f883 	bl	8001250 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800214e:	f7ff f87f 	bl	8001250 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e14f      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d037      	beq.n	80021e8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d016      	beq.n	80021ae <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_RCC_OscConfig+0x278>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7ff f863 	bl	8001250 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218e:	f7ff f85f 	bl	8001250 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e12f      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x22e>
 80021ac:	e01c      	b.n	80021e8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_RCC_OscConfig+0x278>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff f84c 	bl	8001250 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ba:	e00f      	b.n	80021dc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff f848 	bl	8001250 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e118      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	42470000 	.word	0x42470000
 80021d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	4b8a      	ldr	r3, [pc, #552]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 80021de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e9      	bne.n	80021bc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8097 	beq.w	8002324 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b83      	ldr	r3, [pc, #524]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b7f      	ldr	r3, [pc, #508]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a7e      	ldr	r2, [pc, #504]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b7c      	ldr	r3, [pc, #496]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002222:	2301      	movs	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b79      	ldr	r3, [pc, #484]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a75      	ldr	r2, [pc, #468]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7ff f807 	bl	8001250 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7ff f803 	bl	8001250 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0d3      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b6c      	ldr	r3, [pc, #432]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x31a>
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a65      	ldr	r2, [pc, #404]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
 8002278:	e01c      	b.n	80022b4 <HAL_RCC_OscConfig+0x354>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x33c>
 8002282:	4b61      	ldr	r3, [pc, #388]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a60      	ldr	r2, [pc, #384]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
 800228e:	4b5e      	ldr	r3, [pc, #376]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a5d      	ldr	r2, [pc, #372]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0x354>
 800229c:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a59      	ldr	r2, [pc, #356]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	4b57      	ldr	r3, [pc, #348]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a56      	ldr	r2, [pc, #344]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 80022ae:	f023 0304 	bic.w	r3, r3, #4
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe ffc8 	bl	8001250 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7fe ffc4 	bl	8001250 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e092      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022da:	4b4b      	ldr	r3, [pc, #300]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0ee      	beq.n	80022c4 <HAL_RCC_OscConfig+0x364>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7fe ffb2 	bl	8001250 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7fe ffae 	bl	8001250 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e07c      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002306:	4b40      	ldr	r3, [pc, #256]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ee      	bne.n	80022f0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	4a3a      	ldr	r2, [pc, #232]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002322:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d068      	beq.n	80023fe <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800232c:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b08      	cmp	r3, #8
 8002336:	d060      	beq.n	80023fa <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d145      	bne.n	80023cc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002340:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_RCC_OscConfig+0x4b0>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe ff83 	bl	8001250 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234e:	f7fe ff7f 	bl	8001250 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e04f      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1f0      	bne.n	800234e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	019b      	lsls	r3, r3, #6
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	3b01      	subs	r3, #1
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	061b      	lsls	r3, r3, #24
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	071b      	lsls	r3, r3, #28
 8002398:	491b      	ldr	r1, [pc, #108]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <HAL_RCC_OscConfig+0x4b0>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe ff54 	bl	8001250 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe ff50 	bl	8001250 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e020      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x44c>
 80023ca:	e018      	b.n	80023fe <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_RCC_OscConfig+0x4b0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe ff3d 	bl	8001250 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe ff39 	bl	8001250 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e009      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_OscConfig+0x4a8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x47a>
 80023f8:	e001      	b.n	80023fe <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000
 8002410:	42470060 	.word	0x42470060

08002414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e056      	b.n	80024d4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fe fa81 	bl	8000948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800245c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	ea42 0103 	orr.w	r1, r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	0c1b      	lsrs	r3, r3, #16
 80024a4:	f003 0104 	and.w	r1, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69da      	ldr	r2, [r3, #28]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e01a      	b.n	8002524 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002504:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fa66 	bl	80009d8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_SPI_Transmit+0x22>
 800254a:	2302      	movs	r3, #2
 800254c:	e11e      	b.n	800278c <HAL_SPI_Transmit+0x260>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002556:	f7fe fe7b 	bl	8001250 <HAL_GetTick>
 800255a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d002      	beq.n	8002572 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800256c:	2302      	movs	r3, #2
 800256e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002570:	e103      	b.n	800277a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_SPI_Transmit+0x52>
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002582:	e0fa      	b.n	800277a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2203      	movs	r2, #3
 8002588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	88fa      	ldrh	r2, [r7, #6]
 800259c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	88fa      	ldrh	r2, [r7, #6]
 80025a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ca:	d107      	bne.n	80025dc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d007      	beq.n	80025fa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002602:	d14b      	bne.n	800269c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_SPI_Transmit+0xe6>
 800260c:	8afb      	ldrh	r3, [r7, #22]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d13e      	bne.n	8002690 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	881a      	ldrh	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	1c9a      	adds	r2, r3, #2
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002636:	e02b      	b.n	8002690 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d112      	bne.n	800266c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	1c9a      	adds	r2, r3, #2
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	86da      	strh	r2, [r3, #54]	; 0x36
 800266a:	e011      	b.n	8002690 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800266c:	f7fe fdf0 	bl	8001250 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d803      	bhi.n	8002684 <HAL_SPI_Transmit+0x158>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002682:	d102      	bne.n	800268a <HAL_SPI_Transmit+0x15e>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800268e:	e074      	b.n	800277a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ce      	bne.n	8002638 <HAL_SPI_Transmit+0x10c>
 800269a:	e04c      	b.n	8002736 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_SPI_Transmit+0x17e>
 80026a4:	8afb      	ldrh	r3, [r7, #22]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d140      	bne.n	800272c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026d0:	e02c      	b.n	800272c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d113      	bne.n	8002708 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	330c      	adds	r3, #12
 80026ea:	7812      	ldrb	r2, [r2, #0]
 80026ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	86da      	strh	r2, [r3, #54]	; 0x36
 8002706:	e011      	b.n	800272c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002708:	f7fe fda2 	bl	8001250 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d803      	bhi.n	8002720 <HAL_SPI_Transmit+0x1f4>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271e:	d102      	bne.n	8002726 <HAL_SPI_Transmit+0x1fa>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	77fb      	strb	r3, [r7, #31]
          goto error;
 800272a:	e026      	b.n	800277a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1cd      	bne.n	80026d2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fa36 	bl	8002bac <SPI_EndRxTxTransaction>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	e000      	b.n	800277a <HAL_SPI_Transmit+0x24e>
  }

error:
 8002778:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800278a:	7ffb      	ldrb	r3, [r7, #31]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	; 0x30
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027a2:	2301      	movs	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x26>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e18a      	b.n	8002ad0 <HAL_SPI_TransmitReceive+0x33c>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027c2:	f7fe fd45 	bl	8001250 <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d00f      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x70>
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ea:	d107      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x68>
 80027f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d003      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
 80027fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002802:	e15b      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x82>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x82>
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800281c:	e14e      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b04      	cmp	r3, #4
 8002828:	d003      	beq.n	8002832 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2205      	movs	r2, #5
 800282e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	887a      	ldrh	r2, [r7, #2]
 8002842:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	887a      	ldrh	r2, [r7, #2]
 800285a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d007      	beq.n	8002886 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800288e:	d178      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_SPI_TransmitReceive+0x10a>
 8002898:	8b7b      	ldrh	r3, [r7, #26]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d166      	bne.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	1c9a      	adds	r2, r3, #2
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c2:	e053      	b.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d11b      	bne.n	800290a <HAL_SPI_TransmitReceive+0x176>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d016      	beq.n	800290a <HAL_SPI_TransmitReceive+0x176>
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d113      	bne.n	800290a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	1c9a      	adds	r2, r3, #2
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b01      	cmp	r3, #1
 8002916:	d119      	bne.n	800294c <HAL_SPI_TransmitReceive+0x1b8>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d014      	beq.n	800294c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	b292      	uxth	r2, r2
 800292e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	1c9a      	adds	r2, r3, #2
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002948:	2301      	movs	r3, #1
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800294c:	f7fe fc80 	bl	8001250 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002958:	429a      	cmp	r2, r3
 800295a:	d807      	bhi.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d003      	beq.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800296a:	e0a7      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1a6      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x130>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1a1      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x130>
 8002980:	e07c      	b.n	8002a7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x1fc>
 800298a:	8b7b      	ldrh	r3, [r7, #26]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d16b      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b6:	e057      	b.n	8002a68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d11c      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x26c>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d017      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x26c>
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d114      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	330c      	adds	r3, #12
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d119      	bne.n	8002a42 <HAL_SPI_TransmitReceive+0x2ae>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d014      	beq.n	8002a42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a42:	f7fe fc05 	bl	8001250 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d803      	bhi.n	8002a5a <HAL_SPI_TransmitReceive+0x2c6>
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d102      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x2cc>
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a66:	e029      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1a2      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x224>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d19d      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f893 	bl	8002bac <SPI_EndRxTxTransaction>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a98:	e010      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	e000      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002aba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002acc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3730      	adds	r7, #48	; 0x30
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae8:	e04c      	b.n	8002b84 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d048      	beq.n	8002b84 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002af2:	f7fe fbad 	bl	8001250 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d902      	bls.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d13d      	bne.n	8002b84 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b20:	d111      	bne.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2a:	d004      	beq.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b34:	d107      	bne.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4e:	d10f      	bne.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e00f      	b.n	8002ba4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d1a3      	bne.n	8002aea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <SPI_EndRxTxTransaction+0x7c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <SPI_EndRxTxTransaction+0x80>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0d5b      	lsrs	r3, r3, #21
 8002bc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd6:	d112      	bne.n	8002bfe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff ff78 	bl	8002ad8 <SPI_WaitFlagStateUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f043 0220 	orr.w	r2, r3, #32
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e00f      	b.n	8002c1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d0f2      	beq.n	8002bfe <SPI_EndRxTxTransaction+0x52>
 8002c18:	e000      	b.n	8002c1c <SPI_EndRxTxTransaction+0x70>
        break;
 8002c1a:	bf00      	nop
  }

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	165e9f81 	.word	0x165e9f81

08002c30 <delay>:
 *
 * \param t		Number of "nop" cycles
 *
 * \return void
 */		
inline void delay(uint32_t t) {
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	for (; t; t--) __asm("nop");
 8002c38:	e003      	b.n	8002c42 <delay+0x12>
 8002c3a:	bf00      	nop
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f8      	bne.n	8002c3a <delay+0xa>
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <GPIO_Init>:
 *
 * \param
 *
 * \return void
 */
void GPIO_Init(uint32_t mode) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d003      	beq.n	8002c6a <GPIO_Init+0x16>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f040 8081 	bne.w	8002d6c <GPIO_Init+0x118>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <GPIO_Init+0x120>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <GPIO_Init+0x120>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <GPIO_Init+0x120>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <GPIO_Init+0x120>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a39      	ldr	r2, [pc, #228]	; (8002d74 <GPIO_Init+0x120>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <GPIO_Init+0x120>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <GPIO_Init+0x120>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a32      	ldr	r2, [pc, #200]	; (8002d74 <GPIO_Init+0x120>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b30      	ldr	r3, [pc, #192]	; (8002d74 <GPIO_Init+0x120>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8002cbe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002cc2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4828      	ldr	r0, [pc, #160]	; (8002d78 <GPIO_Init+0x124>)
 8002cd8:	f7fe fbce 	bl	8001478 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 8002cdc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8002ce0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4821      	ldr	r0, [pc, #132]	; (8002d7c <GPIO_Init+0x128>)
 8002cf6:	f7fe fbbf 	bl	8001478 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002d06:	2300      	movs	r3, #0
 8002d08:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	481b      	ldr	r0, [pc, #108]	; (8002d80 <GPIO_Init+0x12c>)
 8002d12:	f7fe fbb1 	bl	8001478 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 8002d16:	2313      	movs	r3, #19
 8002d18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4812      	ldr	r0, [pc, #72]	; (8002d78 <GPIO_Init+0x124>)
 8002d2e:	f7fe fba3 	bl	8001478 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d32:	2301      	movs	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d42:	f107 0314 	add.w	r3, r7, #20
 8002d46:	4619      	mov	r1, r3
 8002d48:	480c      	ldr	r0, [pc, #48]	; (8002d7c <GPIO_Init+0x128>)
 8002d4a:	f7fe fb95 	bl	8001478 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d52:	2301      	movs	r3, #1
 8002d54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	4619      	mov	r1, r3
 8002d64:	4806      	ldr	r0, [pc, #24]	; (8002d80 <GPIO_Init+0x12c>)
 8002d66:	f7fe fb87 	bl	8001478 <HAL_GPIO_Init>
 8002d6a:	e000      	b.n	8002d6e <GPIO_Init+0x11a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8002d6c:	bf00      	nop
}
 8002d6e:	3728      	adds	r7, #40	; 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	40020800 	.word	0x40020800

08002d84 <LCD_Write8>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline void LCD_Write8(uint8_t data) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <LCD_Write8+0xa4>)
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d96:	4013      	ands	r3, r2
 8002d98:	79fa      	ldrb	r2, [r7, #7]
 8002d9a:	0252      	lsls	r2, r2, #9
 8002d9c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002da0:	431a      	orrs	r2, r3
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002daa:	431a      	orrs	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	491c      	ldr	r1, [pc, #112]	; (8002e28 <LCD_Write8+0xa4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <LCD_Write8+0xa8>)
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	79fa      	ldrb	r2, [r7, #7]
 8002dc6:	f002 0208 	and.w	r2, r2, #8
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	105b      	asrs	r3, r3, #1
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	431a      	orrs	r2, r3
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	4910      	ldr	r1, [pc, #64]	; (8002e2c <LCD_Write8+0xa8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <LCD_Write8+0xac>)
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8002df6:	4013      	ands	r3, r2
 8002df8:	79fa      	ldrb	r2, [r7, #7]
 8002dfa:	0192      	lsls	r2, r2, #6
 8002dfc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002e00:	490b      	ldr	r1, [pc, #44]	; (8002e30 <LCD_Write8+0xac>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <LCD_Write8+0xa4>)
 8002e08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e0c:	619a      	str	r2, [r3, #24]
 8002e0e:	2002      	movs	r0, #2
 8002e10:	f7ff ff0e 	bl	8002c30 <delay>
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <LCD_Write8+0xa4>)
 8002e16:	2202      	movs	r2, #2
 8002e18:	619a      	str	r2, [r3, #24]
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f7ff ff08 	bl	8002c30 <delay>
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40020800 	.word	0x40020800

08002e34 <LCD_Write16Register8>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register8(uint8_t a, uint16_t d) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	71fb      	strb	r3, [r7, #7]
 8002e40:	4613      	mov	r3, r2
 8002e42:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <LCD_Write16Register8+0x48>)
 8002e46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e4a:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff98 	bl	8002d84 <LCD_Write8>
	LCD_CD_DATA();
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <LCD_Write16Register8+0x48>)
 8002e56:	2210      	movs	r2, #16
 8002e58:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 8002e5a:	88bb      	ldrh	r3, [r7, #4]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ff8e 	bl	8002d84 <LCD_Write8>
	LCD_Write8(d);
 8002e68:	88bb      	ldrh	r3, [r7, #4]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff89 	bl	8002d84 <LCD_Write8>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40020000 	.word	0x40020000

08002e80 <LCD_Write24Register8>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write24Register8(uint8_t a, uint32_t d) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	71fb      	strb	r3, [r7, #7]
	LCD_CD_COMMAND();
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <LCD_Write24Register8+0x4c>)
 8002e8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e92:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff74 	bl	8002d84 <LCD_Write8>
	LCD_CD_DATA();
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <LCD_Write24Register8+0x4c>)
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 16);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff6b 	bl	8002d84 <LCD_Write8>
	LCD_Write8(d >> 8);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff65 	bl	8002d84 <LCD_Write8>
	LCD_Write8(d);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff60 	bl	8002d84 <LCD_Write8>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40020000 	.word	0x40020000

08002ed0 <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <LCD_Init+0xf8>)
 8002ed8:	22f0      	movs	r2, #240	; 0xf0
 8002eda:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <LCD_Init+0xfc>)
 8002ede:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ee2:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <LCD_Init+0x100>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <LCD_Init+0x104>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <LCD_Init+0x104>)
 8002ef2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ef6:	4b38      	ldr	r3, [pc, #224]	; (8002fd8 <LCD_Init+0x108>)
 8002ef8:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 8002efa:	4b38      	ldr	r3, [pc, #224]	; (8002fdc <LCD_Init+0x10c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8002f00:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <LCD_Init+0x110>)
 8002f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f06:	801a      	strh	r2, [r3, #0]
 8002f08:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <LCD_Init+0x110>)
 8002f0a:	881a      	ldrh	r2, [r3, #0]
 8002f0c:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <LCD_Init+0x114>)
 8002f0e:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <LCD_Init+0x118>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]

	GPIO_Init(GPIO_MODE_OUTPUT_PP);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f7ff fe9c 	bl	8002c54 <GPIO_Init>

	LCD_Reset();
 8002f1c:	f000 f982 	bl	8003224 <LCD_Reset>
	HAL_Delay(50);
 8002f20:	2032      	movs	r0, #50	; 0x32
 8002f22:	f7fe f9a1 	bl	8001268 <HAL_Delay>

	LCD_CS_ACTIVE();
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <LCD_Init+0x11c>)
 8002f28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f2c:	619a      	str	r2, [r3, #24]
		}
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#elif defined(SSD1297)
	uint8_t i = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;
	while (i < sizeof(SSD1297_regValues) / sizeof(SSD1297_regValues[0])) {
 8002f32:	e01e      	b.n	8002f72 <LCD_Init+0xa2>
		a = SSD1297_regValues[i++];
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	71fa      	strb	r2, [r7, #7]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <LCD_Init+0x120>)
 8002f3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f42:	80bb      	strh	r3, [r7, #4]
		d = SSD1297_regValues[i++];
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	71fa      	strb	r2, [r7, #7]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <LCD_Init+0x120>)
 8002f4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f52:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8002f54:	88bb      	ldrh	r3, [r7, #4]
 8002f56:	2bff      	cmp	r3, #255	; 0xff
 8002f58:	d104      	bne.n	8002f64 <LCD_Init+0x94>
			HAL_Delay(d);
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe f983 	bl	8001268 <HAL_Delay>
 8002f62:	e006      	b.n	8002f72 <LCD_Init+0xa2>
		} else {
			LCD_Write16Register8(a, d);
 8002f64:	88bb      	ldrh	r3, [r7, #4]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	887a      	ldrh	r2, [r7, #2]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff61 	bl	8002e34 <LCD_Write16Register8>
	while (i < sizeof(SSD1297_regValues) / sizeof(SSD1297_regValues[0])) {
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	2b3b      	cmp	r3, #59	; 0x3b
 8002f76:	d9dd      	bls.n	8002f34 <LCD_Init+0x64>
		}
	}
	LCD_SetRotation(m_rotation);
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <LCD_Init+0x100>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fa01 	bl	8003384 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <LCD_Init+0xf8>)
 8002f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <LCD_Init+0xfc>)
 8002f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f000 f98b 	bl	80032b8 <LCD_SetAddrWindow>
#endif

	LCD_CS_IDLE();
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <LCD_Init+0x11c>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f000 f8f9 	bl	80031a0 <LCD_FillScreen>
	LCD_SetTextSize(0);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f000 fc54 	bl	800385c <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fba:	f000 fc69 	bl	8003890 <LCD_SetTextColor>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	2000009c 	.word	0x2000009c
 8002fcc:	2000009e 	.word	0x2000009e
 8002fd0:	200000a9 	.word	0x200000a9
 8002fd4:	200000a0 	.word	0x200000a0
 8002fd8:	200000a2 	.word	0x200000a2
 8002fdc:	200000a8 	.word	0x200000a8
 8002fe0:	200000a6 	.word	0x200000a6
 8002fe4:	200000a4 	.word	0x200000a4
 8002fe8:	200000aa 	.word	0x200000aa
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	080046fc 	.word	0x080046fc

08002ff4 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	80fb      	strh	r3, [r7, #6]
 8002ffe:	460b      	mov	r3, r1
 8003000:	80bb      	strh	r3, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8003006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800300a:	2b00      	cmp	r3, #0
 800300c:	db3d      	blt.n	800308a <LCD_DrawPixel+0x96>
 800300e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	db39      	blt.n	800308a <LCD_DrawPixel+0x96>
 8003016:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <LCD_DrawPixel+0xa0>)
 8003018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003020:	429a      	cmp	r2, r3
 8003022:	da32      	bge.n	800308a <LCD_DrawPixel+0x96>
 8003024:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <LCD_DrawPixel+0xa4>)
 8003026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800302a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	da2b      	bge.n	800308a <LCD_DrawPixel+0x96>

	LCD_CS_ACTIVE();
 8003032:	4b1a      	ldr	r3, [pc, #104]	; (800309c <LCD_DrawPixel+0xa8>)
 8003034:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003038:	619a      	str	r2, [r3, #24]
#elif defined(HX8357D)
	LCD_SetAddrWindow(x, y, m_width - 1, m_height - 1);
	LCD_CS_ACTIVE();
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	if(m_rotation & 1) {
 800303a:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <LCD_DrawPixel+0xac>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <LCD_DrawPixel+0x68>
		LCD_Write16Register8(SSD1297_SETXCOUNTER, y); //GRAM Address Set
 8003046:	88bb      	ldrh	r3, [r7, #4]
 8003048:	4619      	mov	r1, r3
 800304a:	204e      	movs	r0, #78	; 0x4e
 800304c:	f7ff fef2 	bl	8002e34 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, x);
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	4619      	mov	r1, r3
 8003054:	204f      	movs	r0, #79	; 0x4f
 8003056:	f7ff feed 	bl	8002e34 <LCD_Write16Register8>
 800305a:	e009      	b.n	8003070 <LCD_DrawPixel+0x7c>
	} else {
		LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	4619      	mov	r1, r3
 8003060:	204e      	movs	r0, #78	; 0x4e
 8003062:	f7ff fee7 	bl	8002e34 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
 8003066:	88bb      	ldrh	r3, [r7, #4]
 8003068:	4619      	mov	r1, r3
 800306a:	204f      	movs	r0, #79	; 0x4f
 800306c:	f7ff fee2 	bl	8002e34 <LCD_Write16Register8>
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fc24 	bl	80038c0 <LCD_Color565_to_888>
 8003078:	4603      	mov	r3, r0
 800307a:	4619      	mov	r1, r3
 800307c:	2022      	movs	r0, #34	; 0x22
 800307e:	f7ff feff 	bl	8002e80 <LCD_Write24Register8>
#endif

	LCD_CS_IDLE();
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <LCD_DrawPixel+0xa8>)
 8003084:	2201      	movs	r2, #1
 8003086:	619a      	str	r2, [r3, #24]
 8003088:	e000      	b.n	800308c <LCD_DrawPixel+0x98>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 800308a:	bf00      	nop
}
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	2000009c 	.word	0x2000009c
 8003098:	2000009e 	.word	0x2000009e
 800309c:	40020400 	.word	0x40020400
 80030a0:	200000a9 	.word	0x200000a9

080030a4 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	80fb      	strh	r3, [r7, #6]
#if defined(SSD1297)
	uint8_t red = LCD_Color565_to_R(color);
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fc1c 	bl	80038f0 <LCD_Color565_to_R>
 80030b8:	4603      	mov	r3, r0
 80030ba:	73fb      	strb	r3, [r7, #15]
	uint8_t green = LCD_Color565_to_G(color);
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fc27 	bl	8003912 <LCD_Color565_to_G>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73bb      	strb	r3, [r7, #14]
	uint8_t blue = LCD_Color565_to_B(color);
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fc32 	bl	8003934 <LCD_Color565_to_B>
 80030d0:	4603      	mov	r3, r0
 80030d2:	737b      	strb	r3, [r7, #13]
#else
	uint8_t hi = color >> 8, lo = color;
#endif

	LCD_CS_ACTIVE();
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <LCD_Flood+0xf4>)
 80030d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030da:	619a      	str	r2, [r3, #24]
#elif defined(HX8347D) || defined(HX8347G)
	LCD_Write16Register8(HX8347G_SRAM_WR, color);
#elif defined(HX8357D)
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fbee 	bl	80038c0 <LCD_Color565_to_888>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4619      	mov	r1, r3
 80030e8:	2022      	movs	r0, #34	; 0x22
 80030ea:	f7ff fec9 	bl	8002e80 <LCD_Write24Register8>
#endif
	len--;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	603b      	str	r3, [r7, #0]
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	7bbb      	ldrb	r3, [r7, #14]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d141      	bne.n	8003180 <LCD_Flood+0xdc>
 80030fc:	7bba      	ldrb	r2, [r7, #14]
 80030fe:	7b7b      	ldrb	r3, [r7, #13]
 8003100:	429a      	cmp	r2, r3
 8003102:	d13d      	bne.n	8003180 <LCD_Flood+0xdc>
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	7b7b      	ldrb	r3, [r7, #13]
 8003108:	429a      	cmp	r2, r3
 800310a:	d139      	bne.n	8003180 <LCD_Flood+0xdc>
#else
	if (hi == lo) {
#endif
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (len--) {
 800310c:	e026      	b.n	800315c <LCD_Flood+0xb8>
#if defined(SSD1297)
			LCD_WR_STROBE();
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <LCD_Flood+0xf8>)
 8003110:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003114:	619a      	str	r2, [r3, #24]
 8003116:	2002      	movs	r0, #2
 8003118:	f7ff fd8a 	bl	8002c30 <delay>
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <LCD_Flood+0xf8>)
 800311e:	2202      	movs	r2, #2
 8003120:	619a      	str	r2, [r3, #24]
 8003122:	2002      	movs	r0, #2
 8003124:	f7ff fd84 	bl	8002c30 <delay>
#endif
			LCD_WR_STROBE();
 8003128:	4b1c      	ldr	r3, [pc, #112]	; (800319c <LCD_Flood+0xf8>)
 800312a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800312e:	619a      	str	r2, [r3, #24]
 8003130:	2002      	movs	r0, #2
 8003132:	f7ff fd7d 	bl	8002c30 <delay>
 8003136:	4b19      	ldr	r3, [pc, #100]	; (800319c <LCD_Flood+0xf8>)
 8003138:	2202      	movs	r2, #2
 800313a:	619a      	str	r2, [r3, #24]
 800313c:	2002      	movs	r0, #2
 800313e:	f7ff fd77 	bl	8002c30 <delay>
			LCD_WR_STROBE();
 8003142:	4b16      	ldr	r3, [pc, #88]	; (800319c <LCD_Flood+0xf8>)
 8003144:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003148:	619a      	str	r2, [r3, #24]
 800314a:	2002      	movs	r0, #2
 800314c:	f7ff fd70 	bl	8002c30 <delay>
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <LCD_Flood+0xf8>)
 8003152:	2202      	movs	r2, #2
 8003154:	619a      	str	r2, [r3, #24]
 8003156:	2002      	movs	r0, #2
 8003158:	f7ff fd6a 	bl	8002c30 <delay>
		while (len--) {
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	603a      	str	r2, [r7, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1d3      	bne.n	800310e <LCD_Flood+0x6a>
	if ((red == green) && (green == blue) && (red == blue)) {
 8003166:	e010      	b.n	800318a <LCD_Flood+0xe6>
		}
	} else {
		while (len--) {
#if defined(SSD1297)
			LCD_Write8(red);
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fe0a 	bl	8002d84 <LCD_Write8>
			LCD_Write8(green);
 8003170:	7bbb      	ldrb	r3, [r7, #14]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fe06 	bl	8002d84 <LCD_Write8>
			LCD_Write8(blue);
 8003178:	7b7b      	ldrb	r3, [r7, #13]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fe02 	bl	8002d84 <LCD_Write8>
		while (len--) {
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	1e5a      	subs	r2, r3, #1
 8003184:	603a      	str	r2, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1ee      	bne.n	8003168 <LCD_Flood+0xc4>
			LCD_Write8(lo);
#endif
		}
	}

	LCD_CS_IDLE();
 800318a:	4b03      	ldr	r3, [pc, #12]	; (8003198 <LCD_Flood+0xf4>)
 800318c:	2201      	movs	r2, #1
 800318e:	619a      	str	r2, [r3, #24]
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40020400 	.word	0x40020400
 800319c:	40020000 	.word	0x40020000

080031a0 <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	80fb      	strh	r3, [r7, #6]
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <LCD_FillScreen+0x7c>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d00d      	beq.n	80031ce <LCD_FillScreen+0x2e>
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d011      	beq.n	80031da <LCD_FillScreen+0x3a>
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d004      	beq.n	80031c4 <LCD_FillScreen+0x24>
	default:
		x = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	81fb      	strh	r3, [r7, #14]
		y = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	81bb      	strh	r3, [r7, #12]
		break;
 80031c2:	e010      	b.n	80031e6 <LCD_FillScreen+0x46>
	case 1:
		x = TFTWIDTH - 1;
 80031c4:	23ef      	movs	r3, #239	; 0xef
 80031c6:	81fb      	strh	r3, [r7, #14]
		y = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	81bb      	strh	r3, [r7, #12]
		break;
 80031cc:	e00b      	b.n	80031e6 <LCD_FillScreen+0x46>
	case 2:
		x = TFTWIDTH - 1;
 80031ce:	23ef      	movs	r3, #239	; 0xef
 80031d0:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 80031d2:	f240 133f 	movw	r3, #319	; 0x13f
 80031d6:	81bb      	strh	r3, [r7, #12]
		break;
 80031d8:	e005      	b.n	80031e6 <LCD_FillScreen+0x46>
	case 3:
		x = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 80031de:	f240 133f 	movw	r3, #319	; 0x13f
 80031e2:	81bb      	strh	r3, [r7, #12]
		break;
 80031e4:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 80031e6:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <LCD_FillScreen+0x80>)
 80031e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031ec:	619a      	str	r2, [r3, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
 80031ee:	89fb      	ldrh	r3, [r7, #14]
 80031f0:	4619      	mov	r1, r3
 80031f2:	204e      	movs	r0, #78	; 0x4e
 80031f4:	f7ff fe1e 	bl	8002e34 <LCD_Write16Register8>
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
 80031f8:	89bb      	ldrh	r3, [r7, #12]
 80031fa:	4619      	mov	r1, r3
 80031fc:	204f      	movs	r0, #79	; 0x4f
 80031fe:	f7ff fe19 	bl	8002e34 <LCD_Write16Register8>
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
#endif
	LCD_CS_IDLE();
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <LCD_FillScreen+0x80>)
 8003204:	2201      	movs	r2, #1
 8003206:	619a      	str	r2, [r3, #24]
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff48 	bl	80030a4 <LCD_Flood>
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	200000a9 	.word	0x200000a9
 8003220:	40020400 	.word	0x40020400

08003224 <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <LCD_Reset+0x88>)
 800322c:	2201      	movs	r2, #1
 800322e:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 8003230:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <LCD_Reset+0x8c>)
 8003232:	2210      	movs	r2, #16
 8003234:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 8003236:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <LCD_Reset+0x8c>)
 8003238:	2202      	movs	r2, #2
 800323a:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 800323c:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <LCD_Reset+0x8c>)
 800323e:	2201      	movs	r2, #1
 8003240:	619a      	str	r2, [r3, #24]

	LCD_RST_ACTIVE();
 8003242:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <LCD_Reset+0x90>)
 8003244:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003248:	619a      	str	r2, [r3, #24]
	HAL_Delay(2);
 800324a:	2002      	movs	r0, #2
 800324c:	f7fe f80c 	bl	8001268 <HAL_Delay>
	LCD_RST_IDLE();
 8003250:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <LCD_Reset+0x90>)
 8003252:	2202      	movs	r2, #2
 8003254:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 8003256:	2078      	movs	r0, #120	; 0x78
 8003258:	f7fe f806 	bl	8001268 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <LCD_Reset+0x88>)
 800325e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003262:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <LCD_Reset+0x8c>)
 8003266:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800326a:	619a      	str	r2, [r3, #24]
	LCD_Write8(0x00);
 800326c:	2000      	movs	r0, #0
 800326e:	f7ff fd89 	bl	8002d84 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) LCD_WR_STROBE(); // Three extra 0x00s
 8003272:	2300      	movs	r3, #0
 8003274:	71fb      	strb	r3, [r7, #7]
 8003276:	e00f      	b.n	8003298 <LCD_Reset+0x74>
 8003278:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <LCD_Reset+0x8c>)
 800327a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800327e:	619a      	str	r2, [r3, #24]
 8003280:	2002      	movs	r0, #2
 8003282:	f7ff fcd5 	bl	8002c30 <delay>
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <LCD_Reset+0x8c>)
 8003288:	2202      	movs	r2, #2
 800328a:	619a      	str	r2, [r3, #24]
 800328c:	2002      	movs	r0, #2
 800328e:	f7ff fccf 	bl	8002c30 <delay>
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	3301      	adds	r3, #1
 8003296:	71fb      	strb	r3, [r7, #7]
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d9ec      	bls.n	8003278 <LCD_Reset+0x54>
	LCD_CS_IDLE();
 800329e:	4b03      	ldr	r3, [pc, #12]	; (80032ac <LCD_Reset+0x88>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	619a      	str	r2, [r3, #24]
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40020400 	.word	0x40020400
 80032b0:	40020000 	.word	0x40020000
 80032b4:	40020800 	.word	0x40020800

080032b8 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4604      	mov	r4, r0
 80032c0:	4608      	mov	r0, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	4623      	mov	r3, r4
 80032c8:	80fb      	strh	r3, [r7, #6]
 80032ca:	4603      	mov	r3, r0
 80032cc:	80bb      	strh	r3, [r7, #4]
 80032ce:	460b      	mov	r3, r1
 80032d0:	807b      	strh	r3, [r7, #2]
 80032d2:	4613      	mov	r3, r2
 80032d4:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <LCD_SetAddrWindow+0xc4>)
 80032d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032dc:	619a      	str	r2, [r3, #24]
    LCD_Write16RegisterPair8(HX8347G_ROWADDREND_HI, HX8347G_ROWADDREND_LO, y2);
#elif defined(HX8357D)
	LCD_Write32Register8(HX8357_CASET, x1 << 16 | x2);
	LCD_Write32Register8(HX8357_PASET, y1 << 16 | y2);
#elif defined(SSD1297)
	if(m_rotation & 1) {
 80032de:	4b28      	ldr	r3, [pc, #160]	; (8003380 <LCD_SetAddrWindow+0xc8>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d020      	beq.n	800332c <LCD_SetAddrWindow+0x74>
		LCD_Write16Register8(SSD1297_SETXCOUNTER, y1); //GRAM Address Set
 80032ea:	88bb      	ldrh	r3, [r7, #4]
 80032ec:	4619      	mov	r1, r3
 80032ee:	204e      	movs	r0, #78	; 0x4e
 80032f0:	f7ff fda0 	bl	8002e34 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, x1);
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	4619      	mov	r1, r3
 80032f8:	204f      	movs	r0, #79	; 0x4f
 80032fa:	f7ff fd9b 	bl	8002e34 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETXADDR, y2 << 8 | y1); //HorizontalStartAddress and HorizontalEndAddress
 80032fe:	883b      	ldrh	r3, [r7, #0]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	b21a      	sxth	r2, r3
 8003304:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003308:	4313      	orrs	r3, r2
 800330a:	b21b      	sxth	r3, r3
 800330c:	b29b      	uxth	r3, r3
 800330e:	4619      	mov	r1, r3
 8003310:	2044      	movs	r0, #68	; 0x44
 8003312:	f7ff fd8f 	bl	8002e34 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYADDR_START, x1); //VerticalStartAddress
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	4619      	mov	r1, r3
 800331a:	2045      	movs	r0, #69	; 0x45
 800331c:	f7ff fd8a 	bl	8002e34 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYADDR_END, x2); //VerticalEndAddress
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	4619      	mov	r1, r3
 8003324:	2046      	movs	r0, #70	; 0x46
 8003326:	f7ff fd85 	bl	8002e34 <LCD_Write16Register8>
 800332a:	e01f      	b.n	800336c <LCD_SetAddrWindow+0xb4>
	} else {
		LCD_Write16Register8(SSD1297_SETXCOUNTER, x1); //GRAM Address Set
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	4619      	mov	r1, r3
 8003330:	204e      	movs	r0, #78	; 0x4e
 8003332:	f7ff fd7f 	bl	8002e34 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y1);
 8003336:	88bb      	ldrh	r3, [r7, #4]
 8003338:	4619      	mov	r1, r3
 800333a:	204f      	movs	r0, #79	; 0x4f
 800333c:	f7ff fd7a 	bl	8002e34 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	b21a      	sxth	r2, r3
 8003346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800334a:	4313      	orrs	r3, r2
 800334c:	b21b      	sxth	r3, r3
 800334e:	b29b      	uxth	r3, r3
 8003350:	4619      	mov	r1, r3
 8003352:	2044      	movs	r0, #68	; 0x44
 8003354:	f7ff fd6e 	bl	8002e34 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
 8003358:	88bb      	ldrh	r3, [r7, #4]
 800335a:	4619      	mov	r1, r3
 800335c:	2045      	movs	r0, #69	; 0x45
 800335e:	f7ff fd69 	bl	8002e34 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
 8003362:	883b      	ldrh	r3, [r7, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	2046      	movs	r0, #70	; 0x46
 8003368:	f7ff fd64 	bl	8002e34 <LCD_Write16Register8>
	}
#endif
	LCD_CS_IDLE();
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <LCD_SetAddrWindow+0xc4>)
 800336e:	2201      	movs	r2, #1
 8003370:	619a      	str	r2, [r3, #24]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop
 800337c:	40020400 	.word	0x40020400
 8003380:	200000a9 	.word	0x200000a9

08003384 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <LCD_SetRotation+0xd4>)
 8003398:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <LCD_SetRotation+0xd4>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d009      	beq.n	80033b6 <LCD_SetRotation+0x32>
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d007      	beq.n	80033b6 <LCD_SetRotation+0x32>
	default:
	case 0:
	case 2:
		m_width = TFTWIDTH;
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <LCD_SetRotation+0xd8>)
 80033a8:	22f0      	movs	r2, #240	; 0xf0
 80033aa:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 80033ac:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <LCD_SetRotation+0xdc>)
 80033ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033b2:	801a      	strh	r2, [r3, #0]
		break;
 80033b4:	e007      	b.n	80033c6 <LCD_SetRotation+0x42>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 80033b6:	4b29      	ldr	r3, [pc, #164]	; (800345c <LCD_SetRotation+0xd8>)
 80033b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033bc:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 80033be:	4b28      	ldr	r3, [pc, #160]	; (8003460 <LCD_SetRotation+0xdc>)
 80033c0:	22f0      	movs	r2, #240	; 0xf0
 80033c2:	801a      	strh	r2, [r3, #0]
		break;
 80033c4:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <LCD_SetRotation+0xe0>)
 80033c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033cc:	619a      	str	r2, [r3, #24]
    LCD_Write8Register8(HX8357_MADCTL, t); // MADCTL
    // For 8357, init default full-screen address window:
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#elif defined(SSD1297)
    uint16_t t1, t2;
	switch (m_rotation) {
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <LCD_SetRotation+0xd4>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d011      	beq.n	80033fa <LCD_SetRotation+0x76>
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d016      	beq.n	8003408 <LCD_SetRotation+0x84>
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d006      	beq.n	80033ec <LCD_SetRotation+0x68>
	default:
		t1 = SSD1297_DRVOUTCTL_TB | SSD1297_DRVOUTCTL_REV | SSD1297_DRVOUTCTL_BGR | 0x013F;
 80033de:	f642 333f 	movw	r3, #11071	; 0x2b3f
 80033e2:	81fb      	strh	r3, [r7, #14]
		t2 = SSD1297_ENTRYMODE1_ID3 | 0x4C00;
 80033e4:	f644 4330 	movw	r3, #19504	; 0x4c30
 80033e8:	81bb      	strh	r3, [r7, #12]
		break;
 80033ea:	e014      	b.n	8003416 <LCD_SetRotation+0x92>
	case 1:
		t1 = SSD1297_DRVOUTCTL_TB | SSD1297_DRVOUTCTL_RL | SSD1297_DRVOUTCTL_REV | SSD1297_DRVOUTCTL_BGR | 0x013F;
 80033ec:	f646 333f 	movw	r3, #27455	; 0x6b3f
 80033f0:	81fb      	strh	r3, [r7, #14]
		t2 = SSD1297_ENTRYMODE1_AM | SSD1297_ENTRYMODE1_ID3 | 0x4C00;
 80033f2:	f644 4338 	movw	r3, #19512	; 0x4c38
 80033f6:	81bb      	strh	r3, [r7, #12]
		break;
 80033f8:	e00d      	b.n	8003416 <LCD_SetRotation+0x92>
	case 2:
		t1 = SSD1297_DRVOUTCTL_RL | SSD1297_DRVOUTCTL_REV | SSD1297_DRVOUTCTL_BGR | 0x013F;
 80033fa:	f646 133f 	movw	r3, #26943	; 0x693f
 80033fe:	81fb      	strh	r3, [r7, #14]
		t2 = SSD1297_ENTRYMODE1_ID3 | 0x4C00;
 8003400:	f644 4330 	movw	r3, #19504	; 0x4c30
 8003404:	81bb      	strh	r3, [r7, #12]
		break;
 8003406:	e006      	b.n	8003416 <LCD_SetRotation+0x92>
	case 3:
		t1 = SSD1297_DRVOUTCTL_REV | SSD1297_DRVOUTCTL_BGR | 0x013F;
 8003408:	f642 133f 	movw	r3, #10559	; 0x293f
 800340c:	81fb      	strh	r3, [r7, #14]
		t2 = SSD1297_ENTRYMODE1_AM | SSD1297_ENTRYMODE1_ID3 | 0x4C00;
 800340e:	f644 4338 	movw	r3, #19512	; 0x4c38
 8003412:	81bb      	strh	r3, [r7, #12]
		break;
 8003414:	bf00      	nop
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
 8003416:	89fb      	ldrh	r3, [r7, #14]
 8003418:	4619      	mov	r1, r3
 800341a:	2001      	movs	r0, #1
 800341c:	f7ff fd0a 	bl	8002e34 <LCD_Write16Register8>
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
 8003420:	89bb      	ldrh	r3, [r7, #12]
 8003422:	4619      	mov	r1, r3
 8003424:	2011      	movs	r0, #17
 8003426:	f7ff fd05 	bl	8002e34 <LCD_Write16Register8>
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <LCD_SetRotation+0xd8>)
 800342c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <LCD_SetRotation+0xdc>)
 8003438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29b      	uxth	r3, r3
 8003442:	2100      	movs	r1, #0
 8003444:	2000      	movs	r0, #0
 8003446:	f7ff ff37 	bl	80032b8 <LCD_SetAddrWindow>
#endif
	LCD_CS_IDLE();
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <LCD_SetRotation+0xe0>)
 800344c:	2201      	movs	r2, #1
 800344e:	619a      	str	r2, [r3, #24]
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	200000a9 	.word	0x200000a9
 800345c:	2000009c 	.word	0x2000009c
 8003460:	2000009e 	.word	0x2000009e
 8003464:	40020400 	.word	0x40020400

08003468 <LCD_DrawChar>:
 * \param bg		Background color
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b08b      	sub	sp, #44	; 0x2c
 800346c:	af00      	add	r7, sp, #0
 800346e:	4604      	mov	r4, r0
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4623      	mov	r3, r4
 8003478:	80fb      	strh	r3, [r7, #6]
 800347a:	4603      	mov	r3, r0
 800347c:	80bb      	strh	r3, [r7, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	70fb      	strb	r3, [r7, #3]
 8003482:	4613      	mov	r3, r2
 8003484:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
	uint8_t *pchar;
	uint32_t line = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 800348e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003492:	4a65      	ldr	r2, [pc, #404]	; (8003628 <LCD_DrawChar+0x1c0>)
 8003494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003498:	88db      	ldrh	r3, [r3, #6]
 800349a:	82fb      	strh	r3, [r7, #22]
	width = fonts[fontindex]->Width;
 800349c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80034a0:	4a61      	ldr	r2, [pc, #388]	; (8003628 <LCD_DrawChar+0x1c0>)
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	889b      	ldrh	r3, [r3, #4]
 80034a8:	82bb      	strh	r3, [r7, #20]

	if ((x >= m_width) || // Clip right
 80034aa:	4b60      	ldr	r3, [pc, #384]	; (800362c <LCD_DrawChar+0x1c4>)
 80034ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	f280 80b2 	bge.w	800361e <LCD_DrawChar+0x1b6>
		(y >= m_height) || // Clip bottom
 80034ba:	4b5d      	ldr	r3, [pc, #372]	; (8003630 <LCD_DrawChar+0x1c8>)
 80034bc:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 80034c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	f280 80aa 	bge.w	800361e <LCD_DrawChar+0x1b6>
		((x + width - 1) < 0) || // Clip left
 80034ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034ce:	8abb      	ldrh	r3, [r7, #20]
 80034d0:	4413      	add	r3, r2
 80034d2:	3b01      	subs	r3, #1
		(y >= m_height) || // Clip bottom
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f2c0 80a2 	blt.w	800361e <LCD_DrawChar+0x1b6>
		((y + height - 1) < 0))   // Clip top
 80034da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80034de:	8afb      	ldrh	r3, [r7, #22]
 80034e0:	4413      	add	r3, r2
 80034e2:	3b01      	subs	r3, #1
		((x + width - 1) < 0) || // Clip left
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f2c0 809a 	blt.w	800361e <LCD_DrawChar+0x1b6>
		return;

	bytes = (width + 7) / 8;
 80034ea:	8abb      	ldrh	r3, [r7, #20]
 80034ec:	3307      	adds	r3, #7
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da00      	bge.n	80034f4 <LCD_DrawChar+0x8c>
 80034f2:	3307      	adds	r3, #7
 80034f4:	10db      	asrs	r3, r3, #3
 80034f6:	827b      	strh	r3, [r7, #18]
	if (c < ' ') c = ' ';
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	2b1f      	cmp	r3, #31
 80034fc:	d802      	bhi.n	8003504 <LCD_DrawChar+0x9c>
 80034fe:	2320      	movs	r3, #32
 8003500:	70fb      	strb	r3, [r7, #3]
 8003502:	e004      	b.n	800350e <LCD_DrawChar+0xa6>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	2b7e      	cmp	r3, #126	; 0x7e
 8003508:	d901      	bls.n	800350e <LCD_DrawChar+0xa6>
 800350a:	2320      	movs	r3, #32
 800350c:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	3b20      	subs	r3, #32
 8003512:	8afa      	ldrh	r2, [r7, #22]
 8003514:	fb02 f303 	mul.w	r3, r2, r3
 8003518:	8a7a      	ldrh	r2, [r7, #18]
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	61bb      	str	r3, [r7, #24]
	offset = 8 * bytes - width;
 8003520:	8a7b      	ldrh	r3, [r7, #18]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	b2da      	uxtb	r2, r3
 8003528:	8abb      	ldrh	r3, [r7, #20]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	747b      	strb	r3, [r7, #17]

	for (uint32_t i = 0; i < height; i++) {
 8003530:	2300      	movs	r3, #0
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	e06e      	b.n	8003614 <LCD_DrawChar+0x1ac>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 8003536:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800353a:	4a3b      	ldr	r2, [pc, #236]	; (8003628 <LCD_DrawChar+0x1c0>)
 800353c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	441a      	add	r2, r3
 8003546:	8abb      	ldrh	r3, [r7, #20]
 8003548:	3307      	adds	r3, #7
 800354a:	2b00      	cmp	r3, #0
 800354c:	da00      	bge.n	8003550 <LCD_DrawChar+0xe8>
 800354e:	3307      	adds	r3, #7
 8003550:	10db      	asrs	r3, r3, #3
 8003552:	4619      	mov	r1, r3
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	fb03 f301 	mul.w	r3, r3, r1
 800355a:	4413      	add	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
		switch (bytes) {
 800355e:	8a7b      	ldrh	r3, [r7, #18]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d002      	beq.n	800356a <LCD_DrawChar+0x102>
 8003564:	2b02      	cmp	r3, #2
 8003566:	d004      	beq.n	8003572 <LCD_DrawChar+0x10a>
 8003568:	e00c      	b.n	8003584 <LCD_DrawChar+0x11c>
		case 1:
			line = pchar[0];
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8003570:	e016      	b.n	80035a0 <LCD_DrawChar+0x138>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	3201      	adds	r2, #1
 800357c:	7812      	ldrb	r2, [r2, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8003582:	e00d      	b.n	80035a0 <LCD_DrawChar+0x138>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	041a      	lsls	r2, r3, #16
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3301      	adds	r3, #1
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	4313      	orrs	r3, r2
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	3202      	adds	r2, #2
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800359e:	bf00      	nop
		}
		for (uint32_t j = 0; j < width; j++) {
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	e029      	b.n	80035fa <LCD_DrawChar+0x192>
			if (line & (1 << (width - j + offset - 1))) {
 80035a6:	8aba      	ldrh	r2, [r7, #20]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	1ad2      	subs	r2, r2, r3
 80035ac:	7c7b      	ldrb	r3, [r7, #17]
 80035ae:	4413      	add	r3, r2
 80035b0:	3b01      	subs	r3, #1
 80035b2:	2201      	movs	r2, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00c      	beq.n	80035dc <LCD_DrawChar+0x174>
				LCD_DrawPixel((x + j), y, color);
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	4413      	add	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	883a      	ldrh	r2, [r7, #0]
 80035d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fd0d 	bl	8002ff4 <LCD_DrawPixel>
 80035da:	e00b      	b.n	80035f4 <LCD_DrawChar+0x18c>
			} else {
				LCD_DrawPixel((x + j), y, bg);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	b29a      	uxth	r2, r3
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	4413      	add	r3, r2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	b21b      	sxth	r3, r3
 80035e8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80035ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fd00 	bl	8002ff4 <LCD_DrawPixel>
		for (uint32_t j = 0; j < width; j++) {
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3301      	adds	r3, #1
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	8abb      	ldrh	r3, [r7, #20]
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d3d1      	bcc.n	80035a6 <LCD_DrawChar+0x13e>
			}
		}
		y++;
 8003602:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003606:	b29b      	uxth	r3, r3
 8003608:	3301      	adds	r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	3301      	adds	r3, #1
 8003612:	623b      	str	r3, [r7, #32]
 8003614:	8afb      	ldrh	r3, [r7, #22]
 8003616:	6a3a      	ldr	r2, [r7, #32]
 8003618:	429a      	cmp	r2, r3
 800361a:	d38c      	bcc.n	8003536 <LCD_DrawChar+0xce>
 800361c:	e000      	b.n	8003620 <LCD_DrawChar+0x1b8>
		return;
 800361e:	bf00      	nop
	}
}
 8003620:	372c      	adds	r7, #44	; 0x2c
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	bf00      	nop
 8003628:	20000014 	.word	0x20000014
 800362c:	2000009c 	.word	0x2000009c
 8003630:	2000009e 	.word	0x2000009e

08003634 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8003634:	b40f      	push	{r0, r1, r2, r3}
 8003636:	b5b0      	push	{r4, r5, r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 800363c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003640:	60bb      	str	r3, [r7, #8]
	vsprintf(buf, fmt, lst);
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	6a39      	ldr	r1, [r7, #32]
 8003646:	486e      	ldr	r0, [pc, #440]	; (8003800 <LCD_Printf+0x1cc>)
 8003648:	f000 f9ca 	bl	80039e0 <vsiprintf>
	va_end(lst);
	
	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 800364c:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <LCD_Printf+0x1d0>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	4b6d      	ldr	r3, [pc, #436]	; (8003808 <LCD_Printf+0x1d4>)
 8003654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003658:	88db      	ldrh	r3, [r3, #6]
 800365a:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 800365c:	4b69      	ldr	r3, [pc, #420]	; (8003804 <LCD_Printf+0x1d0>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	4b69      	ldr	r3, [pc, #420]	; (8003808 <LCD_Printf+0x1d4>)
 8003664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003668:	889b      	ldrh	r3, [r3, #4]
 800366a:	80bb      	strh	r3, [r7, #4]

	p = buf;
 800366c:	4b64      	ldr	r3, [pc, #400]	; (8003800 <LCD_Printf+0x1cc>)
 800366e:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8003670:	e0ba      	b.n	80037e8 <LCD_Printf+0x1b4>
		if (*p == '\n') {
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b0a      	cmp	r3, #10
 8003678:	d10e      	bne.n	8003698 <LCD_Printf+0x64>
			m_cursor_y += height;
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	b29a      	uxth	r2, r3
 800367e:	4b63      	ldr	r3, [pc, #396]	; (800380c <LCD_Printf+0x1d8>)
 8003680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003684:	b29b      	uxth	r3, r3
 8003686:	4413      	add	r3, r2
 8003688:	b29b      	uxth	r3, r3
 800368a:	b21a      	sxth	r2, r3
 800368c:	4b5f      	ldr	r3, [pc, #380]	; (800380c <LCD_Printf+0x1d8>)
 800368e:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8003690:	4b5f      	ldr	r3, [pc, #380]	; (8003810 <LCD_Printf+0x1dc>)
 8003692:	2200      	movs	r2, #0
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	e0a4      	b.n	80037e2 <LCD_Printf+0x1ae>
		} else if (*p == '\r') {
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b0d      	cmp	r3, #13
 800369e:	d103      	bne.n	80036a8 <LCD_Printf+0x74>
			m_cursor_x = 0;
 80036a0:	4b5b      	ldr	r3, [pc, #364]	; (8003810 <LCD_Printf+0x1dc>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	e09c      	b.n	80037e2 <LCD_Printf+0x1ae>
		} else if (*p == '\t') {
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b09      	cmp	r3, #9
 80036ae:	d10d      	bne.n	80036cc <LCD_Printf+0x98>
			m_cursor_x += width * 4;
 80036b0:	88bb      	ldrh	r3, [r7, #4]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	4b55      	ldr	r3, [pc, #340]	; (8003810 <LCD_Printf+0x1dc>)
 80036ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	b21a      	sxth	r2, r3
 80036c6:	4b52      	ldr	r3, [pc, #328]	; (8003810 <LCD_Printf+0x1dc>)
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	e08a      	b.n	80037e2 <LCD_Printf+0x1ae>
		} else {
#ifdef WIPE_LINES
			if (m_cursor_x == 0) {
 80036cc:	4b50      	ldr	r3, [pc, #320]	; (8003810 <LCD_Printf+0x1dc>)
 80036ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d132      	bne.n	800373c <LCD_Printf+0x108>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
 80036d6:	4b4d      	ldr	r3, [pc, #308]	; (800380c <LCD_Printf+0x1d8>)
 80036d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036dc:	b299      	uxth	r1, r3
 80036de:	4b4d      	ldr	r3, [pc, #308]	; (8003814 <LCD_Printf+0x1e0>)
 80036e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b298      	uxth	r0, r3
 80036ea:	4b48      	ldr	r3, [pc, #288]	; (800380c <LCD_Printf+0x1d8>)
 80036ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	4602      	mov	r2, r0
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7ff fddb 	bl	80032b8 <LCD_SetAddrWindow>
				LCD_Flood(m_textbgcolor, (long) m_width * height);
 8003702:	4b45      	ldr	r3, [pc, #276]	; (8003818 <LCD_Printf+0x1e4>)
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	4b43      	ldr	r3, [pc, #268]	; (8003814 <LCD_Printf+0x1e0>)
 8003708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800370c:	88f9      	ldrh	r1, [r7, #6]
 800370e:	b289      	uxth	r1, r1
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4619      	mov	r1, r3
 8003716:	4610      	mov	r0, r2
 8003718:	f7ff fcc4 	bl	80030a4 <LCD_Flood>
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 800371c:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <LCD_Printf+0x1e0>)
 800371e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	4b3c      	ldr	r3, [pc, #240]	; (800381c <LCD_Printf+0x1e8>)
 800372a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	2100      	movs	r1, #0
 8003736:	2000      	movs	r0, #0
 8003738:	f7ff fdbe 	bl	80032b8 <LCD_SetAddrWindow>
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 800373c:	4b33      	ldr	r3, [pc, #204]	; (800380c <LCD_Printf+0x1d8>)
 800373e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003742:	461a      	mov	r2, r3
 8003744:	4b35      	ldr	r3, [pc, #212]	; (800381c <LCD_Printf+0x1e8>)
 8003746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800374a:	4619      	mov	r1, r3
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	b29b      	uxth	r3, r3
 8003750:	1acb      	subs	r3, r1, r3
 8003752:	429a      	cmp	r2, r3
 8003754:	db07      	blt.n	8003766 <LCD_Printf+0x132>
				m_cursor_y = 0;
 8003756:	4b2d      	ldr	r3, [pc, #180]	; (800380c <LCD_Printf+0x1d8>)
 8003758:	2200      	movs	r2, #0
 800375a:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <LCD_Printf+0x1e4>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fd1d 	bl	80031a0 <LCD_FillScreen>
#endif
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 8003766:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <LCD_Printf+0x1dc>)
 8003768:	f9b3 0000 	ldrsh.w	r0, [r3]
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <LCD_Printf+0x1d8>)
 800376e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	781c      	ldrb	r4, [r3, #0]
 8003776:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <LCD_Printf+0x1ec>)
 8003778:	881d      	ldrh	r5, [r3, #0]
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <LCD_Printf+0x1e4>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	4a21      	ldr	r2, [pc, #132]	; (8003804 <LCD_Printf+0x1d0>)
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	9201      	str	r2, [sp, #4]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	462b      	mov	r3, r5
 8003788:	4622      	mov	r2, r4
 800378a:	f7ff fe6d 	bl	8003468 <LCD_DrawChar>
			m_cursor_x += width;
 800378e:	88bb      	ldrh	r3, [r7, #4]
 8003790:	b29a      	uxth	r2, r3
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <LCD_Printf+0x1dc>)
 8003794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003798:	b29b      	uxth	r3, r3
 800379a:	4413      	add	r3, r2
 800379c:	b29b      	uxth	r3, r3
 800379e:	b21a      	sxth	r2, r3
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <LCD_Printf+0x1dc>)
 80037a2:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 80037a4:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <LCD_Printf+0x1f0>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01a      	beq.n	80037e2 <LCD_Printf+0x1ae>
 80037ac:	4b18      	ldr	r3, [pc, #96]	; (8003810 <LCD_Printf+0x1dc>)
 80037ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b17      	ldr	r3, [pc, #92]	; (8003814 <LCD_Printf+0x1e0>)
 80037b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ba:	4619      	mov	r1, r3
 80037bc:	88bb      	ldrh	r3, [r7, #4]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	1acb      	subs	r3, r1, r3
 80037c2:	429a      	cmp	r2, r3
 80037c4:	dd0d      	ble.n	80037e2 <LCD_Printf+0x1ae>
				m_cursor_y += height;
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <LCD_Printf+0x1d8>)
 80037cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	b21a      	sxth	r2, r3
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <LCD_Printf+0x1d8>)
 80037da:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <LCD_Printf+0x1dc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3301      	adds	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
	while (*p) {
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f af40 	bne.w	8003672 <LCD_Printf+0x3e>
	}
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80037fc:	b004      	add	sp, #16
 80037fe:	4770      	bx	lr
 8003800:	200000ac 	.word	0x200000ac
 8003804:	200000a8 	.word	0x200000a8
 8003808:	20000014 	.word	0x20000014
 800380c:	200000a2 	.word	0x200000a2
 8003810:	200000a0 	.word	0x200000a0
 8003814:	2000009c 	.word	0x2000009c
 8003818:	200000a6 	.word	0x200000a6
 800381c:	2000009e 	.word	0x2000009e
 8003820:	200000a4 	.word	0x200000a4
 8003824:	200000aa 	.word	0x200000aa

08003828 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 *
 * \return void
 */
void LCD_SetCursor(uint16_t x, uint16_t y) {
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	460a      	mov	r2, r1
 8003832:	80fb      	strh	r3, [r7, #6]
 8003834:	4613      	mov	r3, r2
 8003836:	80bb      	strh	r3, [r7, #4]
	m_cursor_x = x;
 8003838:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <LCD_SetCursor+0x2c>)
 800383e:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8003840:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <LCD_SetCursor+0x30>)
 8003846:	801a      	strh	r2, [r3, #0]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	200000a0 	.word	0x200000a0
 8003858:	200000a2 	.word	0x200000a2

0800385c <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 8003866:	2201      	movs	r2, #1
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	4293      	cmp	r3, r2
 800386c:	d305      	bcc.n	800387a <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 800386e:	2301      	movs	r3, #1
 8003870:	3b01      	subs	r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <LCD_SetTextSize+0x30>)
 8003876:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 8003878:	e002      	b.n	8003880 <LCD_SetTextSize+0x24>
		m_font = s;
 800387a:	4a04      	ldr	r2, [pc, #16]	; (800388c <LCD_SetTextSize+0x30>)
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	7013      	strb	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	200000a8 	.word	0x200000a8

08003890 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	460a      	mov	r2, r1
 800389a:	80fb      	strh	r3, [r7, #6]
 800389c:	4613      	mov	r3, r2
 800389e:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 80038a0:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <LCD_SetTextColor+0x28>)
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <LCD_SetTextColor+0x2c>)
 80038a8:	88bb      	ldrh	r3, [r7, #4]
 80038aa:	8013      	strh	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	200000a4 	.word	0x200000a4
 80038bc:	200000a6 	.word	0x200000a6

080038c0 <LCD_Color565_to_888>:
 */
uint16_t LCD_Color565(uint8_t r, uint8_t g, uint8_t b) {
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

inline uint32_t LCD_Color565_to_888(uint16_t color) {
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	80fb      	strh	r3, [r7, #6]
    return (((color & 0xF800) << 8) | ((color & 0x7E0) << 5) | ((color & 0x1F) << 3));  // transform to rrrrrrxx ggggggxx bbbbbbxx
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	f403 0278 	and.w	r2, r3, #16252928	; 0xf80000
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	015b      	lsls	r3, r3, #5
 80038d6:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80038da:	431a      	orrs	r2, r3
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4313      	orrs	r3, r2
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LCD_Color565_to_R>:

inline uint8_t LCD_Color565_to_R(uint16_t color) {
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrrxx
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	121b      	asrs	r3, r3, #8
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f023 0307 	bic.w	r3, r3, #7
 8003904:	b2db      	uxtb	r3, r3
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <LCD_Color565_to_G>:
inline uint8_t LCD_Color565_to_G(uint16_t color) {
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	10db      	asrs	r3, r3, #3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	b2db      	uxtb	r3, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LCD_Color565_to_B>:
inline uint8_t LCD_Color565_to_B(uint16_t color) {
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbbxx
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	b2db      	uxtb	r3, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <__errno>:
 8003950:	4b01      	ldr	r3, [pc, #4]	; (8003958 <__errno+0x8>)
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000018 	.word	0x20000018

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4e0d      	ldr	r6, [pc, #52]	; (8003994 <__libc_init_array+0x38>)
 8003960:	4c0d      	ldr	r4, [pc, #52]	; (8003998 <__libc_init_array+0x3c>)
 8003962:	1ba4      	subs	r4, r4, r6
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	2500      	movs	r5, #0
 8003968:	42a5      	cmp	r5, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	4e0b      	ldr	r6, [pc, #44]	; (800399c <__libc_init_array+0x40>)
 800396e:	4c0c      	ldr	r4, [pc, #48]	; (80039a0 <__libc_init_array+0x44>)
 8003970:	f000 fc26 	bl	80041c0 <_init>
 8003974:	1ba4      	subs	r4, r4, r6
 8003976:	10a4      	asrs	r4, r4, #2
 8003978:	2500      	movs	r5, #0
 800397a:	42a5      	cmp	r5, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003984:	4798      	blx	r3
 8003986:	3501      	adds	r5, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800398e:	4798      	blx	r3
 8003990:	3501      	adds	r5, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	080047b0 	.word	0x080047b0
 8003998:	080047b0 	.word	0x080047b0
 800399c:	080047b0 	.word	0x080047b0
 80039a0:	080047b4 	.word	0x080047b4

080039a4 <memset>:
 80039a4:	4402      	add	r2, r0
 80039a6:	4603      	mov	r3, r0
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d100      	bne.n	80039ae <memset+0xa>
 80039ac:	4770      	bx	lr
 80039ae:	f803 1b01 	strb.w	r1, [r3], #1
 80039b2:	e7f9      	b.n	80039a8 <memset+0x4>

080039b4 <_vsiprintf_r>:
 80039b4:	b500      	push	{lr}
 80039b6:	b09b      	sub	sp, #108	; 0x6c
 80039b8:	9100      	str	r1, [sp, #0]
 80039ba:	9104      	str	r1, [sp, #16]
 80039bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039c0:	9105      	str	r1, [sp, #20]
 80039c2:	9102      	str	r1, [sp, #8]
 80039c4:	4905      	ldr	r1, [pc, #20]	; (80039dc <_vsiprintf_r+0x28>)
 80039c6:	9103      	str	r1, [sp, #12]
 80039c8:	4669      	mov	r1, sp
 80039ca:	f000 f86d 	bl	8003aa8 <_svfiprintf_r>
 80039ce:	9b00      	ldr	r3, [sp, #0]
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	b01b      	add	sp, #108	; 0x6c
 80039d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80039da:	bf00      	nop
 80039dc:	ffff0208 	.word	0xffff0208

080039e0 <vsiprintf>:
 80039e0:	4613      	mov	r3, r2
 80039e2:	460a      	mov	r2, r1
 80039e4:	4601      	mov	r1, r0
 80039e6:	4802      	ldr	r0, [pc, #8]	; (80039f0 <vsiprintf+0x10>)
 80039e8:	6800      	ldr	r0, [r0, #0]
 80039ea:	f7ff bfe3 	b.w	80039b4 <_vsiprintf_r>
 80039ee:	bf00      	nop
 80039f0:	20000018 	.word	0x20000018

080039f4 <__ssputs_r>:
 80039f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f8:	688e      	ldr	r6, [r1, #8]
 80039fa:	429e      	cmp	r6, r3
 80039fc:	4682      	mov	sl, r0
 80039fe:	460c      	mov	r4, r1
 8003a00:	4690      	mov	r8, r2
 8003a02:	4699      	mov	r9, r3
 8003a04:	d837      	bhi.n	8003a76 <__ssputs_r+0x82>
 8003a06:	898a      	ldrh	r2, [r1, #12]
 8003a08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a0c:	d031      	beq.n	8003a72 <__ssputs_r+0x7e>
 8003a0e:	6825      	ldr	r5, [r4, #0]
 8003a10:	6909      	ldr	r1, [r1, #16]
 8003a12:	1a6f      	subs	r7, r5, r1
 8003a14:	6965      	ldr	r5, [r4, #20]
 8003a16:	2302      	movs	r3, #2
 8003a18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a1c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a20:	f109 0301 	add.w	r3, r9, #1
 8003a24:	443b      	add	r3, r7
 8003a26:	429d      	cmp	r5, r3
 8003a28:	bf38      	it	cc
 8003a2a:	461d      	movcc	r5, r3
 8003a2c:	0553      	lsls	r3, r2, #21
 8003a2e:	d530      	bpl.n	8003a92 <__ssputs_r+0x9e>
 8003a30:	4629      	mov	r1, r5
 8003a32:	f000 fb2b 	bl	800408c <_malloc_r>
 8003a36:	4606      	mov	r6, r0
 8003a38:	b950      	cbnz	r0, 8003a50 <__ssputs_r+0x5c>
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	f8ca 3000 	str.w	r3, [sl]
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a50:	463a      	mov	r2, r7
 8003a52:	6921      	ldr	r1, [r4, #16]
 8003a54:	f000 faa8 	bl	8003fa8 <memcpy>
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	6126      	str	r6, [r4, #16]
 8003a66:	6165      	str	r5, [r4, #20]
 8003a68:	443e      	add	r6, r7
 8003a6a:	1bed      	subs	r5, r5, r7
 8003a6c:	6026      	str	r6, [r4, #0]
 8003a6e:	60a5      	str	r5, [r4, #8]
 8003a70:	464e      	mov	r6, r9
 8003a72:	454e      	cmp	r6, r9
 8003a74:	d900      	bls.n	8003a78 <__ssputs_r+0x84>
 8003a76:	464e      	mov	r6, r9
 8003a78:	4632      	mov	r2, r6
 8003a7a:	4641      	mov	r1, r8
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	f000 fa9e 	bl	8003fbe <memmove>
 8003a82:	68a3      	ldr	r3, [r4, #8]
 8003a84:	1b9b      	subs	r3, r3, r6
 8003a86:	60a3      	str	r3, [r4, #8]
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	441e      	add	r6, r3
 8003a8c:	6026      	str	r6, [r4, #0]
 8003a8e:	2000      	movs	r0, #0
 8003a90:	e7dc      	b.n	8003a4c <__ssputs_r+0x58>
 8003a92:	462a      	mov	r2, r5
 8003a94:	f000 fb54 	bl	8004140 <_realloc_r>
 8003a98:	4606      	mov	r6, r0
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d1e2      	bne.n	8003a64 <__ssputs_r+0x70>
 8003a9e:	6921      	ldr	r1, [r4, #16]
 8003aa0:	4650      	mov	r0, sl
 8003aa2:	f000 faa5 	bl	8003ff0 <_free_r>
 8003aa6:	e7c8      	b.n	8003a3a <__ssputs_r+0x46>

08003aa8 <_svfiprintf_r>:
 8003aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aac:	461d      	mov	r5, r3
 8003aae:	898b      	ldrh	r3, [r1, #12]
 8003ab0:	061f      	lsls	r7, r3, #24
 8003ab2:	b09d      	sub	sp, #116	; 0x74
 8003ab4:	4680      	mov	r8, r0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	4616      	mov	r6, r2
 8003aba:	d50f      	bpl.n	8003adc <_svfiprintf_r+0x34>
 8003abc:	690b      	ldr	r3, [r1, #16]
 8003abe:	b96b      	cbnz	r3, 8003adc <_svfiprintf_r+0x34>
 8003ac0:	2140      	movs	r1, #64	; 0x40
 8003ac2:	f000 fae3 	bl	800408c <_malloc_r>
 8003ac6:	6020      	str	r0, [r4, #0]
 8003ac8:	6120      	str	r0, [r4, #16]
 8003aca:	b928      	cbnz	r0, 8003ad8 <_svfiprintf_r+0x30>
 8003acc:	230c      	movs	r3, #12
 8003ace:	f8c8 3000 	str.w	r3, [r8]
 8003ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad6:	e0c8      	b.n	8003c6a <_svfiprintf_r+0x1c2>
 8003ad8:	2340      	movs	r3, #64	; 0x40
 8003ada:	6163      	str	r3, [r4, #20]
 8003adc:	2300      	movs	r3, #0
 8003ade:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae0:	2320      	movs	r3, #32
 8003ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ae6:	2330      	movs	r3, #48	; 0x30
 8003ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aec:	9503      	str	r5, [sp, #12]
 8003aee:	f04f 0b01 	mov.w	fp, #1
 8003af2:	4637      	mov	r7, r6
 8003af4:	463d      	mov	r5, r7
 8003af6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003afa:	b10b      	cbz	r3, 8003b00 <_svfiprintf_r+0x58>
 8003afc:	2b25      	cmp	r3, #37	; 0x25
 8003afe:	d13e      	bne.n	8003b7e <_svfiprintf_r+0xd6>
 8003b00:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b04:	d00b      	beq.n	8003b1e <_svfiprintf_r+0x76>
 8003b06:	4653      	mov	r3, sl
 8003b08:	4632      	mov	r2, r6
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	f7ff ff71 	bl	80039f4 <__ssputs_r>
 8003b12:	3001      	adds	r0, #1
 8003b14:	f000 80a4 	beq.w	8003c60 <_svfiprintf_r+0x1b8>
 8003b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1a:	4453      	add	r3, sl
 8003b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b1e:	783b      	ldrb	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 809d 	beq.w	8003c60 <_svfiprintf_r+0x1b8>
 8003b26:	2300      	movs	r3, #0
 8003b28:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b30:	9304      	str	r3, [sp, #16]
 8003b32:	9307      	str	r3, [sp, #28]
 8003b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b38:	931a      	str	r3, [sp, #104]	; 0x68
 8003b3a:	462f      	mov	r7, r5
 8003b3c:	2205      	movs	r2, #5
 8003b3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003b42:	4850      	ldr	r0, [pc, #320]	; (8003c84 <_svfiprintf_r+0x1dc>)
 8003b44:	f7fc fb64 	bl	8000210 <memchr>
 8003b48:	9b04      	ldr	r3, [sp, #16]
 8003b4a:	b9d0      	cbnz	r0, 8003b82 <_svfiprintf_r+0xda>
 8003b4c:	06d9      	lsls	r1, r3, #27
 8003b4e:	bf44      	itt	mi
 8003b50:	2220      	movmi	r2, #32
 8003b52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b56:	071a      	lsls	r2, r3, #28
 8003b58:	bf44      	itt	mi
 8003b5a:	222b      	movmi	r2, #43	; 0x2b
 8003b5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b60:	782a      	ldrb	r2, [r5, #0]
 8003b62:	2a2a      	cmp	r2, #42	; 0x2a
 8003b64:	d015      	beq.n	8003b92 <_svfiprintf_r+0xea>
 8003b66:	9a07      	ldr	r2, [sp, #28]
 8003b68:	462f      	mov	r7, r5
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	250a      	movs	r5, #10
 8003b6e:	4639      	mov	r1, r7
 8003b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b74:	3b30      	subs	r3, #48	; 0x30
 8003b76:	2b09      	cmp	r3, #9
 8003b78:	d94d      	bls.n	8003c16 <_svfiprintf_r+0x16e>
 8003b7a:	b1b8      	cbz	r0, 8003bac <_svfiprintf_r+0x104>
 8003b7c:	e00f      	b.n	8003b9e <_svfiprintf_r+0xf6>
 8003b7e:	462f      	mov	r7, r5
 8003b80:	e7b8      	b.n	8003af4 <_svfiprintf_r+0x4c>
 8003b82:	4a40      	ldr	r2, [pc, #256]	; (8003c84 <_svfiprintf_r+0x1dc>)
 8003b84:	1a80      	subs	r0, r0, r2
 8003b86:	fa0b f000 	lsl.w	r0, fp, r0
 8003b8a:	4318      	orrs	r0, r3
 8003b8c:	9004      	str	r0, [sp, #16]
 8003b8e:	463d      	mov	r5, r7
 8003b90:	e7d3      	b.n	8003b3a <_svfiprintf_r+0x92>
 8003b92:	9a03      	ldr	r2, [sp, #12]
 8003b94:	1d11      	adds	r1, r2, #4
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	9103      	str	r1, [sp, #12]
 8003b9a:	2a00      	cmp	r2, #0
 8003b9c:	db01      	blt.n	8003ba2 <_svfiprintf_r+0xfa>
 8003b9e:	9207      	str	r2, [sp, #28]
 8003ba0:	e004      	b.n	8003bac <_svfiprintf_r+0x104>
 8003ba2:	4252      	negs	r2, r2
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	9207      	str	r2, [sp, #28]
 8003baa:	9304      	str	r3, [sp, #16]
 8003bac:	783b      	ldrb	r3, [r7, #0]
 8003bae:	2b2e      	cmp	r3, #46	; 0x2e
 8003bb0:	d10c      	bne.n	8003bcc <_svfiprintf_r+0x124>
 8003bb2:	787b      	ldrb	r3, [r7, #1]
 8003bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb6:	d133      	bne.n	8003c20 <_svfiprintf_r+0x178>
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	9203      	str	r2, [sp, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bfb8      	it	lt
 8003bc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bc8:	3702      	adds	r7, #2
 8003bca:	9305      	str	r3, [sp, #20]
 8003bcc:	4d2e      	ldr	r5, [pc, #184]	; (8003c88 <_svfiprintf_r+0x1e0>)
 8003bce:	7839      	ldrb	r1, [r7, #0]
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f7fc fb1c 	bl	8000210 <memchr>
 8003bd8:	b138      	cbz	r0, 8003bea <_svfiprintf_r+0x142>
 8003bda:	2340      	movs	r3, #64	; 0x40
 8003bdc:	1b40      	subs	r0, r0, r5
 8003bde:	fa03 f000 	lsl.w	r0, r3, r0
 8003be2:	9b04      	ldr	r3, [sp, #16]
 8003be4:	4303      	orrs	r3, r0
 8003be6:	3701      	adds	r7, #1
 8003be8:	9304      	str	r3, [sp, #16]
 8003bea:	7839      	ldrb	r1, [r7, #0]
 8003bec:	4827      	ldr	r0, [pc, #156]	; (8003c8c <_svfiprintf_r+0x1e4>)
 8003bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bf2:	2206      	movs	r2, #6
 8003bf4:	1c7e      	adds	r6, r7, #1
 8003bf6:	f7fc fb0b 	bl	8000210 <memchr>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d038      	beq.n	8003c70 <_svfiprintf_r+0x1c8>
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <_svfiprintf_r+0x1e8>)
 8003c00:	bb13      	cbnz	r3, 8003c48 <_svfiprintf_r+0x1a0>
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	3307      	adds	r3, #7
 8003c06:	f023 0307 	bic.w	r3, r3, #7
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	9303      	str	r3, [sp, #12]
 8003c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c10:	444b      	add	r3, r9
 8003c12:	9309      	str	r3, [sp, #36]	; 0x24
 8003c14:	e76d      	b.n	8003af2 <_svfiprintf_r+0x4a>
 8003c16:	fb05 3202 	mla	r2, r5, r2, r3
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	460f      	mov	r7, r1
 8003c1e:	e7a6      	b.n	8003b6e <_svfiprintf_r+0xc6>
 8003c20:	2300      	movs	r3, #0
 8003c22:	3701      	adds	r7, #1
 8003c24:	9305      	str	r3, [sp, #20]
 8003c26:	4619      	mov	r1, r3
 8003c28:	250a      	movs	r5, #10
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c30:	3a30      	subs	r2, #48	; 0x30
 8003c32:	2a09      	cmp	r2, #9
 8003c34:	d903      	bls.n	8003c3e <_svfiprintf_r+0x196>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0c8      	beq.n	8003bcc <_svfiprintf_r+0x124>
 8003c3a:	9105      	str	r1, [sp, #20]
 8003c3c:	e7c6      	b.n	8003bcc <_svfiprintf_r+0x124>
 8003c3e:	fb05 2101 	mla	r1, r5, r1, r2
 8003c42:	2301      	movs	r3, #1
 8003c44:	4607      	mov	r7, r0
 8003c46:	e7f0      	b.n	8003c2a <_svfiprintf_r+0x182>
 8003c48:	ab03      	add	r3, sp, #12
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <_svfiprintf_r+0x1ec>)
 8003c50:	a904      	add	r1, sp, #16
 8003c52:	4640      	mov	r0, r8
 8003c54:	f3af 8000 	nop.w
 8003c58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c5c:	4681      	mov	r9, r0
 8003c5e:	d1d6      	bne.n	8003c0e <_svfiprintf_r+0x166>
 8003c60:	89a3      	ldrh	r3, [r4, #12]
 8003c62:	065b      	lsls	r3, r3, #25
 8003c64:	f53f af35 	bmi.w	8003ad2 <_svfiprintf_r+0x2a>
 8003c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c6a:	b01d      	add	sp, #116	; 0x74
 8003c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c70:	ab03      	add	r3, sp, #12
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	4622      	mov	r2, r4
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <_svfiprintf_r+0x1ec>)
 8003c78:	a904      	add	r1, sp, #16
 8003c7a:	4640      	mov	r0, r8
 8003c7c:	f000 f882 	bl	8003d84 <_printf_i>
 8003c80:	e7ea      	b.n	8003c58 <_svfiprintf_r+0x1b0>
 8003c82:	bf00      	nop
 8003c84:	08004774 	.word	0x08004774
 8003c88:	0800477a 	.word	0x0800477a
 8003c8c:	0800477e 	.word	0x0800477e
 8003c90:	00000000 	.word	0x00000000
 8003c94:	080039f5 	.word	0x080039f5

08003c98 <_printf_common>:
 8003c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9c:	4691      	mov	r9, r2
 8003c9e:	461f      	mov	r7, r3
 8003ca0:	688a      	ldr	r2, [r1, #8]
 8003ca2:	690b      	ldr	r3, [r1, #16]
 8003ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	bfb8      	it	lt
 8003cac:	4613      	movlt	r3, r2
 8003cae:	f8c9 3000 	str.w	r3, [r9]
 8003cb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	460c      	mov	r4, r1
 8003cba:	b112      	cbz	r2, 8003cc2 <_printf_common+0x2a>
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	f8c9 3000 	str.w	r3, [r9]
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	0699      	lsls	r1, r3, #26
 8003cc6:	bf42      	ittt	mi
 8003cc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ccc:	3302      	addmi	r3, #2
 8003cce:	f8c9 3000 	strmi.w	r3, [r9]
 8003cd2:	6825      	ldr	r5, [r4, #0]
 8003cd4:	f015 0506 	ands.w	r5, r5, #6
 8003cd8:	d107      	bne.n	8003cea <_printf_common+0x52>
 8003cda:	f104 0a19 	add.w	sl, r4, #25
 8003cde:	68e3      	ldr	r3, [r4, #12]
 8003ce0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	42ab      	cmp	r3, r5
 8003ce8:	dc28      	bgt.n	8003d3c <_printf_common+0xa4>
 8003cea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	3300      	adds	r3, #0
 8003cf2:	bf18      	it	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	0692      	lsls	r2, r2, #26
 8003cf8:	d42d      	bmi.n	8003d56 <_printf_common+0xbe>
 8003cfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cfe:	4639      	mov	r1, r7
 8003d00:	4630      	mov	r0, r6
 8003d02:	47c0      	blx	r8
 8003d04:	3001      	adds	r0, #1
 8003d06:	d020      	beq.n	8003d4a <_printf_common+0xb2>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	68e5      	ldr	r5, [r4, #12]
 8003d0c:	f8d9 2000 	ldr.w	r2, [r9]
 8003d10:	f003 0306 	and.w	r3, r3, #6
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	bf08      	it	eq
 8003d18:	1aad      	subeq	r5, r5, r2
 8003d1a:	68a3      	ldr	r3, [r4, #8]
 8003d1c:	6922      	ldr	r2, [r4, #16]
 8003d1e:	bf0c      	ite	eq
 8003d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d24:	2500      	movne	r5, #0
 8003d26:	4293      	cmp	r3, r2
 8003d28:	bfc4      	itt	gt
 8003d2a:	1a9b      	subgt	r3, r3, r2
 8003d2c:	18ed      	addgt	r5, r5, r3
 8003d2e:	f04f 0900 	mov.w	r9, #0
 8003d32:	341a      	adds	r4, #26
 8003d34:	454d      	cmp	r5, r9
 8003d36:	d11a      	bne.n	8003d6e <_printf_common+0xd6>
 8003d38:	2000      	movs	r0, #0
 8003d3a:	e008      	b.n	8003d4e <_printf_common+0xb6>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	4652      	mov	r2, sl
 8003d40:	4639      	mov	r1, r7
 8003d42:	4630      	mov	r0, r6
 8003d44:	47c0      	blx	r8
 8003d46:	3001      	adds	r0, #1
 8003d48:	d103      	bne.n	8003d52 <_printf_common+0xba>
 8003d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d52:	3501      	adds	r5, #1
 8003d54:	e7c3      	b.n	8003cde <_printf_common+0x46>
 8003d56:	18e1      	adds	r1, r4, r3
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	2030      	movs	r0, #48	; 0x30
 8003d5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d60:	4422      	add	r2, r4
 8003d62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	e7c5      	b.n	8003cfa <_printf_common+0x62>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	4622      	mov	r2, r4
 8003d72:	4639      	mov	r1, r7
 8003d74:	4630      	mov	r0, r6
 8003d76:	47c0      	blx	r8
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d0e6      	beq.n	8003d4a <_printf_common+0xb2>
 8003d7c:	f109 0901 	add.w	r9, r9, #1
 8003d80:	e7d8      	b.n	8003d34 <_printf_common+0x9c>
	...

08003d84 <_printf_i>:
 8003d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d8c:	460c      	mov	r4, r1
 8003d8e:	7e09      	ldrb	r1, [r1, #24]
 8003d90:	b085      	sub	sp, #20
 8003d92:	296e      	cmp	r1, #110	; 0x6e
 8003d94:	4617      	mov	r7, r2
 8003d96:	4606      	mov	r6, r0
 8003d98:	4698      	mov	r8, r3
 8003d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d9c:	f000 80b3 	beq.w	8003f06 <_printf_i+0x182>
 8003da0:	d822      	bhi.n	8003de8 <_printf_i+0x64>
 8003da2:	2963      	cmp	r1, #99	; 0x63
 8003da4:	d036      	beq.n	8003e14 <_printf_i+0x90>
 8003da6:	d80a      	bhi.n	8003dbe <_printf_i+0x3a>
 8003da8:	2900      	cmp	r1, #0
 8003daa:	f000 80b9 	beq.w	8003f20 <_printf_i+0x19c>
 8003dae:	2958      	cmp	r1, #88	; 0x58
 8003db0:	f000 8083 	beq.w	8003eba <_printf_i+0x136>
 8003db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003dbc:	e032      	b.n	8003e24 <_printf_i+0xa0>
 8003dbe:	2964      	cmp	r1, #100	; 0x64
 8003dc0:	d001      	beq.n	8003dc6 <_printf_i+0x42>
 8003dc2:	2969      	cmp	r1, #105	; 0x69
 8003dc4:	d1f6      	bne.n	8003db4 <_printf_i+0x30>
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	6813      	ldr	r3, [r2, #0]
 8003dca:	0605      	lsls	r5, r0, #24
 8003dcc:	f103 0104 	add.w	r1, r3, #4
 8003dd0:	d52a      	bpl.n	8003e28 <_printf_i+0xa4>
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6011      	str	r1, [r2, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da03      	bge.n	8003de2 <_printf_i+0x5e>
 8003dda:	222d      	movs	r2, #45	; 0x2d
 8003ddc:	425b      	negs	r3, r3
 8003dde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003de2:	486f      	ldr	r0, [pc, #444]	; (8003fa0 <_printf_i+0x21c>)
 8003de4:	220a      	movs	r2, #10
 8003de6:	e039      	b.n	8003e5c <_printf_i+0xd8>
 8003de8:	2973      	cmp	r1, #115	; 0x73
 8003dea:	f000 809d 	beq.w	8003f28 <_printf_i+0x1a4>
 8003dee:	d808      	bhi.n	8003e02 <_printf_i+0x7e>
 8003df0:	296f      	cmp	r1, #111	; 0x6f
 8003df2:	d020      	beq.n	8003e36 <_printf_i+0xb2>
 8003df4:	2970      	cmp	r1, #112	; 0x70
 8003df6:	d1dd      	bne.n	8003db4 <_printf_i+0x30>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	f043 0320 	orr.w	r3, r3, #32
 8003dfe:	6023      	str	r3, [r4, #0]
 8003e00:	e003      	b.n	8003e0a <_printf_i+0x86>
 8003e02:	2975      	cmp	r1, #117	; 0x75
 8003e04:	d017      	beq.n	8003e36 <_printf_i+0xb2>
 8003e06:	2978      	cmp	r1, #120	; 0x78
 8003e08:	d1d4      	bne.n	8003db4 <_printf_i+0x30>
 8003e0a:	2378      	movs	r3, #120	; 0x78
 8003e0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e10:	4864      	ldr	r0, [pc, #400]	; (8003fa4 <_printf_i+0x220>)
 8003e12:	e055      	b.n	8003ec0 <_printf_i+0x13c>
 8003e14:	6813      	ldr	r3, [r2, #0]
 8003e16:	1d19      	adds	r1, r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6011      	str	r1, [r2, #0]
 8003e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e24:	2301      	movs	r3, #1
 8003e26:	e08c      	b.n	8003f42 <_printf_i+0x1be>
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6011      	str	r1, [r2, #0]
 8003e2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e30:	bf18      	it	ne
 8003e32:	b21b      	sxthne	r3, r3
 8003e34:	e7cf      	b.n	8003dd6 <_printf_i+0x52>
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	6825      	ldr	r5, [r4, #0]
 8003e3a:	1d18      	adds	r0, r3, #4
 8003e3c:	6010      	str	r0, [r2, #0]
 8003e3e:	0628      	lsls	r0, r5, #24
 8003e40:	d501      	bpl.n	8003e46 <_printf_i+0xc2>
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	e002      	b.n	8003e4c <_printf_i+0xc8>
 8003e46:	0668      	lsls	r0, r5, #25
 8003e48:	d5fb      	bpl.n	8003e42 <_printf_i+0xbe>
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	4854      	ldr	r0, [pc, #336]	; (8003fa0 <_printf_i+0x21c>)
 8003e4e:	296f      	cmp	r1, #111	; 0x6f
 8003e50:	bf14      	ite	ne
 8003e52:	220a      	movne	r2, #10
 8003e54:	2208      	moveq	r2, #8
 8003e56:	2100      	movs	r1, #0
 8003e58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e5c:	6865      	ldr	r5, [r4, #4]
 8003e5e:	60a5      	str	r5, [r4, #8]
 8003e60:	2d00      	cmp	r5, #0
 8003e62:	f2c0 8095 	blt.w	8003f90 <_printf_i+0x20c>
 8003e66:	6821      	ldr	r1, [r4, #0]
 8003e68:	f021 0104 	bic.w	r1, r1, #4
 8003e6c:	6021      	str	r1, [r4, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d13d      	bne.n	8003eee <_printf_i+0x16a>
 8003e72:	2d00      	cmp	r5, #0
 8003e74:	f040 808e 	bne.w	8003f94 <_printf_i+0x210>
 8003e78:	4665      	mov	r5, ip
 8003e7a:	2a08      	cmp	r2, #8
 8003e7c:	d10b      	bne.n	8003e96 <_printf_i+0x112>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	07db      	lsls	r3, r3, #31
 8003e82:	d508      	bpl.n	8003e96 <_printf_i+0x112>
 8003e84:	6923      	ldr	r3, [r4, #16]
 8003e86:	6862      	ldr	r2, [r4, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	bfde      	ittt	le
 8003e8c:	2330      	movle	r3, #48	; 0x30
 8003e8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e96:	ebac 0305 	sub.w	r3, ip, r5
 8003e9a:	6123      	str	r3, [r4, #16]
 8003e9c:	f8cd 8000 	str.w	r8, [sp]
 8003ea0:	463b      	mov	r3, r7
 8003ea2:	aa03      	add	r2, sp, #12
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f7ff fef6 	bl	8003c98 <_printf_common>
 8003eac:	3001      	adds	r0, #1
 8003eae:	d14d      	bne.n	8003f4c <_printf_i+0x1c8>
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	b005      	add	sp, #20
 8003eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003eba:	4839      	ldr	r0, [pc, #228]	; (8003fa0 <_printf_i+0x21c>)
 8003ebc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ec0:	6813      	ldr	r3, [r2, #0]
 8003ec2:	6821      	ldr	r1, [r4, #0]
 8003ec4:	1d1d      	adds	r5, r3, #4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6015      	str	r5, [r2, #0]
 8003eca:	060a      	lsls	r2, r1, #24
 8003ecc:	d50b      	bpl.n	8003ee6 <_printf_i+0x162>
 8003ece:	07ca      	lsls	r2, r1, #31
 8003ed0:	bf44      	itt	mi
 8003ed2:	f041 0120 	orrmi.w	r1, r1, #32
 8003ed6:	6021      	strmi	r1, [r4, #0]
 8003ed8:	b91b      	cbnz	r3, 8003ee2 <_printf_i+0x15e>
 8003eda:	6822      	ldr	r2, [r4, #0]
 8003edc:	f022 0220 	bic.w	r2, r2, #32
 8003ee0:	6022      	str	r2, [r4, #0]
 8003ee2:	2210      	movs	r2, #16
 8003ee4:	e7b7      	b.n	8003e56 <_printf_i+0xd2>
 8003ee6:	064d      	lsls	r5, r1, #25
 8003ee8:	bf48      	it	mi
 8003eea:	b29b      	uxthmi	r3, r3
 8003eec:	e7ef      	b.n	8003ece <_printf_i+0x14a>
 8003eee:	4665      	mov	r5, ip
 8003ef0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ef4:	fb02 3311 	mls	r3, r2, r1, r3
 8003ef8:	5cc3      	ldrb	r3, [r0, r3]
 8003efa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003efe:	460b      	mov	r3, r1
 8003f00:	2900      	cmp	r1, #0
 8003f02:	d1f5      	bne.n	8003ef0 <_printf_i+0x16c>
 8003f04:	e7b9      	b.n	8003e7a <_printf_i+0xf6>
 8003f06:	6813      	ldr	r3, [r2, #0]
 8003f08:	6825      	ldr	r5, [r4, #0]
 8003f0a:	6961      	ldr	r1, [r4, #20]
 8003f0c:	1d18      	adds	r0, r3, #4
 8003f0e:	6010      	str	r0, [r2, #0]
 8003f10:	0628      	lsls	r0, r5, #24
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	d501      	bpl.n	8003f1a <_printf_i+0x196>
 8003f16:	6019      	str	r1, [r3, #0]
 8003f18:	e002      	b.n	8003f20 <_printf_i+0x19c>
 8003f1a:	066a      	lsls	r2, r5, #25
 8003f1c:	d5fb      	bpl.n	8003f16 <_printf_i+0x192>
 8003f1e:	8019      	strh	r1, [r3, #0]
 8003f20:	2300      	movs	r3, #0
 8003f22:	6123      	str	r3, [r4, #16]
 8003f24:	4665      	mov	r5, ip
 8003f26:	e7b9      	b.n	8003e9c <_printf_i+0x118>
 8003f28:	6813      	ldr	r3, [r2, #0]
 8003f2a:	1d19      	adds	r1, r3, #4
 8003f2c:	6011      	str	r1, [r2, #0]
 8003f2e:	681d      	ldr	r5, [r3, #0]
 8003f30:	6862      	ldr	r2, [r4, #4]
 8003f32:	2100      	movs	r1, #0
 8003f34:	4628      	mov	r0, r5
 8003f36:	f7fc f96b 	bl	8000210 <memchr>
 8003f3a:	b108      	cbz	r0, 8003f40 <_printf_i+0x1bc>
 8003f3c:	1b40      	subs	r0, r0, r5
 8003f3e:	6060      	str	r0, [r4, #4]
 8003f40:	6863      	ldr	r3, [r4, #4]
 8003f42:	6123      	str	r3, [r4, #16]
 8003f44:	2300      	movs	r3, #0
 8003f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f4a:	e7a7      	b.n	8003e9c <_printf_i+0x118>
 8003f4c:	6923      	ldr	r3, [r4, #16]
 8003f4e:	462a      	mov	r2, r5
 8003f50:	4639      	mov	r1, r7
 8003f52:	4630      	mov	r0, r6
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d0aa      	beq.n	8003eb0 <_printf_i+0x12c>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	079b      	lsls	r3, r3, #30
 8003f5e:	d413      	bmi.n	8003f88 <_printf_i+0x204>
 8003f60:	68e0      	ldr	r0, [r4, #12]
 8003f62:	9b03      	ldr	r3, [sp, #12]
 8003f64:	4298      	cmp	r0, r3
 8003f66:	bfb8      	it	lt
 8003f68:	4618      	movlt	r0, r3
 8003f6a:	e7a3      	b.n	8003eb4 <_printf_i+0x130>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	464a      	mov	r2, r9
 8003f70:	4639      	mov	r1, r7
 8003f72:	4630      	mov	r0, r6
 8003f74:	47c0      	blx	r8
 8003f76:	3001      	adds	r0, #1
 8003f78:	d09a      	beq.n	8003eb0 <_printf_i+0x12c>
 8003f7a:	3501      	adds	r5, #1
 8003f7c:	68e3      	ldr	r3, [r4, #12]
 8003f7e:	9a03      	ldr	r2, [sp, #12]
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	42ab      	cmp	r3, r5
 8003f84:	dcf2      	bgt.n	8003f6c <_printf_i+0x1e8>
 8003f86:	e7eb      	b.n	8003f60 <_printf_i+0x1dc>
 8003f88:	2500      	movs	r5, #0
 8003f8a:	f104 0919 	add.w	r9, r4, #25
 8003f8e:	e7f5      	b.n	8003f7c <_printf_i+0x1f8>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ac      	bne.n	8003eee <_printf_i+0x16a>
 8003f94:	7803      	ldrb	r3, [r0, #0]
 8003f96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f9e:	e76c      	b.n	8003e7a <_printf_i+0xf6>
 8003fa0:	08004785 	.word	0x08004785
 8003fa4:	08004796 	.word	0x08004796

08003fa8 <memcpy>:
 8003fa8:	b510      	push	{r4, lr}
 8003faa:	1e43      	subs	r3, r0, #1
 8003fac:	440a      	add	r2, r1
 8003fae:	4291      	cmp	r1, r2
 8003fb0:	d100      	bne.n	8003fb4 <memcpy+0xc>
 8003fb2:	bd10      	pop	{r4, pc}
 8003fb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fbc:	e7f7      	b.n	8003fae <memcpy+0x6>

08003fbe <memmove>:
 8003fbe:	4288      	cmp	r0, r1
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	eb01 0302 	add.w	r3, r1, r2
 8003fc6:	d807      	bhi.n	8003fd8 <memmove+0x1a>
 8003fc8:	1e42      	subs	r2, r0, #1
 8003fca:	4299      	cmp	r1, r3
 8003fcc:	d00a      	beq.n	8003fe4 <memmove+0x26>
 8003fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fd2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003fd6:	e7f8      	b.n	8003fca <memmove+0xc>
 8003fd8:	4283      	cmp	r3, r0
 8003fda:	d9f5      	bls.n	8003fc8 <memmove+0xa>
 8003fdc:	1881      	adds	r1, r0, r2
 8003fde:	1ad2      	subs	r2, r2, r3
 8003fe0:	42d3      	cmn	r3, r2
 8003fe2:	d100      	bne.n	8003fe6 <memmove+0x28>
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003fee:	e7f7      	b.n	8003fe0 <memmove+0x22>

08003ff0 <_free_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	2900      	cmp	r1, #0
 8003ff6:	d045      	beq.n	8004084 <_free_r+0x94>
 8003ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ffc:	1f0c      	subs	r4, r1, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bfb8      	it	lt
 8004002:	18e4      	addlt	r4, r4, r3
 8004004:	f000 f8d2 	bl	80041ac <__malloc_lock>
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <_free_r+0x98>)
 800400a:	6813      	ldr	r3, [r2, #0]
 800400c:	4610      	mov	r0, r2
 800400e:	b933      	cbnz	r3, 800401e <_free_r+0x2e>
 8004010:	6063      	str	r3, [r4, #4]
 8004012:	6014      	str	r4, [r2, #0]
 8004014:	4628      	mov	r0, r5
 8004016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800401a:	f000 b8c8 	b.w	80041ae <__malloc_unlock>
 800401e:	42a3      	cmp	r3, r4
 8004020:	d90c      	bls.n	800403c <_free_r+0x4c>
 8004022:	6821      	ldr	r1, [r4, #0]
 8004024:	1862      	adds	r2, r4, r1
 8004026:	4293      	cmp	r3, r2
 8004028:	bf04      	itt	eq
 800402a:	681a      	ldreq	r2, [r3, #0]
 800402c:	685b      	ldreq	r3, [r3, #4]
 800402e:	6063      	str	r3, [r4, #4]
 8004030:	bf04      	itt	eq
 8004032:	1852      	addeq	r2, r2, r1
 8004034:	6022      	streq	r2, [r4, #0]
 8004036:	6004      	str	r4, [r0, #0]
 8004038:	e7ec      	b.n	8004014 <_free_r+0x24>
 800403a:	4613      	mov	r3, r2
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	b10a      	cbz	r2, 8004044 <_free_r+0x54>
 8004040:	42a2      	cmp	r2, r4
 8004042:	d9fa      	bls.n	800403a <_free_r+0x4a>
 8004044:	6819      	ldr	r1, [r3, #0]
 8004046:	1858      	adds	r0, r3, r1
 8004048:	42a0      	cmp	r0, r4
 800404a:	d10b      	bne.n	8004064 <_free_r+0x74>
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	4401      	add	r1, r0
 8004050:	1858      	adds	r0, r3, r1
 8004052:	4282      	cmp	r2, r0
 8004054:	6019      	str	r1, [r3, #0]
 8004056:	d1dd      	bne.n	8004014 <_free_r+0x24>
 8004058:	6810      	ldr	r0, [r2, #0]
 800405a:	6852      	ldr	r2, [r2, #4]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	4401      	add	r1, r0
 8004060:	6019      	str	r1, [r3, #0]
 8004062:	e7d7      	b.n	8004014 <_free_r+0x24>
 8004064:	d902      	bls.n	800406c <_free_r+0x7c>
 8004066:	230c      	movs	r3, #12
 8004068:	602b      	str	r3, [r5, #0]
 800406a:	e7d3      	b.n	8004014 <_free_r+0x24>
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	1821      	adds	r1, r4, r0
 8004070:	428a      	cmp	r2, r1
 8004072:	bf04      	itt	eq
 8004074:	6811      	ldreq	r1, [r2, #0]
 8004076:	6852      	ldreq	r2, [r2, #4]
 8004078:	6062      	str	r2, [r4, #4]
 800407a:	bf04      	itt	eq
 800407c:	1809      	addeq	r1, r1, r0
 800407e:	6021      	streq	r1, [r4, #0]
 8004080:	605c      	str	r4, [r3, #4]
 8004082:	e7c7      	b.n	8004014 <_free_r+0x24>
 8004084:	bd38      	pop	{r3, r4, r5, pc}
 8004086:	bf00      	nop
 8004088:	200001ac 	.word	0x200001ac

0800408c <_malloc_r>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	1ccd      	adds	r5, r1, #3
 8004090:	f025 0503 	bic.w	r5, r5, #3
 8004094:	3508      	adds	r5, #8
 8004096:	2d0c      	cmp	r5, #12
 8004098:	bf38      	it	cc
 800409a:	250c      	movcc	r5, #12
 800409c:	2d00      	cmp	r5, #0
 800409e:	4606      	mov	r6, r0
 80040a0:	db01      	blt.n	80040a6 <_malloc_r+0x1a>
 80040a2:	42a9      	cmp	r1, r5
 80040a4:	d903      	bls.n	80040ae <_malloc_r+0x22>
 80040a6:	230c      	movs	r3, #12
 80040a8:	6033      	str	r3, [r6, #0]
 80040aa:	2000      	movs	r0, #0
 80040ac:	bd70      	pop	{r4, r5, r6, pc}
 80040ae:	f000 f87d 	bl	80041ac <__malloc_lock>
 80040b2:	4a21      	ldr	r2, [pc, #132]	; (8004138 <_malloc_r+0xac>)
 80040b4:	6814      	ldr	r4, [r2, #0]
 80040b6:	4621      	mov	r1, r4
 80040b8:	b991      	cbnz	r1, 80040e0 <_malloc_r+0x54>
 80040ba:	4c20      	ldr	r4, [pc, #128]	; (800413c <_malloc_r+0xb0>)
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	b91b      	cbnz	r3, 80040c8 <_malloc_r+0x3c>
 80040c0:	4630      	mov	r0, r6
 80040c2:	f000 f863 	bl	800418c <_sbrk_r>
 80040c6:	6020      	str	r0, [r4, #0]
 80040c8:	4629      	mov	r1, r5
 80040ca:	4630      	mov	r0, r6
 80040cc:	f000 f85e 	bl	800418c <_sbrk_r>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d124      	bne.n	800411e <_malloc_r+0x92>
 80040d4:	230c      	movs	r3, #12
 80040d6:	6033      	str	r3, [r6, #0]
 80040d8:	4630      	mov	r0, r6
 80040da:	f000 f868 	bl	80041ae <__malloc_unlock>
 80040de:	e7e4      	b.n	80040aa <_malloc_r+0x1e>
 80040e0:	680b      	ldr	r3, [r1, #0]
 80040e2:	1b5b      	subs	r3, r3, r5
 80040e4:	d418      	bmi.n	8004118 <_malloc_r+0x8c>
 80040e6:	2b0b      	cmp	r3, #11
 80040e8:	d90f      	bls.n	800410a <_malloc_r+0x7e>
 80040ea:	600b      	str	r3, [r1, #0]
 80040ec:	50cd      	str	r5, [r1, r3]
 80040ee:	18cc      	adds	r4, r1, r3
 80040f0:	4630      	mov	r0, r6
 80040f2:	f000 f85c 	bl	80041ae <__malloc_unlock>
 80040f6:	f104 000b 	add.w	r0, r4, #11
 80040fa:	1d23      	adds	r3, r4, #4
 80040fc:	f020 0007 	bic.w	r0, r0, #7
 8004100:	1ac3      	subs	r3, r0, r3
 8004102:	d0d3      	beq.n	80040ac <_malloc_r+0x20>
 8004104:	425a      	negs	r2, r3
 8004106:	50e2      	str	r2, [r4, r3]
 8004108:	e7d0      	b.n	80040ac <_malloc_r+0x20>
 800410a:	428c      	cmp	r4, r1
 800410c:	684b      	ldr	r3, [r1, #4]
 800410e:	bf16      	itet	ne
 8004110:	6063      	strne	r3, [r4, #4]
 8004112:	6013      	streq	r3, [r2, #0]
 8004114:	460c      	movne	r4, r1
 8004116:	e7eb      	b.n	80040f0 <_malloc_r+0x64>
 8004118:	460c      	mov	r4, r1
 800411a:	6849      	ldr	r1, [r1, #4]
 800411c:	e7cc      	b.n	80040b8 <_malloc_r+0x2c>
 800411e:	1cc4      	adds	r4, r0, #3
 8004120:	f024 0403 	bic.w	r4, r4, #3
 8004124:	42a0      	cmp	r0, r4
 8004126:	d005      	beq.n	8004134 <_malloc_r+0xa8>
 8004128:	1a21      	subs	r1, r4, r0
 800412a:	4630      	mov	r0, r6
 800412c:	f000 f82e 	bl	800418c <_sbrk_r>
 8004130:	3001      	adds	r0, #1
 8004132:	d0cf      	beq.n	80040d4 <_malloc_r+0x48>
 8004134:	6025      	str	r5, [r4, #0]
 8004136:	e7db      	b.n	80040f0 <_malloc_r+0x64>
 8004138:	200001ac 	.word	0x200001ac
 800413c:	200001b0 	.word	0x200001b0

08004140 <_realloc_r>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	4607      	mov	r7, r0
 8004144:	4614      	mov	r4, r2
 8004146:	460e      	mov	r6, r1
 8004148:	b921      	cbnz	r1, 8004154 <_realloc_r+0x14>
 800414a:	4611      	mov	r1, r2
 800414c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004150:	f7ff bf9c 	b.w	800408c <_malloc_r>
 8004154:	b922      	cbnz	r2, 8004160 <_realloc_r+0x20>
 8004156:	f7ff ff4b 	bl	8003ff0 <_free_r>
 800415a:	4625      	mov	r5, r4
 800415c:	4628      	mov	r0, r5
 800415e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004160:	f000 f826 	bl	80041b0 <_malloc_usable_size_r>
 8004164:	42a0      	cmp	r0, r4
 8004166:	d20f      	bcs.n	8004188 <_realloc_r+0x48>
 8004168:	4621      	mov	r1, r4
 800416a:	4638      	mov	r0, r7
 800416c:	f7ff ff8e 	bl	800408c <_malloc_r>
 8004170:	4605      	mov	r5, r0
 8004172:	2800      	cmp	r0, #0
 8004174:	d0f2      	beq.n	800415c <_realloc_r+0x1c>
 8004176:	4631      	mov	r1, r6
 8004178:	4622      	mov	r2, r4
 800417a:	f7ff ff15 	bl	8003fa8 <memcpy>
 800417e:	4631      	mov	r1, r6
 8004180:	4638      	mov	r0, r7
 8004182:	f7ff ff35 	bl	8003ff0 <_free_r>
 8004186:	e7e9      	b.n	800415c <_realloc_r+0x1c>
 8004188:	4635      	mov	r5, r6
 800418a:	e7e7      	b.n	800415c <_realloc_r+0x1c>

0800418c <_sbrk_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4c06      	ldr	r4, [pc, #24]	; (80041a8 <_sbrk_r+0x1c>)
 8004190:	2300      	movs	r3, #0
 8004192:	4605      	mov	r5, r0
 8004194:	4608      	mov	r0, r1
 8004196:	6023      	str	r3, [r4, #0]
 8004198:	f7fc fc92 	bl	8000ac0 <_sbrk>
 800419c:	1c43      	adds	r3, r0, #1
 800419e:	d102      	bne.n	80041a6 <_sbrk_r+0x1a>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	b103      	cbz	r3, 80041a6 <_sbrk_r+0x1a>
 80041a4:	602b      	str	r3, [r5, #0]
 80041a6:	bd38      	pop	{r3, r4, r5, pc}
 80041a8:	20000214 	.word	0x20000214

080041ac <__malloc_lock>:
 80041ac:	4770      	bx	lr

080041ae <__malloc_unlock>:
 80041ae:	4770      	bx	lr

080041b0 <_malloc_usable_size_r>:
 80041b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b4:	1f18      	subs	r0, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bfbc      	itt	lt
 80041ba:	580b      	ldrlt	r3, [r1, r0]
 80041bc:	18c0      	addlt	r0, r0, r3
 80041be:	4770      	bx	lr

080041c0 <_init>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr

080041cc <_fini>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr
