
MechnaicalEncoder_With_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a70  08003a70  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a78  08003a78  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000007c  08003afc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08003afc  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c284  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d27  00000000  00000000  0002c330  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002e058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  0002ec20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022917  00000000  00000000  0002f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0a5  00000000  00000000  00051fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce2ce  00000000  00000000  0005c084  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a352  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032dc  00000000  00000000  0012a3d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003488 	.word	0x08003488

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08003488 	.word	0x08003488

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_GPIO_Init+0xf0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <MX_GPIO_Init+0xf0>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_GPIO_Init+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_GPIO_Init+0xf0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <MX_GPIO_Init+0xf0>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_GPIO_Init+0xf0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2120      	movs	r1, #32
 800063a:	481a      	ldr	r0, [pc, #104]	; (80006a4 <MX_GPIO_Init+0xf4>)
 800063c:	f000 fd7e 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_GPIO_Init+0xf8>)
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4815      	ldr	r0, [pc, #84]	; (80006ac <MX_GPIO_Init+0xfc>)
 8000656:	f000 fbdf 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800065a:	230c      	movs	r3, #12
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800066a:	2307      	movs	r3, #7
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_GPIO_Init+0xf4>)
 8000676:	f000 fbcf 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800067a:	2320      	movs	r3, #32
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0xf4>)
 8000692:	f000 fbc1 	bl	8000e18 <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000
 80006a8:	10210000 	.word	0x10210000
 80006ac:	40020800 	.word	0x40020800

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 fa35 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f83f 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f7ff ff77 	bl	80005b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006c2:	f000 f96d 	bl	80009a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 80006c6:	f001 fda3 	bl	8002210 <LCD_Init>
  LCD_Printf("lcd sys.ok \n");
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <main+0x74>)
 80006cc:	f002 f952 	bl	8002974 <LCD_Printf>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80006d0:	213c      	movs	r1, #60	; 0x3c
 80006d2:	4815      	ldr	r0, [pc, #84]	; (8000728 <main+0x78>)
 80006d4:	f001 fb0a 	bl	8001cec <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //LCD_SetCursor(0, 0);
	 volatile uint8_t val = htim2.Instance->CNT;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <main+0x78>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	71fb      	strb	r3, [r7, #7]
	 //LCD_Printf("%d  \n", val);  /* Infinite loop */
     if (val > 0){
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d00d      	beq.n	8000706 <main+0x56>
    	 LCD_SetCursor(0 , 0);
 80006ea:	2100      	movs	r1, #0
 80006ec:	2000      	movs	r0, #0
 80006ee:	f002 f9ff 	bl	8002af0 <LCD_SetCursor>
    	 LCD_Printf("the sys is working               >>> \n");
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <main+0x7c>)
 80006f4:	f002 f93e 	bl	8002974 <LCD_Printf>
    	 LCD_Printf("the frqunecy is        %d \n", val);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <main+0x80>)
 8000700:	f002 f938 	bl	8002974 <LCD_Printf>
 8000704:	e7e8      	b.n	80006d8 <main+0x28>
     }
     else if (val == 0){
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1e4      	bne.n	80006d8 <main+0x28>
    	 LCD_SetCursor(0 , 0);
 800070e:	2100      	movs	r1, #0
 8000710:	2000      	movs	r0, #0
 8000712:	f002 f9ed 	bl	8002af0 <LCD_SetCursor>
    	 LCD_Printf("the sys is stopped by the encoder >>>>>> \n");
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <main+0x84>)
 8000718:	f002 f92c 	bl	8002974 <LCD_Printf>
         LCD_Printf(" try to move the rotary    \n");
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <main+0x88>)
 800071e:	f002 f929 	bl	8002974 <LCD_Printf>
  {
 8000722:	e7d9      	b.n	80006d8 <main+0x28>
 8000724:	080034a0 	.word	0x080034a0
 8000728:	200001b4 	.word	0x200001b4
 800072c:	080034b0 	.word	0x080034b0
 8000730:	080034d8 	.word	0x080034d8
 8000734:	080034f4 	.word	0x080034f4
 8000738:	08003520 	.word	0x08003520

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2234      	movs	r2, #52	; 0x34
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fa8e 	bl	8002c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <SystemClock_Config+0xdc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a2b      	ldr	r2, [pc, #172]	; (8000818 <SystemClock_Config+0xdc>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemClock_Config+0xdc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4b26      	ldr	r3, [pc, #152]	; (800081c <SystemClock_Config+0xe0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a25      	ldr	r2, [pc, #148]	; (800081c <SystemClock_Config+0xe0>)
 8000786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b23      	ldr	r3, [pc, #140]	; (800081c <SystemClock_Config+0xe0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800079c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007b0:	23b4      	movs	r3, #180	; 0xb4
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 ffa5 	bl	8001714 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d0:	f000 f826 	bl	8000820 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d4:	f000 fccc 	bl	8001170 <HAL_PWREx_EnableOverDrive>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007de:	f000 f81f 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2302      	movs	r3, #2
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2105      	movs	r1, #5
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fd05 	bl	8001210 <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800080c:	f000 f808 	bl	8000820 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3750      	adds	r7, #80	; 0x50
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a0f      	ldr	r2, [pc, #60]	; (800087c <HAL_MspInit+0x4c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f978 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x50>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x16>
		heap_end = &end;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <_sbrk+0x50>)
 80008ee:	4a10      	ldr	r2, [pc, #64]	; (8000930 <_sbrk+0x54>)
 80008f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <_sbrk+0x50>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <_sbrk+0x50>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	466a      	mov	r2, sp
 8000902:	4293      	cmp	r3, r2
 8000904:	d907      	bls.n	8000916 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000906:	f002 f987 	bl	8002c18 <__errno>
 800090a:	4602      	mov	r2, r0
 800090c:	230c      	movs	r3, #12
 800090e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	e006      	b.n	8000924 <_sbrk+0x48>
	}

	heap_end += incr;
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <_sbrk+0x50>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a03      	ldr	r2, [pc, #12]	; (800092c <_sbrk+0x50>)
 8000920:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000098 	.word	0x20000098
 8000930:	20000200 	.word	0x20000200

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <SystemInit+0x60>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <SystemInit+0x60>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <SystemInit+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <SystemInit+0x64>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <SystemInit+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <SystemInit+0x64>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <SystemInit+0x64>)
 8000960:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000968:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <SystemInit+0x64>)
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <SystemInit+0x68>)
 800096e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <SystemInit+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a08      	ldr	r2, [pc, #32]	; (8000998 <SystemInit+0x64>)
 8000976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800097a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SystemInit+0x60>)
 8000984:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000988:	609a      	str	r2, [r3, #8]
#endif
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00
 8000998:	40023800 	.word	0x40023800
 800099c:	24003010 	.word	0x24003010

080009a0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2224      	movs	r2, #36	; 0x24
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 f95c 	bl	8002c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009d2:	22c7      	movs	r2, #199	; 0xc7
 80009d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009e2:	2303      	movs	r3, #3
 80009e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009ea:	2301      	movs	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV8;
 80009ee:	230c      	movs	r3, #12
 80009f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009fa:	2301      	movs	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 80009fe:	2304      	movs	r3, #4
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <MX_TIM2_Init+0xa0>)
 8000a0e:	f001 f8db 	bl	8001bc8 <HAL_TIM_Encoder_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000a18:	f7ff ff02 	bl	8000820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_TIM2_Init+0xa0>)
 8000a2a:	f001 fa5c 	bl	8001ee6 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a34:	f7ff fef4 	bl	8000820 <Error_Handler>
  }

}
 8000a38:	bf00      	nop
 8000a3a:	3730      	adds	r7, #48	; 0x30
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200001b4 	.word	0x200001b4

08000a44 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a64:	d12c      	bne.n	8000ac0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <HAL_TIM_Encoder_MspInit+0x88>)
 8000abc:	f000 f9ac 	bl	8000e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020400 	.word	0x40020400

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ad4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ad6:	e003      	b.n	8000ae0 <LoopCopyDataInit>

08000ad8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ada:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000adc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ade:	3104      	adds	r1, #4

08000ae0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ae4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ae6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ae8:	d3f6      	bcc.n	8000ad8 <CopyDataInit>
  ldr  r2, =_sbss
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000aec:	e002      	b.n	8000af4 <LoopFillZerobss>

08000aee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000af0:	f842 3b04 	str.w	r3, [r2], #4

08000af4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000af6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000af8:	d3f9      	bcc.n	8000aee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000afa:	f7ff ff1b 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f002 f891 	bl	8002c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fdd5 	bl	80006b0 <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b0c:	08003a80 	.word	0x08003a80
  ldr  r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b14:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000b18:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000b1c:	200001fc 	.word	0x200001fc

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_Init+0x40>)
 8000b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_Init+0x40>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x40>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f92f 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fe6a 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f939 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f90f 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	200001f4 	.word	0x200001f4

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200001f4 	.word	0x200001f4

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff ffee 	bl	8000bf0 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_Delay+0x40>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffde 	bl	8000bf0 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000008 	.word	0x20000008

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff47 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5c 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb0 	bl	8000d6c <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e165      	b.n	8001100 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8154 	bne.w	80010fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x4a>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d123      	bne.n	8000eaa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	69b9      	ldr	r1, [r7, #24]
 8000ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0203 	and.w	r2, r3, #3
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d00b      	beq.n	8000efe <HAL_GPIO_Init+0xe6>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d007      	beq.n	8000efe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef2:	2b11      	cmp	r3, #17
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d130      	bne.n	8000f60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	f003 0201 	and.w	r2, r3, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80ae 	beq.w	80010fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b5c      	ldr	r3, [pc, #368]	; (8001114 <HAL_GPIO_Init+0x2fc>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a5b      	ldr	r2, [pc, #364]	; (8001114 <HAL_GPIO_Init+0x2fc>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b59      	ldr	r3, [pc, #356]	; (8001114 <HAL_GPIO_Init+0x2fc>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a57      	ldr	r2, [pc, #348]	; (8001118 <HAL_GPIO_Init+0x300>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4e      	ldr	r2, [pc, #312]	; (800111c <HAL_GPIO_Init+0x304>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d025      	beq.n	8001032 <HAL_GPIO_Init+0x21a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4d      	ldr	r2, [pc, #308]	; (8001120 <HAL_GPIO_Init+0x308>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d01f      	beq.n	800102e <HAL_GPIO_Init+0x216>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4c      	ldr	r2, [pc, #304]	; (8001124 <HAL_GPIO_Init+0x30c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x212>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <HAL_GPIO_Init+0x310>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x20e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4a      	ldr	r2, [pc, #296]	; (800112c <HAL_GPIO_Init+0x314>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x20a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a49      	ldr	r2, [pc, #292]	; (8001130 <HAL_GPIO_Init+0x318>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x206>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a48      	ldr	r2, [pc, #288]	; (8001134 <HAL_GPIO_Init+0x31c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x202>
 8001016:	2306      	movs	r3, #6
 8001018:	e00c      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800101a:	2307      	movs	r3, #7
 800101c:	e00a      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800101e:	2305      	movs	r3, #5
 8001020:	e008      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 8001022:	2304      	movs	r3, #4
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 8001026:	2303      	movs	r3, #3
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 8001032:	2300      	movs	r3, #0
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001044:	4934      	ldr	r1, [pc, #208]	; (8001118 <HAL_GPIO_Init+0x300>)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <HAL_GPIO_Init+0x320>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001076:	4a30      	ldr	r2, [pc, #192]	; (8001138 <HAL_GPIO_Init+0x320>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <HAL_GPIO_Init+0x320>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a0:	4a25      	ldr	r2, [pc, #148]	; (8001138 <HAL_GPIO_Init+0x320>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <HAL_GPIO_Init+0x320>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_GPIO_Init+0x320>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_GPIO_Init+0x320>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f4:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_GPIO_Init+0x320>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	f67f ae96 	bls.w	8000e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001108:	bf00      	nop
 800110a:	3724      	adds	r7, #36	; 0x24
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40021400 	.word	0x40021400
 8001134:	40021800 	.word	0x40021800
 8001138:	40013c00 	.word	0x40013c00

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_PWREx_EnableOverDrive+0x90>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <HAL_PWREx_EnableOverDrive+0x90>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_PWREx_EnableOverDrive+0x90>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_PWREx_EnableOverDrive+0x94>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800119c:	f7ff fd28 	bl	8000bf0 <HAL_GetTick>
 80011a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011a2:	e009      	b.n	80011b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011a4:	f7ff fd24 	bl	8000bf0 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b2:	d901      	bls.n	80011b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e01f      	b.n	80011f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_PWREx_EnableOverDrive+0x98>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d1ee      	bne.n	80011a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_PWREx_EnableOverDrive+0x9c>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011cc:	f7ff fd10 	bl	8000bf0 <HAL_GetTick>
 80011d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011d2:	e009      	b.n	80011e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011d4:	f7ff fd0c 	bl	8000bf0 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011e2:	d901      	bls.n	80011e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e007      	b.n	80011f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <HAL_PWREx_EnableOverDrive+0x98>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011f4:	d1ee      	bne.n	80011d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	420e0040 	.word	0x420e0040
 8001208:	40007000 	.word	0x40007000
 800120c:	420e0044 	.word	0x420e0044

08001210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0ca      	b.n	80013ba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001224:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d90c      	bls.n	800124c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b64      	ldr	r3, [pc, #400]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0b6      	b.n	80013ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d020      	beq.n	800129a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001264:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4a57      	ldr	r2, [pc, #348]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 800126a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800126e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800127c:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	4a51      	ldr	r2, [pc, #324]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001288:	4b4f      	ldr	r3, [pc, #316]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	494c      	ldr	r1, [pc, #304]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001296:	4313      	orrs	r3, r2
 8001298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d044      	beq.n	8001330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d107      	bne.n	80012be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b46      	ldr	r3, [pc, #280]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d119      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e07d      	b.n	80013ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d003      	beq.n	80012ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d107      	bne.n	80012de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ce:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e06d      	b.n	80013ba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e065      	b.n	80013ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ee:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f023 0203 	bic.w	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4933      	ldr	r1, [pc, #204]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001300:	f7ff fc76 	bl	8000bf0 <HAL_GetTick>
 8001304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001306:	e00a      	b.n	800131e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001308:	f7ff fc72 	bl	8000bf0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f241 3288 	movw	r2, #5000	; 0x1388
 8001316:	4293      	cmp	r3, r2
 8001318:	d901      	bls.n	800131e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e04d      	b.n	80013ba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 020c 	and.w	r2, r3, #12
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	429a      	cmp	r2, r3
 800132e:	d1eb      	bne.n	8001308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d20c      	bcs.n	8001358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e030      	b.n	80013ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4915      	ldr	r1, [pc, #84]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	490d      	ldr	r1, [pc, #52]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001396:	f000 f81d 	bl	80013d4 <HAL_RCC_GetSysClockFreq>
 800139a:	4601      	mov	r1, r0
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
 80013aa:	fa21 f303 	lsr.w	r3, r1, r3
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fbd8 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00
 80013c8:	40023800 	.word	0x40023800
 80013cc:	08003540 	.word	0x08003540
 80013d0:	20000000 	.word	0x20000000

080013d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ee:	4bc6      	ldr	r3, [pc, #792]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	f200 817e 	bhi.w	80016f8 <HAL_RCC_GetSysClockFreq+0x324>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <HAL_RCC_GetSysClockFreq+0x30>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001439 	.word	0x08001439
 8001408:	080016f9 	.word	0x080016f9
 800140c:	080016f9 	.word	0x080016f9
 8001410:	080016f9 	.word	0x080016f9
 8001414:	0800143f 	.word	0x0800143f
 8001418:	080016f9 	.word	0x080016f9
 800141c:	080016f9 	.word	0x080016f9
 8001420:	080016f9 	.word	0x080016f9
 8001424:	08001445 	.word	0x08001445
 8001428:	080016f9 	.word	0x080016f9
 800142c:	080016f9 	.word	0x080016f9
 8001430:	080016f9 	.word	0x080016f9
 8001434:	080015a1 	.word	0x080015a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001438:	4bb4      	ldr	r3, [pc, #720]	; (800170c <HAL_RCC_GetSysClockFreq+0x338>)
 800143a:	613b      	str	r3, [r7, #16]
       break;
 800143c:	e15f      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800143e:	4bb4      	ldr	r3, [pc, #720]	; (8001710 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001440:	613b      	str	r3, [r7, #16]
      break;
 8001442:	e15c      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001444:	4bb0      	ldr	r3, [pc, #704]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800144c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800144e:	4bae      	ldr	r3, [pc, #696]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d04a      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145a:	4bab      	ldr	r3, [pc, #684]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	099b      	lsrs	r3, r3, #6
 8001460:	f04f 0400 	mov.w	r4, #0
 8001464:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	ea03 0501 	and.w	r5, r3, r1
 8001470:	ea04 0602 	and.w	r6, r4, r2
 8001474:	4629      	mov	r1, r5
 8001476:	4632      	mov	r2, r6
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	f04f 0400 	mov.w	r4, #0
 8001480:	0154      	lsls	r4, r2, #5
 8001482:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001486:	014b      	lsls	r3, r1, #5
 8001488:	4619      	mov	r1, r3
 800148a:	4622      	mov	r2, r4
 800148c:	1b49      	subs	r1, r1, r5
 800148e:	eb62 0206 	sbc.w	r2, r2, r6
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	f04f 0400 	mov.w	r4, #0
 800149a:	0194      	lsls	r4, r2, #6
 800149c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014a0:	018b      	lsls	r3, r1, #6
 80014a2:	1a5b      	subs	r3, r3, r1
 80014a4:	eb64 0402 	sbc.w	r4, r4, r2
 80014a8:	f04f 0100 	mov.w	r1, #0
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	00e2      	lsls	r2, r4, #3
 80014b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014b6:	00d9      	lsls	r1, r3, #3
 80014b8:	460b      	mov	r3, r1
 80014ba:	4614      	mov	r4, r2
 80014bc:	195b      	adds	r3, r3, r5
 80014be:	eb44 0406 	adc.w	r4, r4, r6
 80014c2:	f04f 0100 	mov.w	r1, #0
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	0262      	lsls	r2, r4, #9
 80014cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014d0:	0259      	lsls	r1, r3, #9
 80014d2:	460b      	mov	r3, r1
 80014d4:	4614      	mov	r4, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	4621      	mov	r1, r4
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f04f 0400 	mov.w	r4, #0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4623      	mov	r3, r4
 80014e4:	f7fe fee4 	bl	80002b0 <__aeabi_uldivmod>
 80014e8:	4603      	mov	r3, r0
 80014ea:	460c      	mov	r4, r1
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e049      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f0:	4b85      	ldr	r3, [pc, #532]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	f04f 0400 	mov.w	r4, #0
 80014fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	ea03 0501 	and.w	r5, r3, r1
 8001506:	ea04 0602 	and.w	r6, r4, r2
 800150a:	4629      	mov	r1, r5
 800150c:	4632      	mov	r2, r6
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	f04f 0400 	mov.w	r4, #0
 8001516:	0154      	lsls	r4, r2, #5
 8001518:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800151c:	014b      	lsls	r3, r1, #5
 800151e:	4619      	mov	r1, r3
 8001520:	4622      	mov	r2, r4
 8001522:	1b49      	subs	r1, r1, r5
 8001524:	eb62 0206 	sbc.w	r2, r2, r6
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	f04f 0400 	mov.w	r4, #0
 8001530:	0194      	lsls	r4, r2, #6
 8001532:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001536:	018b      	lsls	r3, r1, #6
 8001538:	1a5b      	subs	r3, r3, r1
 800153a:	eb64 0402 	sbc.w	r4, r4, r2
 800153e:	f04f 0100 	mov.w	r1, #0
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	00e2      	lsls	r2, r4, #3
 8001548:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800154c:	00d9      	lsls	r1, r3, #3
 800154e:	460b      	mov	r3, r1
 8001550:	4614      	mov	r4, r2
 8001552:	195b      	adds	r3, r3, r5
 8001554:	eb44 0406 	adc.w	r4, r4, r6
 8001558:	f04f 0100 	mov.w	r1, #0
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	02a2      	lsls	r2, r4, #10
 8001562:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001566:	0299      	lsls	r1, r3, #10
 8001568:	460b      	mov	r3, r1
 800156a:	4614      	mov	r4, r2
 800156c:	4618      	mov	r0, r3
 800156e:	4621      	mov	r1, r4
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f04f 0400 	mov.w	r4, #0
 8001576:	461a      	mov	r2, r3
 8001578:	4623      	mov	r3, r4
 800157a:	f7fe fe99 	bl	80002b0 <__aeabi_uldivmod>
 800157e:	4603      	mov	r3, r0
 8001580:	460c      	mov	r4, r1
 8001582:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001584:	4b60      	ldr	r3, [pc, #384]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	3301      	adds	r3, #1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	fbb2 f3f3 	udiv	r3, r2, r3
 800159c:	613b      	str	r3, [r7, #16]
      break;
 800159e:	e0ae      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a0:	4b59      	ldr	r3, [pc, #356]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015aa:	4b57      	ldr	r3, [pc, #348]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d04a      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	099b      	lsrs	r3, r3, #6
 80015bc:	f04f 0400 	mov.w	r4, #0
 80015c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	ea03 0501 	and.w	r5, r3, r1
 80015cc:	ea04 0602 	and.w	r6, r4, r2
 80015d0:	4629      	mov	r1, r5
 80015d2:	4632      	mov	r2, r6
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	f04f 0400 	mov.w	r4, #0
 80015dc:	0154      	lsls	r4, r2, #5
 80015de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015e2:	014b      	lsls	r3, r1, #5
 80015e4:	4619      	mov	r1, r3
 80015e6:	4622      	mov	r2, r4
 80015e8:	1b49      	subs	r1, r1, r5
 80015ea:	eb62 0206 	sbc.w	r2, r2, r6
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	f04f 0400 	mov.w	r4, #0
 80015f6:	0194      	lsls	r4, r2, #6
 80015f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015fc:	018b      	lsls	r3, r1, #6
 80015fe:	1a5b      	subs	r3, r3, r1
 8001600:	eb64 0402 	sbc.w	r4, r4, r2
 8001604:	f04f 0100 	mov.w	r1, #0
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	00e2      	lsls	r2, r4, #3
 800160e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001612:	00d9      	lsls	r1, r3, #3
 8001614:	460b      	mov	r3, r1
 8001616:	4614      	mov	r4, r2
 8001618:	195b      	adds	r3, r3, r5
 800161a:	eb44 0406 	adc.w	r4, r4, r6
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	0262      	lsls	r2, r4, #9
 8001628:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800162c:	0259      	lsls	r1, r3, #9
 800162e:	460b      	mov	r3, r1
 8001630:	4614      	mov	r4, r2
 8001632:	4618      	mov	r0, r3
 8001634:	4621      	mov	r1, r4
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f04f 0400 	mov.w	r4, #0
 800163c:	461a      	mov	r2, r3
 800163e:	4623      	mov	r3, r4
 8001640:	f7fe fe36 	bl	80002b0 <__aeabi_uldivmod>
 8001644:	4603      	mov	r3, r0
 8001646:	460c      	mov	r4, r1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e049      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	f04f 0400 	mov.w	r4, #0
 8001656:	f240 11ff 	movw	r1, #511	; 0x1ff
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	ea03 0501 	and.w	r5, r3, r1
 8001662:	ea04 0602 	and.w	r6, r4, r2
 8001666:	4629      	mov	r1, r5
 8001668:	4632      	mov	r2, r6
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	f04f 0400 	mov.w	r4, #0
 8001672:	0154      	lsls	r4, r2, #5
 8001674:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001678:	014b      	lsls	r3, r1, #5
 800167a:	4619      	mov	r1, r3
 800167c:	4622      	mov	r2, r4
 800167e:	1b49      	subs	r1, r1, r5
 8001680:	eb62 0206 	sbc.w	r2, r2, r6
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	f04f 0400 	mov.w	r4, #0
 800168c:	0194      	lsls	r4, r2, #6
 800168e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001692:	018b      	lsls	r3, r1, #6
 8001694:	1a5b      	subs	r3, r3, r1
 8001696:	eb64 0402 	sbc.w	r4, r4, r2
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	00e2      	lsls	r2, r4, #3
 80016a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016a8:	00d9      	lsls	r1, r3, #3
 80016aa:	460b      	mov	r3, r1
 80016ac:	4614      	mov	r4, r2
 80016ae:	195b      	adds	r3, r3, r5
 80016b0:	eb44 0406 	adc.w	r4, r4, r6
 80016b4:	f04f 0100 	mov.w	r1, #0
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	02a2      	lsls	r2, r4, #10
 80016be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016c2:	0299      	lsls	r1, r3, #10
 80016c4:	460b      	mov	r3, r1
 80016c6:	4614      	mov	r4, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	4621      	mov	r1, r4
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f04f 0400 	mov.w	r4, #0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4623      	mov	r3, r4
 80016d6:	f7fe fdeb 	bl	80002b0 <__aeabi_uldivmod>
 80016da:	4603      	mov	r3, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_GetSysClockFreq+0x334>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	0f1b      	lsrs	r3, r3, #28
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f4:	613b      	str	r3, [r7, #16]
      break;
 80016f6:	e002      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <HAL_RCC_GetSysClockFreq+0x338>)
 80016fa:	613b      	str	r3, [r7, #16]
      break;
 80016fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016fe:	693b      	ldr	r3, [r7, #16]
}
 8001700:	4618      	mov	r0, r3
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	00f42400 	.word	0x00f42400
 8001710:	007a1200 	.word	0x007a1200

08001714 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8083 	beq.w	8001834 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800172e:	4b95      	ldr	r3, [pc, #596]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b04      	cmp	r3, #4
 8001738:	d019      	beq.n	800176e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800173a:	4b92      	ldr	r3, [pc, #584]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001742:	2b08      	cmp	r3, #8
 8001744:	d106      	bne.n	8001754 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001746:	4b8f      	ldr	r3, [pc, #572]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001752:	d00c      	beq.n	800176e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001754:	4b8b      	ldr	r3, [pc, #556]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d112      	bne.n	8001786 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001760:	4b88      	ldr	r3, [pc, #544]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800176c:	d10b      	bne.n	8001786 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176e:	4b85      	ldr	r3, [pc, #532]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d05b      	beq.n	8001832 <HAL_RCC_OscConfig+0x11e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d157      	bne.n	8001832 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e216      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x8a>
 8001790:	4b7c      	ldr	r3, [pc, #496]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a7b      	ldr	r2, [pc, #492]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e01d      	b.n	80017da <HAL_RCC_OscConfig+0xc6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a6:	d10c      	bne.n	80017c2 <HAL_RCC_OscConfig+0xae>
 80017a8:	4b76      	ldr	r3, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a75      	ldr	r2, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b73      	ldr	r3, [pc, #460]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a72      	ldr	r2, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e00b      	b.n	80017da <HAL_RCC_OscConfig+0xc6>
 80017c2:	4b70      	ldr	r3, [pc, #448]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6f      	ldr	r2, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b6d      	ldr	r3, [pc, #436]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6c      	ldr	r2, [pc, #432]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d013      	beq.n	800180a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff fa05 	bl	8000bf0 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ea:	f7ff fa01 	bl	8000bf0 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b64      	cmp	r3, #100	; 0x64
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e1db      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fc:	4b61      	ldr	r3, [pc, #388]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0xd6>
 8001808:	e014      	b.n	8001834 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff f9f1 	bl	8000bf0 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001812:	f7ff f9ed 	bl	8000bf0 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b64      	cmp	r3, #100	; 0x64
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1c7      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001824:	4b57      	ldr	r3, [pc, #348]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f0      	bne.n	8001812 <HAL_RCC_OscConfig+0xfe>
 8001830:	e000      	b.n	8001834 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001832:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d06f      	beq.n	8001920 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001840:	4b50      	ldr	r3, [pc, #320]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b00      	cmp	r3, #0
 800184a:	d017      	beq.n	800187c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001854:	2b08      	cmp	r3, #8
 8001856:	d105      	bne.n	8001864 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00b      	beq.n	800187c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001864:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d11c      	bne.n	80018aa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d116      	bne.n	80018aa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187c:	4b41      	ldr	r3, [pc, #260]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_OscConfig+0x180>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e18f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4938      	ldr	r1, [pc, #224]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a8:	e03a      	b.n	8001920 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d020      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b2:	4b35      	ldr	r3, [pc, #212]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff f99a 	bl	8000bf0 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff f996 	bl	8000bf0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e170      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4925      	ldr	r1, [pc, #148]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
 80018f2:	e015      	b.n	8001920 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff f979 	bl	8000bf0 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff f975 	bl	8000bf0 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e14f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d037      	beq.n	800199c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d016      	beq.n	8001962 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_RCC_OscConfig+0x278>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193a:	f7ff f959 	bl	8000bf0 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001942:	f7ff f955 	bl	8000bf0 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e12f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x22e>
 8001960:	e01c      	b.n	800199c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_RCC_OscConfig+0x278>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff f942 	bl	8000bf0 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196e:	e00f      	b.n	8001990 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff f93e 	bl	8000bf0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d908      	bls.n	8001990 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e118      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	42470000 	.word	0x42470000
 800198c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	4b8a      	ldr	r3, [pc, #552]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e9      	bne.n	8001970 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8097 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b83      	ldr	r3, [pc, #524]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b7f      	ldr	r3, [pc, #508]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a7e      	ldr	r2, [pc, #504]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b7c      	ldr	r3, [pc, #496]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a75      	ldr	r2, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f2:	f7ff f8fd 	bl	8000bf0 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fa:	f7ff f8f9 	bl	8000bf0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0d3      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b6c      	ldr	r3, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x31a>
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a65      	ldr	r2, [pc, #404]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	e01c      	b.n	8001a68 <HAL_RCC_OscConfig+0x354>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x33c>
 8001a36:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a60      	ldr	r2, [pc, #384]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
 8001a42:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x354>
 8001a50:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a59      	ldr	r2, [pc, #356]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a56      	ldr	r2, [pc, #344]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a62:	f023 0304 	bic.w	r3, r3, #4
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d015      	beq.n	8001a9c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff f8be 	bl	8000bf0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff f8ba 	bl	8000bf0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e092      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0ee      	beq.n	8001a78 <HAL_RCC_OscConfig+0x364>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f8a8 	bl	8000bf0 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff f8a4 	bl	8000bf0 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e07c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aba:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ee      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a3a      	ldr	r2, [pc, #232]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d068      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae0:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d060      	beq.n	8001bae <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d145      	bne.n	8001b80 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af4:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_RCC_OscConfig+0x4b0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff f879 	bl	8000bf0 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b02:	f7ff f875 	bl	8000bf0 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e04f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b14:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	019b      	lsls	r3, r3, #6
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	041b      	lsls	r3, r3, #16
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	061b      	lsls	r3, r3, #24
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	071b      	lsls	r3, r3, #28
 8001b4c:	491b      	ldr	r1, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <HAL_RCC_OscConfig+0x4b0>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff f84a 	bl	8000bf0 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f846 	bl	8000bf0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e020      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x44c>
 8001b7e:	e018      	b.n	8001bb2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_RCC_OscConfig+0x4b0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff f833 	bl	8000bf0 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f82f 	bl	8000bf0 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e009      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x4a8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x47a>
 8001bac:	e001      	b.n	8001bb2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42470060 	.word	0x42470060

08001bc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e083      	b.n	8001ce4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d106      	bne.n	8001bf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7fe ff27 	bl	8000a44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c0c:	f023 0307 	bic.w	r3, r3, #7
 8001c10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f000 f89d 	bl	8001d5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c4a:	f023 0303 	bic.w	r3, r3, #3
 8001c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c68:	f023 030c 	bic.w	r3, r3, #12
 8001c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	4313      	orrs	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	011a      	lsls	r2, r3, #4
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	031b      	lsls	r3, r3, #12
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ca6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001cae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_TIM_Encoder_Start+0x16>
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d008      	beq.n	8001d12 <HAL_TIM_Encoder_Start+0x26>
 8001d00:	e00f      	b.n	8001d22 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2201      	movs	r2, #1
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f8c6 	bl	8001e9c <TIM_CCxChannelCmd>
      break;
 8001d10:	e016      	b.n	8001d40 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2201      	movs	r2, #1
 8001d18:	2104      	movs	r1, #4
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f8be 	bl	8001e9c <TIM_CCxChannelCmd>
      break;
 8001d20:	e00e      	b.n	8001d40 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2201      	movs	r2, #1
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f8b6 	bl	8001e9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	2104      	movs	r1, #4
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 f8af 	bl	8001e9c <TIM_CCxChannelCmd>
      break;
 8001d3e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a40      	ldr	r2, [pc, #256]	; (8001e70 <TIM_Base_SetConfig+0x114>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d013      	beq.n	8001d9c <TIM_Base_SetConfig+0x40>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7a:	d00f      	beq.n	8001d9c <TIM_Base_SetConfig+0x40>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3d      	ldr	r2, [pc, #244]	; (8001e74 <TIM_Base_SetConfig+0x118>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00b      	beq.n	8001d9c <TIM_Base_SetConfig+0x40>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3c      	ldr	r2, [pc, #240]	; (8001e78 <TIM_Base_SetConfig+0x11c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d007      	beq.n	8001d9c <TIM_Base_SetConfig+0x40>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3b      	ldr	r2, [pc, #236]	; (8001e7c <TIM_Base_SetConfig+0x120>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d003      	beq.n	8001d9c <TIM_Base_SetConfig+0x40>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3a      	ldr	r2, [pc, #232]	; (8001e80 <TIM_Base_SetConfig+0x124>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d108      	bne.n	8001dae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a2f      	ldr	r2, [pc, #188]	; (8001e70 <TIM_Base_SetConfig+0x114>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02b      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbc:	d027      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a2c      	ldr	r2, [pc, #176]	; (8001e74 <TIM_Base_SetConfig+0x118>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d023      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a2b      	ldr	r2, [pc, #172]	; (8001e78 <TIM_Base_SetConfig+0x11c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01f      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a2a      	ldr	r2, [pc, #168]	; (8001e7c <TIM_Base_SetConfig+0x120>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01b      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a29      	ldr	r2, [pc, #164]	; (8001e80 <TIM_Base_SetConfig+0x124>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d017      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <TIM_Base_SetConfig+0x128>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a27      	ldr	r2, [pc, #156]	; (8001e88 <TIM_Base_SetConfig+0x12c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00f      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <TIM_Base_SetConfig+0x130>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00b      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <TIM_Base_SetConfig+0x134>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <TIM_Base_SetConfig+0x138>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d003      	beq.n	8001e0e <TIM_Base_SetConfig+0xb2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <TIM_Base_SetConfig+0x13c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d108      	bne.n	8001e20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <TIM_Base_SetConfig+0x114>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d003      	beq.n	8001e54 <TIM_Base_SetConfig+0xf8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <TIM_Base_SetConfig+0x124>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d103      	bne.n	8001e5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	615a      	str	r2, [r3, #20]
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40000800 	.word	0x40000800
 8001e7c:	40000c00 	.word	0x40000c00
 8001e80:	40010400 	.word	0x40010400
 8001e84:	40014000 	.word	0x40014000
 8001e88:	40014400 	.word	0x40014400
 8001e8c:	40014800 	.word	0x40014800
 8001e90:	40001800 	.word	0x40001800
 8001e94:	40001c00 	.word	0x40001c00
 8001e98:	40002000 	.word	0x40002000

08001e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2201      	movs	r2, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a1a      	ldr	r2, [r3, #32]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a1a      	ldr	r2, [r3, #32]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	621a      	str	r2, [r3, #32]
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e032      	b.n	8001f64 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f36:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <delay>:
 *
 * \param t		Number of "nop" cycles
 *
 * \return void
 */		
inline void delay(uint32_t t) {
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	for (; t; t--) __asm("nop");
 8001f78:	e003      	b.n	8001f82 <delay+0x12>
 8001f7a:	bf00      	nop
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f8      	bne.n	8001f7a <delay+0xa>
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <GPIO_Init>:
 *
 * \param
 *
 * \return void
 */
void GPIO_Init(uint32_t mode) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d003      	beq.n	8001faa <GPIO_Init+0x16>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 8081 	bne.w	80020ac <GPIO_Init+0x118>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <GPIO_Init+0x120>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a40      	ldr	r2, [pc, #256]	; (80020b4 <GPIO_Init+0x120>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <GPIO_Init+0x120>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <GPIO_Init+0x120>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a39      	ldr	r2, [pc, #228]	; (80020b4 <GPIO_Init+0x120>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <GPIO_Init+0x120>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <GPIO_Init+0x120>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a32      	ldr	r2, [pc, #200]	; (80020b4 <GPIO_Init+0x120>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <GPIO_Init+0x120>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8001ffe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002002:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4828      	ldr	r0, [pc, #160]	; (80020b8 <GPIO_Init+0x124>)
 8002018:	f7fe fefe 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 800201c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8002020:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	4821      	ldr	r0, [pc, #132]	; (80020bc <GPIO_Init+0x128>)
 8002036:	f7fe feef 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	481b      	ldr	r0, [pc, #108]	; (80020c0 <GPIO_Init+0x12c>)
 8002052:	f7fe fee1 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 8002056:	2313      	movs	r3, #19
 8002058:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	2301      	movs	r3, #1
 800205c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4812      	ldr	r0, [pc, #72]	; (80020b8 <GPIO_Init+0x124>)
 800206e:	f7fe fed3 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002072:	2301      	movs	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	480c      	ldr	r0, [pc, #48]	; (80020bc <GPIO_Init+0x128>)
 800208a:	f7fe fec5 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800208e:	2302      	movs	r3, #2
 8002090:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002092:	2301      	movs	r3, #1
 8002094:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	4806      	ldr	r0, [pc, #24]	; (80020c0 <GPIO_Init+0x12c>)
 80020a6:	f7fe feb7 	bl	8000e18 <HAL_GPIO_Init>
 80020aa:	e000      	b.n	80020ae <GPIO_Init+0x11a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 80020ac:	bf00      	nop
}
 80020ae:	3728      	adds	r7, #40	; 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40020800 	.word	0x40020800

080020c4 <LCD_Write8>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline void LCD_Write8(uint8_t data) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <LCD_Write8+0xa4>)
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d6:	4013      	ands	r3, r2
 80020d8:	79fa      	ldrb	r2, [r7, #7]
 80020da:	0252      	lsls	r2, r2, #9
 80020dc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80020e0:	431a      	orrs	r2, r3
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ea:	431a      	orrs	r2, r3
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	491c      	ldr	r1, [pc, #112]	; (8002168 <LCD_Write8+0xa4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <LCD_Write8+0xa8>)
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8002102:	4013      	ands	r3, r2
 8002104:	79fa      	ldrb	r2, [r7, #7]
 8002106:	f002 0208 	and.w	r2, r2, #8
 800210a:	431a      	orrs	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	431a      	orrs	r2, r3
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	105b      	asrs	r3, r3, #1
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	431a      	orrs	r2, r3
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002128:	4910      	ldr	r1, [pc, #64]	; (800216c <LCD_Write8+0xa8>)
 800212a:	4313      	orrs	r3, r2
 800212c:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <LCD_Write8+0xac>)
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8002136:	4013      	ands	r3, r2
 8002138:	79fa      	ldrb	r2, [r7, #7]
 800213a:	0192      	lsls	r2, r2, #6
 800213c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002140:	490b      	ldr	r1, [pc, #44]	; (8002170 <LCD_Write8+0xac>)
 8002142:	4313      	orrs	r3, r2
 8002144:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <LCD_Write8+0xa4>)
 8002148:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800214c:	619a      	str	r2, [r3, #24]
 800214e:	2002      	movs	r0, #2
 8002150:	f7ff ff0e 	bl	8001f70 <delay>
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <LCD_Write8+0xa4>)
 8002156:	2202      	movs	r2, #2
 8002158:	619a      	str	r2, [r3, #24]
 800215a:	2002      	movs	r0, #2
 800215c:	f7ff ff08 	bl	8001f70 <delay>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40020000 	.word	0x40020000
 800216c:	40020400 	.word	0x40020400
 8002170:	40020800 	.word	0x40020800

08002174 <LCD_Write16Register8>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register8(uint8_t a, uint16_t d) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	460a      	mov	r2, r1
 800217e:	71fb      	strb	r3, [r7, #7]
 8002180:	4613      	mov	r3, r2
 8002182:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <LCD_Write16Register8+0x48>)
 8002186:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800218a:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff98 	bl	80020c4 <LCD_Write8>
	LCD_CD_DATA();
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <LCD_Write16Register8+0x48>)
 8002196:	2210      	movs	r2, #16
 8002198:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 800219a:	88bb      	ldrh	r3, [r7, #4]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	b29b      	uxth	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff8e 	bl	80020c4 <LCD_Write8>
	LCD_Write8(d);
 80021a8:	88bb      	ldrh	r3, [r7, #4]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff89 	bl	80020c4 <LCD_Write8>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40020000 	.word	0x40020000

080021c0 <LCD_Write24Register8>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write24Register8(uint8_t a, uint32_t d) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	71fb      	strb	r3, [r7, #7]
	LCD_CD_COMMAND();
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <LCD_Write24Register8+0x4c>)
 80021ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021d2:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff74 	bl	80020c4 <LCD_Write8>
	LCD_CD_DATA();
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <LCD_Write24Register8+0x4c>)
 80021de:	2210      	movs	r2, #16
 80021e0:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 16);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff6b 	bl	80020c4 <LCD_Write8>
	LCD_Write8(d >> 8);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff65 	bl	80020c4 <LCD_Write8>
	LCD_Write8(d);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff60 	bl	80020c4 <LCD_Write8>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40020000 	.word	0x40020000

08002210 <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8002216:	4b3c      	ldr	r3, [pc, #240]	; (8002308 <LCD_Init+0xf8>)
 8002218:	22f0      	movs	r2, #240	; 0xf0
 800221a:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <LCD_Init+0xfc>)
 800221e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002222:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8002224:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <LCD_Init+0x100>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 800222a:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <LCD_Init+0x104>)
 800222c:	2200      	movs	r2, #0
 800222e:	801a      	strh	r2, [r3, #0]
 8002230:	4b38      	ldr	r3, [pc, #224]	; (8002314 <LCD_Init+0x104>)
 8002232:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <LCD_Init+0x108>)
 8002238:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <LCD_Init+0x10c>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8002240:	4b37      	ldr	r3, [pc, #220]	; (8002320 <LCD_Init+0x110>)
 8002242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002246:	801a      	strh	r2, [r3, #0]
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <LCD_Init+0x110>)
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	4b35      	ldr	r3, [pc, #212]	; (8002324 <LCD_Init+0x114>)
 800224e:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <LCD_Init+0x118>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]

	GPIO_Init(GPIO_MODE_OUTPUT_PP);
 8002256:	2001      	movs	r0, #1
 8002258:	f7ff fe9c 	bl	8001f94 <GPIO_Init>

	LCD_Reset();
 800225c:	f000 f982 	bl	8002564 <LCD_Reset>
	HAL_Delay(50);
 8002260:	2032      	movs	r0, #50	; 0x32
 8002262:	f7fe fcd1 	bl	8000c08 <HAL_Delay>

	LCD_CS_ACTIVE();
 8002266:	4b31      	ldr	r3, [pc, #196]	; (800232c <LCD_Init+0x11c>)
 8002268:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800226c:	619a      	str	r2, [r3, #24]
		}
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#elif defined(SSD1297)
	uint8_t i = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;
	while (i < sizeof(SSD1297_regValues) / sizeof(SSD1297_regValues[0])) {
 8002272:	e01e      	b.n	80022b2 <LCD_Init+0xa2>
		a = SSD1297_regValues[i++];
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	71fa      	strb	r2, [r7, #7]
 800227a:	461a      	mov	r2, r3
 800227c:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <LCD_Init+0x120>)
 800227e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002282:	80bb      	strh	r3, [r7, #4]
		d = SSD1297_regValues[i++];
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	71fa      	strb	r2, [r7, #7]
 800228a:	461a      	mov	r2, r3
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <LCD_Init+0x120>)
 800228e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002292:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8002294:	88bb      	ldrh	r3, [r7, #4]
 8002296:	2bff      	cmp	r3, #255	; 0xff
 8002298:	d104      	bne.n	80022a4 <LCD_Init+0x94>
			HAL_Delay(d);
 800229a:	887b      	ldrh	r3, [r7, #2]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fcb3 	bl	8000c08 <HAL_Delay>
 80022a2:	e006      	b.n	80022b2 <LCD_Init+0xa2>
		} else {
			LCD_Write16Register8(a, d);
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	887a      	ldrh	r2, [r7, #2]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff61 	bl	8002174 <LCD_Write16Register8>
	while (i < sizeof(SSD1297_regValues) / sizeof(SSD1297_regValues[0])) {
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	2b3b      	cmp	r3, #59	; 0x3b
 80022b6:	d9dd      	bls.n	8002274 <LCD_Init+0x64>
		}
	}
	LCD_SetRotation(m_rotation);
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <LCD_Init+0x100>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fa01 	bl	80026c4 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <LCD_Init+0xf8>)
 80022c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <LCD_Init+0xfc>)
 80022d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2100      	movs	r1, #0
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 f98b 	bl	80025f8 <LCD_SetAddrWindow>
#endif

	LCD_CS_IDLE();
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <LCD_Init+0x11c>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f000 f8f9 	bl	80024e0 <LCD_FillScreen>
	LCD_SetTextSize(0);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f000 fc18 	bl	8002b24 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 80022f4:	2100      	movs	r1, #0
 80022f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80022fa:	f000 fc2d 	bl	8002b58 <LCD_SetTextColor>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000009c 	.word	0x2000009c
 800230c:	2000009e 	.word	0x2000009e
 8002310:	200000a9 	.word	0x200000a9
 8002314:	200000a0 	.word	0x200000a0
 8002318:	200000a2 	.word	0x200000a2
 800231c:	200000a8 	.word	0x200000a8
 8002320:	200000a6 	.word	0x200000a6
 8002324:	200000a4 	.word	0x200000a4
 8002328:	200000aa 	.word	0x200000aa
 800232c:	40020400 	.word	0x40020400
 8002330:	080039c4 	.word	0x080039c4

08002334 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]
 800233e:	460b      	mov	r3, r1
 8002340:	80bb      	strh	r3, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8002346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db3d      	blt.n	80023ca <LCD_DrawPixel+0x96>
 800234e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db39      	blt.n	80023ca <LCD_DrawPixel+0x96>
 8002356:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <LCD_DrawPixel+0xa0>)
 8002358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002360:	429a      	cmp	r2, r3
 8002362:	da32      	bge.n	80023ca <LCD_DrawPixel+0x96>
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <LCD_DrawPixel+0xa4>)
 8002366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800236a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	da2b      	bge.n	80023ca <LCD_DrawPixel+0x96>

	LCD_CS_ACTIVE();
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <LCD_DrawPixel+0xa8>)
 8002374:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002378:	619a      	str	r2, [r3, #24]
#elif defined(HX8357D)
	LCD_SetAddrWindow(x, y, m_width - 1, m_height - 1);
	LCD_CS_ACTIVE();
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	if(m_rotation & 1) {
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <LCD_DrawPixel+0xac>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <LCD_DrawPixel+0x68>
		LCD_Write16Register8(SSD1297_SETXCOUNTER, y); //GRAM Address Set
 8002386:	88bb      	ldrh	r3, [r7, #4]
 8002388:	4619      	mov	r1, r3
 800238a:	204e      	movs	r0, #78	; 0x4e
 800238c:	f7ff fef2 	bl	8002174 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, x);
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	4619      	mov	r1, r3
 8002394:	204f      	movs	r0, #79	; 0x4f
 8002396:	f7ff feed 	bl	8002174 <LCD_Write16Register8>
 800239a:	e009      	b.n	80023b0 <LCD_DrawPixel+0x7c>
	} else {
		LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	4619      	mov	r1, r3
 80023a0:	204e      	movs	r0, #78	; 0x4e
 80023a2:	f7ff fee7 	bl	8002174 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
 80023a6:	88bb      	ldrh	r3, [r7, #4]
 80023a8:	4619      	mov	r1, r3
 80023aa:	204f      	movs	r0, #79	; 0x4f
 80023ac:	f7ff fee2 	bl	8002174 <LCD_Write16Register8>
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fbe8 	bl	8002b88 <LCD_Color565_to_888>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4619      	mov	r1, r3
 80023bc:	2022      	movs	r0, #34	; 0x22
 80023be:	f7ff feff 	bl	80021c0 <LCD_Write24Register8>
#endif

	LCD_CS_IDLE();
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <LCD_DrawPixel+0xa8>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	619a      	str	r2, [r3, #24]
 80023c8:	e000      	b.n	80023cc <LCD_DrawPixel+0x98>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 80023ca:	bf00      	nop
}
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000009c 	.word	0x2000009c
 80023d8:	2000009e 	.word	0x2000009e
 80023dc:	40020400 	.word	0x40020400
 80023e0:	200000a9 	.word	0x200000a9

080023e4 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	80fb      	strh	r3, [r7, #6]
#if defined(SSD1297)
	uint8_t red = LCD_Color565_to_R(color);
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fbe0 	bl	8002bb8 <LCD_Color565_to_R>
 80023f8:	4603      	mov	r3, r0
 80023fa:	73fb      	strb	r3, [r7, #15]
	uint8_t green = LCD_Color565_to_G(color);
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fbeb 	bl	8002bda <LCD_Color565_to_G>
 8002404:	4603      	mov	r3, r0
 8002406:	73bb      	strb	r3, [r7, #14]
	uint8_t blue = LCD_Color565_to_B(color);
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fbf6 	bl	8002bfc <LCD_Color565_to_B>
 8002410:	4603      	mov	r3, r0
 8002412:	737b      	strb	r3, [r7, #13]
#else
	uint8_t hi = color >> 8, lo = color;
#endif

	LCD_CS_ACTIVE();
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <LCD_Flood+0xf4>)
 8002416:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800241a:	619a      	str	r2, [r3, #24]
#elif defined(HX8347D) || defined(HX8347G)
	LCD_Write16Register8(HX8347G_SRAM_WR, color);
#elif defined(HX8357D)
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fbb2 	bl	8002b88 <LCD_Color565_to_888>
 8002424:	4603      	mov	r3, r0
 8002426:	4619      	mov	r1, r3
 8002428:	2022      	movs	r0, #34	; 0x22
 800242a:	f7ff fec9 	bl	80021c0 <LCD_Write24Register8>
#endif
	len--;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	3b01      	subs	r3, #1
 8002432:	603b      	str	r3, [r7, #0]
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	7bbb      	ldrb	r3, [r7, #14]
 8002438:	429a      	cmp	r2, r3
 800243a:	d141      	bne.n	80024c0 <LCD_Flood+0xdc>
 800243c:	7bba      	ldrb	r2, [r7, #14]
 800243e:	7b7b      	ldrb	r3, [r7, #13]
 8002440:	429a      	cmp	r2, r3
 8002442:	d13d      	bne.n	80024c0 <LCD_Flood+0xdc>
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	7b7b      	ldrb	r3, [r7, #13]
 8002448:	429a      	cmp	r2, r3
 800244a:	d139      	bne.n	80024c0 <LCD_Flood+0xdc>
#else
	if (hi == lo) {
#endif
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (len--) {
 800244c:	e026      	b.n	800249c <LCD_Flood+0xb8>
#if defined(SSD1297)
			LCD_WR_STROBE();
 800244e:	4b23      	ldr	r3, [pc, #140]	; (80024dc <LCD_Flood+0xf8>)
 8002450:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002454:	619a      	str	r2, [r3, #24]
 8002456:	2002      	movs	r0, #2
 8002458:	f7ff fd8a 	bl	8001f70 <delay>
 800245c:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <LCD_Flood+0xf8>)
 800245e:	2202      	movs	r2, #2
 8002460:	619a      	str	r2, [r3, #24]
 8002462:	2002      	movs	r0, #2
 8002464:	f7ff fd84 	bl	8001f70 <delay>
#endif
			LCD_WR_STROBE();
 8002468:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <LCD_Flood+0xf8>)
 800246a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246e:	619a      	str	r2, [r3, #24]
 8002470:	2002      	movs	r0, #2
 8002472:	f7ff fd7d 	bl	8001f70 <delay>
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <LCD_Flood+0xf8>)
 8002478:	2202      	movs	r2, #2
 800247a:	619a      	str	r2, [r3, #24]
 800247c:	2002      	movs	r0, #2
 800247e:	f7ff fd77 	bl	8001f70 <delay>
			LCD_WR_STROBE();
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <LCD_Flood+0xf8>)
 8002484:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002488:	619a      	str	r2, [r3, #24]
 800248a:	2002      	movs	r0, #2
 800248c:	f7ff fd70 	bl	8001f70 <delay>
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <LCD_Flood+0xf8>)
 8002492:	2202      	movs	r2, #2
 8002494:	619a      	str	r2, [r3, #24]
 8002496:	2002      	movs	r0, #2
 8002498:	f7ff fd6a 	bl	8001f70 <delay>
		while (len--) {
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	1e5a      	subs	r2, r3, #1
 80024a0:	603a      	str	r2, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1d3      	bne.n	800244e <LCD_Flood+0x6a>
	if ((red == green) && (green == blue) && (red == blue)) {
 80024a6:	e010      	b.n	80024ca <LCD_Flood+0xe6>
		}
	} else {
		while (len--) {
#if defined(SSD1297)
			LCD_Write8(red);
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fe0a 	bl	80020c4 <LCD_Write8>
			LCD_Write8(green);
 80024b0:	7bbb      	ldrb	r3, [r7, #14]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fe06 	bl	80020c4 <LCD_Write8>
			LCD_Write8(blue);
 80024b8:	7b7b      	ldrb	r3, [r7, #13]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fe02 	bl	80020c4 <LCD_Write8>
		while (len--) {
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	603a      	str	r2, [r7, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1ee      	bne.n	80024a8 <LCD_Flood+0xc4>
			LCD_Write8(lo);
#endif
		}
	}

	LCD_CS_IDLE();
 80024ca:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <LCD_Flood+0xf4>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	619a      	str	r2, [r3, #24]
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020000 	.word	0x40020000

080024e0 <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <LCD_FillScreen+0x7c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d00d      	beq.n	800250e <LCD_FillScreen+0x2e>
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d011      	beq.n	800251a <LCD_FillScreen+0x3a>
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d004      	beq.n	8002504 <LCD_FillScreen+0x24>
	default:
		x = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	81fb      	strh	r3, [r7, #14]
		y = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	81bb      	strh	r3, [r7, #12]
		break;
 8002502:	e010      	b.n	8002526 <LCD_FillScreen+0x46>
	case 1:
		x = TFTWIDTH - 1;
 8002504:	23ef      	movs	r3, #239	; 0xef
 8002506:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	81bb      	strh	r3, [r7, #12]
		break;
 800250c:	e00b      	b.n	8002526 <LCD_FillScreen+0x46>
	case 2:
		x = TFTWIDTH - 1;
 800250e:	23ef      	movs	r3, #239	; 0xef
 8002510:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8002512:	f240 133f 	movw	r3, #319	; 0x13f
 8002516:	81bb      	strh	r3, [r7, #12]
		break;
 8002518:	e005      	b.n	8002526 <LCD_FillScreen+0x46>
	case 3:
		x = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 800251e:	f240 133f 	movw	r3, #319	; 0x13f
 8002522:	81bb      	strh	r3, [r7, #12]
		break;
 8002524:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <LCD_FillScreen+0x80>)
 8002528:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800252c:	619a      	str	r2, [r3, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	4619      	mov	r1, r3
 8002532:	204e      	movs	r0, #78	; 0x4e
 8002534:	f7ff fe1e 	bl	8002174 <LCD_Write16Register8>
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
 8002538:	89bb      	ldrh	r3, [r7, #12]
 800253a:	4619      	mov	r1, r3
 800253c:	204f      	movs	r0, #79	; 0x4f
 800253e:	f7ff fe19 	bl	8002174 <LCD_Write16Register8>
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
#endif
	LCD_CS_IDLE();
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <LCD_FillScreen+0x80>)
 8002544:	2201      	movs	r2, #1
 8002546:	619a      	str	r2, [r3, #24]
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff48 	bl	80023e4 <LCD_Flood>
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200000a9 	.word	0x200000a9
 8002560:	40020400 	.word	0x40020400

08002564 <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <LCD_Reset+0x88>)
 800256c:	2201      	movs	r2, #1
 800256e:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <LCD_Reset+0x8c>)
 8002572:	2210      	movs	r2, #16
 8002574:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <LCD_Reset+0x8c>)
 8002578:	2202      	movs	r2, #2
 800257a:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <LCD_Reset+0x8c>)
 800257e:	2201      	movs	r2, #1
 8002580:	619a      	str	r2, [r3, #24]

	LCD_RST_ACTIVE();
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <LCD_Reset+0x90>)
 8002584:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002588:	619a      	str	r2, [r3, #24]
	HAL_Delay(2);
 800258a:	2002      	movs	r0, #2
 800258c:	f7fe fb3c 	bl	8000c08 <HAL_Delay>
	LCD_RST_IDLE();
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <LCD_Reset+0x90>)
 8002592:	2202      	movs	r2, #2
 8002594:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 8002596:	2078      	movs	r0, #120	; 0x78
 8002598:	f7fe fb36 	bl	8000c08 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <LCD_Reset+0x88>)
 800259e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025a2:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <LCD_Reset+0x8c>)
 80025a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025aa:	619a      	str	r2, [r3, #24]
	LCD_Write8(0x00);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7ff fd89 	bl	80020c4 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) LCD_WR_STROBE(); // Three extra 0x00s
 80025b2:	2300      	movs	r3, #0
 80025b4:	71fb      	strb	r3, [r7, #7]
 80025b6:	e00f      	b.n	80025d8 <LCD_Reset+0x74>
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <LCD_Reset+0x8c>)
 80025ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025be:	619a      	str	r2, [r3, #24]
 80025c0:	2002      	movs	r0, #2
 80025c2:	f7ff fcd5 	bl	8001f70 <delay>
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <LCD_Reset+0x8c>)
 80025c8:	2202      	movs	r2, #2
 80025ca:	619a      	str	r2, [r3, #24]
 80025cc:	2002      	movs	r0, #2
 80025ce:	f7ff fccf 	bl	8001f70 <delay>
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	3301      	adds	r3, #1
 80025d6:	71fb      	strb	r3, [r7, #7]
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d9ec      	bls.n	80025b8 <LCD_Reset+0x54>
	LCD_CS_IDLE();
 80025de:	4b03      	ldr	r3, [pc, #12]	; (80025ec <LCD_Reset+0x88>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	619a      	str	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020000 	.word	0x40020000
 80025f4:	40020800 	.word	0x40020800

080025f8 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4604      	mov	r4, r0
 8002600:	4608      	mov	r0, r1
 8002602:	4611      	mov	r1, r2
 8002604:	461a      	mov	r2, r3
 8002606:	4623      	mov	r3, r4
 8002608:	80fb      	strh	r3, [r7, #6]
 800260a:	4603      	mov	r3, r0
 800260c:	80bb      	strh	r3, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	807b      	strh	r3, [r7, #2]
 8002612:	4613      	mov	r3, r2
 8002614:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <LCD_SetAddrWindow+0xc4>)
 8002618:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800261c:	619a      	str	r2, [r3, #24]
    LCD_Write16RegisterPair8(HX8347G_ROWADDREND_HI, HX8347G_ROWADDREND_LO, y2);
#elif defined(HX8357D)
	LCD_Write32Register8(HX8357_CASET, x1 << 16 | x2);
	LCD_Write32Register8(HX8357_PASET, y1 << 16 | y2);
#elif defined(SSD1297)
	if(m_rotation & 1) {
 800261e:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <LCD_SetAddrWindow+0xc8>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d020      	beq.n	800266c <LCD_SetAddrWindow+0x74>
		LCD_Write16Register8(SSD1297_SETXCOUNTER, y1); //GRAM Address Set
 800262a:	88bb      	ldrh	r3, [r7, #4]
 800262c:	4619      	mov	r1, r3
 800262e:	204e      	movs	r0, #78	; 0x4e
 8002630:	f7ff fda0 	bl	8002174 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, x1);
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	4619      	mov	r1, r3
 8002638:	204f      	movs	r0, #79	; 0x4f
 800263a:	f7ff fd9b 	bl	8002174 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETXADDR, y2 << 8 | y1); //HorizontalStartAddress and HorizontalEndAddress
 800263e:	883b      	ldrh	r3, [r7, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	b21a      	sxth	r2, r3
 8002644:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002648:	4313      	orrs	r3, r2
 800264a:	b21b      	sxth	r3, r3
 800264c:	b29b      	uxth	r3, r3
 800264e:	4619      	mov	r1, r3
 8002650:	2044      	movs	r0, #68	; 0x44
 8002652:	f7ff fd8f 	bl	8002174 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYADDR_START, x1); //VerticalStartAddress
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	4619      	mov	r1, r3
 800265a:	2045      	movs	r0, #69	; 0x45
 800265c:	f7ff fd8a 	bl	8002174 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYADDR_END, x2); //VerticalEndAddress
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	4619      	mov	r1, r3
 8002664:	2046      	movs	r0, #70	; 0x46
 8002666:	f7ff fd85 	bl	8002174 <LCD_Write16Register8>
 800266a:	e01f      	b.n	80026ac <LCD_SetAddrWindow+0xb4>
	} else {
		LCD_Write16Register8(SSD1297_SETXCOUNTER, x1); //GRAM Address Set
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	4619      	mov	r1, r3
 8002670:	204e      	movs	r0, #78	; 0x4e
 8002672:	f7ff fd7f 	bl	8002174 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y1);
 8002676:	88bb      	ldrh	r3, [r7, #4]
 8002678:	4619      	mov	r1, r3
 800267a:	204f      	movs	r0, #79	; 0x4f
 800267c:	f7ff fd7a 	bl	8002174 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
 8002680:	887b      	ldrh	r3, [r7, #2]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	b21a      	sxth	r2, r3
 8002686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800268a:	4313      	orrs	r3, r2
 800268c:	b21b      	sxth	r3, r3
 800268e:	b29b      	uxth	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	2044      	movs	r0, #68	; 0x44
 8002694:	f7ff fd6e 	bl	8002174 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
 8002698:	88bb      	ldrh	r3, [r7, #4]
 800269a:	4619      	mov	r1, r3
 800269c:	2045      	movs	r0, #69	; 0x45
 800269e:	f7ff fd69 	bl	8002174 <LCD_Write16Register8>
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
 80026a2:	883b      	ldrh	r3, [r7, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	2046      	movs	r0, #70	; 0x46
 80026a8:	f7ff fd64 	bl	8002174 <LCD_Write16Register8>
	}
#endif
	LCD_CS_IDLE();
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <LCD_SetAddrWindow+0xc4>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	619a      	str	r2, [r3, #24]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40020400 	.word	0x40020400
 80026c0:	200000a9 	.word	0x200000a9

080026c4 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b30      	ldr	r3, [pc, #192]	; (8002798 <LCD_SetRotation+0xd4>)
 80026d8:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 80026da:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <LCD_SetRotation+0xd4>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d009      	beq.n	80026f6 <LCD_SetRotation+0x32>
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d007      	beq.n	80026f6 <LCD_SetRotation+0x32>
	default:
	case 0:
	case 2:
		m_width = TFTWIDTH;
 80026e6:	4b2d      	ldr	r3, [pc, #180]	; (800279c <LCD_SetRotation+0xd8>)
 80026e8:	22f0      	movs	r2, #240	; 0xf0
 80026ea:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <LCD_SetRotation+0xdc>)
 80026ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026f2:	801a      	strh	r2, [r3, #0]
		break;
 80026f4:	e007      	b.n	8002706 <LCD_SetRotation+0x42>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <LCD_SetRotation+0xd8>)
 80026f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026fc:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <LCD_SetRotation+0xdc>)
 8002700:	22f0      	movs	r2, #240	; 0xf0
 8002702:	801a      	strh	r2, [r3, #0]
		break;
 8002704:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8002706:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <LCD_SetRotation+0xe0>)
 8002708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800270c:	619a      	str	r2, [r3, #24]
    LCD_Write8Register8(HX8357_MADCTL, t); // MADCTL
    // For 8357, init default full-screen address window:
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#elif defined(SSD1297)
    uint16_t t1, t2;
	switch (m_rotation) {
 800270e:	4b22      	ldr	r3, [pc, #136]	; (8002798 <LCD_SetRotation+0xd4>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d011      	beq.n	800273a <LCD_SetRotation+0x76>
 8002716:	2b03      	cmp	r3, #3
 8002718:	d016      	beq.n	8002748 <LCD_SetRotation+0x84>
 800271a:	2b01      	cmp	r3, #1
 800271c:	d006      	beq.n	800272c <LCD_SetRotation+0x68>
	default:
		t1 = SSD1297_DRVOUTCTL_TB | SSD1297_DRVOUTCTL_REV | SSD1297_DRVOUTCTL_BGR | 0x013F;
 800271e:	f642 333f 	movw	r3, #11071	; 0x2b3f
 8002722:	81fb      	strh	r3, [r7, #14]
		t2 = SSD1297_ENTRYMODE1_ID3 | 0x4C00;
 8002724:	f644 4330 	movw	r3, #19504	; 0x4c30
 8002728:	81bb      	strh	r3, [r7, #12]
		break;
 800272a:	e014      	b.n	8002756 <LCD_SetRotation+0x92>
	case 1:
		t1 = SSD1297_DRVOUTCTL_TB | SSD1297_DRVOUTCTL_RL | SSD1297_DRVOUTCTL_REV | SSD1297_DRVOUTCTL_BGR | 0x013F;
 800272c:	f646 333f 	movw	r3, #27455	; 0x6b3f
 8002730:	81fb      	strh	r3, [r7, #14]
		t2 = SSD1297_ENTRYMODE1_AM | SSD1297_ENTRYMODE1_ID3 | 0x4C00;
 8002732:	f644 4338 	movw	r3, #19512	; 0x4c38
 8002736:	81bb      	strh	r3, [r7, #12]
		break;
 8002738:	e00d      	b.n	8002756 <LCD_SetRotation+0x92>
	case 2:
		t1 = SSD1297_DRVOUTCTL_RL | SSD1297_DRVOUTCTL_REV | SSD1297_DRVOUTCTL_BGR | 0x013F;
 800273a:	f646 133f 	movw	r3, #26943	; 0x693f
 800273e:	81fb      	strh	r3, [r7, #14]
		t2 = SSD1297_ENTRYMODE1_ID3 | 0x4C00;
 8002740:	f644 4330 	movw	r3, #19504	; 0x4c30
 8002744:	81bb      	strh	r3, [r7, #12]
		break;
 8002746:	e006      	b.n	8002756 <LCD_SetRotation+0x92>
	case 3:
		t1 = SSD1297_DRVOUTCTL_REV | SSD1297_DRVOUTCTL_BGR | 0x013F;
 8002748:	f642 133f 	movw	r3, #10559	; 0x293f
 800274c:	81fb      	strh	r3, [r7, #14]
		t2 = SSD1297_ENTRYMODE1_AM | SSD1297_ENTRYMODE1_ID3 | 0x4C00;
 800274e:	f644 4338 	movw	r3, #19512	; 0x4c38
 8002752:	81bb      	strh	r3, [r7, #12]
		break;
 8002754:	bf00      	nop
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
 8002756:	89fb      	ldrh	r3, [r7, #14]
 8002758:	4619      	mov	r1, r3
 800275a:	2001      	movs	r0, #1
 800275c:	f7ff fd0a 	bl	8002174 <LCD_Write16Register8>
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
 8002760:	89bb      	ldrh	r3, [r7, #12]
 8002762:	4619      	mov	r1, r3
 8002764:	2011      	movs	r0, #17
 8002766:	f7ff fd05 	bl	8002174 <LCD_Write16Register8>
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <LCD_SetRotation+0xd8>)
 800276c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <LCD_SetRotation+0xdc>)
 8002778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29b      	uxth	r3, r3
 8002782:	2100      	movs	r1, #0
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff ff37 	bl	80025f8 <LCD_SetAddrWindow>
#endif
	LCD_CS_IDLE();
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <LCD_SetRotation+0xe0>)
 800278c:	2201      	movs	r2, #1
 800278e:	619a      	str	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	200000a9 	.word	0x200000a9
 800279c:	2000009c 	.word	0x2000009c
 80027a0:	2000009e 	.word	0x2000009e
 80027a4:	40020400 	.word	0x40020400

080027a8 <LCD_DrawChar>:
 * \param bg		Background color
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b08b      	sub	sp, #44	; 0x2c
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4604      	mov	r4, r0
 80027b0:	4608      	mov	r0, r1
 80027b2:	4611      	mov	r1, r2
 80027b4:	461a      	mov	r2, r3
 80027b6:	4623      	mov	r3, r4
 80027b8:	80fb      	strh	r3, [r7, #6]
 80027ba:	4603      	mov	r3, r0
 80027bc:	80bb      	strh	r3, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	70fb      	strb	r3, [r7, #3]
 80027c2:	4613      	mov	r3, r2
 80027c4:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
	uint8_t *pchar;
	uint32_t line = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 80027ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80027d2:	4a65      	ldr	r2, [pc, #404]	; (8002968 <LCD_DrawChar+0x1c0>)
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	88db      	ldrh	r3, [r3, #6]
 80027da:	82fb      	strh	r3, [r7, #22]
	width = fonts[fontindex]->Width;
 80027dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80027e0:	4a61      	ldr	r2, [pc, #388]	; (8002968 <LCD_DrawChar+0x1c0>)
 80027e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e6:	889b      	ldrh	r3, [r3, #4]
 80027e8:	82bb      	strh	r3, [r7, #20]

	if ((x >= m_width) || // Clip right
 80027ea:	4b60      	ldr	r3, [pc, #384]	; (800296c <LCD_DrawChar+0x1c4>)
 80027ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f280 80b2 	bge.w	800295e <LCD_DrawChar+0x1b6>
		(y >= m_height) || // Clip bottom
 80027fa:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <LCD_DrawChar+0x1c8>)
 80027fc:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8002800:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	f280 80aa 	bge.w	800295e <LCD_DrawChar+0x1b6>
		((x + width - 1) < 0) || // Clip left
 800280a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800280e:	8abb      	ldrh	r3, [r7, #20]
 8002810:	4413      	add	r3, r2
 8002812:	3b01      	subs	r3, #1
		(y >= m_height) || // Clip bottom
 8002814:	2b00      	cmp	r3, #0
 8002816:	f2c0 80a2 	blt.w	800295e <LCD_DrawChar+0x1b6>
		((y + height - 1) < 0))   // Clip top
 800281a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800281e:	8afb      	ldrh	r3, [r7, #22]
 8002820:	4413      	add	r3, r2
 8002822:	3b01      	subs	r3, #1
		((x + width - 1) < 0) || // Clip left
 8002824:	2b00      	cmp	r3, #0
 8002826:	f2c0 809a 	blt.w	800295e <LCD_DrawChar+0x1b6>
		return;

	bytes = (width + 7) / 8;
 800282a:	8abb      	ldrh	r3, [r7, #20]
 800282c:	3307      	adds	r3, #7
 800282e:	2b00      	cmp	r3, #0
 8002830:	da00      	bge.n	8002834 <LCD_DrawChar+0x8c>
 8002832:	3307      	adds	r3, #7
 8002834:	10db      	asrs	r3, r3, #3
 8002836:	827b      	strh	r3, [r7, #18]
	if (c < ' ') c = ' ';
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	2b1f      	cmp	r3, #31
 800283c:	d802      	bhi.n	8002844 <LCD_DrawChar+0x9c>
 800283e:	2320      	movs	r3, #32
 8002840:	70fb      	strb	r3, [r7, #3]
 8002842:	e004      	b.n	800284e <LCD_DrawChar+0xa6>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	2b7e      	cmp	r3, #126	; 0x7e
 8002848:	d901      	bls.n	800284e <LCD_DrawChar+0xa6>
 800284a:	2320      	movs	r3, #32
 800284c:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	3b20      	subs	r3, #32
 8002852:	8afa      	ldrh	r2, [r7, #22]
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	8a7a      	ldrh	r2, [r7, #18]
 800285a:	fb02 f303 	mul.w	r3, r2, r3
 800285e:	61bb      	str	r3, [r7, #24]
	offset = 8 * bytes - width;
 8002860:	8a7b      	ldrh	r3, [r7, #18]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	b2da      	uxtb	r2, r3
 8002868:	8abb      	ldrh	r3, [r7, #20]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	747b      	strb	r3, [r7, #17]

	for (uint32_t i = 0; i < height; i++) {
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
 8002874:	e06e      	b.n	8002954 <LCD_DrawChar+0x1ac>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 8002876:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800287a:	4a3b      	ldr	r2, [pc, #236]	; (8002968 <LCD_DrawChar+0x1c0>)
 800287c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	441a      	add	r2, r3
 8002886:	8abb      	ldrh	r3, [r7, #20]
 8002888:	3307      	adds	r3, #7
 800288a:	2b00      	cmp	r3, #0
 800288c:	da00      	bge.n	8002890 <LCD_DrawChar+0xe8>
 800288e:	3307      	adds	r3, #7
 8002890:	10db      	asrs	r3, r3, #3
 8002892:	4619      	mov	r1, r3
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	fb03 f301 	mul.w	r3, r3, r1
 800289a:	4413      	add	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
		switch (bytes) {
 800289e:	8a7b      	ldrh	r3, [r7, #18]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d002      	beq.n	80028aa <LCD_DrawChar+0x102>
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d004      	beq.n	80028b2 <LCD_DrawChar+0x10a>
 80028a8:	e00c      	b.n	80028c4 <LCD_DrawChar+0x11c>
		case 1:
			line = pchar[0];
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80028b0:	e016      	b.n	80028e0 <LCD_DrawChar+0x138>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	3201      	adds	r2, #1
 80028bc:	7812      	ldrb	r2, [r2, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80028c2:	e00d      	b.n	80028e0 <LCD_DrawChar+0x138>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3301      	adds	r3, #1
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	4313      	orrs	r3, r2
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	3202      	adds	r2, #2
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80028de:	bf00      	nop
		}
		for (uint32_t j = 0; j < width; j++) {
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	e029      	b.n	800293a <LCD_DrawChar+0x192>
			if (line & (1 << (width - j + offset - 1))) {
 80028e6:	8aba      	ldrh	r2, [r7, #20]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	1ad2      	subs	r2, r2, r3
 80028ec:	7c7b      	ldrb	r3, [r7, #17]
 80028ee:	4413      	add	r3, r2
 80028f0:	3b01      	subs	r3, #1
 80028f2:	2201      	movs	r2, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00c      	beq.n	800291c <LCD_DrawChar+0x174>
				LCD_DrawPixel((x + j), y, color);
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	b29a      	uxth	r2, r3
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	4413      	add	r3, r2
 800290a:	b29b      	uxth	r3, r3
 800290c:	b21b      	sxth	r3, r3
 800290e:	883a      	ldrh	r2, [r7, #0]
 8002910:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fd0d 	bl	8002334 <LCD_DrawPixel>
 800291a:	e00b      	b.n	8002934 <LCD_DrawChar+0x18c>
			} else {
				LCD_DrawPixel((x + j), y, bg);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	b29a      	uxth	r2, r3
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	4413      	add	r3, r2
 8002924:	b29b      	uxth	r3, r3
 8002926:	b21b      	sxth	r3, r3
 8002928:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800292a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fd00 	bl	8002334 <LCD_DrawPixel>
		for (uint32_t j = 0; j < width; j++) {
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	3301      	adds	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	8abb      	ldrh	r3, [r7, #20]
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3d1      	bcc.n	80028e6 <LCD_DrawChar+0x13e>
			}
		}
		y++;
 8002942:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002946:	b29b      	uxth	r3, r3
 8002948:	3301      	adds	r3, #1
 800294a:	b29b      	uxth	r3, r3
 800294c:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	3301      	adds	r3, #1
 8002952:	623b      	str	r3, [r7, #32]
 8002954:	8afb      	ldrh	r3, [r7, #22]
 8002956:	6a3a      	ldr	r2, [r7, #32]
 8002958:	429a      	cmp	r2, r3
 800295a:	d38c      	bcc.n	8002876 <LCD_DrawChar+0xce>
 800295c:	e000      	b.n	8002960 <LCD_DrawChar+0x1b8>
		return;
 800295e:	bf00      	nop
	}
}
 8002960:	372c      	adds	r7, #44	; 0x2c
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	bf00      	nop
 8002968:	20000014 	.word	0x20000014
 800296c:	2000009c 	.word	0x2000009c
 8002970:	2000009e 	.word	0x2000009e

08002974 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8002974:	b40f      	push	{r0, r1, r2, r3}
 8002976:	b5b0      	push	{r4, r5, r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 800297c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002980:	60bb      	str	r3, [r7, #8]
	vsprintf(buf, fmt, lst);
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	6a39      	ldr	r1, [r7, #32]
 8002986:	4850      	ldr	r0, [pc, #320]	; (8002ac8 <LCD_Printf+0x154>)
 8002988:	f000 f98e 	bl	8002ca8 <vsiprintf>
	va_end(lst);
	
	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 800298c:	4b4f      	ldr	r3, [pc, #316]	; (8002acc <LCD_Printf+0x158>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	4b4f      	ldr	r3, [pc, #316]	; (8002ad0 <LCD_Printf+0x15c>)
 8002994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002998:	88db      	ldrh	r3, [r3, #6]
 800299a:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 800299c:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <LCD_Printf+0x158>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <LCD_Printf+0x15c>)
 80029a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a8:	889b      	ldrh	r3, [r3, #4]
 80029aa:	80bb      	strh	r3, [r7, #4]

	p = buf;
 80029ac:	4b46      	ldr	r3, [pc, #280]	; (8002ac8 <LCD_Printf+0x154>)
 80029ae:	60fb      	str	r3, [r7, #12]
	while (*p) {
 80029b0:	e07d      	b.n	8002aae <LCD_Printf+0x13a>
		if (*p == '\n') {
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b0a      	cmp	r3, #10
 80029b8:	d10e      	bne.n	80029d8 <LCD_Printf+0x64>
			m_cursor_y += height;
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	4b45      	ldr	r3, [pc, #276]	; (8002ad4 <LCD_Printf+0x160>)
 80029c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	b21a      	sxth	r2, r3
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <LCD_Printf+0x160>)
 80029ce:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 80029d0:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <LCD_Printf+0x164>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	e067      	b.n	8002aa8 <LCD_Printf+0x134>
		} else if (*p == '\r') {
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b0d      	cmp	r3, #13
 80029de:	d103      	bne.n	80029e8 <LCD_Printf+0x74>
			m_cursor_x = 0;
 80029e0:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <LCD_Printf+0x164>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	e05f      	b.n	8002aa8 <LCD_Printf+0x134>
		} else if (*p == '\t') {
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d10d      	bne.n	8002a0c <LCD_Printf+0x98>
			m_cursor_x += width * 4;
 80029f0:	88bb      	ldrh	r3, [r7, #4]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <LCD_Printf+0x164>)
 80029fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <LCD_Printf+0x164>)
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	e04d      	b.n	8002aa8 <LCD_Printf+0x134>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
				LCD_Flood(m_textbgcolor, (long) m_width * height);
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <LCD_Printf+0x160>)
 8002a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b31      	ldr	r3, [pc, #196]	; (8002adc <LCD_Printf+0x168>)
 8002a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	1acb      	subs	r3, r1, r3
 8002a22:	429a      	cmp	r2, r3
 8002a24:	db02      	blt.n	8002a2c <LCD_Printf+0xb8>
				m_cursor_y = 0;
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <LCD_Printf+0x160>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
#endif
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <LCD_Printf+0x164>)
 8002a2e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <LCD_Printf+0x160>)
 8002a34:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	781c      	ldrb	r4, [r3, #0]
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <LCD_Printf+0x16c>)
 8002a3e:	881d      	ldrh	r5, [r3, #0]
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <LCD_Printf+0x170>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	4a21      	ldr	r2, [pc, #132]	; (8002acc <LCD_Printf+0x158>)
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	9201      	str	r2, [sp, #4]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	462b      	mov	r3, r5
 8002a4e:	4622      	mov	r2, r4
 8002a50:	f7ff feaa 	bl	80027a8 <LCD_DrawChar>
			m_cursor_x += width;
 8002a54:	88bb      	ldrh	r3, [r7, #4]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <LCD_Printf+0x164>)
 8002a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b21a      	sxth	r2, r3
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <LCD_Printf+0x164>)
 8002a68:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8002a6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <LCD_Printf+0x174>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01a      	beq.n	8002aa8 <LCD_Printf+0x134>
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <LCD_Printf+0x164>)
 8002a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <LCD_Printf+0x178>)
 8002a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a80:	4619      	mov	r1, r3
 8002a82:	88bb      	ldrh	r3, [r7, #4]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	1acb      	subs	r3, r1, r3
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dd0d      	ble.n	8002aa8 <LCD_Printf+0x134>
				m_cursor_y += height;
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <LCD_Printf+0x160>)
 8002a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	b21a      	sxth	r2, r3
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <LCD_Printf+0x160>)
 8002aa0:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <LCD_Printf+0x164>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f47f af7d 	bne.w	80029b2 <LCD_Printf+0x3e>
	}
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ac2:	b004      	add	sp, #16
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	200000ac 	.word	0x200000ac
 8002acc:	200000a8 	.word	0x200000a8
 8002ad0:	20000014 	.word	0x20000014
 8002ad4:	200000a2 	.word	0x200000a2
 8002ad8:	200000a0 	.word	0x200000a0
 8002adc:	2000009e 	.word	0x2000009e
 8002ae0:	200000a4 	.word	0x200000a4
 8002ae4:	200000a6 	.word	0x200000a6
 8002ae8:	200000aa 	.word	0x200000aa
 8002aec:	2000009c 	.word	0x2000009c

08002af0 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 *
 * \return void
 */
void LCD_SetCursor(uint16_t x, uint16_t y) {
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	460a      	mov	r2, r1
 8002afa:	80fb      	strh	r3, [r7, #6]
 8002afc:	4613      	mov	r3, r2
 8002afe:	80bb      	strh	r3, [r7, #4]
	m_cursor_x = x;
 8002b00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <LCD_SetCursor+0x2c>)
 8002b06:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8002b08:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <LCD_SetCursor+0x30>)
 8002b0e:	801a      	strh	r2, [r3, #0]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	200000a0 	.word	0x200000a0
 8002b20:	200000a2 	.word	0x200000a2

08002b24 <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 8002b2e:	2201      	movs	r2, #1
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d305      	bcc.n	8002b42 <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <LCD_SetTextSize+0x30>)
 8002b3e:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 8002b40:	e002      	b.n	8002b48 <LCD_SetTextSize+0x24>
		m_font = s;
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <LCD_SetTextSize+0x30>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	7013      	strb	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	200000a8 	.word	0x200000a8

08002b58 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	460a      	mov	r2, r1
 8002b62:	80fb      	strh	r3, [r7, #6]
 8002b64:	4613      	mov	r3, r2
 8002b66:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8002b68:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <LCD_SetTextColor+0x28>)
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <LCD_SetTextColor+0x2c>)
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	8013      	strh	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	200000a4 	.word	0x200000a4
 8002b84:	200000a6 	.word	0x200000a6

08002b88 <LCD_Color565_to_888>:
 */
uint16_t LCD_Color565(uint8_t r, uint8_t g, uint8_t b) {
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

inline uint32_t LCD_Color565_to_888(uint16_t color) {
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	80fb      	strh	r3, [r7, #6]
    return (((color & 0xF800) << 8) | ((color & 0x7E0) << 5) | ((color & 0x1F) << 3));  // transform to rrrrrrxx ggggggxx bbbbbbxx
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	f403 0278 	and.w	r2, r3, #16252928	; 0xf80000
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	015b      	lsls	r3, r3, #5
 8002b9e:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	4313      	orrs	r3, r2
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LCD_Color565_to_R>:

inline uint8_t LCD_Color565_to_R(uint16_t color) {
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrrxx
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	121b      	asrs	r3, r3, #8
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f023 0307 	bic.w	r3, r3, #7
 8002bcc:	b2db      	uxtb	r3, r3
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LCD_Color565_to_G>:
inline uint8_t LCD_Color565_to_G(uint16_t color) {
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	10db      	asrs	r3, r3, #3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	b2db      	uxtb	r3, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LCD_Color565_to_B>:
inline uint8_t LCD_Color565_to_B(uint16_t color) {
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbbxx
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	b2db      	uxtb	r3, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <__errno>:
 8002c18:	4b01      	ldr	r3, [pc, #4]	; (8002c20 <__errno+0x8>)
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000018 	.word	0x20000018

08002c24 <__libc_init_array>:
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	4e0d      	ldr	r6, [pc, #52]	; (8002c5c <__libc_init_array+0x38>)
 8002c28:	4c0d      	ldr	r4, [pc, #52]	; (8002c60 <__libc_init_array+0x3c>)
 8002c2a:	1ba4      	subs	r4, r4, r6
 8002c2c:	10a4      	asrs	r4, r4, #2
 8002c2e:	2500      	movs	r5, #0
 8002c30:	42a5      	cmp	r5, r4
 8002c32:	d109      	bne.n	8002c48 <__libc_init_array+0x24>
 8002c34:	4e0b      	ldr	r6, [pc, #44]	; (8002c64 <__libc_init_array+0x40>)
 8002c36:	4c0c      	ldr	r4, [pc, #48]	; (8002c68 <__libc_init_array+0x44>)
 8002c38:	f000 fc26 	bl	8003488 <_init>
 8002c3c:	1ba4      	subs	r4, r4, r6
 8002c3e:	10a4      	asrs	r4, r4, #2
 8002c40:	2500      	movs	r5, #0
 8002c42:	42a5      	cmp	r5, r4
 8002c44:	d105      	bne.n	8002c52 <__libc_init_array+0x2e>
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 8002c48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c4c:	4798      	blx	r3
 8002c4e:	3501      	adds	r5, #1
 8002c50:	e7ee      	b.n	8002c30 <__libc_init_array+0xc>
 8002c52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c56:	4798      	blx	r3
 8002c58:	3501      	adds	r5, #1
 8002c5a:	e7f2      	b.n	8002c42 <__libc_init_array+0x1e>
 8002c5c:	08003a78 	.word	0x08003a78
 8002c60:	08003a78 	.word	0x08003a78
 8002c64:	08003a78 	.word	0x08003a78
 8002c68:	08003a7c 	.word	0x08003a7c

08002c6c <memset>:
 8002c6c:	4402      	add	r2, r0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d100      	bne.n	8002c76 <memset+0xa>
 8002c74:	4770      	bx	lr
 8002c76:	f803 1b01 	strb.w	r1, [r3], #1
 8002c7a:	e7f9      	b.n	8002c70 <memset+0x4>

08002c7c <_vsiprintf_r>:
 8002c7c:	b500      	push	{lr}
 8002c7e:	b09b      	sub	sp, #108	; 0x6c
 8002c80:	9100      	str	r1, [sp, #0]
 8002c82:	9104      	str	r1, [sp, #16]
 8002c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c88:	9105      	str	r1, [sp, #20]
 8002c8a:	9102      	str	r1, [sp, #8]
 8002c8c:	4905      	ldr	r1, [pc, #20]	; (8002ca4 <_vsiprintf_r+0x28>)
 8002c8e:	9103      	str	r1, [sp, #12]
 8002c90:	4669      	mov	r1, sp
 8002c92:	f000 f86d 	bl	8002d70 <_svfiprintf_r>
 8002c96:	9b00      	ldr	r3, [sp, #0]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	b01b      	add	sp, #108	; 0x6c
 8002c9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ca2:	bf00      	nop
 8002ca4:	ffff0208 	.word	0xffff0208

08002ca8 <vsiprintf>:
 8002ca8:	4613      	mov	r3, r2
 8002caa:	460a      	mov	r2, r1
 8002cac:	4601      	mov	r1, r0
 8002cae:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <vsiprintf+0x10>)
 8002cb0:	6800      	ldr	r0, [r0, #0]
 8002cb2:	f7ff bfe3 	b.w	8002c7c <_vsiprintf_r>
 8002cb6:	bf00      	nop
 8002cb8:	20000018 	.word	0x20000018

08002cbc <__ssputs_r>:
 8002cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc0:	688e      	ldr	r6, [r1, #8]
 8002cc2:	429e      	cmp	r6, r3
 8002cc4:	4682      	mov	sl, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	4690      	mov	r8, r2
 8002cca:	4699      	mov	r9, r3
 8002ccc:	d837      	bhi.n	8002d3e <__ssputs_r+0x82>
 8002cce:	898a      	ldrh	r2, [r1, #12]
 8002cd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cd4:	d031      	beq.n	8002d3a <__ssputs_r+0x7e>
 8002cd6:	6825      	ldr	r5, [r4, #0]
 8002cd8:	6909      	ldr	r1, [r1, #16]
 8002cda:	1a6f      	subs	r7, r5, r1
 8002cdc:	6965      	ldr	r5, [r4, #20]
 8002cde:	2302      	movs	r3, #2
 8002ce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ce4:	fb95 f5f3 	sdiv	r5, r5, r3
 8002ce8:	f109 0301 	add.w	r3, r9, #1
 8002cec:	443b      	add	r3, r7
 8002cee:	429d      	cmp	r5, r3
 8002cf0:	bf38      	it	cc
 8002cf2:	461d      	movcc	r5, r3
 8002cf4:	0553      	lsls	r3, r2, #21
 8002cf6:	d530      	bpl.n	8002d5a <__ssputs_r+0x9e>
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	f000 fb2b 	bl	8003354 <_malloc_r>
 8002cfe:	4606      	mov	r6, r0
 8002d00:	b950      	cbnz	r0, 8002d18 <__ssputs_r+0x5c>
 8002d02:	230c      	movs	r3, #12
 8002d04:	f8ca 3000 	str.w	r3, [sl]
 8002d08:	89a3      	ldrh	r3, [r4, #12]
 8002d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0e:	81a3      	strh	r3, [r4, #12]
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d18:	463a      	mov	r2, r7
 8002d1a:	6921      	ldr	r1, [r4, #16]
 8002d1c:	f000 faa8 	bl	8003270 <memcpy>
 8002d20:	89a3      	ldrh	r3, [r4, #12]
 8002d22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2a:	81a3      	strh	r3, [r4, #12]
 8002d2c:	6126      	str	r6, [r4, #16]
 8002d2e:	6165      	str	r5, [r4, #20]
 8002d30:	443e      	add	r6, r7
 8002d32:	1bed      	subs	r5, r5, r7
 8002d34:	6026      	str	r6, [r4, #0]
 8002d36:	60a5      	str	r5, [r4, #8]
 8002d38:	464e      	mov	r6, r9
 8002d3a:	454e      	cmp	r6, r9
 8002d3c:	d900      	bls.n	8002d40 <__ssputs_r+0x84>
 8002d3e:	464e      	mov	r6, r9
 8002d40:	4632      	mov	r2, r6
 8002d42:	4641      	mov	r1, r8
 8002d44:	6820      	ldr	r0, [r4, #0]
 8002d46:	f000 fa9e 	bl	8003286 <memmove>
 8002d4a:	68a3      	ldr	r3, [r4, #8]
 8002d4c:	1b9b      	subs	r3, r3, r6
 8002d4e:	60a3      	str	r3, [r4, #8]
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	441e      	add	r6, r3
 8002d54:	6026      	str	r6, [r4, #0]
 8002d56:	2000      	movs	r0, #0
 8002d58:	e7dc      	b.n	8002d14 <__ssputs_r+0x58>
 8002d5a:	462a      	mov	r2, r5
 8002d5c:	f000 fb54 	bl	8003408 <_realloc_r>
 8002d60:	4606      	mov	r6, r0
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d1e2      	bne.n	8002d2c <__ssputs_r+0x70>
 8002d66:	6921      	ldr	r1, [r4, #16]
 8002d68:	4650      	mov	r0, sl
 8002d6a:	f000 faa5 	bl	80032b8 <_free_r>
 8002d6e:	e7c8      	b.n	8002d02 <__ssputs_r+0x46>

08002d70 <_svfiprintf_r>:
 8002d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d74:	461d      	mov	r5, r3
 8002d76:	898b      	ldrh	r3, [r1, #12]
 8002d78:	061f      	lsls	r7, r3, #24
 8002d7a:	b09d      	sub	sp, #116	; 0x74
 8002d7c:	4680      	mov	r8, r0
 8002d7e:	460c      	mov	r4, r1
 8002d80:	4616      	mov	r6, r2
 8002d82:	d50f      	bpl.n	8002da4 <_svfiprintf_r+0x34>
 8002d84:	690b      	ldr	r3, [r1, #16]
 8002d86:	b96b      	cbnz	r3, 8002da4 <_svfiprintf_r+0x34>
 8002d88:	2140      	movs	r1, #64	; 0x40
 8002d8a:	f000 fae3 	bl	8003354 <_malloc_r>
 8002d8e:	6020      	str	r0, [r4, #0]
 8002d90:	6120      	str	r0, [r4, #16]
 8002d92:	b928      	cbnz	r0, 8002da0 <_svfiprintf_r+0x30>
 8002d94:	230c      	movs	r3, #12
 8002d96:	f8c8 3000 	str.w	r3, [r8]
 8002d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9e:	e0c8      	b.n	8002f32 <_svfiprintf_r+0x1c2>
 8002da0:	2340      	movs	r3, #64	; 0x40
 8002da2:	6163      	str	r3, [r4, #20]
 8002da4:	2300      	movs	r3, #0
 8002da6:	9309      	str	r3, [sp, #36]	; 0x24
 8002da8:	2320      	movs	r3, #32
 8002daa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dae:	2330      	movs	r3, #48	; 0x30
 8002db0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002db4:	9503      	str	r5, [sp, #12]
 8002db6:	f04f 0b01 	mov.w	fp, #1
 8002dba:	4637      	mov	r7, r6
 8002dbc:	463d      	mov	r5, r7
 8002dbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002dc2:	b10b      	cbz	r3, 8002dc8 <_svfiprintf_r+0x58>
 8002dc4:	2b25      	cmp	r3, #37	; 0x25
 8002dc6:	d13e      	bne.n	8002e46 <_svfiprintf_r+0xd6>
 8002dc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8002dcc:	d00b      	beq.n	8002de6 <_svfiprintf_r+0x76>
 8002dce:	4653      	mov	r3, sl
 8002dd0:	4632      	mov	r2, r6
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	4640      	mov	r0, r8
 8002dd6:	f7ff ff71 	bl	8002cbc <__ssputs_r>
 8002dda:	3001      	adds	r0, #1
 8002ddc:	f000 80a4 	beq.w	8002f28 <_svfiprintf_r+0x1b8>
 8002de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002de2:	4453      	add	r3, sl
 8002de4:	9309      	str	r3, [sp, #36]	; 0x24
 8002de6:	783b      	ldrb	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 809d 	beq.w	8002f28 <_svfiprintf_r+0x1b8>
 8002dee:	2300      	movs	r3, #0
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002df8:	9304      	str	r3, [sp, #16]
 8002dfa:	9307      	str	r3, [sp, #28]
 8002dfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e00:	931a      	str	r3, [sp, #104]	; 0x68
 8002e02:	462f      	mov	r7, r5
 8002e04:	2205      	movs	r2, #5
 8002e06:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002e0a:	4850      	ldr	r0, [pc, #320]	; (8002f4c <_svfiprintf_r+0x1dc>)
 8002e0c:	f7fd fa00 	bl	8000210 <memchr>
 8002e10:	9b04      	ldr	r3, [sp, #16]
 8002e12:	b9d0      	cbnz	r0, 8002e4a <_svfiprintf_r+0xda>
 8002e14:	06d9      	lsls	r1, r3, #27
 8002e16:	bf44      	itt	mi
 8002e18:	2220      	movmi	r2, #32
 8002e1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e1e:	071a      	lsls	r2, r3, #28
 8002e20:	bf44      	itt	mi
 8002e22:	222b      	movmi	r2, #43	; 0x2b
 8002e24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e28:	782a      	ldrb	r2, [r5, #0]
 8002e2a:	2a2a      	cmp	r2, #42	; 0x2a
 8002e2c:	d015      	beq.n	8002e5a <_svfiprintf_r+0xea>
 8002e2e:	9a07      	ldr	r2, [sp, #28]
 8002e30:	462f      	mov	r7, r5
 8002e32:	2000      	movs	r0, #0
 8002e34:	250a      	movs	r5, #10
 8002e36:	4639      	mov	r1, r7
 8002e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e3c:	3b30      	subs	r3, #48	; 0x30
 8002e3e:	2b09      	cmp	r3, #9
 8002e40:	d94d      	bls.n	8002ede <_svfiprintf_r+0x16e>
 8002e42:	b1b8      	cbz	r0, 8002e74 <_svfiprintf_r+0x104>
 8002e44:	e00f      	b.n	8002e66 <_svfiprintf_r+0xf6>
 8002e46:	462f      	mov	r7, r5
 8002e48:	e7b8      	b.n	8002dbc <_svfiprintf_r+0x4c>
 8002e4a:	4a40      	ldr	r2, [pc, #256]	; (8002f4c <_svfiprintf_r+0x1dc>)
 8002e4c:	1a80      	subs	r0, r0, r2
 8002e4e:	fa0b f000 	lsl.w	r0, fp, r0
 8002e52:	4318      	orrs	r0, r3
 8002e54:	9004      	str	r0, [sp, #16]
 8002e56:	463d      	mov	r5, r7
 8002e58:	e7d3      	b.n	8002e02 <_svfiprintf_r+0x92>
 8002e5a:	9a03      	ldr	r2, [sp, #12]
 8002e5c:	1d11      	adds	r1, r2, #4
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	9103      	str	r1, [sp, #12]
 8002e62:	2a00      	cmp	r2, #0
 8002e64:	db01      	blt.n	8002e6a <_svfiprintf_r+0xfa>
 8002e66:	9207      	str	r2, [sp, #28]
 8002e68:	e004      	b.n	8002e74 <_svfiprintf_r+0x104>
 8002e6a:	4252      	negs	r2, r2
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	9207      	str	r2, [sp, #28]
 8002e72:	9304      	str	r3, [sp, #16]
 8002e74:	783b      	ldrb	r3, [r7, #0]
 8002e76:	2b2e      	cmp	r3, #46	; 0x2e
 8002e78:	d10c      	bne.n	8002e94 <_svfiprintf_r+0x124>
 8002e7a:	787b      	ldrb	r3, [r7, #1]
 8002e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e7e:	d133      	bne.n	8002ee8 <_svfiprintf_r+0x178>
 8002e80:	9b03      	ldr	r3, [sp, #12]
 8002e82:	1d1a      	adds	r2, r3, #4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	9203      	str	r2, [sp, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bfb8      	it	lt
 8002e8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e90:	3702      	adds	r7, #2
 8002e92:	9305      	str	r3, [sp, #20]
 8002e94:	4d2e      	ldr	r5, [pc, #184]	; (8002f50 <_svfiprintf_r+0x1e0>)
 8002e96:	7839      	ldrb	r1, [r7, #0]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f7fd f9b8 	bl	8000210 <memchr>
 8002ea0:	b138      	cbz	r0, 8002eb2 <_svfiprintf_r+0x142>
 8002ea2:	2340      	movs	r3, #64	; 0x40
 8002ea4:	1b40      	subs	r0, r0, r5
 8002ea6:	fa03 f000 	lsl.w	r0, r3, r0
 8002eaa:	9b04      	ldr	r3, [sp, #16]
 8002eac:	4303      	orrs	r3, r0
 8002eae:	3701      	adds	r7, #1
 8002eb0:	9304      	str	r3, [sp, #16]
 8002eb2:	7839      	ldrb	r1, [r7, #0]
 8002eb4:	4827      	ldr	r0, [pc, #156]	; (8002f54 <_svfiprintf_r+0x1e4>)
 8002eb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eba:	2206      	movs	r2, #6
 8002ebc:	1c7e      	adds	r6, r7, #1
 8002ebe:	f7fd f9a7 	bl	8000210 <memchr>
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d038      	beq.n	8002f38 <_svfiprintf_r+0x1c8>
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <_svfiprintf_r+0x1e8>)
 8002ec8:	bb13      	cbnz	r3, 8002f10 <_svfiprintf_r+0x1a0>
 8002eca:	9b03      	ldr	r3, [sp, #12]
 8002ecc:	3307      	adds	r3, #7
 8002ece:	f023 0307 	bic.w	r3, r3, #7
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	9303      	str	r3, [sp, #12]
 8002ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ed8:	444b      	add	r3, r9
 8002eda:	9309      	str	r3, [sp, #36]	; 0x24
 8002edc:	e76d      	b.n	8002dba <_svfiprintf_r+0x4a>
 8002ede:	fb05 3202 	mla	r2, r5, r2, r3
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	460f      	mov	r7, r1
 8002ee6:	e7a6      	b.n	8002e36 <_svfiprintf_r+0xc6>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	3701      	adds	r7, #1
 8002eec:	9305      	str	r3, [sp, #20]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	250a      	movs	r5, #10
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ef8:	3a30      	subs	r2, #48	; 0x30
 8002efa:	2a09      	cmp	r2, #9
 8002efc:	d903      	bls.n	8002f06 <_svfiprintf_r+0x196>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0c8      	beq.n	8002e94 <_svfiprintf_r+0x124>
 8002f02:	9105      	str	r1, [sp, #20]
 8002f04:	e7c6      	b.n	8002e94 <_svfiprintf_r+0x124>
 8002f06:	fb05 2101 	mla	r1, r5, r1, r2
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	4607      	mov	r7, r0
 8002f0e:	e7f0      	b.n	8002ef2 <_svfiprintf_r+0x182>
 8002f10:	ab03      	add	r3, sp, #12
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	4622      	mov	r2, r4
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <_svfiprintf_r+0x1ec>)
 8002f18:	a904      	add	r1, sp, #16
 8002f1a:	4640      	mov	r0, r8
 8002f1c:	f3af 8000 	nop.w
 8002f20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002f24:	4681      	mov	r9, r0
 8002f26:	d1d6      	bne.n	8002ed6 <_svfiprintf_r+0x166>
 8002f28:	89a3      	ldrh	r3, [r4, #12]
 8002f2a:	065b      	lsls	r3, r3, #25
 8002f2c:	f53f af35 	bmi.w	8002d9a <_svfiprintf_r+0x2a>
 8002f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f32:	b01d      	add	sp, #116	; 0x74
 8002f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f38:	ab03      	add	r3, sp, #12
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	4622      	mov	r2, r4
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <_svfiprintf_r+0x1ec>)
 8002f40:	a904      	add	r1, sp, #16
 8002f42:	4640      	mov	r0, r8
 8002f44:	f000 f882 	bl	800304c <_printf_i>
 8002f48:	e7ea      	b.n	8002f20 <_svfiprintf_r+0x1b0>
 8002f4a:	bf00      	nop
 8002f4c:	08003a3c 	.word	0x08003a3c
 8002f50:	08003a42 	.word	0x08003a42
 8002f54:	08003a46 	.word	0x08003a46
 8002f58:	00000000 	.word	0x00000000
 8002f5c:	08002cbd 	.word	0x08002cbd

08002f60 <_printf_common>:
 8002f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f64:	4691      	mov	r9, r2
 8002f66:	461f      	mov	r7, r3
 8002f68:	688a      	ldr	r2, [r1, #8]
 8002f6a:	690b      	ldr	r3, [r1, #16]
 8002f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bfb8      	it	lt
 8002f74:	4613      	movlt	r3, r2
 8002f76:	f8c9 3000 	str.w	r3, [r9]
 8002f7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f7e:	4606      	mov	r6, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	b112      	cbz	r2, 8002f8a <_printf_common+0x2a>
 8002f84:	3301      	adds	r3, #1
 8002f86:	f8c9 3000 	str.w	r3, [r9]
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	0699      	lsls	r1, r3, #26
 8002f8e:	bf42      	ittt	mi
 8002f90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f94:	3302      	addmi	r3, #2
 8002f96:	f8c9 3000 	strmi.w	r3, [r9]
 8002f9a:	6825      	ldr	r5, [r4, #0]
 8002f9c:	f015 0506 	ands.w	r5, r5, #6
 8002fa0:	d107      	bne.n	8002fb2 <_printf_common+0x52>
 8002fa2:	f104 0a19 	add.w	sl, r4, #25
 8002fa6:	68e3      	ldr	r3, [r4, #12]
 8002fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	42ab      	cmp	r3, r5
 8002fb0:	dc28      	bgt.n	8003004 <_printf_common+0xa4>
 8002fb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	3300      	adds	r3, #0
 8002fba:	bf18      	it	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	0692      	lsls	r2, r2, #26
 8002fc0:	d42d      	bmi.n	800301e <_printf_common+0xbe>
 8002fc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fc6:	4639      	mov	r1, r7
 8002fc8:	4630      	mov	r0, r6
 8002fca:	47c0      	blx	r8
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d020      	beq.n	8003012 <_printf_common+0xb2>
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	68e5      	ldr	r5, [r4, #12]
 8002fd4:	f8d9 2000 	ldr.w	r2, [r9]
 8002fd8:	f003 0306 	and.w	r3, r3, #6
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	bf08      	it	eq
 8002fe0:	1aad      	subeq	r5, r5, r2
 8002fe2:	68a3      	ldr	r3, [r4, #8]
 8002fe4:	6922      	ldr	r2, [r4, #16]
 8002fe6:	bf0c      	ite	eq
 8002fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fec:	2500      	movne	r5, #0
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	bfc4      	itt	gt
 8002ff2:	1a9b      	subgt	r3, r3, r2
 8002ff4:	18ed      	addgt	r5, r5, r3
 8002ff6:	f04f 0900 	mov.w	r9, #0
 8002ffa:	341a      	adds	r4, #26
 8002ffc:	454d      	cmp	r5, r9
 8002ffe:	d11a      	bne.n	8003036 <_printf_common+0xd6>
 8003000:	2000      	movs	r0, #0
 8003002:	e008      	b.n	8003016 <_printf_common+0xb6>
 8003004:	2301      	movs	r3, #1
 8003006:	4652      	mov	r2, sl
 8003008:	4639      	mov	r1, r7
 800300a:	4630      	mov	r0, r6
 800300c:	47c0      	blx	r8
 800300e:	3001      	adds	r0, #1
 8003010:	d103      	bne.n	800301a <_printf_common+0xba>
 8003012:	f04f 30ff 	mov.w	r0, #4294967295
 8003016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800301a:	3501      	adds	r5, #1
 800301c:	e7c3      	b.n	8002fa6 <_printf_common+0x46>
 800301e:	18e1      	adds	r1, r4, r3
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	2030      	movs	r0, #48	; 0x30
 8003024:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003028:	4422      	add	r2, r4
 800302a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800302e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003032:	3302      	adds	r3, #2
 8003034:	e7c5      	b.n	8002fc2 <_printf_common+0x62>
 8003036:	2301      	movs	r3, #1
 8003038:	4622      	mov	r2, r4
 800303a:	4639      	mov	r1, r7
 800303c:	4630      	mov	r0, r6
 800303e:	47c0      	blx	r8
 8003040:	3001      	adds	r0, #1
 8003042:	d0e6      	beq.n	8003012 <_printf_common+0xb2>
 8003044:	f109 0901 	add.w	r9, r9, #1
 8003048:	e7d8      	b.n	8002ffc <_printf_common+0x9c>
	...

0800304c <_printf_i>:
 800304c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003050:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003054:	460c      	mov	r4, r1
 8003056:	7e09      	ldrb	r1, [r1, #24]
 8003058:	b085      	sub	sp, #20
 800305a:	296e      	cmp	r1, #110	; 0x6e
 800305c:	4617      	mov	r7, r2
 800305e:	4606      	mov	r6, r0
 8003060:	4698      	mov	r8, r3
 8003062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003064:	f000 80b3 	beq.w	80031ce <_printf_i+0x182>
 8003068:	d822      	bhi.n	80030b0 <_printf_i+0x64>
 800306a:	2963      	cmp	r1, #99	; 0x63
 800306c:	d036      	beq.n	80030dc <_printf_i+0x90>
 800306e:	d80a      	bhi.n	8003086 <_printf_i+0x3a>
 8003070:	2900      	cmp	r1, #0
 8003072:	f000 80b9 	beq.w	80031e8 <_printf_i+0x19c>
 8003076:	2958      	cmp	r1, #88	; 0x58
 8003078:	f000 8083 	beq.w	8003182 <_printf_i+0x136>
 800307c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003080:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003084:	e032      	b.n	80030ec <_printf_i+0xa0>
 8003086:	2964      	cmp	r1, #100	; 0x64
 8003088:	d001      	beq.n	800308e <_printf_i+0x42>
 800308a:	2969      	cmp	r1, #105	; 0x69
 800308c:	d1f6      	bne.n	800307c <_printf_i+0x30>
 800308e:	6820      	ldr	r0, [r4, #0]
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	0605      	lsls	r5, r0, #24
 8003094:	f103 0104 	add.w	r1, r3, #4
 8003098:	d52a      	bpl.n	80030f0 <_printf_i+0xa4>
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6011      	str	r1, [r2, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	da03      	bge.n	80030aa <_printf_i+0x5e>
 80030a2:	222d      	movs	r2, #45	; 0x2d
 80030a4:	425b      	negs	r3, r3
 80030a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80030aa:	486f      	ldr	r0, [pc, #444]	; (8003268 <_printf_i+0x21c>)
 80030ac:	220a      	movs	r2, #10
 80030ae:	e039      	b.n	8003124 <_printf_i+0xd8>
 80030b0:	2973      	cmp	r1, #115	; 0x73
 80030b2:	f000 809d 	beq.w	80031f0 <_printf_i+0x1a4>
 80030b6:	d808      	bhi.n	80030ca <_printf_i+0x7e>
 80030b8:	296f      	cmp	r1, #111	; 0x6f
 80030ba:	d020      	beq.n	80030fe <_printf_i+0xb2>
 80030bc:	2970      	cmp	r1, #112	; 0x70
 80030be:	d1dd      	bne.n	800307c <_printf_i+0x30>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	f043 0320 	orr.w	r3, r3, #32
 80030c6:	6023      	str	r3, [r4, #0]
 80030c8:	e003      	b.n	80030d2 <_printf_i+0x86>
 80030ca:	2975      	cmp	r1, #117	; 0x75
 80030cc:	d017      	beq.n	80030fe <_printf_i+0xb2>
 80030ce:	2978      	cmp	r1, #120	; 0x78
 80030d0:	d1d4      	bne.n	800307c <_printf_i+0x30>
 80030d2:	2378      	movs	r3, #120	; 0x78
 80030d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030d8:	4864      	ldr	r0, [pc, #400]	; (800326c <_printf_i+0x220>)
 80030da:	e055      	b.n	8003188 <_printf_i+0x13c>
 80030dc:	6813      	ldr	r3, [r2, #0]
 80030de:	1d19      	adds	r1, r3, #4
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6011      	str	r1, [r2, #0]
 80030e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030ec:	2301      	movs	r3, #1
 80030ee:	e08c      	b.n	800320a <_printf_i+0x1be>
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6011      	str	r1, [r2, #0]
 80030f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030f8:	bf18      	it	ne
 80030fa:	b21b      	sxthne	r3, r3
 80030fc:	e7cf      	b.n	800309e <_printf_i+0x52>
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	6825      	ldr	r5, [r4, #0]
 8003102:	1d18      	adds	r0, r3, #4
 8003104:	6010      	str	r0, [r2, #0]
 8003106:	0628      	lsls	r0, r5, #24
 8003108:	d501      	bpl.n	800310e <_printf_i+0xc2>
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	e002      	b.n	8003114 <_printf_i+0xc8>
 800310e:	0668      	lsls	r0, r5, #25
 8003110:	d5fb      	bpl.n	800310a <_printf_i+0xbe>
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	4854      	ldr	r0, [pc, #336]	; (8003268 <_printf_i+0x21c>)
 8003116:	296f      	cmp	r1, #111	; 0x6f
 8003118:	bf14      	ite	ne
 800311a:	220a      	movne	r2, #10
 800311c:	2208      	moveq	r2, #8
 800311e:	2100      	movs	r1, #0
 8003120:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003124:	6865      	ldr	r5, [r4, #4]
 8003126:	60a5      	str	r5, [r4, #8]
 8003128:	2d00      	cmp	r5, #0
 800312a:	f2c0 8095 	blt.w	8003258 <_printf_i+0x20c>
 800312e:	6821      	ldr	r1, [r4, #0]
 8003130:	f021 0104 	bic.w	r1, r1, #4
 8003134:	6021      	str	r1, [r4, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d13d      	bne.n	80031b6 <_printf_i+0x16a>
 800313a:	2d00      	cmp	r5, #0
 800313c:	f040 808e 	bne.w	800325c <_printf_i+0x210>
 8003140:	4665      	mov	r5, ip
 8003142:	2a08      	cmp	r2, #8
 8003144:	d10b      	bne.n	800315e <_printf_i+0x112>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	07db      	lsls	r3, r3, #31
 800314a:	d508      	bpl.n	800315e <_printf_i+0x112>
 800314c:	6923      	ldr	r3, [r4, #16]
 800314e:	6862      	ldr	r2, [r4, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	bfde      	ittt	le
 8003154:	2330      	movle	r3, #48	; 0x30
 8003156:	f805 3c01 	strble.w	r3, [r5, #-1]
 800315a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800315e:	ebac 0305 	sub.w	r3, ip, r5
 8003162:	6123      	str	r3, [r4, #16]
 8003164:	f8cd 8000 	str.w	r8, [sp]
 8003168:	463b      	mov	r3, r7
 800316a:	aa03      	add	r2, sp, #12
 800316c:	4621      	mov	r1, r4
 800316e:	4630      	mov	r0, r6
 8003170:	f7ff fef6 	bl	8002f60 <_printf_common>
 8003174:	3001      	adds	r0, #1
 8003176:	d14d      	bne.n	8003214 <_printf_i+0x1c8>
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	b005      	add	sp, #20
 800317e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003182:	4839      	ldr	r0, [pc, #228]	; (8003268 <_printf_i+0x21c>)
 8003184:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003188:	6813      	ldr	r3, [r2, #0]
 800318a:	6821      	ldr	r1, [r4, #0]
 800318c:	1d1d      	adds	r5, r3, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6015      	str	r5, [r2, #0]
 8003192:	060a      	lsls	r2, r1, #24
 8003194:	d50b      	bpl.n	80031ae <_printf_i+0x162>
 8003196:	07ca      	lsls	r2, r1, #31
 8003198:	bf44      	itt	mi
 800319a:	f041 0120 	orrmi.w	r1, r1, #32
 800319e:	6021      	strmi	r1, [r4, #0]
 80031a0:	b91b      	cbnz	r3, 80031aa <_printf_i+0x15e>
 80031a2:	6822      	ldr	r2, [r4, #0]
 80031a4:	f022 0220 	bic.w	r2, r2, #32
 80031a8:	6022      	str	r2, [r4, #0]
 80031aa:	2210      	movs	r2, #16
 80031ac:	e7b7      	b.n	800311e <_printf_i+0xd2>
 80031ae:	064d      	lsls	r5, r1, #25
 80031b0:	bf48      	it	mi
 80031b2:	b29b      	uxthmi	r3, r3
 80031b4:	e7ef      	b.n	8003196 <_printf_i+0x14a>
 80031b6:	4665      	mov	r5, ip
 80031b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80031bc:	fb02 3311 	mls	r3, r2, r1, r3
 80031c0:	5cc3      	ldrb	r3, [r0, r3]
 80031c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80031c6:	460b      	mov	r3, r1
 80031c8:	2900      	cmp	r1, #0
 80031ca:	d1f5      	bne.n	80031b8 <_printf_i+0x16c>
 80031cc:	e7b9      	b.n	8003142 <_printf_i+0xf6>
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	6825      	ldr	r5, [r4, #0]
 80031d2:	6961      	ldr	r1, [r4, #20]
 80031d4:	1d18      	adds	r0, r3, #4
 80031d6:	6010      	str	r0, [r2, #0]
 80031d8:	0628      	lsls	r0, r5, #24
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	d501      	bpl.n	80031e2 <_printf_i+0x196>
 80031de:	6019      	str	r1, [r3, #0]
 80031e0:	e002      	b.n	80031e8 <_printf_i+0x19c>
 80031e2:	066a      	lsls	r2, r5, #25
 80031e4:	d5fb      	bpl.n	80031de <_printf_i+0x192>
 80031e6:	8019      	strh	r1, [r3, #0]
 80031e8:	2300      	movs	r3, #0
 80031ea:	6123      	str	r3, [r4, #16]
 80031ec:	4665      	mov	r5, ip
 80031ee:	e7b9      	b.n	8003164 <_printf_i+0x118>
 80031f0:	6813      	ldr	r3, [r2, #0]
 80031f2:	1d19      	adds	r1, r3, #4
 80031f4:	6011      	str	r1, [r2, #0]
 80031f6:	681d      	ldr	r5, [r3, #0]
 80031f8:	6862      	ldr	r2, [r4, #4]
 80031fa:	2100      	movs	r1, #0
 80031fc:	4628      	mov	r0, r5
 80031fe:	f7fd f807 	bl	8000210 <memchr>
 8003202:	b108      	cbz	r0, 8003208 <_printf_i+0x1bc>
 8003204:	1b40      	subs	r0, r0, r5
 8003206:	6060      	str	r0, [r4, #4]
 8003208:	6863      	ldr	r3, [r4, #4]
 800320a:	6123      	str	r3, [r4, #16]
 800320c:	2300      	movs	r3, #0
 800320e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003212:	e7a7      	b.n	8003164 <_printf_i+0x118>
 8003214:	6923      	ldr	r3, [r4, #16]
 8003216:	462a      	mov	r2, r5
 8003218:	4639      	mov	r1, r7
 800321a:	4630      	mov	r0, r6
 800321c:	47c0      	blx	r8
 800321e:	3001      	adds	r0, #1
 8003220:	d0aa      	beq.n	8003178 <_printf_i+0x12c>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	079b      	lsls	r3, r3, #30
 8003226:	d413      	bmi.n	8003250 <_printf_i+0x204>
 8003228:	68e0      	ldr	r0, [r4, #12]
 800322a:	9b03      	ldr	r3, [sp, #12]
 800322c:	4298      	cmp	r0, r3
 800322e:	bfb8      	it	lt
 8003230:	4618      	movlt	r0, r3
 8003232:	e7a3      	b.n	800317c <_printf_i+0x130>
 8003234:	2301      	movs	r3, #1
 8003236:	464a      	mov	r2, r9
 8003238:	4639      	mov	r1, r7
 800323a:	4630      	mov	r0, r6
 800323c:	47c0      	blx	r8
 800323e:	3001      	adds	r0, #1
 8003240:	d09a      	beq.n	8003178 <_printf_i+0x12c>
 8003242:	3501      	adds	r5, #1
 8003244:	68e3      	ldr	r3, [r4, #12]
 8003246:	9a03      	ldr	r2, [sp, #12]
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	42ab      	cmp	r3, r5
 800324c:	dcf2      	bgt.n	8003234 <_printf_i+0x1e8>
 800324e:	e7eb      	b.n	8003228 <_printf_i+0x1dc>
 8003250:	2500      	movs	r5, #0
 8003252:	f104 0919 	add.w	r9, r4, #25
 8003256:	e7f5      	b.n	8003244 <_printf_i+0x1f8>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1ac      	bne.n	80031b6 <_printf_i+0x16a>
 800325c:	7803      	ldrb	r3, [r0, #0]
 800325e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003262:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003266:	e76c      	b.n	8003142 <_printf_i+0xf6>
 8003268:	08003a4d 	.word	0x08003a4d
 800326c:	08003a5e 	.word	0x08003a5e

08003270 <memcpy>:
 8003270:	b510      	push	{r4, lr}
 8003272:	1e43      	subs	r3, r0, #1
 8003274:	440a      	add	r2, r1
 8003276:	4291      	cmp	r1, r2
 8003278:	d100      	bne.n	800327c <memcpy+0xc>
 800327a:	bd10      	pop	{r4, pc}
 800327c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003280:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003284:	e7f7      	b.n	8003276 <memcpy+0x6>

08003286 <memmove>:
 8003286:	4288      	cmp	r0, r1
 8003288:	b510      	push	{r4, lr}
 800328a:	eb01 0302 	add.w	r3, r1, r2
 800328e:	d807      	bhi.n	80032a0 <memmove+0x1a>
 8003290:	1e42      	subs	r2, r0, #1
 8003292:	4299      	cmp	r1, r3
 8003294:	d00a      	beq.n	80032ac <memmove+0x26>
 8003296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800329a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800329e:	e7f8      	b.n	8003292 <memmove+0xc>
 80032a0:	4283      	cmp	r3, r0
 80032a2:	d9f5      	bls.n	8003290 <memmove+0xa>
 80032a4:	1881      	adds	r1, r0, r2
 80032a6:	1ad2      	subs	r2, r2, r3
 80032a8:	42d3      	cmn	r3, r2
 80032aa:	d100      	bne.n	80032ae <memmove+0x28>
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80032b6:	e7f7      	b.n	80032a8 <memmove+0x22>

080032b8 <_free_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4605      	mov	r5, r0
 80032bc:	2900      	cmp	r1, #0
 80032be:	d045      	beq.n	800334c <_free_r+0x94>
 80032c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c4:	1f0c      	subs	r4, r1, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfb8      	it	lt
 80032ca:	18e4      	addlt	r4, r4, r3
 80032cc:	f000 f8d2 	bl	8003474 <__malloc_lock>
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <_free_r+0x98>)
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	4610      	mov	r0, r2
 80032d6:	b933      	cbnz	r3, 80032e6 <_free_r+0x2e>
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6014      	str	r4, [r2, #0]
 80032dc:	4628      	mov	r0, r5
 80032de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032e2:	f000 b8c8 	b.w	8003476 <__malloc_unlock>
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	d90c      	bls.n	8003304 <_free_r+0x4c>
 80032ea:	6821      	ldr	r1, [r4, #0]
 80032ec:	1862      	adds	r2, r4, r1
 80032ee:	4293      	cmp	r3, r2
 80032f0:	bf04      	itt	eq
 80032f2:	681a      	ldreq	r2, [r3, #0]
 80032f4:	685b      	ldreq	r3, [r3, #4]
 80032f6:	6063      	str	r3, [r4, #4]
 80032f8:	bf04      	itt	eq
 80032fa:	1852      	addeq	r2, r2, r1
 80032fc:	6022      	streq	r2, [r4, #0]
 80032fe:	6004      	str	r4, [r0, #0]
 8003300:	e7ec      	b.n	80032dc <_free_r+0x24>
 8003302:	4613      	mov	r3, r2
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	b10a      	cbz	r2, 800330c <_free_r+0x54>
 8003308:	42a2      	cmp	r2, r4
 800330a:	d9fa      	bls.n	8003302 <_free_r+0x4a>
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	1858      	adds	r0, r3, r1
 8003310:	42a0      	cmp	r0, r4
 8003312:	d10b      	bne.n	800332c <_free_r+0x74>
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	4401      	add	r1, r0
 8003318:	1858      	adds	r0, r3, r1
 800331a:	4282      	cmp	r2, r0
 800331c:	6019      	str	r1, [r3, #0]
 800331e:	d1dd      	bne.n	80032dc <_free_r+0x24>
 8003320:	6810      	ldr	r0, [r2, #0]
 8003322:	6852      	ldr	r2, [r2, #4]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	4401      	add	r1, r0
 8003328:	6019      	str	r1, [r3, #0]
 800332a:	e7d7      	b.n	80032dc <_free_r+0x24>
 800332c:	d902      	bls.n	8003334 <_free_r+0x7c>
 800332e:	230c      	movs	r3, #12
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	e7d3      	b.n	80032dc <_free_r+0x24>
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	1821      	adds	r1, r4, r0
 8003338:	428a      	cmp	r2, r1
 800333a:	bf04      	itt	eq
 800333c:	6811      	ldreq	r1, [r2, #0]
 800333e:	6852      	ldreq	r2, [r2, #4]
 8003340:	6062      	str	r2, [r4, #4]
 8003342:	bf04      	itt	eq
 8003344:	1809      	addeq	r1, r1, r0
 8003346:	6021      	streq	r1, [r4, #0]
 8003348:	605c      	str	r4, [r3, #4]
 800334a:	e7c7      	b.n	80032dc <_free_r+0x24>
 800334c:	bd38      	pop	{r3, r4, r5, pc}
 800334e:	bf00      	nop
 8003350:	200001ac 	.word	0x200001ac

08003354 <_malloc_r>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	1ccd      	adds	r5, r1, #3
 8003358:	f025 0503 	bic.w	r5, r5, #3
 800335c:	3508      	adds	r5, #8
 800335e:	2d0c      	cmp	r5, #12
 8003360:	bf38      	it	cc
 8003362:	250c      	movcc	r5, #12
 8003364:	2d00      	cmp	r5, #0
 8003366:	4606      	mov	r6, r0
 8003368:	db01      	blt.n	800336e <_malloc_r+0x1a>
 800336a:	42a9      	cmp	r1, r5
 800336c:	d903      	bls.n	8003376 <_malloc_r+0x22>
 800336e:	230c      	movs	r3, #12
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	2000      	movs	r0, #0
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	f000 f87d 	bl	8003474 <__malloc_lock>
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <_malloc_r+0xac>)
 800337c:	6814      	ldr	r4, [r2, #0]
 800337e:	4621      	mov	r1, r4
 8003380:	b991      	cbnz	r1, 80033a8 <_malloc_r+0x54>
 8003382:	4c20      	ldr	r4, [pc, #128]	; (8003404 <_malloc_r+0xb0>)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	b91b      	cbnz	r3, 8003390 <_malloc_r+0x3c>
 8003388:	4630      	mov	r0, r6
 800338a:	f000 f863 	bl	8003454 <_sbrk_r>
 800338e:	6020      	str	r0, [r4, #0]
 8003390:	4629      	mov	r1, r5
 8003392:	4630      	mov	r0, r6
 8003394:	f000 f85e 	bl	8003454 <_sbrk_r>
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	d124      	bne.n	80033e6 <_malloc_r+0x92>
 800339c:	230c      	movs	r3, #12
 800339e:	6033      	str	r3, [r6, #0]
 80033a0:	4630      	mov	r0, r6
 80033a2:	f000 f868 	bl	8003476 <__malloc_unlock>
 80033a6:	e7e4      	b.n	8003372 <_malloc_r+0x1e>
 80033a8:	680b      	ldr	r3, [r1, #0]
 80033aa:	1b5b      	subs	r3, r3, r5
 80033ac:	d418      	bmi.n	80033e0 <_malloc_r+0x8c>
 80033ae:	2b0b      	cmp	r3, #11
 80033b0:	d90f      	bls.n	80033d2 <_malloc_r+0x7e>
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	50cd      	str	r5, [r1, r3]
 80033b6:	18cc      	adds	r4, r1, r3
 80033b8:	4630      	mov	r0, r6
 80033ba:	f000 f85c 	bl	8003476 <__malloc_unlock>
 80033be:	f104 000b 	add.w	r0, r4, #11
 80033c2:	1d23      	adds	r3, r4, #4
 80033c4:	f020 0007 	bic.w	r0, r0, #7
 80033c8:	1ac3      	subs	r3, r0, r3
 80033ca:	d0d3      	beq.n	8003374 <_malloc_r+0x20>
 80033cc:	425a      	negs	r2, r3
 80033ce:	50e2      	str	r2, [r4, r3]
 80033d0:	e7d0      	b.n	8003374 <_malloc_r+0x20>
 80033d2:	428c      	cmp	r4, r1
 80033d4:	684b      	ldr	r3, [r1, #4]
 80033d6:	bf16      	itet	ne
 80033d8:	6063      	strne	r3, [r4, #4]
 80033da:	6013      	streq	r3, [r2, #0]
 80033dc:	460c      	movne	r4, r1
 80033de:	e7eb      	b.n	80033b8 <_malloc_r+0x64>
 80033e0:	460c      	mov	r4, r1
 80033e2:	6849      	ldr	r1, [r1, #4]
 80033e4:	e7cc      	b.n	8003380 <_malloc_r+0x2c>
 80033e6:	1cc4      	adds	r4, r0, #3
 80033e8:	f024 0403 	bic.w	r4, r4, #3
 80033ec:	42a0      	cmp	r0, r4
 80033ee:	d005      	beq.n	80033fc <_malloc_r+0xa8>
 80033f0:	1a21      	subs	r1, r4, r0
 80033f2:	4630      	mov	r0, r6
 80033f4:	f000 f82e 	bl	8003454 <_sbrk_r>
 80033f8:	3001      	adds	r0, #1
 80033fa:	d0cf      	beq.n	800339c <_malloc_r+0x48>
 80033fc:	6025      	str	r5, [r4, #0]
 80033fe:	e7db      	b.n	80033b8 <_malloc_r+0x64>
 8003400:	200001ac 	.word	0x200001ac
 8003404:	200001b0 	.word	0x200001b0

08003408 <_realloc_r>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	4607      	mov	r7, r0
 800340c:	4614      	mov	r4, r2
 800340e:	460e      	mov	r6, r1
 8003410:	b921      	cbnz	r1, 800341c <_realloc_r+0x14>
 8003412:	4611      	mov	r1, r2
 8003414:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003418:	f7ff bf9c 	b.w	8003354 <_malloc_r>
 800341c:	b922      	cbnz	r2, 8003428 <_realloc_r+0x20>
 800341e:	f7ff ff4b 	bl	80032b8 <_free_r>
 8003422:	4625      	mov	r5, r4
 8003424:	4628      	mov	r0, r5
 8003426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003428:	f000 f826 	bl	8003478 <_malloc_usable_size_r>
 800342c:	42a0      	cmp	r0, r4
 800342e:	d20f      	bcs.n	8003450 <_realloc_r+0x48>
 8003430:	4621      	mov	r1, r4
 8003432:	4638      	mov	r0, r7
 8003434:	f7ff ff8e 	bl	8003354 <_malloc_r>
 8003438:	4605      	mov	r5, r0
 800343a:	2800      	cmp	r0, #0
 800343c:	d0f2      	beq.n	8003424 <_realloc_r+0x1c>
 800343e:	4631      	mov	r1, r6
 8003440:	4622      	mov	r2, r4
 8003442:	f7ff ff15 	bl	8003270 <memcpy>
 8003446:	4631      	mov	r1, r6
 8003448:	4638      	mov	r0, r7
 800344a:	f7ff ff35 	bl	80032b8 <_free_r>
 800344e:	e7e9      	b.n	8003424 <_realloc_r+0x1c>
 8003450:	4635      	mov	r5, r6
 8003452:	e7e7      	b.n	8003424 <_realloc_r+0x1c>

08003454 <_sbrk_r>:
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	4c06      	ldr	r4, [pc, #24]	; (8003470 <_sbrk_r+0x1c>)
 8003458:	2300      	movs	r3, #0
 800345a:	4605      	mov	r5, r0
 800345c:	4608      	mov	r0, r1
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	f7fd fa3c 	bl	80008dc <_sbrk>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d102      	bne.n	800346e <_sbrk_r+0x1a>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	b103      	cbz	r3, 800346e <_sbrk_r+0x1a>
 800346c:	602b      	str	r3, [r5, #0]
 800346e:	bd38      	pop	{r3, r4, r5, pc}
 8003470:	200001f8 	.word	0x200001f8

08003474 <__malloc_lock>:
 8003474:	4770      	bx	lr

08003476 <__malloc_unlock>:
 8003476:	4770      	bx	lr

08003478 <_malloc_usable_size_r>:
 8003478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800347c:	1f18      	subs	r0, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	bfbc      	itt	lt
 8003482:	580b      	ldrlt	r3, [r1, r0]
 8003484:	18c0      	addlt	r0, r0, r3
 8003486:	4770      	bx	lr

08003488 <_init>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	bf00      	nop
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr

08003494 <_fini>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr
