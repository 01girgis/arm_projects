
BMP280_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006544  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08006718  08006718  00016718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d80  08006d80  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d88  08006d88  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d8c  08006d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000080  08006e10  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08006e10  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce62  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001df4  00000000  00000000  0002cf12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa0  00000000  00000000  0002ed08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a0  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000230fe  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a288  00000000  00000000  00053246  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc4ea  00000000  00000000  0005d4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001299b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003200  00000000  00000000  00129a34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080066fc 	.word	0x080066fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080066fc 	.word	0x080066fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b972 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4688      	mov	r8, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14b      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	d967      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0720 	rsb	r7, r2, #32
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	ea47 0803 	orr.w	r8, r7, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5a:	f080 811b 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8118 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c64:	3f02      	subs	r7, #2
 8000c66:	442b      	add	r3, r5
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8107 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	f240 8104 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c90:	3802      	subs	r0, #2
 8000c92:	442c      	add	r4, r5
 8000c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xbe>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80eb 	beq.w	8000e8e <__udivmoddi4+0x286>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e9c6 0100 	strd	r0, r1, [r6]
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f783 	clz	r7, r3
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d147      	bne.n	8000d5e <__udivmoddi4+0x156>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd0>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80fa 	bhi.w	8000ecc <__udivmoddi4+0x2c4>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000ce6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xe8>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfa:	1b49      	subs	r1, r1, r5
 8000cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d00:	fa1f f885 	uxth.w	r8, r5
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d14:	fb08 f10c 	mul.w	r1, r8, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4299      	cmp	r1, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x14c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x14a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80b6 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e79f      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d62:	40bb      	lsls	r3, r7
 8000d64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d7c:	4325      	orrs	r5, r4
 8000d7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	fb08 3319 	mls	r3, r8, r9, r3
 8000d88:	fa1f fa8e 	uxth.w	sl, lr
 8000d8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d90:	fb09 f40a 	mul.w	r4, r9, sl
 8000d94:	429c      	cmp	r4, r3
 8000d96:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1e 0303 	adds.w	r3, lr, r3
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	f080 8087 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dac:	429c      	cmp	r4, r3
 8000dae:	f240 8084 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db2:	f1a9 0902 	sub.w	r9, r9, #2
 8000db6:	4473      	add	r3, lr
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dcc:	45a2      	cmp	sl, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	d26b      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d969      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4474      	add	r4, lr
 8000de2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	eba4 040a 	sub.w	r4, r4, sl
 8000dee:	454c      	cmp	r4, r9
 8000df0:	46c2      	mov	sl, r8
 8000df2:	464b      	mov	r3, r9
 8000df4:	d354      	bcc.n	8000ea0 <__udivmoddi4+0x298>
 8000df6:	d051      	beq.n	8000e9c <__udivmoddi4+0x294>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d069      	beq.n	8000ed0 <__udivmoddi4+0x2c8>
 8000dfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000e00:	eb64 0403 	sbc.w	r4, r4, r3
 8000e04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	40fc      	lsrs	r4, r7
 8000e0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e10:	e9c6 5400 	strd	r5, r4, [r6]
 8000e14:	2700      	movs	r7, #0
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e20:	4095      	lsls	r5, r2
 8000e22:	fa01 f002 	lsl.w	r0, r1, r2
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e2e:	4338      	orrs	r0, r7
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e36:	fa1f f885 	uxth.w	r8, r5
 8000e3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb07 f308 	mul.w	r3, r7, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3f02      	subs	r7, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	b281      	uxth	r1, r0
 8000e62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6e:	fb00 f308 	mul.w	r3, r0, r8
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x27e>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e7c:	d217      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d915      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e8c:	e73b      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	4630      	mov	r0, r6
 8000e92:	e709      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e94:	4607      	mov	r7, r0
 8000e96:	e6e7      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fb      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e9c:	4541      	cmp	r1, r8
 8000e9e:	d2ab      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	e7a4      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	e7e9      	b.n	8000e86 <__udivmoddi4+0x27e>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e795      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb6:	4667      	mov	r7, ip
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e77c      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	442c      	add	r4, r5
 8000ec2:	e747      	b.n	8000d54 <__udivmoddi4+0x14c>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	442b      	add	r3, r5
 8000eca:	e72f      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	e708      	b.n	8000ce2 <__udivmoddi4+0xda>
 8000ed0:	4637      	mov	r7, r6
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0xa0>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <BMP280_I2C_Write>:
 *
 */
static inline s8 BMP280_I2C_Write (u8 dev_addr,
		u8 reg_addr,
		u8 *reg_data,
		u8 cnt) {
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	603a      	str	r2, [r7, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	4613      	mov	r3, r2
 8000eec:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(p_bmp280->i2c_handle, dev_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <BMP280_I2C_Write+0x4c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6a18      	ldr	r0, [r3, #32]
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	b299      	uxth	r1, r3
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	b29c      	uxth	r4, r3
 8000f00:	797b      	ldrb	r3, [r7, #5]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	2264      	movs	r2, #100	; 0x64
 8000f06:	9202      	str	r2, [sp, #8]
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	4622      	mov	r2, r4
 8000f12:	f001 fa91 	bl	8002438 <HAL_I2C_Mem_Write>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b25b      	sxtb	r3, r3
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001b8 	.word	0x200001b8

08000f28 <BMP280_I2C_Read>:
 *
 */
static inline s8 BMP280_I2C_Read (u8 dev_addr,
		u8 reg_addr,
		u8 *reg_data,
		u8 cnt) {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af04      	add	r7, sp, #16
 8000f2e:	603a      	str	r2, [r7, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	460b      	mov	r3, r1
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(p_bmp280->i2c_handle, dev_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <BMP280_I2C_Read+0x4c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6a18      	ldr	r0, [r3, #32]
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	b29c      	uxth	r4, r3
 8000f50:	797b      	ldrb	r3, [r7, #5]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	2264      	movs	r2, #100	; 0x64
 8000f56:	9202      	str	r2, [sp, #8]
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4622      	mov	r2, r4
 8000f62:	f001 fb63 	bl	800262c <HAL_I2C_Mem_Read>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b25b      	sxtb	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001b8 	.word	0x200001b8

08000f78 <BMP280_init>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_init(bmp280_t *bmp280)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	737b      	strb	r3, [r7, #13]
	u8 v_chip_id_read_count = BMP280_CHIP_ID_READ_COUNT;
 8000f88:	2305      	movs	r3, #5
 8000f8a:	73bb      	strb	r3, [r7, #14]

	p_bmp280 = bmp280;/* assign BMP280 ptr */
 8000f8c:	4a2b      	ldr	r2, [pc, #172]	; (800103c <BMP280_init+0xc4>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
#ifdef HAL_I2C_MODULE_ENABLED
	p_bmp280->bus_write = BMP280_I2C_Write;
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <BMP280_init+0xc4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a2a      	ldr	r2, [pc, #168]	; (8001040 <BMP280_init+0xc8>)
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
	p_bmp280->bus_read = BMP280_I2C_Read;
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <BMP280_init+0xc4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a29      	ldr	r2, [pc, #164]	; (8001044 <BMP280_init+0xcc>)
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif HAL_SPI_MODULE_ENABLED
	p_bmp280->bus_write = BMP280_SPI_Write;
	p_bmp280->bus_read = BMP280_SPI_Read;
#endif
	if (p_bmp280->dev_addr == 0) {
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <BMP280_init+0xc4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	7f5b      	ldrb	r3, [r3, #29]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d103      	bne.n	8000fb4 <BMP280_init+0x3c>
		p_bmp280->dev_addr = BMP280_I2C_ADDRESS1;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <BMP280_init+0xc4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2276      	movs	r2, #118	; 0x76
 8000fb2:	775a      	strb	r2, [r3, #29]
	}
	p_bmp280->delay_msec = HAL_Delay;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <BMP280_init+0xc4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a23      	ldr	r2, [pc, #140]	; (8001048 <BMP280_init+0xd0>)
 8000fba:	631a      	str	r2, [r3, #48]	; 0x30

	while (v_chip_id_read_count > 0) {
 8000fbc:	e01d      	b.n	8000ffa <BMP280_init+0x82>
		/* read chip id */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <BMP280_init+0xc4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <BMP280_init+0xc4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	7f58      	ldrb	r0, [r3, #29]
 8000fca:	f107 020d 	add.w	r2, r7, #13
 8000fce:	2301      	movs	r3, #1
 8000fd0:	21d0      	movs	r1, #208	; 0xd0
 8000fd2:	47a0      	blx	r4
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
				BMP280_CHIP_ID_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		/* Check for the correct chip id */
		if ((v_data_u8 == BMP280_CHIP_ID1)
 8000fd8:	7b7b      	ldrb	r3, [r7, #13]
 8000fda:	2b56      	cmp	r3, #86	; 0x56
 8000fdc:	d010      	beq.n	8001000 <BMP280_init+0x88>
			|| (v_data_u8 == BMP280_CHIP_ID2)
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	2b57      	cmp	r3, #87	; 0x57
 8000fe2:	d00d      	beq.n	8001000 <BMP280_init+0x88>
			|| (v_data_u8 == BMP280_CHIP_ID3))
 8000fe4:	7b7b      	ldrb	r3, [r7, #13]
 8000fe6:	2b58      	cmp	r3, #88	; 0x58
 8000fe8:	d00a      	beq.n	8001000 <BMP280_init+0x88>
			break;
		v_chip_id_read_count--;
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	73bb      	strb	r3, [r7, #14]
		/* Delay added concerning the low speed of power up system to
		facilitate the proper reading of the chip ID */
		p_bmp280->delay_msec(BMP280_REGISTER_READ_DELAY);
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <BMP280_init+0xc4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	4798      	blx	r3
	while (v_chip_id_read_count > 0) {
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1de      	bne.n	8000fbe <BMP280_init+0x46>
	}

	/*assign chip ID to the global structure*/
	p_bmp280->chip_id = v_data_u8;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <BMP280_init+0xc4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	7b7a      	ldrb	r2, [r7, #13]
 8001006:	771a      	strb	r2, [r3, #28]
	/*com_rslt status of chip ID read*/
	com_rslt = (v_chip_id_read_count == BMP280_INIT_VALUE) ?
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <BMP280_init+0x9c>
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e000      	b.n	8001016 <BMP280_init+0x9e>
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
			BMP280_CHIP_ID_READ_FAIL : BMP280_CHIP_ID_READ_SUCCESS;

	if (com_rslt == BMP280_CHIP_ID_READ_SUCCESS) {
 8001018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d107      	bne.n	8001030 <BMP280_init+0xb8>
		/* readout bmp280 calibration parameter structure */
		com_rslt += BMP280_get_calib_param();
 8001020:	f000 f87c 	bl	800111c <BMP280_get_calib_param>
 8001024:	4603      	mov	r3, r0
 8001026:	b2da      	uxtb	r2, r3
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	4413      	add	r3, r2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	73fb      	strb	r3, [r7, #15]
	}
	return com_rslt;
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}
 800103c:	200001b8 	.word	0x200001b8
 8001040:	08000ed9 	.word	0x08000ed9
 8001044:	08000f29 	.word	0x08000f29
 8001048:	08001c81 	.word	0x08001c81

0800104c <BMP280_read_uncomp_temperature>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_uncomp_temperature(
		s32 *v_uncomp_temperature_s32)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001054:	23ff      	movs	r3, #255	; 0xff
 8001056:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8r[0] - Temperature MSB
	 a_data_u8r[1] - Temperature LSB
	 a_data_u8r[2] - Temperature LSB
	 */
	u8 a_data_u8r[BMP280_TEMPERATURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 8001058:	2300      	movs	r3, #0
 800105a:	733b      	strb	r3, [r7, #12]
 800105c:	2300      	movs	r3, #0
 800105e:	737b      	strb	r3, [r7, #13]
 8001060:	2300      	movs	r3, #0
 8001062:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <BMP280_read_uncomp_temperature+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <BMP280_read_uncomp_temperature+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 800106c:	2381      	movs	r3, #129	; 0x81
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e018      	b.n	80010a4 <BMP280_read_uncomp_temperature+0x58>
	} else {
		/* read temperature data */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <BMP280_read_uncomp_temperature+0x64>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <BMP280_read_uncomp_temperature+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	7f58      	ldrb	r0, [r3, #29]
 800107e:	f107 020c 	add.w	r2, r7, #12
 8001082:	2303      	movs	r3, #3
 8001084:	21fa      	movs	r1, #250	; 0xfa
 8001086:	47a0      	blx	r4
 8001088:	4603      	mov	r3, r0
 800108a:	73fb      	strb	r3, [r7, #15]
				BMP280_TEMPERATURE_MSB_REG, a_data_u8r,
				BMP280_TEMPERATURE_DATA_LENGTH);
		*v_uncomp_temperature_s32 = (s32)((((u32)(
				a_data_u8r[BMP280_TEMPERATURE_MSB_DATA]))
 800108c:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 800108e:	031a      	lsls	r2, r3, #12
				| (((u32)(
				a_data_u8r[BMP280_TEMPERATURE_LSB_DATA]))
 8001090:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 8001092:	011b      	lsls	r3, r3, #4
				| (((u32)(
 8001094:	4313      	orrs	r3, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 8001096:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 8001098:	0912      	lsrs	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 800109c:	4313      	orrs	r3, r2
		*v_uncomp_temperature_s32 = (s32)((((u32)(
 800109e:	461a      	mov	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	200001b8 	.word	0x200001b8

080010b4 <BMP280_read_uncomp_pressure>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_uncomp_pressure(
		s32 *v_uncomp_pressure_s32)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80010bc:	23ff      	movs	r3, #255	; 0xff
 80010be:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8[0] - Pressure MSB
	 a_data_u8[1] - Pressure LSB
	 a_data_u8[2] - Pressure LSB
	 */
	u8 a_data_u8[BMP280_PRESSURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 80010c0:	2300      	movs	r3, #0
 80010c2:	733b      	strb	r3, [r7, #12]
 80010c4:	2300      	movs	r3, #0
 80010c6:	737b      	strb	r3, [r7, #13]
 80010c8:	2300      	movs	r3, #0
 80010ca:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <BMP280_read_uncomp_pressure+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <BMP280_read_uncomp_pressure+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 80010d4:	2381      	movs	r3, #129	; 0x81
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e018      	b.n	800110c <BMP280_read_uncomp_pressure+0x58>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <BMP280_read_uncomp_pressure+0x64>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <BMP280_read_uncomp_pressure+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	7f58      	ldrb	r0, [r3, #29]
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	2303      	movs	r3, #3
 80010ec:	21f7      	movs	r1, #247	; 0xf7
 80010ee:	47a0      	blx	r4
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]
				BMP280_PRESSURE_MSB_REG, a_data_u8,
				BMP280_PRESSURE_DATA_LENGTH);
		*v_uncomp_pressure_s32 = (s32)((((u32)(
				a_data_u8[BMP280_PRESSURE_MSB_DATA]))
 80010f4:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 80010f6:	031a      	lsls	r2, r3, #12
				| (((u32)(a_data_u8[BMP280_PRESSURE_LSB_DATA]))
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 80010fa:	011b      	lsls	r3, r3, #4
				| (((u32)(a_data_u8[BMP280_PRESSURE_LSB_DATA]))
 80010fc:	4313      	orrs	r3, r2
				| ((u32)a_data_u8[BMP280_PRESSURE_XLSB_DATA]
 80010fe:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 8001100:	0912      	lsrs	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8[BMP280_PRESSURE_XLSB_DATA]
 8001104:	4313      	orrs	r3, r2
		*v_uncomp_pressure_s32 = (s32)((((u32)(
 8001106:	461a      	mov	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 800110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}
 8001118:	200001b8 	.word	0x200001b8

0800111c <BMP280_get_calib_param>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_get_calib_param(void)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001122:	23ff      	movs	r3, #255	; 0xff
 8001124:	77fb      	strb	r3, [r7, #31]
	u8 a_data_u8[BMP280_CALIB_DATA_SIZE] = {BMP280_INIT_VALUE,
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	615a      	str	r2, [r3, #20]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001136:	4b4e      	ldr	r3, [pc, #312]	; (8001270 <BMP280_get_calib_param+0x154>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <BMP280_get_calib_param+0x28>
		com_rslt = E_BMP280_NULL_PTR;
 800113e:	2381      	movs	r3, #129	; 0x81
 8001140:	77fb      	strb	r3, [r7, #31]
 8001142:	e08f      	b.n	8001264 <BMP280_get_calib_param+0x148>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8001144:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <BMP280_get_calib_param+0x154>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800114a:	4b49      	ldr	r3, [pc, #292]	; (8001270 <BMP280_get_calib_param+0x154>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	7f58      	ldrb	r0, [r3, #29]
 8001150:	1d3a      	adds	r2, r7, #4
 8001152:	2318      	movs	r3, #24
 8001154:	2188      	movs	r1, #136	; 0x88
 8001156:	47a0      	blx	r4
 8001158:	4603      	mov	r3, r0
 800115a:	77fb      	strb	r3, [r7, #31]
				BMP280_TEMPERATURE_CALIB_DIG_T1_LSB_REG,
				a_data_u8,
				BMP280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH);
		/* read calibration values*/
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 800115c:	797b      	ldrb	r3, [r7, #5]
					BMP280_TEMPERATURE_CALIB_DIG_T1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 800115e:	021b      	lsls	r3, r3, #8
					| a_data_u8[
 8001160:	b21a      	sxth	r2, r3
 8001162:	793b      	ldrb	r3, [r7, #4]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <BMP280_get_calib_param+0x154>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b292      	uxth	r2, r2
 8001170:	801a      	strh	r2, [r3, #0]
					BMP280_TEMPERATURE_CALIB_DIG_T1_LSB]);
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	b25b      	sxtb	r3, r3
					BMP280_TEMPERATURE_CALIB_DIG_T2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001176:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001178:	b219      	sxth	r1, r3
					| a_data_u8[
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 800117e:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <BMP280_get_calib_param+0x154>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	b212      	sxth	r2, r2
 8001186:	805a      	strh	r2, [r3, #2]
					BMP280_TEMPERATURE_CALIB_DIG_T2_LSB]);
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8001188:	7a7b      	ldrb	r3, [r7, #9]
 800118a:	b25b      	sxtb	r3, r3
					BMP280_TEMPERATURE_CALIB_DIG_T3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 800118c:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 800118e:	b219      	sxth	r1, r3
					| a_data_u8[
 8001190:	7a3b      	ldrb	r3, [r7, #8]
 8001192:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <BMP280_get_calib_param+0x154>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	b212      	sxth	r2, r2
 800119c:	809a      	strh	r2, [r3, #4]
					BMP280_TEMPERATURE_CALIB_DIG_T3_LSB]);
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 800119e:	7afb      	ldrb	r3, [r7, #11]
					BMP280_PRESSURE_CALIB_DIG_P1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80011a0:	021b      	lsls	r3, r3, #8
					| a_data_u8[
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7abb      	ldrb	r3, [r7, #10]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <BMP280_get_calib_param+0x154>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b292      	uxth	r2, r2
 80011b2:	80da      	strh	r2, [r3, #6]
					BMP280_PRESSURE_CALIB_DIG_P1_LSB]);
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80011b8:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 80011ba:	b219      	sxth	r1, r3
					| a_data_u8[
 80011bc:	7b3b      	ldrb	r3, [r7, #12]
 80011be:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <BMP280_get_calib_param+0x154>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	b212      	sxth	r2, r2
 80011c8:	811a      	strh	r2, [r3, #8]
					BMP280_PRESSURE_CALIB_DIG_P2_LSB]);
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80011ce:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 80011d0:	b219      	sxth	r1, r3
					| a_data_u8[
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <BMP280_get_calib_param+0x154>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	b212      	sxth	r2, r2
 80011de:	815a      	strh	r2, [r3, #10]
					BMP280_PRESSURE_CALIB_DIG_P3_LSB]);
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 80011e0:	7c7b      	ldrb	r3, [r7, #17]
 80011e2:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P4_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80011e4:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 80011e6:	b219      	sxth	r1, r3
					| a_data_u8[
 80011e8:	7c3b      	ldrb	r3, [r7, #16]
 80011ea:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <BMP280_get_calib_param+0x154>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	b212      	sxth	r2, r2
 80011f4:	819a      	strh	r2, [r3, #12]
					BMP280_PRESSURE_CALIB_DIG_P4_LSB]);
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 80011f6:	7cfb      	ldrb	r3, [r7, #19]
 80011f8:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P5_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80011fa:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 80011fc:	b219      	sxth	r1, r3
					| a_data_u8[
 80011fe:	7cbb      	ldrb	r3, [r7, #18]
 8001200:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <BMP280_get_calib_param+0x154>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	b212      	sxth	r2, r2
 800120a:	81da      	strh	r2, [r3, #14]
					BMP280_PRESSURE_CALIB_DIG_P5_LSB]);
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 800120c:	7d7b      	ldrb	r3, [r7, #21]
 800120e:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P6_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001210:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001212:	b219      	sxth	r1, r3
					| a_data_u8[
 8001214:	7d3b      	ldrb	r3, [r7, #20]
 8001216:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <BMP280_get_calib_param+0x154>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	430a      	orrs	r2, r1
 800121e:	b212      	sxth	r2, r2
 8001220:	821a      	strh	r2, [r3, #16]
					BMP280_PRESSURE_CALIB_DIG_P6_LSB]);
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P7_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001226:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8001228:	b219      	sxth	r1, r3
					| a_data_u8[
 800122a:	7dbb      	ldrb	r3, [r7, #22]
 800122c:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <BMP280_get_calib_param+0x154>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	b212      	sxth	r2, r2
 8001236:	825a      	strh	r2, [r3, #18]
					BMP280_PRESSURE_CALIB_DIG_P7_LSB]);
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8001238:	7e7b      	ldrb	r3, [r7, #25]
 800123a:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P8_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 800123c:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 800123e:	b219      	sxth	r1, r3
					| a_data_u8[
 8001240:	7e3b      	ldrb	r3, [r7, #24]
 8001242:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <BMP280_get_calib_param+0x154>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	b212      	sxth	r2, r2
 800124c:	829a      	strh	r2, [r3, #20]
					BMP280_PRESSURE_CALIB_DIG_P8_LSB]);
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 800124e:	7efb      	ldrb	r3, [r7, #27]
 8001250:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P9_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001252:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8001254:	b219      	sxth	r1, r3
					| a_data_u8[
 8001256:	7ebb      	ldrb	r3, [r7, #26]
 8001258:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <BMP280_get_calib_param+0x154>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	b212      	sxth	r2, r2
 8001262:	82da      	strh	r2, [r3, #22]
					BMP280_PRESSURE_CALIB_DIG_P9_LSB]);
	}
	return com_rslt;
 8001264:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3724      	adds	r7, #36	; 0x24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	200001b8 	.word	0x200001b8

08001274 <BMP280_set_power_mode>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_power_mode(u8 v_power_mode_u8)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 800127e:	23ff      	movs	r3, #255	; 0xff
 8001280:	73fb      	strb	r3, [r7, #15]
	u8 v_mode_u8 = BMP280_INIT_VALUE;
 8001282:	2300      	movs	r3, #0
 8001284:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <BMP280_set_power_mode+0x80>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <BMP280_set_power_mode+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 800128e:	2381      	movs	r3, #129	; 0x81
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e029      	b.n	80012e8 <BMP280_set_power_mode+0x74>
	} else {
		if (v_power_mode_u8 <= BMP280_NORMAL_MODE) {
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d824      	bhi.n	80012e4 <BMP280_set_power_mode+0x70>
			/* write the power mode*/
			v_mode_u8 = (p_bmp280->oversamp_temperature
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <BMP280_set_power_mode+0x80>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
					<< BMP280_SHIFT_BIT_POSITION_BY_05_BITS)
 80012a2:	015b      	lsls	r3, r3, #5
 80012a4:	b2da      	uxtb	r2, r3
					+ (p_bmp280->oversamp_pressure
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <BMP280_set_power_mode+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
					<< BMP280_SHIFT_BIT_POSITION_BY_02_BITS)
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	b2db      	uxtb	r3, r3
					+ (p_bmp280->oversamp_pressure
 80012b2:	4413      	add	r3, r2
 80012b4:	b2da      	uxtb	r2, r3
					+ v_power_mode_u8;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4413      	add	r3, r2
 80012ba:	b2db      	uxtb	r3, r3
			v_mode_u8 = (p_bmp280->oversamp_temperature
 80012bc:	73bb      	strb	r3, [r7, #14]
			com_rslt = p_bmp280->BMP280_BUS_WRITE_FUNC(
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <BMP280_set_power_mode+0x80>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <BMP280_set_power_mode+0x80>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	7f58      	ldrb	r0, [r3, #29]
 80012ca:	f107 020e 	add.w	r2, r7, #14
 80012ce:	2301      	movs	r3, #1
 80012d0:	21f4      	movs	r1, #244	; 0xf4
 80012d2:	47a0      	blx	r4
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
					BMP280_CTRL_MEAS_REG_POWER_MODE__REG,
					&v_mode_u8,
					BMP280_GEN_READ_WRITE_DATA_LENGTH);
			/* Delay added concerning the low speed of power up system to
			facilitate the proper setting of power mode */
			p_bmp280->delay_msec(T_INIT_MAX);
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <BMP280_set_power_mode+0x80>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	2014      	movs	r0, #20
 80012e0:	4798      	blx	r3
 80012e2:	e001      	b.n	80012e8 <BMP280_set_power_mode+0x74>
		} else {
			com_rslt = E_BMP280_OUT_OF_RANGE;
 80012e4:	23fe      	movs	r3, #254	; 0xfe
 80012e6:	73fb      	strb	r3, [r7, #15]
		}
	}
	return com_rslt;
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	200001b8 	.word	0x200001b8

080012f8 <BMP280_set_standby_durn>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_standby_durn(u8 v_standby_durn_u8)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001302:	23ff      	movs	r3, #255	; 0xff
 8001304:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8001306:	2300      	movs	r3, #0
 8001308:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <BMP280_set_standby_durn+0x88>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <BMP280_set_standby_durn+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8001312:	2381      	movs	r3, #129	; 0x81
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	e02d      	b.n	8001374 <BMP280_set_standby_durn+0x7c>
	} else {
		/* write the standby duration*/
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <BMP280_set_standby_durn+0x88>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <BMP280_set_standby_durn+0x88>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	7f58      	ldrb	r0, [r3, #29]
 8001324:	f107 020e 	add.w	r2, r7, #14
 8001328:	2301      	movs	r3, #1
 800132a:	21f5      	movs	r1, #245	; 0xf5
 800132c:	47a0      	blx	r4
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
				BMP280_CONFIG_REG_STANDBY_DURN__REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		if (com_rslt == SUCCESS) {
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11c      	bne.n	8001374 <BMP280_set_standby_durn+0x7c>
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	b25b      	sxtb	r3, r3
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	b25a      	sxtb	r2, r3
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	015b      	lsls	r3, r3, #5
 8001348:	b25b      	sxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b25b      	sxtb	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	73bb      	strb	r3, [r7, #14]
					BMP280_CONFIG_REG_STANDBY_DURN,
					v_standby_durn_u8);
			com_rslt += p_bmp280->BMP280_BUS_WRITE_FUNC(
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <BMP280_set_standby_durn+0x88>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <BMP280_set_standby_durn+0x88>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	7f58      	ldrb	r0, [r3, #29]
 800135e:	f107 020e 	add.w	r2, r7, #14
 8001362:	2301      	movs	r3, #1
 8001364:	21f5      	movs	r1, #245	; 0xf5
 8001366:	47a0      	blx	r4
 8001368:	4603      	mov	r3, r0
 800136a:	b2da      	uxtb	r2, r3
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	4413      	add	r3, r2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	73fb      	strb	r3, [r7, #15]
					BMP280_CONFIG_REG_STANDBY_DURN__REG,
					&v_data_u8,
					BMP280_GEN_READ_WRITE_DATA_LENGTH);
		}
	}
	return com_rslt;
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bd90      	pop	{r4, r7, pc}
 8001380:	200001b8 	.word	0x200001b8

08001384 <BMP280_set_work_mode>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_work_mode(u8 v_work_mode_u8)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 800138e:	23ff      	movs	r3, #255	; 0xff
 8001390:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8001392:	2300      	movs	r3, #0
 8001394:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001396:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <BMP280_set_work_mode+0x150>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <BMP280_set_work_mode+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 800139e:	2381      	movs	r3, #129	; 0x81
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e091      	b.n	80014c8 <BMP280_set_work_mode+0x144>
	} else {
	if (v_work_mode_u8 <= BMP280_ULTRA_HIGH_RESOLUTION_MODE) {
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	f200 808c 	bhi.w	80014c4 <BMP280_set_work_mode+0x140>
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(
 80013ac:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <BMP280_set_work_mode+0x150>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80013b2:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <BMP280_set_work_mode+0x150>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	7f58      	ldrb	r0, [r3, #29]
 80013b8:	f107 020e 	add.w	r2, r7, #14
 80013bc:	2301      	movs	r3, #1
 80013be:	21f4      	movs	r1, #244	; 0xf4
 80013c0:	47a0      	blx	r4
 80013c2:	4603      	mov	r3, r0
 80013c4:	73fb      	strb	r3, [r7, #15]
				p_bmp280->dev_addr,
				BMP280_CTRL_MEAS_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		if (com_rslt == SUCCESS) {
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d17c      	bne.n	80014c8 <BMP280_set_work_mode+0x144>
			switch (v_work_mode_u8) {
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d844      	bhi.n	800145e <BMP280_set_work_mode+0xda>
 80013d4:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <BMP280_set_work_mode+0x58>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	080013f1 	.word	0x080013f1
 80013e0:	08001407 	.word	0x08001407
 80013e4:	0800141d 	.word	0x0800141d
 80013e8:	08001433 	.word	0x08001433
 80013ec:	08001449 	.word	0x08001449
			/* write work mode*/
			case BMP280_ULTRA_LOW_POWER_MODE:
				p_bmp280->oversamp_temperature =
 80013f0:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <BMP280_set_work_mode+0x150>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_ULTRALOWPOWER_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 80013fa:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <BMP280_set_work_mode+0x150>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					BMP280_ULTRALOWPOWER_OVERSAMP_PRESSURE;
				break;
 8001404:	e02b      	b.n	800145e <BMP280_set_work_mode+0xda>
			case BMP280_LOW_POWER_MODE:
				p_bmp280->oversamp_temperature =
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <BMP280_set_work_mode+0x150>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					BMP280_LOWPOWER_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <BMP280_set_work_mode+0x150>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					BMP280_LOWPOWER_OVERSAMP_PRESSURE;
				break;
 800141a:	e020      	b.n	800145e <BMP280_set_work_mode+0xda>
			case BMP280_STANDARD_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 800141c:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <BMP280_set_work_mode+0x150>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_STANDARDRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <BMP280_set_work_mode+0x150>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2203      	movs	r2, #3
 800142c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_STANDARDRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001430:	e015      	b.n	800145e <BMP280_set_work_mode+0xda>
			case BMP280_HIGH_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <BMP280_set_work_mode+0x150>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_HIGHRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <BMP280_set_work_mode+0x150>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2204      	movs	r2, #4
 8001442:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_HIGHRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001446:	e00a      	b.n	800145e <BMP280_set_work_mode+0xda>
			case BMP280_ULTRA_HIGH_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <BMP280_set_work_mode+0x150>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2202      	movs	r2, #2
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_ULTRAHIGHRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <BMP280_set_work_mode+0x150>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2205      	movs	r2, #5
 8001458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_ULTRAHIGHRESOLUTION_OVERSAMP_PRESSURE;
				break;
 800145c:	bf00      	nop
			}
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	b25a      	sxtb	r2, r3
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <BMP280_set_work_mode+0x150>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001470:	015b      	lsls	r3, r3, #5
 8001472:	b25b      	sxtb	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b25b      	sxtb	r3, r3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	73bb      	strb	r3, [r7, #14]
				BMP280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE,
				p_bmp280->oversamp_temperature);
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	b25b      	sxtb	r3, r3
 8001480:	f023 031c 	bic.w	r3, r3, #28
 8001484:	b25a      	sxtb	r2, r3
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <BMP280_set_work_mode+0x150>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	b25b      	sxtb	r3, r3
 8001492:	f003 031c 	and.w	r3, r3, #28
 8001496:	b25b      	sxtb	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b25b      	sxtb	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	73bb      	strb	r3, [r7, #14]
				BMP280_CTRL_MEAS_REG_OVERSAMP_PRESSURE,
				p_bmp280->oversamp_pressure);
			com_rslt += p_bmp280->BMP280_BUS_WRITE_FUNC(
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <BMP280_set_work_mode+0x150>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <BMP280_set_work_mode+0x150>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	7f58      	ldrb	r0, [r3, #29]
 80014ac:	f107 020e 	add.w	r2, r7, #14
 80014b0:	2301      	movs	r3, #1
 80014b2:	21f4      	movs	r1, #244	; 0xf4
 80014b4:	47a0      	blx	r4
 80014b6:	4603      	mov	r3, r0
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	4413      	add	r3, r2
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e001      	b.n	80014c8 <BMP280_set_work_mode+0x144>
				p_bmp280->dev_addr, BMP280_CTRL_MEAS_REG,
				&v_data_u8, BMP280_GEN_READ_WRITE_DATA_LENGTH);
		}
	} else {
		com_rslt = E_BMP280_OUT_OF_RANGE;
 80014c4:	23fe      	movs	r3, #254	; 0xfe
 80014c6:	73fb      	strb	r3, [r7, #15]
	}
	}
	return com_rslt;
 80014c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd90      	pop	{r4, r7, pc}
 80014d4:	200001b8 	.word	0x200001b8

080014d8 <BMP280_compensate_temperature_double>:
 *  @return
 *	Actual temperature in floating point
 *
 */
double BMP280_compensate_temperature_double(s32 v_uncomp_temperature_s32)
{
 80014d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014dc:	b088      	sub	sp, #32
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	double v_x1_u32r = BMP280_INIT_VALUE;
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	f04f 0400 	mov.w	r4, #0
 80014ea:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double v_x2_u32r = BMP280_INIT_VALUE;
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	f04f 0400 	mov.w	r4, #0
 80014f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double temperature = BMP280_INIT_VALUE;
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	f04f 0400 	mov.w	r4, #0
 8001502:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* calculate x1*/
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff f824 	bl	8000554 <__aeabi_i2d>
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	4b5c      	ldr	r3, [pc, #368]	; (8001684 <BMP280_compensate_temperature_double+0x1ac>)
 8001512:	f7ff f9b3 	bl	800087c <__aeabi_ddiv>
 8001516:	4603      	mov	r3, r0
 8001518:	460c      	mov	r4, r1
 800151a:	4625      	mov	r5, r4
 800151c:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_T1) / 1024.0) *
 800151e:	4b5a      	ldr	r3, [pc, #360]	; (8001688 <BMP280_compensate_temperature_double+0x1b0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f805 	bl	8000534 <__aeabi_ui2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b57      	ldr	r3, [pc, #348]	; (800168c <BMP280_compensate_temperature_double+0x1b4>)
 8001530:	f7ff f9a4 	bl	800087c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe febc 	bl	80002b8 <__aeabi_dsub>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	4625      	mov	r5, r4
 8001546:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_T2);
 8001548:	4b4f      	ldr	r3, [pc, #316]	; (8001688 <BMP280_compensate_temperature_double+0x1b0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ffff 	bl	8000554 <__aeabi_i2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 800155a:	4620      	mov	r0, r4
 800155c:	4629      	mov	r1, r5
 800155e:	f7ff f863 	bl	8000628 <__aeabi_dmul>
 8001562:	4603      	mov	r3, r0
 8001564:	460c      	mov	r4, r1
 8001566:	e9c7 3406 	strd	r3, r4, [r7, #24]
	/* calculate x2*/
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7fe fff2 	bl	8000554 <__aeabi_i2d>
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001578:	f7ff f980 	bl	800087c <__aeabi_ddiv>
 800157c:	4603      	mov	r3, r0
 800157e:	460c      	mov	r4, r1
 8001580:	4625      	mov	r5, r4
 8001582:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_T1) / 8192.0) *
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <BMP280_compensate_temperature_double+0x1b0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffd2 	bl	8000534 <__aeabi_ui2d>
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <BMP280_compensate_temperature_double+0x1b8>)
 8001596:	f7ff f971 	bl	800087c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7fe fe89 	bl	80002b8 <__aeabi_dsub>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	4625      	mov	r5, r4
 80015ac:	461c      	mov	r4, r3
			(((double)v_uncomp_temperature_s32) / 131072.0 -
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7fe ffd0 	bl	8000554 <__aeabi_i2d>
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80015bc:	f7ff f95e 	bl	800087c <__aeabi_ddiv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4690      	mov	r8, r2
 80015c6:	4699      	mov	r9, r3
			((double)p_bmp280->calib_param.dig_T1) / 8192.0)) *
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <BMP280_compensate_temperature_double+0x1b0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffb0 	bl	8000534 <__aeabi_ui2d>
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <BMP280_compensate_temperature_double+0x1b8>)
 80015da:	f7ff f94f 	bl	800087c <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
			(((double)v_uncomp_temperature_s32) / 131072.0 -
 80015e2:	4640      	mov	r0, r8
 80015e4:	4649      	mov	r1, r9
 80015e6:	f7fe fe67 	bl	80002b8 <__aeabi_dsub>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
			((double)p_bmp280->calib_param.dig_T1) / 8192.0) *
 80015ee:	4620      	mov	r0, r4
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7ff f819 	bl	8000628 <__aeabi_dmul>
 80015f6:	4603      	mov	r3, r0
 80015f8:	460c      	mov	r4, r1
 80015fa:	4625      	mov	r5, r4
 80015fc:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_T3);
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <BMP280_compensate_temperature_double+0x1b0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ffa4 	bl	8000554 <__aeabi_i2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8001610:	4620      	mov	r0, r4
 8001612:	4629      	mov	r1, r5
 8001614:	f7ff f808 	bl	8000628 <__aeabi_dmul>
 8001618:	4603      	mov	r3, r0
 800161a:	460c      	mov	r4, r1
 800161c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/* calculate t_fine*/
	p_bmp280->calib_param.t_fine = (s32)(v_x1_u32r + v_x2_u32r);
 8001620:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001624:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001628:	f7fe fe48 	bl	80002bc <__adddf3>
 800162c:	4603      	mov	r3, r0
 800162e:	460c      	mov	r4, r1
 8001630:	4619      	mov	r1, r3
 8001632:	4622      	mov	r2, r4
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <BMP280_compensate_temperature_double+0x1b0>)
 8001636:	681c      	ldr	r4, [r3, #0]
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	f7ff faa4 	bl	8000b88 <__aeabi_d2iz>
 8001640:	4603      	mov	r3, r0
 8001642:	61a3      	str	r3, [r4, #24]
	/* calculate true pressure*/
	temperature = (v_x1_u32r + v_x2_u32r) / 5120.0;
 8001644:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001648:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800164c:	f7fe fe36 	bl	80002bc <__adddf3>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	4618      	mov	r0, r3
 8001656:	4621      	mov	r1, r4
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <BMP280_compensate_temperature_double+0x1bc>)
 800165e:	f7ff f90d 	bl	800087c <__aeabi_ddiv>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return temperature;
 800166a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800166e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001672:	eeb0 0a47 	vmov.f32	s0, s14
 8001676:	eef0 0a67 	vmov.f32	s1, s15
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001682:	bf00      	nop
 8001684:	40d00000 	.word	0x40d00000
 8001688:	200001b8 	.word	0x200001b8
 800168c:	40900000 	.word	0x40900000
 8001690:	40c00000 	.word	0x40c00000
 8001694:	40b40000 	.word	0x40b40000

08001698 <BMP280_compensate_pressure_double>:
 *  @return
 *	Actual pressure in floating point
 *
 */
double BMP280_compensate_pressure_double(s32 v_uncomp_pressure_s32)
{
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	double v_x1_u32r = BMP280_INIT_VALUE;
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	f04f 0400 	mov.w	r4, #0
 80016a8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double v_x2_u32r = BMP280_INIT_VALUE;
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	f04f 0400 	mov.w	r4, #0
 80016b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double pressure = BMP280_INIT_VALUE;
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	f04f 0400 	mov.w	r4, #0
 80016c0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	v_x1_u32r = ((double)p_bmp280->calib_param.t_fine/2.0) - 64000.0;
 80016c4:	4bca      	ldr	r3, [pc, #808]	; (80019f0 <BMP280_compensate_pressure_double+0x358>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff42 	bl	8000554 <__aeabi_i2d>
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d8:	f7ff f8d0 	bl	800087c <__aeabi_ddiv>
 80016dc:	4603      	mov	r3, r0
 80016de:	460c      	mov	r4, r1
 80016e0:	4618      	mov	r0, r3
 80016e2:	4621      	mov	r1, r4
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	4bc2      	ldr	r3, [pc, #776]	; (80019f4 <BMP280_compensate_pressure_double+0x35c>)
 80016ea:	f7fe fde5 	bl	80002b8 <__aeabi_dsub>
 80016ee:	4603      	mov	r3, r0
 80016f0:	460c      	mov	r4, r1
 80016f2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x2_u32r = v_x1_u32r * v_x1_u32r *
 80016f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016fe:	f7fe ff93 	bl	8000628 <__aeabi_dmul>
 8001702:	4603      	mov	r3, r0
 8001704:	460c      	mov	r4, r1
 8001706:	4625      	mov	r5, r4
 8001708:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_P6) / 32768.0;
 800170a:	4bb9      	ldr	r3, [pc, #740]	; (80019f0 <BMP280_compensate_pressure_double+0x358>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff1e 	bl	8000554 <__aeabi_i2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
	v_x2_u32r = v_x1_u32r * v_x1_u32r *
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f7fe ff82 	bl	8000628 <__aeabi_dmul>
 8001724:	4603      	mov	r3, r0
 8001726:	460c      	mov	r4, r1
 8001728:	4618      	mov	r0, r3
 800172a:	4621      	mov	r1, r4
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	4bb1      	ldr	r3, [pc, #708]	; (80019f8 <BMP280_compensate_pressure_double+0x360>)
 8001732:	f7ff f8a3 	bl	800087c <__aeabi_ddiv>
 8001736:	4603      	mov	r3, r0
 8001738:	460c      	mov	r4, r1
 800173a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
	((double)p_bmp280->calib_param.dig_P5) * 2.0;
 800173e:	4bac      	ldr	r3, [pc, #688]	; (80019f0 <BMP280_compensate_pressure_double+0x358>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ff04 	bl	8000554 <__aeabi_i2d>
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
 800174c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001750:	f7fe ff6a 	bl	8000628 <__aeabi_dmul>
 8001754:	4603      	mov	r3, r0
 8001756:	460c      	mov	r4, r1
 8001758:	4618      	mov	r0, r3
 800175a:	4621      	mov	r1, r4
	((double)p_bmp280->calib_param.dig_P5) * 2.0;
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	f7fe fdac 	bl	80002bc <__adddf3>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
 8001768:	461a      	mov	r2, r3
 800176a:	4623      	mov	r3, r4
 800176c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001770:	f7fe fda4 	bl	80002bc <__adddf3>
 8001774:	4603      	mov	r3, r0
 8001776:	460c      	mov	r4, r1
 8001778:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x2_u32r = (v_x2_u32r / 4.0) +
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b9e      	ldr	r3, [pc, #632]	; (80019fc <BMP280_compensate_pressure_double+0x364>)
 8001782:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001786:	f7ff f879 	bl	800087c <__aeabi_ddiv>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4625      	mov	r5, r4
 8001790:	461c      	mov	r4, r3
	(((double)p_bmp280->calib_param.dig_P4) * 65536.0);
 8001792:	4b97      	ldr	r3, [pc, #604]	; (80019f0 <BMP280_compensate_pressure_double+0x358>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe feda 	bl	8000554 <__aeabi_i2d>
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	4b96      	ldr	r3, [pc, #600]	; (8001a00 <BMP280_compensate_pressure_double+0x368>)
 80017a6:	f7fe ff3f 	bl	8000628 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
	v_x2_u32r = (v_x2_u32r / 4.0) +
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	f7fe fd83 	bl	80002bc <__adddf3>
 80017b6:	4603      	mov	r3, r0
 80017b8:	460c      	mov	r4, r1
 80017ba:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x1_u32r = (((double)p_bmp280->calib_param.dig_P3) *
 80017be:	4b8c      	ldr	r3, [pc, #560]	; (80019f0 <BMP280_compensate_pressure_double+0x358>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fec4 	bl	8000554 <__aeabi_i2d>
 80017cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017d0:	f7fe ff2a 	bl	8000628 <__aeabi_dmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	4618      	mov	r0, r3
 80017da:	4621      	mov	r1, r4
		v_x1_u32r * v_x1_u32r / 524288.0 +
 80017dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017e0:	f7fe ff22 	bl	8000628 <__aeabi_dmul>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	4618      	mov	r0, r3
 80017ea:	4621      	mov	r1, r4
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <BMP280_compensate_pressure_double+0x36c>)
 80017f2:	f7ff f843 	bl	800087c <__aeabi_ddiv>
 80017f6:	4603      	mov	r3, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	4625      	mov	r5, r4
 80017fc:	461c      	mov	r4, r3
		((double)p_bmp280->calib_param.dig_P2) * v_x1_u32r) / 524288.0;
 80017fe:	4b7c      	ldr	r3, [pc, #496]	; (80019f0 <BMP280_compensate_pressure_double+0x358>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fea4 	bl	8000554 <__aeabi_i2d>
 800180c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001810:	f7fe ff0a 	bl	8000628 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
		v_x1_u32r * v_x1_u32r / 524288.0 +
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	f7fe fd4e 	bl	80002bc <__adddf3>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	4618      	mov	r0, r3
 8001826:	4621      	mov	r1, r4
	v_x1_u32r = (((double)p_bmp280->calib_param.dig_P3) *
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b75      	ldr	r3, [pc, #468]	; (8001a04 <BMP280_compensate_pressure_double+0x36c>)
 800182e:	f7ff f825 	bl	800087c <__aeabi_ddiv>
 8001832:	4603      	mov	r3, r0
 8001834:	460c      	mov	r4, r1
 8001836:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x1_u32r = (1.0 + v_x1_u32r / 32768.0) *
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b6e      	ldr	r3, [pc, #440]	; (80019f8 <BMP280_compensate_pressure_double+0x360>)
 8001840:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001844:	f7ff f81a 	bl	800087c <__aeabi_ddiv>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	4618      	mov	r0, r3
 800184e:	4621      	mov	r1, r4
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <BMP280_compensate_pressure_double+0x370>)
 8001856:	f7fe fd31 	bl	80002bc <__adddf3>
 800185a:	4603      	mov	r3, r0
 800185c:	460c      	mov	r4, r1
 800185e:	4625      	mov	r5, r4
 8001860:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_P1);
 8001862:	4b63      	ldr	r3, [pc, #396]	; (80019f0 <BMP280_compensate_pressure_double+0x358>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	88db      	ldrh	r3, [r3, #6]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe63 	bl	8000534 <__aeabi_ui2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
	v_x1_u32r = (1.0 + v_x1_u32r / 32768.0) *
 8001872:	4620      	mov	r0, r4
 8001874:	4629      	mov	r1, r5
 8001876:	f7fe fed7 	bl	8000628 <__aeabi_dmul>
 800187a:	4603      	mov	r3, r0
 800187c:	460c      	mov	r4, r1
 800187e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	pressure = 1048576.0 - (double)v_uncomp_pressure_s32;
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7fe fe66 	bl	8000554 <__aeabi_i2d>
 8001888:	4603      	mov	r3, r0
 800188a:	460c      	mov	r4, r1
 800188c:	461a      	mov	r2, r3
 800188e:	4623      	mov	r3, r4
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	495d      	ldr	r1, [pc, #372]	; (8001a0c <BMP280_compensate_pressure_double+0x374>)
 8001896:	f7fe fd0f 	bl	80002b8 <__aeabi_dsub>
 800189a:	4603      	mov	r3, r0
 800189c:	460c      	mov	r4, r1
 800189e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* Avoid exception caused by division by zero */
	if ((v_x1_u32r > 0) || (v_x1_u32r < 0))
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018ae:	f7ff f94b 	bl	8000b48 <__aeabi_dcmpgt>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10b      	bne.n	80018d0 <BMP280_compensate_pressure_double+0x238>
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018c4:	f7ff f922 	bl	8000b0c <__aeabi_dcmplt>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80a7 	beq.w	8001a1e <BMP280_compensate_pressure_double+0x386>
		pressure = (pressure - (v_x2_u32r / 4096.0)) *
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	4b4e      	ldr	r3, [pc, #312]	; (8001a10 <BMP280_compensate_pressure_double+0x378>)
 80018d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018da:	f7fe ffcf 	bl	800087c <__aeabi_ddiv>
 80018de:	4603      	mov	r3, r0
 80018e0:	460c      	mov	r4, r1
 80018e2:	461a      	mov	r2, r3
 80018e4:	4623      	mov	r3, r4
 80018e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ea:	f7fe fce5 	bl	80002b8 <__aeabi_dsub>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	4618      	mov	r0, r3
 80018f4:	4621      	mov	r1, r4
 80018f6:	a33c      	add	r3, pc, #240	; (adr r3, 80019e8 <BMP280_compensate_pressure_double+0x350>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe fe94 	bl	8000628 <__aeabi_dmul>
 8001900:	4603      	mov	r3, r0
 8001902:	460c      	mov	r4, r1
 8001904:	4618      	mov	r0, r3
 8001906:	4621      	mov	r1, r4
 8001908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190c:	f7fe ffb6 	bl	800087c <__aeabi_ddiv>
 8001910:	4603      	mov	r3, r0
 8001912:	460c      	mov	r4, r1
 8001914:	e9c7 3402 	strd	r3, r4, [r7, #8]
					6250.0 / v_x1_u32r;
	else
	return BMP280_INVALID_DATA;
	v_x1_u32r = ((double)p_bmp280->calib_param.dig_P9) *
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <BMP280_compensate_pressure_double+0x358>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe17 	bl	8000554 <__aeabi_i2d>
 8001926:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800192a:	f7fe fe7d 	bl	8000628 <__aeabi_dmul>
 800192e:	4603      	mov	r3, r0
 8001930:	460c      	mov	r4, r1
 8001932:	4618      	mov	r0, r3
 8001934:	4621      	mov	r1, r4
	pressure * pressure / 2147483648.0;
 8001936:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800193a:	f7fe fe75 	bl	8000628 <__aeabi_dmul>
 800193e:	4603      	mov	r3, r0
 8001940:	460c      	mov	r4, r1
 8001942:	4618      	mov	r0, r3
 8001944:	4621      	mov	r1, r4
	v_x1_u32r = ((double)p_bmp280->calib_param.dig_P9) *
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <BMP280_compensate_pressure_double+0x37c>)
 800194c:	f7fe ff96 	bl	800087c <__aeabi_ddiv>
 8001950:	4603      	mov	r3, r0
 8001952:	460c      	mov	r4, r1
 8001954:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x2_u32r = pressure * ((double)p_bmp280->calib_param.dig_P8) / 32768.0;
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <BMP280_compensate_pressure_double+0x358>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdf7 	bl	8000554 <__aeabi_i2d>
 8001966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800196a:	f7fe fe5d 	bl	8000628 <__aeabi_dmul>
 800196e:	4603      	mov	r3, r0
 8001970:	460c      	mov	r4, r1
 8001972:	4618      	mov	r0, r3
 8001974:	4621      	mov	r1, r4
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <BMP280_compensate_pressure_double+0x360>)
 800197c:	f7fe ff7e 	bl	800087c <__aeabi_ddiv>
 8001980:	4603      	mov	r3, r0
 8001982:	460c      	mov	r4, r1
 8001984:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 8001988:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800198c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001990:	f7fe fc94 	bl	80002bc <__adddf3>
 8001994:	4603      	mov	r3, r0
 8001996:	460c      	mov	r4, r1
 8001998:	4625      	mov	r5, r4
 800199a:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_P7)) / 16.0;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <BMP280_compensate_pressure_double+0x358>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdd5 	bl	8000554 <__aeabi_i2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe fc83 	bl	80002bc <__adddf3>
 80019b6:	4603      	mov	r3, r0
 80019b8:	460c      	mov	r4, r1
 80019ba:	4618      	mov	r0, r3
 80019bc:	4621      	mov	r1, r4
			((double)p_bmp280->calib_param.dig_P7)) / 16.0;
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <BMP280_compensate_pressure_double+0x380>)
 80019c4:	f7fe ff5a 	bl	800087c <__aeabi_ddiv>
 80019c8:	4603      	mov	r3, r0
 80019ca:	460c      	mov	r4, r1
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 80019cc:	461a      	mov	r2, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019d4:	f7fe fc72 	bl	80002bc <__adddf3>
 80019d8:	4603      	mov	r3, r0
 80019da:	460c      	mov	r4, r1
 80019dc:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return pressure;
 80019e0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80019e4:	e01a      	b.n	8001a1c <BMP280_compensate_pressure_double+0x384>
 80019e6:	bf00      	nop
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40b86a00 	.word	0x40b86a00
 80019f0:	200001b8 	.word	0x200001b8
 80019f4:	40ef4000 	.word	0x40ef4000
 80019f8:	40e00000 	.word	0x40e00000
 80019fc:	40100000 	.word	0x40100000
 8001a00:	40f00000 	.word	0x40f00000
 8001a04:	41200000 	.word	0x41200000
 8001a08:	3ff00000 	.word	0x3ff00000
 8001a0c:	41300000 	.word	0x41300000
 8001a10:	40b00000 	.word	0x40b00000
 8001a14:	41e00000 	.word	0x41e00000
 8001a18:	40300000 	.word	0x40300000
 8001a1c:	e003      	b.n	8001a26 <BMP280_compensate_pressure_double+0x38e>
	return BMP280_INVALID_DATA;
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	f04f 0400 	mov.w	r4, #0
 8001a26:	ec44 3b17 	vmov	d7, r3, r4
}
 8001a2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2e:	eef0 0a67 	vmov.f32	s1, s15
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bdb0      	pop	{r4, r5, r7, pc}

08001a38 <BMP280_read_temperature_double>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_temperature_double(double *v_temperature_d)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001a40:	23ff      	movs	r3, #255	; 0xff
 8001a42:	73fb      	strb	r3, [r7, #15]
	s32 v_uncomp_temperature_s32 = BMP280_INIT_VALUE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <BMP280_read_temperature_double+0x50>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <BMP280_read_temperature_double+0x1e>
		com_rslt = E_BMP280_NULL_PTR;
 8001a50:	2381      	movs	r3, #129	; 0x81
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e011      	b.n	8001a7a <BMP280_read_temperature_double+0x42>
	} else {
		/* read uncompensated temperature*/
		com_rslt = BMP280_read_uncomp_temperature(
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff faf6 	bl	800104c <BMP280_read_uncomp_temperature>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]
				&v_uncomp_temperature_s32);
		/* read true temperature as double*/
		*v_temperature_d = BMP280_compensate_temperature_double(
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fd36 	bl	80014d8 <BMP280_compensate_temperature_double>
 8001a6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a70:	eef0 7a60 	vmov.f32	s15, s1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	ed83 7b00 	vstr	d7, [r3]
				v_uncomp_temperature_s32);
	}
	return com_rslt;
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200001b8 	.word	0x200001b8

08001a8c <BMP280_read_pressure_double>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_pressure_double(double *v_pressure_d)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001a94:	23ff      	movs	r3, #255	; 0xff
 8001a96:	73fb      	strb	r3, [r7, #15]
	s32 v_uncomp_pressure_s32 = BMP280_INIT_VALUE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <BMP280_read_pressure_double+0x50>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <BMP280_read_pressure_double+0x1e>
		com_rslt = E_BMP280_NULL_PTR;
 8001aa4:	2381      	movs	r3, #129	; 0x81
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e011      	b.n	8001ace <BMP280_read_pressure_double+0x42>
	} else {
		/* read uncompensated pressure*/
		com_rslt = BMP280_read_uncomp_pressure(
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fb00 	bl	80010b4 <BMP280_read_uncomp_pressure>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
				&v_uncomp_pressure_s32);
		/* read true pressure as double*/
		*v_pressure_d = BMP280_compensate_pressure_double(
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fdec 	bl	8001698 <BMP280_compensate_pressure_double>
 8001ac0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ac4:	eef0 7a60 	vmov.f32	s15, s1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	ed83 7b00 	vstr	d7, [r3]
				v_uncomp_pressure_s32);
	}
	return com_rslt;
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200001b8 	.word	0x200001b8

08001ae0 <BMP280_calculate_altitude>:
 *  @return Actual altitude output as float
 *
 *
 */
double BMP280_calculate_altitude(u32 v_sea_level_pressure_u32)
{
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
		BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001ae8:	23ff      	movs	r3, #255	; 0xff
 8001aea:	75fb      	strb	r3, [r7, #23]
	/* read true pressure*/
	double v_pressure_d = BMP280_INIT_VALUE;
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	f04f 0400 	mov.w	r4, #0
 8001af4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	com_rslt = BMP280_read_pressure_double(&v_pressure_d);
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ffc5 	bl	8001a8c <BMP280_read_pressure_double>
 8001b02:	4603      	mov	r3, r0
 8001b04:	75fb      	strb	r3, [r7, #23]
	/* check the successful pressure read*/
	if (com_rslt == ERROR) {
 8001b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0e:	d104      	bne.n	8001b1a <BMP280_calculate_altitude+0x3a>
		return 0.0;
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	f04f 0400 	mov.w	r4, #0
 8001b18:	e02a      	b.n	8001b70 <BMP280_calculate_altitude+0x90>
	} else {
		/* calculate altitude*/
		return 44330 * (1.0 - pow(v_pressure_d / v_sea_level_pressure_u32, 1 / 5.255));
 8001b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fd08 	bl	8000534 <__aeabi_ui2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4620      	mov	r0, r4
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	f7fe fea6 	bl	800087c <__aeabi_ddiv>
 8001b30:	4603      	mov	r3, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	ec44 3b17 	vmov	d7, r3, r4
 8001b38:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001b88 <BMP280_calculate_altitude+0xa8>
 8001b3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b40:	eef0 0a67 	vmov.f32	s1, s15
 8001b44:	f003 fd82 	bl	800564c <pow>
 8001b48:	ec54 3b10 	vmov	r3, r4, d0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4623      	mov	r3, r4
 8001b50:	f04f 0000 	mov.w	r0, #0
 8001b54:	4910      	ldr	r1, [pc, #64]	; (8001b98 <BMP280_calculate_altitude+0xb8>)
 8001b56:	f7fe fbaf 	bl	80002b8 <__aeabi_dsub>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	4618      	mov	r0, r3
 8001b60:	4621      	mov	r1, r4
 8001b62:	a30b      	add	r3, pc, #44	; (adr r3, 8001b90 <BMP280_calculate_altitude+0xb0>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fd5e 	bl	8000628 <__aeabi_dmul>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	ec44 3b17 	vmov	d7, r3, r4
	}
}
 8001b74:	eeb0 0a47 	vmov.f32	s0, s14
 8001b78:	eef0 0a67 	vmov.f32	s1, s15
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bdb0      	pop	{r4, r5, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	f3af 8000 	nop.w
 8001b88:	ccd9456c 	.word	0xccd9456c
 8001b8c:	3fc85b95 	.word	0x3fc85b95
 8001b90:	00000000 	.word	0x00000000
 8001b94:	40e5a540 	.word	0x40e5a540
 8001b98:	3ff00000 	.word	0x3ff00000

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <HAL_Init+0x40>)
 8001ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_Init+0x40>)
 8001bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <HAL_Init+0x40>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f92f 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f808 	bl	8001be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd0:	f003 f822 	bl	8004c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_InitTick+0x54>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x58>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f939 	bl	8001e76 <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f000 f90f 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <HAL_InitTick+0x5c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000014 	.word	0x20000014
 8001c38:	20000004 	.word	0x20000004
 8001c3c:	20000000 	.word	0x20000000

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000004 	.word	0x20000004
 8001c64:	200001bc 	.word	0x200001bc

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	200001bc 	.word	0x200001bc

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_Delay+0x40>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff47 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff5c 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffb0 	bl	8001de4 <SysTick_Config>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e165      	b.n	8002178 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eac:	2201      	movs	r2, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 8154 	bne.w	8002172 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x4a>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d123      	bne.n	8001f22 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	69b9      	ldr	r1, [r7, #24]
 8001f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0203 	and.w	r2, r3, #3
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d00b      	beq.n	8001f76 <HAL_GPIO_Init+0xe6>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d007      	beq.n	8001f76 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f6a:	2b11      	cmp	r3, #17
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b12      	cmp	r3, #18
 8001f74:	d130      	bne.n	8001fd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 0201 	and.w	r2, r3, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80ae 	beq.w	8002172 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <HAL_GPIO_Init+0x2fc>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a5b      	ldr	r2, [pc, #364]	; (800218c <HAL_GPIO_Init+0x2fc>)
 8002020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_GPIO_Init+0x2fc>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002032:	4a57      	ldr	r2, [pc, #348]	; (8002190 <HAL_GPIO_Init+0x300>)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4e      	ldr	r2, [pc, #312]	; (8002194 <HAL_GPIO_Init+0x304>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d025      	beq.n	80020aa <HAL_GPIO_Init+0x21a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4d      	ldr	r2, [pc, #308]	; (8002198 <HAL_GPIO_Init+0x308>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01f      	beq.n	80020a6 <HAL_GPIO_Init+0x216>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4c      	ldr	r2, [pc, #304]	; (800219c <HAL_GPIO_Init+0x30c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d019      	beq.n	80020a2 <HAL_GPIO_Init+0x212>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <HAL_GPIO_Init+0x310>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_GPIO_Init+0x20e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4a      	ldr	r2, [pc, #296]	; (80021a4 <HAL_GPIO_Init+0x314>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00d      	beq.n	800209a <HAL_GPIO_Init+0x20a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a49      	ldr	r2, [pc, #292]	; (80021a8 <HAL_GPIO_Init+0x318>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <HAL_GPIO_Init+0x206>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a48      	ldr	r2, [pc, #288]	; (80021ac <HAL_GPIO_Init+0x31c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_GPIO_Init+0x202>
 800208e:	2306      	movs	r3, #6
 8002090:	e00c      	b.n	80020ac <HAL_GPIO_Init+0x21c>
 8002092:	2307      	movs	r3, #7
 8002094:	e00a      	b.n	80020ac <HAL_GPIO_Init+0x21c>
 8002096:	2305      	movs	r3, #5
 8002098:	e008      	b.n	80020ac <HAL_GPIO_Init+0x21c>
 800209a:	2304      	movs	r3, #4
 800209c:	e006      	b.n	80020ac <HAL_GPIO_Init+0x21c>
 800209e:	2303      	movs	r3, #3
 80020a0:	e004      	b.n	80020ac <HAL_GPIO_Init+0x21c>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e002      	b.n	80020ac <HAL_GPIO_Init+0x21c>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_GPIO_Init+0x21c>
 80020aa:	2300      	movs	r3, #0
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	f002 0203 	and.w	r2, r2, #3
 80020b2:	0092      	lsls	r2, r2, #2
 80020b4:	4093      	lsls	r3, r2
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020bc:	4934      	ldr	r1, [pc, #208]	; (8002190 <HAL_GPIO_Init+0x300>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3302      	adds	r3, #2
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_GPIO_Init+0x320>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ee:	4a30      	ldr	r2, [pc, #192]	; (80021b0 <HAL_GPIO_Init+0x320>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <HAL_GPIO_Init+0x320>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002118:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <HAL_GPIO_Init+0x320>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_GPIO_Init+0x320>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002142:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <HAL_GPIO_Init+0x320>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_GPIO_Init+0x320>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800216c:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <HAL_GPIO_Init+0x320>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3301      	adds	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b0f      	cmp	r3, #15
 800217c:	f67f ae96 	bls.w	8001eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002180:	bf00      	nop
 8002182:	3724      	adds	r7, #36	; 0x24
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40021800 	.word	0x40021800
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d0:	e003      	b.n	80021da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	041a      	lsls	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e10f      	b.n	800241a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f002 fb56 	bl	80048c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2224      	movs	r2, #36	; 0x24
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800222c:	f001 f89a 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 8002230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4a7b      	ldr	r2, [pc, #492]	; (8002424 <HAL_I2C_Init+0x23c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d807      	bhi.n	800224c <HAL_I2C_Init+0x64>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_I2C_Init+0x240>)
 8002240:	4293      	cmp	r3, r2
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e006      	b.n	800225a <HAL_I2C_Init+0x72>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a77      	ldr	r2, [pc, #476]	; (800242c <HAL_I2C_Init+0x244>)
 8002250:	4293      	cmp	r3, r2
 8002252:	bf94      	ite	ls
 8002254:	2301      	movls	r3, #1
 8002256:	2300      	movhi	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0db      	b.n	800241a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a72      	ldr	r2, [pc, #456]	; (8002430 <HAL_I2C_Init+0x248>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0c9b      	lsrs	r3, r3, #18
 800226c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a64      	ldr	r2, [pc, #400]	; (8002424 <HAL_I2C_Init+0x23c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d802      	bhi.n	800229c <HAL_I2C_Init+0xb4>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3301      	adds	r3, #1
 800229a:	e009      	b.n	80022b0 <HAL_I2C_Init+0xc8>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	4a63      	ldr	r2, [pc, #396]	; (8002434 <HAL_I2C_Init+0x24c>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	3301      	adds	r3, #1
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4956      	ldr	r1, [pc, #344]	; (8002424 <HAL_I2C_Init+0x23c>)
 80022cc:	428b      	cmp	r3, r1
 80022ce:	d80d      	bhi.n	80022ec <HAL_I2C_Init+0x104>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1e59      	subs	r1, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fbb1 f3f3 	udiv	r3, r1, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	bf38      	it	cc
 80022e8:	2304      	movcc	r3, #4
 80022ea:	e04f      	b.n	800238c <HAL_I2C_Init+0x1a4>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d111      	bne.n	8002318 <HAL_I2C_Init+0x130>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1e58      	subs	r0, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e012      	b.n	800233e <HAL_I2C_Init+0x156>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e58      	subs	r0, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	0099      	lsls	r1, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	fbb0 f3f3 	udiv	r3, r0, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Init+0x15e>
 8002342:	2301      	movs	r3, #1
 8002344:	e022      	b.n	800238c <HAL_I2C_Init+0x1a4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10e      	bne.n	800236c <HAL_I2C_Init+0x184>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1e58      	subs	r0, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	440b      	add	r3, r1
 800235c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236a:	e00f      	b.n	800238c <HAL_I2C_Init+0x1a4>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e58      	subs	r0, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	0099      	lsls	r1, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	6809      	ldr	r1, [r1, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6911      	ldr	r1, [r2, #16]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68d2      	ldr	r2, [r2, #12]
 80023c6:	4311      	orrs	r1, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	430b      	orrs	r3, r1
 80023ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	000186a0 	.word	0x000186a0
 8002428:	001e847f 	.word	0x001e847f
 800242c:	003d08ff 	.word	0x003d08ff
 8002430:	431bde83 	.word	0x431bde83
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	4608      	mov	r0, r1
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4603      	mov	r3, r0
 8002448:	817b      	strh	r3, [r7, #10]
 800244a:	460b      	mov	r3, r1
 800244c:	813b      	strh	r3, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002452:	f7ff fc09 	bl	8001c68 <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b20      	cmp	r3, #32
 8002462:	f040 80d9 	bne.w	8002618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2319      	movs	r3, #25
 800246c:	2201      	movs	r2, #1
 800246e:	496d      	ldr	r1, [pc, #436]	; (8002624 <HAL_I2C_Mem_Write+0x1ec>)
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fc5b 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
 800247e:	e0cc      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_I2C_Mem_Write+0x56>
 800248a:	2302      	movs	r3, #2
 800248c:	e0c5      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d007      	beq.n	80024b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2221      	movs	r2, #33	; 0x21
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2240      	movs	r2, #64	; 0x40
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a3a      	ldr	r2, [r7, #32]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a4d      	ldr	r2, [pc, #308]	; (8002628 <HAL_I2C_Mem_Write+0x1f0>)
 80024f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f6:	88f8      	ldrh	r0, [r7, #6]
 80024f8:	893a      	ldrh	r2, [r7, #8]
 80024fa:	8979      	ldrh	r1, [r7, #10]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	4603      	mov	r3, r0
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fab6 	bl	8002a78 <I2C_RequestMemoryWrite>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d052      	beq.n	80025b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e081      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fcdc 	bl	8002ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b04      	cmp	r3, #4
 800252c:	d107      	bne.n	800253e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06b      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	781a      	ldrb	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b04      	cmp	r3, #4
 800257e:	d11b      	bne.n	80025b8 <HAL_I2C_Mem_Write+0x180>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	d017      	beq.n	80025b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1aa      	bne.n	8002516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fcc8 	bl	8002f5a <I2C_WaitOnBTFFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00d      	beq.n	80025ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d107      	bne.n	80025e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e016      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e000      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	00100002 	.word	0x00100002
 8002628:	ffff0000 	.word	0xffff0000

0800262c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002646:	f7ff fb0f 	bl	8001c68 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	f040 8208 	bne.w	8002a6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	497b      	ldr	r1, [pc, #492]	; (8002850 <HAL_I2C_Mem_Read+0x224>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fb61 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	e1fb      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Mem_Read+0x56>
 800267e:	2302      	movs	r3, #2
 8002680:	e1f4      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2222      	movs	r2, #34	; 0x22
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a5b      	ldr	r2, [pc, #364]	; (8002854 <HAL_I2C_Mem_Read+0x228>)
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4603      	mov	r3, r0
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa46 	bl	8002b8c <I2C_RequestMemoryRead>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1b0      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d113      	bne.n	800273a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e184      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	2b01      	cmp	r3, #1
 8002740:	d11b      	bne.n	800277a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e164      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	2b02      	cmp	r3, #2
 8002780:	d11b      	bne.n	80027ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002790:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	e144      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027d0:	e138      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	f200 80f1 	bhi.w	80029be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d123      	bne.n	800282c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fbf7 	bl	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e139      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	855a      	strh	r2, [r3, #42]	; 0x2a
 800282a:	e10b      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	2b02      	cmp	r3, #2
 8002832:	d14e      	bne.n	80028d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	2200      	movs	r2, #0
 800283c:	4906      	ldr	r1, [pc, #24]	; (8002858 <HAL_I2C_Mem_Read+0x22c>)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fa74 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e10e      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
 800284e:	bf00      	nop
 8002850:	00100002 	.word	0x00100002
 8002854:	ffff0000 	.word	0xffff0000
 8002858:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d0:	e0b8      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	2200      	movs	r2, #0
 80028da:	4966      	ldr	r1, [pc, #408]	; (8002a74 <HAL_I2C_Mem_Read+0x448>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fa25 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0bf      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	2200      	movs	r2, #0
 8002936:	494f      	ldr	r1, [pc, #316]	; (8002a74 <HAL_I2C_Mem_Read+0x448>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f9f7 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e091      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029bc:	e042      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fb0a 	bl	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e04c      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d118      	bne.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f47f aec2 	bne.w	80027d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3728      	adds	r7, #40	; 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	00010004 	.word	0x00010004

08002a78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	813b      	strh	r3, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f93c 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e05f      	b.n	8002b7e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002acc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	492d      	ldr	r1, [pc, #180]	; (8002b88 <I2C_RequestMemoryWrite+0x110>)
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f980 	bl	8002dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e04c      	b.n	8002b7e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	6a39      	ldr	r1, [r7, #32]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f9ea 	bl	8002ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d107      	bne.n	8002b22 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e02b      	b.n	8002b7e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2c:	893b      	ldrh	r3, [r7, #8]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	611a      	str	r2, [r3, #16]
 8002b36:	e021      	b.n	8002b7c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b38:	893b      	ldrh	r3, [r7, #8]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	6a39      	ldr	r1, [r7, #32]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f9c4 	bl	8002ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d107      	bne.n	8002b6e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e005      	b.n	8002b7e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b72:	893b      	ldrh	r3, [r7, #8]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	00010002 	.word	0x00010002

08002b8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	4608      	mov	r0, r1
 8002b96:	4611      	mov	r1, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	817b      	strh	r3, [r7, #10]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	813b      	strh	r3, [r7, #8]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f8aa 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e09e      	b.n	8002d20 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002be2:	897b      	ldrh	r3, [r7, #10]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	494c      	ldr	r1, [pc, #304]	; (8002d28 <I2C_RequestMemoryRead+0x19c>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f8ee 	bl	8002dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e08b      	b.n	8002d20 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	6a39      	ldr	r1, [r7, #32]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f958 	bl	8002ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d107      	bne.n	8002c46 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06a      	b.n	8002d20 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c50:	893b      	ldrh	r3, [r7, #8]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	611a      	str	r2, [r3, #16]
 8002c5a:	e021      	b.n	8002ca0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c5c:	893b      	ldrh	r3, [r7, #8]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	6a39      	ldr	r1, [r7, #32]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f932 	bl	8002ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d107      	bne.n	8002c92 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e044      	b.n	8002d20 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c96:	893b      	ldrh	r3, [r7, #8]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	6a39      	ldr	r1, [r7, #32]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f917 	bl	8002ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d107      	bne.n	8002cc8 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e029      	b.n	8002d20 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f81f 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e013      	b.n	8002d20 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cf8:	897b      	ldrh	r3, [r7, #10]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	6a3a      	ldr	r2, [r7, #32]
 8002d0c:	4906      	ldr	r1, [pc, #24]	; (8002d28 <I2C_RequestMemoryRead+0x19c>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f863 	bl	8002dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	00010002 	.word	0x00010002

08002d2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d3c:	e025      	b.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d021      	beq.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe ff8f 	bl	8001c68 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d116      	bne.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e023      	b.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10d      	bne.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bf0c      	ite	eq
 8002da6:	2301      	moveq	r3, #1
 8002da8:	2300      	movne	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	e00c      	b.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d0b6      	beq.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002de8:	e051      	b.n	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df8:	d123      	bne.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e046      	b.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d021      	beq.n	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4a:	f7fe ff0d 	bl	8001c68 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d302      	bcc.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d116      	bne.n	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e020      	b.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d10c      	bne.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bf14      	ite	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	2300      	moveq	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	e00b      	b.n	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d18d      	bne.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee4:	e02d      	b.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f8ce 	bl	8003088 <I2C_IsAcknowledgeFailed>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e02d      	b.n	8002f52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d021      	beq.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7fe feb3 	bl	8001c68 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e007      	b.n	8002f52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	2b80      	cmp	r3, #128	; 0x80
 8002f4e:	d1ca      	bne.n	8002ee6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f66:	e02d      	b.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f88d 	bl	8003088 <I2C_IsAcknowledgeFailed>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e02d      	b.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d021      	beq.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f80:	f7fe fe72 	bl	8001c68 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d302      	bcc.n	8002f96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e007      	b.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d1ca      	bne.n	8002f68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fe8:	e042      	b.n	8003070 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d119      	bne.n	800302c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0210 	mvn.w	r2, #16
 8003000:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e029      	b.n	8003080 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302c:	f7fe fe1c 	bl	8001c68 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d116      	bne.n	8003070 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e007      	b.n	8003080 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d1b5      	bne.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d11b      	bne.n	80030d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f043 0204 	orr.w	r2, r3, #4
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4b20      	ldr	r3, [pc, #128]	; (8003178 <HAL_PWREx_EnableOverDrive+0x90>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a1f      	ldr	r2, [pc, #124]	; (8003178 <HAL_PWREx_EnableOverDrive+0x90>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_PWREx_EnableOverDrive+0x90>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800310e:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_PWREx_EnableOverDrive+0x94>)
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003114:	f7fe fda8 	bl	8001c68 <HAL_GetTick>
 8003118:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800311a:	e009      	b.n	8003130 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800311c:	f7fe fda4 	bl	8001c68 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800312a:	d901      	bls.n	8003130 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e01f      	b.n	8003170 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_PWREx_EnableOverDrive+0x98>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d1ee      	bne.n	800311c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003144:	f7fe fd90 	bl	8001c68 <HAL_GetTick>
 8003148:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800314a:	e009      	b.n	8003160 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800314c:	f7fe fd8c 	bl	8001c68 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800315a:	d901      	bls.n	8003160 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e007      	b.n	8003170 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <HAL_PWREx_EnableOverDrive+0x98>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800316c:	d1ee      	bne.n	800314c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40023800 	.word	0x40023800
 800317c:	420e0040 	.word	0x420e0040
 8003180:	40007000 	.word	0x40007000
 8003184:	420e0044 	.word	0x420e0044

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0ca      	b.n	8003332 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_RCC_ClockConfig+0x1b4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d90c      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b64      	ldr	r3, [pc, #400]	; (800333c <HAL_RCC_ClockConfig+0x1b4>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b62      	ldr	r3, [pc, #392]	; (800333c <HAL_RCC_ClockConfig+0x1b4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b6      	b.n	8003332 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b58      	ldr	r3, [pc, #352]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a57      	ldr	r2, [pc, #348]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b52      	ldr	r3, [pc, #328]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a51      	ldr	r2, [pc, #324]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b4f      	ldr	r3, [pc, #316]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494c      	ldr	r1, [pc, #304]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d044      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b46      	ldr	r3, [pc, #280]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d119      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07d      	b.n	8003332 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d003      	beq.n	8003246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06d      	b.n	8003332 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e065      	b.n	8003332 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4933      	ldr	r1, [pc, #204]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fe fcf6 	bl	8001c68 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fe fcf2 	bl	8001c68 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e04d      	b.n	8003332 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b24      	ldr	r3, [pc, #144]	; (800333c <HAL_RCC_ClockConfig+0x1b4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d20c      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_RCC_ClockConfig+0x1b4>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b1f      	ldr	r3, [pc, #124]	; (800333c <HAL_RCC_ClockConfig+0x1b4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e030      	b.n	8003332 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4915      	ldr	r1, [pc, #84]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490d      	ldr	r1, [pc, #52]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800330e:	f000 f83d 	bl	800338c <HAL_RCC_GetSysClockFreq>
 8003312:	4601      	mov	r1, r0
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a09      	ldr	r2, [pc, #36]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	fa21 f303 	lsr.w	r3, r1, r3
 8003326:	4a08      	ldr	r2, [pc, #32]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800332a:	2000      	movs	r0, #0
 800332c:	f7fe fc58 	bl	8001be0 <HAL_InitTick>

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40023c00 	.word	0x40023c00
 8003340:	40023800 	.word	0x40023800
 8003344:	08006cf0 	.word	0x08006cf0
 8003348:	20000014 	.word	0x20000014

0800334c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <HAL_RCC_GetHCLKFreq+0x14>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000014 	.word	0x20000014

08003364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003368:	f7ff fff0 	bl	800334c <HAL_RCC_GetHCLKFreq>
 800336c:	4601      	mov	r1, r0
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	0a9b      	lsrs	r3, r3, #10
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4a03      	ldr	r2, [pc, #12]	; (8003388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800337a:	5cd3      	ldrb	r3, [r2, r3]
 800337c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	08006d00 	.word	0x08006d00

0800338c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800338c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a6:	4bc6      	ldr	r3, [pc, #792]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	f200 817e 	bhi.w	80036b0 <HAL_RCC_GetSysClockFreq+0x324>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <HAL_RCC_GetSysClockFreq+0x30>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033f1 	.word	0x080033f1
 80033c0:	080036b1 	.word	0x080036b1
 80033c4:	080036b1 	.word	0x080036b1
 80033c8:	080036b1 	.word	0x080036b1
 80033cc:	080033f7 	.word	0x080033f7
 80033d0:	080036b1 	.word	0x080036b1
 80033d4:	080036b1 	.word	0x080036b1
 80033d8:	080036b1 	.word	0x080036b1
 80033dc:	080033fd 	.word	0x080033fd
 80033e0:	080036b1 	.word	0x080036b1
 80033e4:	080036b1 	.word	0x080036b1
 80033e8:	080036b1 	.word	0x080036b1
 80033ec:	08003559 	.word	0x08003559
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f0:	4bb4      	ldr	r3, [pc, #720]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x338>)
 80033f2:	613b      	str	r3, [r7, #16]
       break;
 80033f4:	e15f      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f6:	4bb4      	ldr	r3, [pc, #720]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x33c>)
 80033f8:	613b      	str	r3, [r7, #16]
      break;
 80033fa:	e15c      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fc:	4bb0      	ldr	r3, [pc, #704]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003404:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003406:	4bae      	ldr	r3, [pc, #696]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d04a      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003412:	4bab      	ldr	r3, [pc, #684]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	ea03 0501 	and.w	r5, r3, r1
 8003428:	ea04 0602 	and.w	r6, r4, r2
 800342c:	4629      	mov	r1, r5
 800342e:	4632      	mov	r2, r6
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	f04f 0400 	mov.w	r4, #0
 8003438:	0154      	lsls	r4, r2, #5
 800343a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800343e:	014b      	lsls	r3, r1, #5
 8003440:	4619      	mov	r1, r3
 8003442:	4622      	mov	r2, r4
 8003444:	1b49      	subs	r1, r1, r5
 8003446:	eb62 0206 	sbc.w	r2, r2, r6
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	f04f 0400 	mov.w	r4, #0
 8003452:	0194      	lsls	r4, r2, #6
 8003454:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003458:	018b      	lsls	r3, r1, #6
 800345a:	1a5b      	subs	r3, r3, r1
 800345c:	eb64 0402 	sbc.w	r4, r4, r2
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	00e2      	lsls	r2, r4, #3
 800346a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800346e:	00d9      	lsls	r1, r3, #3
 8003470:	460b      	mov	r3, r1
 8003472:	4614      	mov	r4, r2
 8003474:	195b      	adds	r3, r3, r5
 8003476:	eb44 0406 	adc.w	r4, r4, r6
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	0262      	lsls	r2, r4, #9
 8003484:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003488:	0259      	lsls	r1, r3, #9
 800348a:	460b      	mov	r3, r1
 800348c:	4614      	mov	r4, r2
 800348e:	4618      	mov	r0, r3
 8003490:	4621      	mov	r1, r4
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f04f 0400 	mov.w	r4, #0
 8003498:	461a      	mov	r2, r3
 800349a:	4623      	mov	r3, r4
 800349c:	f7fd fb9c 	bl	8000bd8 <__aeabi_uldivmod>
 80034a0:	4603      	mov	r3, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e049      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a8:	4b85      	ldr	r3, [pc, #532]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	f04f 0400 	mov.w	r4, #0
 80034b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	ea03 0501 	and.w	r5, r3, r1
 80034be:	ea04 0602 	and.w	r6, r4, r2
 80034c2:	4629      	mov	r1, r5
 80034c4:	4632      	mov	r2, r6
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	f04f 0400 	mov.w	r4, #0
 80034ce:	0154      	lsls	r4, r2, #5
 80034d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034d4:	014b      	lsls	r3, r1, #5
 80034d6:	4619      	mov	r1, r3
 80034d8:	4622      	mov	r2, r4
 80034da:	1b49      	subs	r1, r1, r5
 80034dc:	eb62 0206 	sbc.w	r2, r2, r6
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	f04f 0400 	mov.w	r4, #0
 80034e8:	0194      	lsls	r4, r2, #6
 80034ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034ee:	018b      	lsls	r3, r1, #6
 80034f0:	1a5b      	subs	r3, r3, r1
 80034f2:	eb64 0402 	sbc.w	r4, r4, r2
 80034f6:	f04f 0100 	mov.w	r1, #0
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	00e2      	lsls	r2, r4, #3
 8003500:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003504:	00d9      	lsls	r1, r3, #3
 8003506:	460b      	mov	r3, r1
 8003508:	4614      	mov	r4, r2
 800350a:	195b      	adds	r3, r3, r5
 800350c:	eb44 0406 	adc.w	r4, r4, r6
 8003510:	f04f 0100 	mov.w	r1, #0
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	02a2      	lsls	r2, r4, #10
 800351a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800351e:	0299      	lsls	r1, r3, #10
 8003520:	460b      	mov	r3, r1
 8003522:	4614      	mov	r4, r2
 8003524:	4618      	mov	r0, r3
 8003526:	4621      	mov	r1, r4
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f04f 0400 	mov.w	r4, #0
 800352e:	461a      	mov	r2, r3
 8003530:	4623      	mov	r3, r4
 8003532:	f7fd fb51 	bl	8000bd8 <__aeabi_uldivmod>
 8003536:	4603      	mov	r3, r0
 8003538:	460c      	mov	r4, r1
 800353a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800353c:	4b60      	ldr	r3, [pc, #384]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	0c1b      	lsrs	r3, r3, #16
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	3301      	adds	r3, #1
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	613b      	str	r3, [r7, #16]
      break;
 8003556:	e0ae      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003558:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003560:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003562:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d04a      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356e:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	f04f 0400 	mov.w	r4, #0
 8003578:	f240 11ff 	movw	r1, #511	; 0x1ff
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	ea03 0501 	and.w	r5, r3, r1
 8003584:	ea04 0602 	and.w	r6, r4, r2
 8003588:	4629      	mov	r1, r5
 800358a:	4632      	mov	r2, r6
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	f04f 0400 	mov.w	r4, #0
 8003594:	0154      	lsls	r4, r2, #5
 8003596:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800359a:	014b      	lsls	r3, r1, #5
 800359c:	4619      	mov	r1, r3
 800359e:	4622      	mov	r2, r4
 80035a0:	1b49      	subs	r1, r1, r5
 80035a2:	eb62 0206 	sbc.w	r2, r2, r6
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	f04f 0400 	mov.w	r4, #0
 80035ae:	0194      	lsls	r4, r2, #6
 80035b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035b4:	018b      	lsls	r3, r1, #6
 80035b6:	1a5b      	subs	r3, r3, r1
 80035b8:	eb64 0402 	sbc.w	r4, r4, r2
 80035bc:	f04f 0100 	mov.w	r1, #0
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	00e2      	lsls	r2, r4, #3
 80035c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035ca:	00d9      	lsls	r1, r3, #3
 80035cc:	460b      	mov	r3, r1
 80035ce:	4614      	mov	r4, r2
 80035d0:	195b      	adds	r3, r3, r5
 80035d2:	eb44 0406 	adc.w	r4, r4, r6
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	0262      	lsls	r2, r4, #9
 80035e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80035e4:	0259      	lsls	r1, r3, #9
 80035e6:	460b      	mov	r3, r1
 80035e8:	4614      	mov	r4, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	4621      	mov	r1, r4
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f04f 0400 	mov.w	r4, #0
 80035f4:	461a      	mov	r2, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	f7fd faee 	bl	8000bd8 <__aeabi_uldivmod>
 80035fc:	4603      	mov	r3, r0
 80035fe:	460c      	mov	r4, r1
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e049      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003604:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	f04f 0400 	mov.w	r4, #0
 800360e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	ea03 0501 	and.w	r5, r3, r1
 800361a:	ea04 0602 	and.w	r6, r4, r2
 800361e:	4629      	mov	r1, r5
 8003620:	4632      	mov	r2, r6
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	f04f 0400 	mov.w	r4, #0
 800362a:	0154      	lsls	r4, r2, #5
 800362c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003630:	014b      	lsls	r3, r1, #5
 8003632:	4619      	mov	r1, r3
 8003634:	4622      	mov	r2, r4
 8003636:	1b49      	subs	r1, r1, r5
 8003638:	eb62 0206 	sbc.w	r2, r2, r6
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	f04f 0400 	mov.w	r4, #0
 8003644:	0194      	lsls	r4, r2, #6
 8003646:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800364a:	018b      	lsls	r3, r1, #6
 800364c:	1a5b      	subs	r3, r3, r1
 800364e:	eb64 0402 	sbc.w	r4, r4, r2
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	00e2      	lsls	r2, r4, #3
 800365c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003660:	00d9      	lsls	r1, r3, #3
 8003662:	460b      	mov	r3, r1
 8003664:	4614      	mov	r4, r2
 8003666:	195b      	adds	r3, r3, r5
 8003668:	eb44 0406 	adc.w	r4, r4, r6
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	02a2      	lsls	r2, r4, #10
 8003676:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800367a:	0299      	lsls	r1, r3, #10
 800367c:	460b      	mov	r3, r1
 800367e:	4614      	mov	r4, r2
 8003680:	4618      	mov	r0, r3
 8003682:	4621      	mov	r1, r4
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f04f 0400 	mov.w	r4, #0
 800368a:	461a      	mov	r2, r3
 800368c:	4623      	mov	r3, r4
 800368e:	f7fd faa3 	bl	8000bd8 <__aeabi_uldivmod>
 8003692:	4603      	mov	r3, r0
 8003694:	460c      	mov	r4, r1
 8003696:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	0f1b      	lsrs	r3, r3, #28
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	613b      	str	r3, [r7, #16]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x338>)
 80036b2:	613b      	str	r3, [r7, #16]
      break;
 80036b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b6:	693b      	ldr	r3, [r7, #16]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	00f42400 	.word	0x00f42400
 80036c8:	007a1200 	.word	0x007a1200

080036cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8083 	beq.w	80037ec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036e6:	4b95      	ldr	r3, [pc, #596]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d019      	beq.n	8003726 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036f2:	4b92      	ldr	r3, [pc, #584]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d106      	bne.n	800370c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036fe:	4b8f      	ldr	r3, [pc, #572]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370a:	d00c      	beq.n	8003726 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370c:	4b8b      	ldr	r3, [pc, #556]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d112      	bne.n	800373e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003718:	4b88      	ldr	r3, [pc, #544]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003724:	d10b      	bne.n	800373e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003726:	4b85      	ldr	r3, [pc, #532]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d05b      	beq.n	80037ea <HAL_RCC_OscConfig+0x11e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d157      	bne.n	80037ea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e216      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x8a>
 8003748:	4b7c      	ldr	r3, [pc, #496]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a7b      	ldr	r2, [pc, #492]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800374e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e01d      	b.n	8003792 <HAL_RCC_OscConfig+0xc6>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800375e:	d10c      	bne.n	800377a <HAL_RCC_OscConfig+0xae>
 8003760:	4b76      	ldr	r3, [pc, #472]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a75      	ldr	r2, [pc, #468]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b73      	ldr	r3, [pc, #460]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a72      	ldr	r2, [pc, #456]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	e00b      	b.n	8003792 <HAL_RCC_OscConfig+0xc6>
 800377a:	4b70      	ldr	r3, [pc, #448]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6f      	ldr	r2, [pc, #444]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b6d      	ldr	r3, [pc, #436]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6c      	ldr	r2, [pc, #432]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800378c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003790:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d013      	beq.n	80037c2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7fe fa65 	bl	8001c68 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a2:	f7fe fa61 	bl	8001c68 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b64      	cmp	r3, #100	; 0x64
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1db      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b4:	4b61      	ldr	r3, [pc, #388]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0xd6>
 80037c0:	e014      	b.n	80037ec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe fa51 	bl	8001c68 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ca:	f7fe fa4d 	bl	8001c68 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b64      	cmp	r3, #100	; 0x64
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1c7      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037dc:	4b57      	ldr	r3, [pc, #348]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f0      	bne.n	80037ca <HAL_RCC_OscConfig+0xfe>
 80037e8:	e000      	b.n	80037ec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d06f      	beq.n	80038d8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037f8:	4b50      	ldr	r3, [pc, #320]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b00      	cmp	r3, #0
 8003802:	d017      	beq.n	8003834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003804:	4b4d      	ldr	r3, [pc, #308]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800380c:	2b08      	cmp	r3, #8
 800380e:	d105      	bne.n	800381c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003810:	4b4a      	ldr	r3, [pc, #296]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381c:	4b47      	ldr	r3, [pc, #284]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d11c      	bne.n	8003862 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003828:	4b44      	ldr	r3, [pc, #272]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d116      	bne.n	8003862 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003834:	4b41      	ldr	r3, [pc, #260]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_OscConfig+0x180>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e18f      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4938      	ldr	r1, [pc, #224]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003860:	e03a      	b.n	80038d8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d020      	beq.n	80038ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386a:	4b35      	ldr	r3, [pc, #212]	; (8003940 <HAL_RCC_OscConfig+0x274>)
 800386c:	2201      	movs	r2, #1
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe f9fa 	bl	8001c68 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003878:	f7fe f9f6 	bl	8001c68 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e170      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b2c      	ldr	r3, [pc, #176]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003896:	4b29      	ldr	r3, [pc, #164]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4925      	ldr	r1, [pc, #148]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
 80038aa:	e015      	b.n	80038d8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ac:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCC_OscConfig+0x274>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fe f9d9 	bl	8001c68 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fe f9d5 	bl	8001c68 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e14f      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038cc:	4b1b      	ldr	r3, [pc, #108]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d037      	beq.n	8003954 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d016      	beq.n	800391a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ec:	4b15      	ldr	r3, [pc, #84]	; (8003944 <HAL_RCC_OscConfig+0x278>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fe f9b9 	bl	8001c68 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fa:	f7fe f9b5 	bl	8001c68 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e12f      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800390e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x22e>
 8003918:	e01c      	b.n	8003954 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_RCC_OscConfig+0x278>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fe f9a2 	bl	8001c68 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003926:	e00f      	b.n	8003948 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003928:	f7fe f99e 	bl	8001c68 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d908      	bls.n	8003948 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e118      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	42470000 	.word	0x42470000
 8003944:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003948:	4b8a      	ldr	r3, [pc, #552]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 800394a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e9      	bne.n	8003928 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8097 	beq.w	8003a90 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003966:	4b83      	ldr	r3, [pc, #524]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b7f      	ldr	r3, [pc, #508]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a7e      	ldr	r2, [pc, #504]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b7c      	ldr	r3, [pc, #496]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d118      	bne.n	80039d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399e:	4b76      	ldr	r3, [pc, #472]	; (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a75      	ldr	r2, [pc, #468]	; (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fe f95d 	bl	8001c68 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fe f959 	bl	8001c68 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e0d3      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x31a>
 80039d8:	4b66      	ldr	r3, [pc, #408]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a65      	ldr	r2, [pc, #404]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
 80039e4:	e01c      	b.n	8003a20 <HAL_RCC_OscConfig+0x354>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x33c>
 80039ee:	4b61      	ldr	r3, [pc, #388]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	4a60      	ldr	r2, [pc, #384]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	6713      	str	r3, [r2, #112]	; 0x70
 80039fa:	4b5e      	ldr	r3, [pc, #376]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a5d      	ldr	r2, [pc, #372]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0x354>
 8003a08:	4b5a      	ldr	r3, [pc, #360]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	4a59      	ldr	r2, [pc, #356]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	; 0x70
 8003a14:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a56      	ldr	r2, [pc, #344]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a1a:	f023 0304 	bic.w	r3, r3, #4
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d015      	beq.n	8003a54 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fe f91e 	bl	8001c68 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7fe f91a 	bl	8001c68 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e092      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a46:	4b4b      	ldr	r3, [pc, #300]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ee      	beq.n	8003a30 <HAL_RCC_OscConfig+0x364>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fe f908 	bl	8001c68 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fe f904 	bl	8001c68 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e07c      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a72:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1ee      	bne.n	8003a5c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d105      	bne.n	8003a90 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a84:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	4a3a      	ldr	r2, [pc, #232]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d068      	beq.n	8003b6a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a98:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d060      	beq.n	8003b66 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d145      	bne.n	8003b38 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <HAL_RCC_OscConfig+0x4b0>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fe f8d9 	bl	8001c68 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aba:	f7fe f8d5 	bl	8001c68 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e04f      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	019b      	lsls	r3, r3, #6
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	3b01      	subs	r3, #1
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	071b      	lsls	r3, r3, #28
 8003b04:	491b      	ldr	r1, [pc, #108]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <HAL_RCC_OscConfig+0x4b0>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fe f8aa 	bl	8001c68 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fe f8a6 	bl	8001c68 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e020      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x44c>
 8003b36:	e018      	b.n	8003b6a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCC_OscConfig+0x4b0>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fe f893 	bl	8001c68 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fe f88f 	bl	8001c68 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e009      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x47a>
 8003b64:	e001      	b.n	8003b6a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	42470060 	.word	0x42470060

08003b80 <delay>:
 *
 * \param t		Number of "nop" cycles
 *
 * \return void
 */		
inline void delay(uint32_t t) {
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	for (; t; t--) __asm("nop");
 8003b88:	e003      	b.n	8003b92 <delay+0x12>
 8003b8a:	bf00      	nop
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f8      	bne.n	8003b8a <delay+0xa>
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <GPIO_Init>:
 *
 * \param
 *
 * \return void
 */
void GPIO_Init(uint32_t mode) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d003      	beq.n	8003bba <GPIO_Init+0x16>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f040 8081 	bne.w	8003cbc <GPIO_Init+0x118>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <GPIO_Init+0x120>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a40      	ldr	r2, [pc, #256]	; (8003cc4 <GPIO_Init+0x120>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b3e      	ldr	r3, [pc, #248]	; (8003cc4 <GPIO_Init+0x120>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <GPIO_Init+0x120>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	4a39      	ldr	r2, [pc, #228]	; (8003cc4 <GPIO_Init+0x120>)
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	6313      	str	r3, [r2, #48]	; 0x30
 8003be6:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <GPIO_Init+0x120>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <GPIO_Init+0x120>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	4a32      	ldr	r2, [pc, #200]	; (8003cc4 <GPIO_Init+0x120>)
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	6313      	str	r3, [r2, #48]	; 0x30
 8003c02:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <GPIO_Init+0x120>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8003c0e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003c12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4619      	mov	r1, r3
 8003c26:	4828      	ldr	r0, [pc, #160]	; (8003cc8 <GPIO_Init+0x124>)
 8003c28:	f7fe f932 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 8003c2c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8003c30:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c3e:	f107 0314 	add.w	r3, r7, #20
 8003c42:	4619      	mov	r1, r3
 8003c44:	4821      	ldr	r0, [pc, #132]	; (8003ccc <GPIO_Init+0x128>)
 8003c46:	f7fe f923 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003c56:	2300      	movs	r3, #0
 8003c58:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c5a:	f107 0314 	add.w	r3, r7, #20
 8003c5e:	4619      	mov	r1, r3
 8003c60:	481b      	ldr	r0, [pc, #108]	; (8003cd0 <GPIO_Init+0x12c>)
 8003c62:	f7fe f915 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 8003c66:	2313      	movs	r3, #19
 8003c68:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003c72:	2300      	movs	r3, #0
 8003c74:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c76:	f107 0314 	add.w	r3, r7, #20
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4812      	ldr	r0, [pc, #72]	; (8003cc8 <GPIO_Init+0x124>)
 8003c7e:	f7fe f907 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c82:	2301      	movs	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c92:	f107 0314 	add.w	r3, r7, #20
 8003c96:	4619      	mov	r1, r3
 8003c98:	480c      	ldr	r0, [pc, #48]	; (8003ccc <GPIO_Init+0x128>)
 8003c9a:	f7fe f8f9 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cae:	f107 0314 	add.w	r3, r7, #20
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4806      	ldr	r0, [pc, #24]	; (8003cd0 <GPIO_Init+0x12c>)
 8003cb6:	f7fe f8eb 	bl	8001e90 <HAL_GPIO_Init>
 8003cba:	e000      	b.n	8003cbe <GPIO_Init+0x11a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8003cbc:	bf00      	nop
}
 8003cbe:	3728      	adds	r7, #40	; 0x28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40020000 	.word	0x40020000
 8003ccc:	40020400 	.word	0x40020400
 8003cd0:	40020800 	.word	0x40020800

08003cd4 <LCD_Write8>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline void LCD_Write8(uint8_t data) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8003cde:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <LCD_Write8+0xa4>)
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	79fa      	ldrb	r2, [r7, #7]
 8003cea:	0252      	lsls	r2, r2, #9
 8003cec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	491c      	ldr	r1, [pc, #112]	; (8003d78 <LCD_Write8+0xa4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8003d0a:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <LCD_Write8+0xa8>)
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8003d12:	4013      	ands	r3, r2
 8003d14:	79fa      	ldrb	r2, [r7, #7]
 8003d16:	f002 0208 	and.w	r2, r2, #8
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	431a      	orrs	r2, r3
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	105b      	asrs	r3, r3, #1
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	4910      	ldr	r1, [pc, #64]	; (8003d7c <LCD_Write8+0xa8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <LCD_Write8+0xac>)
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8003d46:	4013      	ands	r3, r2
 8003d48:	79fa      	ldrb	r2, [r7, #7]
 8003d4a:	0192      	lsls	r2, r2, #6
 8003d4c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003d50:	490b      	ldr	r1, [pc, #44]	; (8003d80 <LCD_Write8+0xac>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <LCD_Write8+0xa4>)
 8003d58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d5c:	619a      	str	r2, [r3, #24]
 8003d5e:	2002      	movs	r0, #2
 8003d60:	f7ff ff0e 	bl	8003b80 <delay>
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <LCD_Write8+0xa4>)
 8003d66:	2202      	movs	r2, #2
 8003d68:	619a      	str	r2, [r3, #24]
 8003d6a:	2002      	movs	r0, #2
 8003d6c:	f7ff ff08 	bl	8003b80 <delay>
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40020000 	.word	0x40020000
 8003d7c:	40020400 	.word	0x40020400
 8003d80:	40020800 	.word	0x40020800

08003d84 <LCD_Write16Register16>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	80fb      	strh	r3, [r7, #6]
 8003d90:	4613      	mov	r3, r2
 8003d92:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <LCD_Write16Register16+0x58>)
 8003d96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d9a:	619a      	str	r2, [r3, #24]
	LCD_Write8(a >> 8);
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff95 	bl	8003cd4 <LCD_Write8>
	LCD_Write8(a);
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff ff90 	bl	8003cd4 <LCD_Write8>
	LCD_CD_DATA();
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <LCD_Write16Register16+0x58>)
 8003db6:	2210      	movs	r2, #16
 8003db8:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 8003dba:	88bb      	ldrh	r3, [r7, #4]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff ff86 	bl	8003cd4 <LCD_Write8>
	LCD_Write8(d);
 8003dc8:	88bb      	ldrh	r3, [r7, #4]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff81 	bl	8003cd4 <LCD_Write8>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40020000 	.word	0x40020000

08003de0 <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8003de6:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <LCD_Init+0xf4>)
 8003de8:	22f0      	movs	r2, #240	; 0xf0
 8003dea:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8003dec:	4b3a      	ldr	r3, [pc, #232]	; (8003ed8 <LCD_Init+0xf8>)
 8003dee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003df2:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8003df4:	4b39      	ldr	r3, [pc, #228]	; (8003edc <LCD_Init+0xfc>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8003dfa:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <LCD_Init+0x100>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	801a      	strh	r2, [r3, #0]
 8003e00:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <LCD_Init+0x100>)
 8003e02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <LCD_Init+0x104>)
 8003e08:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 8003e0a:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <LCD_Init+0x108>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8003e10:	4b36      	ldr	r3, [pc, #216]	; (8003eec <LCD_Init+0x10c>)
 8003e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e16:	801a      	strh	r2, [r3, #0]
 8003e18:	4b34      	ldr	r3, [pc, #208]	; (8003eec <LCD_Init+0x10c>)
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	4b34      	ldr	r3, [pc, #208]	; (8003ef0 <LCD_Init+0x110>)
 8003e1e:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8003e20:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <LCD_Init+0x114>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]

	GPIO_Init(GPIO_MODE_OUTPUT_PP);
 8003e26:	2001      	movs	r0, #1
 8003e28:	f7ff febc 	bl	8003ba4 <GPIO_Init>

	LCD_Reset();
 8003e2c:	f000 f96c 	bl	8004108 <LCD_Reset>
	HAL_Delay(50);
 8003e30:	2032      	movs	r0, #50	; 0x32
 8003e32:	f7fd ff25 	bl	8001c80 <HAL_Delay>

	LCD_CS_ACTIVE();
 8003e36:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <LCD_Init+0x118>)
 8003e38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e3c:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined (ILI9328)
	uint8_t i = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8003e42:	e01d      	b.n	8003e80 <LCD_Init+0xa0>
		a = ILI932x_regValues[i++];
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	71fa      	strb	r2, [r7, #7]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <LCD_Init+0x11c>)
 8003e4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003e52:	80bb      	strh	r3, [r7, #4]
		d = ILI932x_regValues[i++];
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	71fa      	strb	r2, [r7, #7]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b27      	ldr	r3, [pc, #156]	; (8003efc <LCD_Init+0x11c>)
 8003e5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003e62:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8003e64:	88bb      	ldrh	r3, [r7, #4]
 8003e66:	2bff      	cmp	r3, #255	; 0xff
 8003e68:	d104      	bne.n	8003e74 <LCD_Init+0x94>
			HAL_Delay(d);
 8003e6a:	887b      	ldrh	r3, [r7, #2]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fd ff07 	bl	8001c80 <HAL_Delay>
 8003e72:	e005      	b.n	8003e80 <LCD_Init+0xa0>
		} else {
			LCD_Write16Register16(a, d);
 8003e74:	887a      	ldrh	r2, [r7, #2]
 8003e76:	88bb      	ldrh	r3, [r7, #4]
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff82 	bl	8003d84 <LCD_Write16Register16>
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	2b65      	cmp	r3, #101	; 0x65
 8003e84:	d9de      	bls.n	8003e44 <LCD_Init+0x64>
		}
	}
	LCD_SetRotation(m_rotation);
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <LCD_Init+0xfc>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fa18 	bl	80042c0 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8003e90:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <LCD_Init+0xf4>)
 8003e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <LCD_Init+0xf8>)
 8003e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	2000      	movs	r0, #0
 8003eac:	f000 f976 	bl	800419c <LCD_SetAddrWindow>
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif

	LCD_CS_IDLE();
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <LCD_Init+0x118>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f000 f8e4 	bl	8004084 <LCD_FillScreen>
	LCD_SetTextSize(0);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f000 fc1f 	bl	8004700 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003ec8:	f000 fc34 	bl	8004734 <LCD_SetTextColor>
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	2000009c 	.word	0x2000009c
 8003ed8:	2000009e 	.word	0x2000009e
 8003edc:	200000a9 	.word	0x200000a9
 8003ee0:	200000a0 	.word	0x200000a0
 8003ee4:	200000a2 	.word	0x200000a2
 8003ee8:	200000a8 	.word	0x200000a8
 8003eec:	200000a6 	.word	0x200000a6
 8003ef0:	200000a4 	.word	0x200000a4
 8003ef4:	200000aa 	.word	0x200000aa
 8003ef8:	40020400 	.word	0x40020400
 8003efc:	08006c24 	.word	0x08006c24

08003f00 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	80fb      	strh	r3, [r7, #6]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	80bb      	strh	r3, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8003f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	db51      	blt.n	8003fbe <LCD_DrawPixel+0xbe>
 8003f1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	db4d      	blt.n	8003fbe <LCD_DrawPixel+0xbe>
 8003f22:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <LCD_DrawPixel+0xc8>)
 8003f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	da46      	bge.n	8003fbe <LCD_DrawPixel+0xbe>
 8003f30:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <LCD_DrawPixel+0xcc>)
 8003f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f36:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	da3f      	bge.n	8003fbe <LCD_DrawPixel+0xbe>

	LCD_CS_ACTIVE();
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <LCD_DrawPixel+0xd0>)
 8003f40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f44:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	int16_t t;
	switch (m_rotation) {
 8003f46:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <LCD_DrawPixel+0xd4>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d00d      	beq.n	8003f6a <LCD_DrawPixel+0x6a>
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d017      	beq.n	8003f82 <LCD_DrawPixel+0x82>
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d120      	bne.n	8003f98 <LCD_DrawPixel+0x98>
	case 1:
		t = x;
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 8003f5a:	88bb      	ldrh	r3, [r7, #4]
 8003f5c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	80fb      	strh	r3, [r7, #6]
		y = t;
 8003f64:	89fb      	ldrh	r3, [r7, #14]
 8003f66:	80bb      	strh	r3, [r7, #4]
		break;
 8003f68:	e016      	b.n	8003f98 <LCD_DrawPixel+0x98>
	case 2:
		x = TFTWIDTH - 1 - x;
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8003f74:	88bb      	ldrh	r3, [r7, #4]
 8003f76:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	80bb      	strh	r3, [r7, #4]
		break;
 8003f80:	e00a      	b.n	8003f98 <LCD_DrawPixel+0x98>
	case 3:
		t = x;
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	81fb      	strh	r3, [r7, #14]
		x = y;
 8003f86:	88bb      	ldrh	r3, [r7, #4]
 8003f88:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 8003f8a:	89fb      	ldrh	r3, [r7, #14]
 8003f8c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003f90:	3301      	adds	r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	80bb      	strh	r3, [r7, #4]
		break;
 8003f96:	bf00      	nop
	}
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	2020      	movs	r0, #32
 8003f9e:	f7ff fef1 	bl	8003d84 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8003fa2:	88bb      	ldrh	r3, [r7, #4]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	2021      	movs	r0, #33	; 0x21
 8003fa8:	f7ff feec 	bl	8003d84 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8003fac:	887b      	ldrh	r3, [r7, #2]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	2022      	movs	r0, #34	; 0x22
 8003fb2:	f7ff fee7 	bl	8003d84 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif

	LCD_CS_IDLE();
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <LCD_DrawPixel+0xd0>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	619a      	str	r2, [r3, #24]
 8003fbc:	e000      	b.n	8003fc0 <LCD_DrawPixel+0xc0>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8003fbe:	bf00      	nop
}
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	2000009c 	.word	0x2000009c
 8003fcc:	2000009e 	.word	0x2000009e
 8003fd0:	40020400 	.word	0x40020400
 8003fd4:	200000a9 	.word	0x200000a9

08003fd8 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	6039      	str	r1, [r7, #0]
 8003fe2:	80fb      	strh	r3, [r7, #6]
#if defined(SSD1297)
	uint8_t red = LCD_Color565_to_R(color);
	uint8_t green = LCD_Color565_to_G(color);
	uint8_t blue = LCD_Color565_to_B(color);
#else
	uint8_t hi = color >> 8, lo = color;
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	73fb      	strb	r3, [r7, #15]
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	73bb      	strb	r3, [r7, #14]
#endif

	LCD_CS_ACTIVE();
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <LCD_Flood+0xa4>)
 8003ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ff6:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	2022      	movs	r0, #34	; 0x22
 8003ffe:	f7ff fec1 	bl	8003d84 <LCD_Write16Register16>
#elif defined(HX8357D)
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif
	len--;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	3b01      	subs	r3, #1
 8004006:	603b      	str	r3, [r7, #0]
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
#else
	if (hi == lo) {
 8004008:	7bfa      	ldrb	r2, [r7, #15]
 800400a:	7bbb      	ldrb	r3, [r7, #14]
 800400c:	429a      	cmp	r2, r3
 800400e:	d128      	bne.n	8004062 <LCD_Flood+0x8a>
#endif
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (len--) {
 8004010:	e019      	b.n	8004046 <LCD_Flood+0x6e>
#if defined(SSD1297)
			LCD_WR_STROBE();
#endif
			LCD_WR_STROBE();
 8004012:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <LCD_Flood+0xa8>)
 8004014:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004018:	619a      	str	r2, [r3, #24]
 800401a:	2002      	movs	r0, #2
 800401c:	f7ff fdb0 	bl	8003b80 <delay>
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <LCD_Flood+0xa8>)
 8004022:	2202      	movs	r2, #2
 8004024:	619a      	str	r2, [r3, #24]
 8004026:	2002      	movs	r0, #2
 8004028:	f7ff fdaa 	bl	8003b80 <delay>
			LCD_WR_STROBE();
 800402c:	4b14      	ldr	r3, [pc, #80]	; (8004080 <LCD_Flood+0xa8>)
 800402e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004032:	619a      	str	r2, [r3, #24]
 8004034:	2002      	movs	r0, #2
 8004036:	f7ff fda3 	bl	8003b80 <delay>
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <LCD_Flood+0xa8>)
 800403c:	2202      	movs	r2, #2
 800403e:	619a      	str	r2, [r3, #24]
 8004040:	2002      	movs	r0, #2
 8004042:	f7ff fd9d 	bl	8003b80 <delay>
		while (len--) {
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	603a      	str	r2, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e0      	bne.n	8004012 <LCD_Flood+0x3a>
 8004050:	e00c      	b.n	800406c <LCD_Flood+0x94>
#if defined(SSD1297)
			LCD_Write8(red);
			LCD_Write8(green);
			LCD_Write8(blue);
#else
			LCD_Write8(hi);
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fe3d 	bl	8003cd4 <LCD_Write8>
			LCD_Write8(lo);
 800405a:	7bbb      	ldrb	r3, [r7, #14]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fe39 	bl	8003cd4 <LCD_Write8>
		while (len--) {
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	1e5a      	subs	r2, r3, #1
 8004066:	603a      	str	r2, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f2      	bne.n	8004052 <LCD_Flood+0x7a>
#endif
		}
	}

	LCD_CS_IDLE();
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <LCD_Flood+0xa4>)
 800406e:	2201      	movs	r2, #1
 8004070:	619a      	str	r2, [r3, #24]
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40020400 	.word	0x40020400
 8004080:	40020000 	.word	0x40020000

08004084 <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	80fb      	strh	r3, [r7, #6]
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 800408e:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <LCD_FillScreen+0x7c>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d00d      	beq.n	80040b2 <LCD_FillScreen+0x2e>
 8004096:	2b03      	cmp	r3, #3
 8004098:	d011      	beq.n	80040be <LCD_FillScreen+0x3a>
 800409a:	2b01      	cmp	r3, #1
 800409c:	d004      	beq.n	80040a8 <LCD_FillScreen+0x24>
	default:
		x = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	81fb      	strh	r3, [r7, #14]
		y = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	81bb      	strh	r3, [r7, #12]
		break;
 80040a6:	e010      	b.n	80040ca <LCD_FillScreen+0x46>
	case 1:
		x = TFTWIDTH - 1;
 80040a8:	23ef      	movs	r3, #239	; 0xef
 80040aa:	81fb      	strh	r3, [r7, #14]
		y = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	81bb      	strh	r3, [r7, #12]
		break;
 80040b0:	e00b      	b.n	80040ca <LCD_FillScreen+0x46>
	case 2:
		x = TFTWIDTH - 1;
 80040b2:	23ef      	movs	r3, #239	; 0xef
 80040b4:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 80040b6:	f240 133f 	movw	r3, #319	; 0x13f
 80040ba:	81bb      	strh	r3, [r7, #12]
		break;
 80040bc:	e005      	b.n	80040ca <LCD_FillScreen+0x46>
	case 3:
		x = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 80040c2:	f240 133f 	movw	r3, #319	; 0x13f
 80040c6:	81bb      	strh	r3, [r7, #12]
		break;
 80040c8:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 80040ca:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <LCD_FillScreen+0x80>)
 80040cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040d0:	619a      	str	r2, [r3, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 80040d2:	89fb      	ldrh	r3, [r7, #14]
 80040d4:	4619      	mov	r1, r3
 80040d6:	2020      	movs	r0, #32
 80040d8:	f7ff fe54 	bl	8003d84 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 80040dc:	89bb      	ldrh	r3, [r7, #12]
 80040de:	4619      	mov	r1, r3
 80040e0:	2021      	movs	r0, #33	; 0x21
 80040e2:	f7ff fe4f 	bl	8003d84 <LCD_Write16Register16>
#endif
	LCD_CS_IDLE();
 80040e6:	4b07      	ldr	r3, [pc, #28]	; (8004104 <LCD_FillScreen+0x80>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	619a      	str	r2, [r3, #24]
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff70 	bl	8003fd8 <LCD_Flood>
}
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200000a9 	.word	0x200000a9
 8004104:	40020400 	.word	0x40020400

08004108 <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 800410e:	4b20      	ldr	r3, [pc, #128]	; (8004190 <LCD_Reset+0x88>)
 8004110:	2201      	movs	r2, #1
 8004112:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 8004114:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <LCD_Reset+0x8c>)
 8004116:	2210      	movs	r2, #16
 8004118:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <LCD_Reset+0x8c>)
 800411c:	2202      	movs	r2, #2
 800411e:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <LCD_Reset+0x8c>)
 8004122:	2201      	movs	r2, #1
 8004124:	619a      	str	r2, [r3, #24]

	LCD_RST_ACTIVE();
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <LCD_Reset+0x90>)
 8004128:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800412c:	619a      	str	r2, [r3, #24]
	HAL_Delay(2);
 800412e:	2002      	movs	r0, #2
 8004130:	f7fd fda6 	bl	8001c80 <HAL_Delay>
	LCD_RST_IDLE();
 8004134:	4b18      	ldr	r3, [pc, #96]	; (8004198 <LCD_Reset+0x90>)
 8004136:	2202      	movs	r2, #2
 8004138:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 800413a:	2078      	movs	r0, #120	; 0x78
 800413c:	f7fd fda0 	bl	8001c80 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 8004140:	4b13      	ldr	r3, [pc, #76]	; (8004190 <LCD_Reset+0x88>)
 8004142:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004146:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <LCD_Reset+0x8c>)
 800414a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800414e:	619a      	str	r2, [r3, #24]
	LCD_Write8(0x00);
 8004150:	2000      	movs	r0, #0
 8004152:	f7ff fdbf 	bl	8003cd4 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) LCD_WR_STROBE(); // Three extra 0x00s
 8004156:	2300      	movs	r3, #0
 8004158:	71fb      	strb	r3, [r7, #7]
 800415a:	e00f      	b.n	800417c <LCD_Reset+0x74>
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <LCD_Reset+0x8c>)
 800415e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004162:	619a      	str	r2, [r3, #24]
 8004164:	2002      	movs	r0, #2
 8004166:	f7ff fd0b 	bl	8003b80 <delay>
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <LCD_Reset+0x8c>)
 800416c:	2202      	movs	r2, #2
 800416e:	619a      	str	r2, [r3, #24]
 8004170:	2002      	movs	r0, #2
 8004172:	f7ff fd05 	bl	8003b80 <delay>
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	3301      	adds	r3, #1
 800417a:	71fb      	strb	r3, [r7, #7]
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d9ec      	bls.n	800415c <LCD_Reset+0x54>
	LCD_CS_IDLE();
 8004182:	4b03      	ldr	r3, [pc, #12]	; (8004190 <LCD_Reset+0x88>)
 8004184:	2201      	movs	r2, #1
 8004186:	619a      	str	r2, [r3, #24]
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40020400 	.word	0x40020400
 8004194:	40020000 	.word	0x40020000
 8004198:	40020800 	.word	0x40020800

0800419c <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4604      	mov	r4, r0
 80041a4:	4608      	mov	r0, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	461a      	mov	r2, r3
 80041aa:	4623      	mov	r3, r4
 80041ac:	80fb      	strh	r3, [r7, #6]
 80041ae:	4603      	mov	r3, r0
 80041b0:	80bb      	strh	r3, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	807b      	strh	r3, [r7, #2]
 80041b6:	4613      	mov	r3, r2
 80041b8:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 80041ba:	4b3f      	ldr	r3, [pc, #252]	; (80042b8 <LCD_SetAddrWindow+0x11c>)
 80041bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041c0:	619a      	str	r2, [r3, #24]
		done in any direction, the current screen rotation is applied
		because some users find it disconcerting when a fill does not
		occur top-to-bottom.
	*/
	int x, y, t;
	switch (m_rotation) {
 80041c2:	4b3e      	ldr	r3, [pc, #248]	; (80042bc <LCD_SetAddrWindow+0x120>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d01c      	beq.n	8004204 <LCD_SetAddrWindow+0x68>
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d037      	beq.n	800423e <LCD_SetAddrWindow+0xa2>
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d004      	beq.n	80041dc <LCD_SetAddrWindow+0x40>
	default:
		x = x1;
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	617b      	str	r3, [r7, #20]
		y = y1;
 80041d6:	88bb      	ldrh	r3, [r7, #4]
 80041d8:	613b      	str	r3, [r7, #16]
		break;
 80041da:	e046      	b.n	800426a <LCD_SetAddrWindow+0xce>
	case 1:
		t = y1;
 80041dc:	88bb      	ldrh	r3, [r7, #4]
 80041de:	60fb      	str	r3, [r7, #12]
		y1 = x1;
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	80bb      	strh	r3, [r7, #4]
		x1 = TFTWIDTH - 1 - y2;
 80041e4:	883b      	ldrh	r3, [r7, #0]
 80041e6:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80041ea:	80fb      	strh	r3, [r7, #6]
		y2 = x2;
 80041ec:	887b      	ldrh	r3, [r7, #2]
 80041ee:	803b      	strh	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80041f8:	807b      	strh	r3, [r7, #2]
		x = x2;
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	617b      	str	r3, [r7, #20]
		y = y1;
 80041fe:	88bb      	ldrh	r3, [r7, #4]
 8004200:	613b      	str	r3, [r7, #16]
		break;
 8004202:	e032      	b.n	800426a <LCD_SetAddrWindow+0xce>
	case 2:
		t = x1;
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	60fb      	str	r3, [r7, #12]
		x1 = TFTWIDTH - 1 - x2;
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800420e:	80fb      	strh	r3, [r7, #6]
		x2 = TFTWIDTH - 1 - t;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004218:	807b      	strh	r3, [r7, #2]
		t = y1;
 800421a:	88bb      	ldrh	r3, [r7, #4]
 800421c:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - y2;
 800421e:	883b      	ldrh	r3, [r7, #0]
 8004220:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004224:	3301      	adds	r3, #1
 8004226:	80bb      	strh	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004230:	3301      	adds	r3, #1
 8004232:	803b      	strh	r3, [r7, #0]
		x = x2;
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	617b      	str	r3, [r7, #20]
		y = y2;
 8004238:	883b      	ldrh	r3, [r7, #0]
 800423a:	613b      	str	r3, [r7, #16]
		break;
 800423c:	e015      	b.n	800426a <LCD_SetAddrWindow+0xce>
	case 3:
		t = x1;
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	60fb      	str	r3, [r7, #12]
		x1 = y1;
 8004242:	88bb      	ldrh	r3, [r7, #4]
 8004244:	80fb      	strh	r3, [r7, #6]
		y1 = TFTHEIGHT - 1 - x2;
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800424c:	3301      	adds	r3, #1
 800424e:	80bb      	strh	r3, [r7, #4]
		x2 = y2;
 8004250:	883b      	ldrh	r3, [r7, #0]
 8004252:	807b      	strh	r3, [r7, #2]
		y2 = TFTHEIGHT - 1 - t;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	b29b      	uxth	r3, r3
 8004258:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800425c:	3301      	adds	r3, #1
 800425e:	803b      	strh	r3, [r7, #0]
		x = x1;
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	617b      	str	r3, [r7, #20]
		y = y2;
 8004264:	883b      	ldrh	r3, [r7, #0]
 8004266:	613b      	str	r3, [r7, #16]
		break;
 8004268:	bf00      	nop
	}
#if defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V)
	LCD_Write16Register16(ILI932X_HOR_START_AD, x1); // Set address window
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	4619      	mov	r1, r3
 800426e:	2050      	movs	r0, #80	; 0x50
 8004270:	f7ff fd88 	bl	8003d84 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_HOR_END_AD, x2);
 8004274:	887b      	ldrh	r3, [r7, #2]
 8004276:	4619      	mov	r1, r3
 8004278:	2051      	movs	r0, #81	; 0x51
 800427a:	f7ff fd83 	bl	8003d84 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_START_AD, y1);
 800427e:	88bb      	ldrh	r3, [r7, #4]
 8004280:	4619      	mov	r1, r3
 8004282:	2052      	movs	r0, #82	; 0x52
 8004284:	f7ff fd7e 	bl	8003d84 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_END_AD, y2);
 8004288:	883b      	ldrh	r3, [r7, #0]
 800428a:	4619      	mov	r1, r3
 800428c:	2053      	movs	r0, #83	; 0x53
 800428e:	f7ff fd79 	bl	8003d84 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x); // Set address counter to top left
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	b29b      	uxth	r3, r3
 8004296:	4619      	mov	r1, r3
 8004298:	2020      	movs	r0, #32
 800429a:	f7ff fd73 	bl	8003d84 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	4619      	mov	r1, r3
 80042a4:	2021      	movs	r0, #33	; 0x21
 80042a6:	f7ff fd6d 	bl	8003d84 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
	}
#endif
	LCD_CS_IDLE();
 80042aa:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <LCD_SetAddrWindow+0x11c>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	619a      	str	r2, [r3, #24]
}
 80042b0:	bf00      	nop
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd90      	pop	{r4, r7, pc}
 80042b8:	40020400 	.word	0x40020400
 80042bc:	200000a9 	.word	0x200000a9

080042c0 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	4b28      	ldr	r3, [pc, #160]	; (8004374 <LCD_SetRotation+0xb4>)
 80042d4:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <LCD_SetRotation+0xb4>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d009      	beq.n	80042f2 <LCD_SetRotation+0x32>
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d007      	beq.n	80042f2 <LCD_SetRotation+0x32>
	default:
	case 0:
	case 2:
		m_width = TFTWIDTH;
 80042e2:	4b25      	ldr	r3, [pc, #148]	; (8004378 <LCD_SetRotation+0xb8>)
 80042e4:	22f0      	movs	r2, #240	; 0xf0
 80042e6:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <LCD_SetRotation+0xbc>)
 80042ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042ee:	801a      	strh	r2, [r3, #0]
		break;
 80042f0:	e007      	b.n	8004302 <LCD_SetRotation+0x42>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 80042f2:	4b21      	ldr	r3, [pc, #132]	; (8004378 <LCD_SetRotation+0xb8>)
 80042f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042f8:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <LCD_SetRotation+0xbc>)
 80042fc:	22f0      	movs	r2, #240	; 0xf0
 80042fe:	801a      	strh	r2, [r3, #0]
		break;
 8004300:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8004302:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <LCD_SetRotation+0xc0>)
 8004304:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004308:	619a      	str	r2, [r3, #24]
#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
    uint16_t t;
    switch(m_rotation) {
 800430a:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <LCD_SetRotation+0xb4>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d00b      	beq.n	800432a <LCD_SetRotation+0x6a>
 8004312:	2b03      	cmp	r3, #3
 8004314:	d00d      	beq.n	8004332 <LCD_SetRotation+0x72>
 8004316:	2b01      	cmp	r3, #1
 8004318:	d003      	beq.n	8004322 <LCD_SetRotation+0x62>
		default: t = 0x1030; break;
 800431a:	f241 0330 	movw	r3, #4144	; 0x1030
 800431e:	81fb      	strh	r3, [r7, #14]
 8004320:	e00b      	b.n	800433a <LCD_SetRotation+0x7a>
		case 1: t = 0x1028; break;
 8004322:	f241 0328 	movw	r3, #4136	; 0x1028
 8004326:	81fb      	strh	r3, [r7, #14]
 8004328:	e007      	b.n	800433a <LCD_SetRotation+0x7a>
		case 2: t = 0x1000; break;
 800432a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800432e:	81fb      	strh	r3, [r7, #14]
 8004330:	e003      	b.n	800433a <LCD_SetRotation+0x7a>
		case 3: t = 0x1018; break;
 8004332:	f241 0318 	movw	r3, #4120	; 0x1018
 8004336:	81fb      	strh	r3, [r7, #14]
 8004338:	bf00      	nop
    }
    LCD_Write16Register16(ILI932X_ENTRY_MOD, t); // MADCTL
 800433a:	89fb      	ldrh	r3, [r7, #14]
 800433c:	4619      	mov	r1, r3
 800433e:	2003      	movs	r0, #3
 8004340:	f7ff fd20 	bl	8003d84 <LCD_Write16Register16>
    // For 932X, init default full-screen address window:
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <LCD_SetRotation+0xb8>)
 8004346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <LCD_SetRotation+0xbc>)
 8004352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29b      	uxth	r3, r3
 800435c:	2100      	movs	r1, #0
 800435e:	2000      	movs	r0, #0
 8004360:	f7ff ff1c 	bl	800419c <LCD_SetAddrWindow>
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_CS_IDLE();
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <LCD_SetRotation+0xc0>)
 8004366:	2201      	movs	r2, #1
 8004368:	619a      	str	r2, [r3, #24]
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	200000a9 	.word	0x200000a9
 8004378:	2000009c 	.word	0x2000009c
 800437c:	2000009e 	.word	0x2000009e
 8004380:	40020400 	.word	0x40020400

08004384 <LCD_DrawChar>:
 * \param bg		Background color
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 8004384:	b590      	push	{r4, r7, lr}
 8004386:	b08b      	sub	sp, #44	; 0x2c
 8004388:	af00      	add	r7, sp, #0
 800438a:	4604      	mov	r4, r0
 800438c:	4608      	mov	r0, r1
 800438e:	4611      	mov	r1, r2
 8004390:	461a      	mov	r2, r3
 8004392:	4623      	mov	r3, r4
 8004394:	80fb      	strh	r3, [r7, #6]
 8004396:	4603      	mov	r3, r0
 8004398:	80bb      	strh	r3, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	70fb      	strb	r3, [r7, #3]
 800439e:	4613      	mov	r3, r2
 80043a0:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
	uint8_t *pchar;
	uint32_t line = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 80043aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80043ae:	4a65      	ldr	r2, [pc, #404]	; (8004544 <LCD_DrawChar+0x1c0>)
 80043b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b4:	88db      	ldrh	r3, [r3, #6]
 80043b6:	82fb      	strh	r3, [r7, #22]
	width = fonts[fontindex]->Width;
 80043b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80043bc:	4a61      	ldr	r2, [pc, #388]	; (8004544 <LCD_DrawChar+0x1c0>)
 80043be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c2:	889b      	ldrh	r3, [r3, #4]
 80043c4:	82bb      	strh	r3, [r7, #20]

	if ((x >= m_width) || // Clip right
 80043c6:	4b60      	ldr	r3, [pc, #384]	; (8004548 <LCD_DrawChar+0x1c4>)
 80043c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	f280 80b2 	bge.w	800453a <LCD_DrawChar+0x1b6>
		(y >= m_height) || // Clip bottom
 80043d6:	4b5d      	ldr	r3, [pc, #372]	; (800454c <LCD_DrawChar+0x1c8>)
 80043d8:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 80043dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	f280 80aa 	bge.w	800453a <LCD_DrawChar+0x1b6>
		((x + width - 1) < 0) || // Clip left
 80043e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043ea:	8abb      	ldrh	r3, [r7, #20]
 80043ec:	4413      	add	r3, r2
 80043ee:	3b01      	subs	r3, #1
		(y >= m_height) || // Clip bottom
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f2c0 80a2 	blt.w	800453a <LCD_DrawChar+0x1b6>
		((y + height - 1) < 0))   // Clip top
 80043f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80043fa:	8afb      	ldrh	r3, [r7, #22]
 80043fc:	4413      	add	r3, r2
 80043fe:	3b01      	subs	r3, #1
		((x + width - 1) < 0) || // Clip left
 8004400:	2b00      	cmp	r3, #0
 8004402:	f2c0 809a 	blt.w	800453a <LCD_DrawChar+0x1b6>
		return;

	bytes = (width + 7) / 8;
 8004406:	8abb      	ldrh	r3, [r7, #20]
 8004408:	3307      	adds	r3, #7
 800440a:	2b00      	cmp	r3, #0
 800440c:	da00      	bge.n	8004410 <LCD_DrawChar+0x8c>
 800440e:	3307      	adds	r3, #7
 8004410:	10db      	asrs	r3, r3, #3
 8004412:	827b      	strh	r3, [r7, #18]
	if (c < ' ') c = ' ';
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b1f      	cmp	r3, #31
 8004418:	d802      	bhi.n	8004420 <LCD_DrawChar+0x9c>
 800441a:	2320      	movs	r3, #32
 800441c:	70fb      	strb	r3, [r7, #3]
 800441e:	e004      	b.n	800442a <LCD_DrawChar+0xa6>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	2b7e      	cmp	r3, #126	; 0x7e
 8004424:	d901      	bls.n	800442a <LCD_DrawChar+0xa6>
 8004426:	2320      	movs	r3, #32
 8004428:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	3b20      	subs	r3, #32
 800442e:	8afa      	ldrh	r2, [r7, #22]
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	8a7a      	ldrh	r2, [r7, #18]
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	61bb      	str	r3, [r7, #24]
	offset = 8 * bytes - width;
 800443c:	8a7b      	ldrh	r3, [r7, #18]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	b2da      	uxtb	r2, r3
 8004444:	8abb      	ldrh	r3, [r7, #20]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	747b      	strb	r3, [r7, #17]

	for (uint32_t i = 0; i < height; i++) {
 800444c:	2300      	movs	r3, #0
 800444e:	623b      	str	r3, [r7, #32]
 8004450:	e06e      	b.n	8004530 <LCD_DrawChar+0x1ac>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 8004452:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004456:	4a3b      	ldr	r2, [pc, #236]	; (8004544 <LCD_DrawChar+0x1c0>)
 8004458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	441a      	add	r2, r3
 8004462:	8abb      	ldrh	r3, [r7, #20]
 8004464:	3307      	adds	r3, #7
 8004466:	2b00      	cmp	r3, #0
 8004468:	da00      	bge.n	800446c <LCD_DrawChar+0xe8>
 800446a:	3307      	adds	r3, #7
 800446c:	10db      	asrs	r3, r3, #3
 800446e:	4619      	mov	r1, r3
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	fb03 f301 	mul.w	r3, r3, r1
 8004476:	4413      	add	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
		switch (bytes) {
 800447a:	8a7b      	ldrh	r3, [r7, #18]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d002      	beq.n	8004486 <LCD_DrawChar+0x102>
 8004480:	2b02      	cmp	r3, #2
 8004482:	d004      	beq.n	800448e <LCD_DrawChar+0x10a>
 8004484:	e00c      	b.n	80044a0 <LCD_DrawChar+0x11c>
		case 1:
			line = pchar[0];
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800448c:	e016      	b.n	80044bc <LCD_DrawChar+0x138>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	3201      	adds	r2, #1
 8004498:	7812      	ldrb	r2, [r2, #0]
 800449a:	4313      	orrs	r3, r2
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800449e:	e00d      	b.n	80044bc <LCD_DrawChar+0x138>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	041a      	lsls	r2, r3, #16
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3301      	adds	r3, #1
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	4313      	orrs	r3, r2
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	3202      	adds	r2, #2
 80044b4:	7812      	ldrb	r2, [r2, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80044ba:	bf00      	nop
		}
		for (uint32_t j = 0; j < width; j++) {
 80044bc:	2300      	movs	r3, #0
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	e029      	b.n	8004516 <LCD_DrawChar+0x192>
			if (line & (1 << (width - j + offset - 1))) {
 80044c2:	8aba      	ldrh	r2, [r7, #20]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	1ad2      	subs	r2, r2, r3
 80044c8:	7c7b      	ldrb	r3, [r7, #17]
 80044ca:	4413      	add	r3, r2
 80044cc:	3b01      	subs	r3, #1
 80044ce:	2201      	movs	r2, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00c      	beq.n	80044f8 <LCD_DrawChar+0x174>
				LCD_DrawPixel((x + j), y, color);
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	4413      	add	r3, r2
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	b21b      	sxth	r3, r3
 80044ea:	883a      	ldrh	r2, [r7, #0]
 80044ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fd05 	bl	8003f00 <LCD_DrawPixel>
 80044f6:	e00b      	b.n	8004510 <LCD_DrawChar+0x18c>
			} else {
				LCD_DrawPixel((x + j), y, bg);
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	4413      	add	r3, r2
 8004500:	b29b      	uxth	r3, r3
 8004502:	b21b      	sxth	r3, r3
 8004504:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004506:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fcf8 	bl	8003f00 <LCD_DrawPixel>
		for (uint32_t j = 0; j < width; j++) {
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	3301      	adds	r3, #1
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	8abb      	ldrh	r3, [r7, #20]
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	429a      	cmp	r2, r3
 800451c:	d3d1      	bcc.n	80044c2 <LCD_DrawChar+0x13e>
			}
		}
		y++;
 800451e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004522:	b29b      	uxth	r3, r3
 8004524:	3301      	adds	r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	3301      	adds	r3, #1
 800452e:	623b      	str	r3, [r7, #32]
 8004530:	8afb      	ldrh	r3, [r7, #22]
 8004532:	6a3a      	ldr	r2, [r7, #32]
 8004534:	429a      	cmp	r2, r3
 8004536:	d38c      	bcc.n	8004452 <LCD_DrawChar+0xce>
 8004538:	e000      	b.n	800453c <LCD_DrawChar+0x1b8>
		return;
 800453a:	bf00      	nop
	}
}
 800453c:	372c      	adds	r7, #44	; 0x2c
 800453e:	46bd      	mov	sp, r7
 8004540:	bd90      	pop	{r4, r7, pc}
 8004542:	bf00      	nop
 8004544:	20000010 	.word	0x20000010
 8004548:	2000009c 	.word	0x2000009c
 800454c:	2000009e 	.word	0x2000009e

08004550 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8004550:	b40f      	push	{r0, r1, r2, r3}
 8004552:	b5b0      	push	{r4, r5, r7, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8004558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800455c:	60bb      	str	r3, [r7, #8]
	vsprintf(buf, fmt, lst);
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	6a39      	ldr	r1, [r7, #32]
 8004562:	4850      	ldr	r0, [pc, #320]	; (80046a4 <LCD_Printf+0x154>)
 8004564:	f000 fc82 	bl	8004e6c <vsiprintf>
	va_end(lst);
	
	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 8004568:	4b4f      	ldr	r3, [pc, #316]	; (80046a8 <LCD_Printf+0x158>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	4b4f      	ldr	r3, [pc, #316]	; (80046ac <LCD_Printf+0x15c>)
 8004570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004574:	88db      	ldrh	r3, [r3, #6]
 8004576:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 8004578:	4b4b      	ldr	r3, [pc, #300]	; (80046a8 <LCD_Printf+0x158>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	4b4b      	ldr	r3, [pc, #300]	; (80046ac <LCD_Printf+0x15c>)
 8004580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004584:	889b      	ldrh	r3, [r3, #4]
 8004586:	80bb      	strh	r3, [r7, #4]

	p = buf;
 8004588:	4b46      	ldr	r3, [pc, #280]	; (80046a4 <LCD_Printf+0x154>)
 800458a:	60fb      	str	r3, [r7, #12]
	while (*p) {
 800458c:	e07d      	b.n	800468a <LCD_Printf+0x13a>
		if (*p == '\n') {
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b0a      	cmp	r3, #10
 8004594:	d10e      	bne.n	80045b4 <LCD_Printf+0x64>
			m_cursor_y += height;
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	b29a      	uxth	r2, r3
 800459a:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <LCD_Printf+0x160>)
 800459c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	4413      	add	r3, r2
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	b21a      	sxth	r2, r3
 80045a8:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <LCD_Printf+0x160>)
 80045aa:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 80045ac:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <LCD_Printf+0x164>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	801a      	strh	r2, [r3, #0]
 80045b2:	e067      	b.n	8004684 <LCD_Printf+0x134>
		} else if (*p == '\r') {
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b0d      	cmp	r3, #13
 80045ba:	d103      	bne.n	80045c4 <LCD_Printf+0x74>
			m_cursor_x = 0;
 80045bc:	4b3d      	ldr	r3, [pc, #244]	; (80046b4 <LCD_Printf+0x164>)
 80045be:	2200      	movs	r2, #0
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	e05f      	b.n	8004684 <LCD_Printf+0x134>
		} else if (*p == '\t') {
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	d10d      	bne.n	80045e8 <LCD_Printf+0x98>
			m_cursor_x += width * 4;
 80045cc:	88bb      	ldrh	r3, [r7, #4]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	4b37      	ldr	r3, [pc, #220]	; (80046b4 <LCD_Printf+0x164>)
 80045d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	4413      	add	r3, r2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	b21a      	sxth	r2, r3
 80045e2:	4b34      	ldr	r3, [pc, #208]	; (80046b4 <LCD_Printf+0x164>)
 80045e4:	801a      	strh	r2, [r3, #0]
 80045e6:	e04d      	b.n	8004684 <LCD_Printf+0x134>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
				LCD_Flood(m_textbgcolor, (long) m_width * height);
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 80045e8:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <LCD_Printf+0x160>)
 80045ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <LCD_Printf+0x168>)
 80045f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f6:	4619      	mov	r1, r3
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	1acb      	subs	r3, r1, r3
 80045fe:	429a      	cmp	r2, r3
 8004600:	db02      	blt.n	8004608 <LCD_Printf+0xb8>
				m_cursor_y = 0;
 8004602:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <LCD_Printf+0x160>)
 8004604:	2200      	movs	r2, #0
 8004606:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
#endif
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 8004608:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <LCD_Printf+0x164>)
 800460a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800460e:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <LCD_Printf+0x160>)
 8004610:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	781c      	ldrb	r4, [r3, #0]
 8004618:	4b28      	ldr	r3, [pc, #160]	; (80046bc <LCD_Printf+0x16c>)
 800461a:	881d      	ldrh	r5, [r3, #0]
 800461c:	4b28      	ldr	r3, [pc, #160]	; (80046c0 <LCD_Printf+0x170>)
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	4a21      	ldr	r2, [pc, #132]	; (80046a8 <LCD_Printf+0x158>)
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	9201      	str	r2, [sp, #4]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	462b      	mov	r3, r5
 800462a:	4622      	mov	r2, r4
 800462c:	f7ff feaa 	bl	8004384 <LCD_DrawChar>
			m_cursor_x += width;
 8004630:	88bb      	ldrh	r3, [r7, #4]
 8004632:	b29a      	uxth	r2, r3
 8004634:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <LCD_Printf+0x164>)
 8004636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800463a:	b29b      	uxth	r3, r3
 800463c:	4413      	add	r3, r2
 800463e:	b29b      	uxth	r3, r3
 8004640:	b21a      	sxth	r2, r3
 8004642:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <LCD_Printf+0x164>)
 8004644:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <LCD_Printf+0x174>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01a      	beq.n	8004684 <LCD_Printf+0x134>
 800464e:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <LCD_Printf+0x164>)
 8004650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004654:	461a      	mov	r2, r3
 8004656:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <LCD_Printf+0x178>)
 8004658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800465c:	4619      	mov	r1, r3
 800465e:	88bb      	ldrh	r3, [r7, #4]
 8004660:	b29b      	uxth	r3, r3
 8004662:	1acb      	subs	r3, r1, r3
 8004664:	429a      	cmp	r2, r3
 8004666:	dd0d      	ble.n	8004684 <LCD_Printf+0x134>
				m_cursor_y += height;
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	b29a      	uxth	r2, r3
 800466c:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <LCD_Printf+0x160>)
 800466e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004672:	b29b      	uxth	r3, r3
 8004674:	4413      	add	r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	b21a      	sxth	r2, r3
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <LCD_Printf+0x160>)
 800467c:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 800467e:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <LCD_Printf+0x164>)
 8004680:	2200      	movs	r2, #0
 8004682:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
	while (*p) {
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f47f af7d 	bne.w	800458e <LCD_Printf+0x3e>
	}
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800469e:	b004      	add	sp, #16
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	200000ac 	.word	0x200000ac
 80046a8:	200000a8 	.word	0x200000a8
 80046ac:	20000010 	.word	0x20000010
 80046b0:	200000a2 	.word	0x200000a2
 80046b4:	200000a0 	.word	0x200000a0
 80046b8:	2000009e 	.word	0x2000009e
 80046bc:	200000a4 	.word	0x200000a4
 80046c0:	200000a6 	.word	0x200000a6
 80046c4:	200000aa 	.word	0x200000aa
 80046c8:	2000009c 	.word	0x2000009c

080046cc <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 *
 * \return void
 */
void LCD_SetCursor(uint16_t x, uint16_t y) {
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	460a      	mov	r2, r1
 80046d6:	80fb      	strh	r3, [r7, #6]
 80046d8:	4613      	mov	r3, r2
 80046da:	80bb      	strh	r3, [r7, #4]
	m_cursor_x = x;
 80046dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <LCD_SetCursor+0x2c>)
 80046e2:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 80046e4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80046e8:	4b04      	ldr	r3, [pc, #16]	; (80046fc <LCD_SetCursor+0x30>)
 80046ea:	801a      	strh	r2, [r3, #0]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	200000a0 	.word	0x200000a0
 80046fc:	200000a2 	.word	0x200000a2

08004700 <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 800470a:	2201      	movs	r2, #1
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	4293      	cmp	r3, r2
 8004710:	d305      	bcc.n	800471e <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 8004712:	2301      	movs	r3, #1
 8004714:	3b01      	subs	r3, #1
 8004716:	b2da      	uxtb	r2, r3
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <LCD_SetTextSize+0x30>)
 800471a:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 800471c:	e002      	b.n	8004724 <LCD_SetTextSize+0x24>
		m_font = s;
 800471e:	4a04      	ldr	r2, [pc, #16]	; (8004730 <LCD_SetTextSize+0x30>)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	7013      	strb	r3, [r2, #0]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	200000a8 	.word	0x200000a8

08004734 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	460a      	mov	r2, r1
 800473e:	80fb      	strh	r3, [r7, #6]
 8004740:	4613      	mov	r3, r2
 8004742:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8004744:	4a05      	ldr	r2, [pc, #20]	; (800475c <LCD_SetTextColor+0x28>)
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 800474a:	4a05      	ldr	r2, [pc, #20]	; (8004760 <LCD_SetTextColor+0x2c>)
 800474c:	88bb      	ldrh	r3, [r7, #4]
 800474e:	8013      	strh	r3, [r2, #0]
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	200000a4 	.word	0x200000a4
 8004760:	200000a6 	.word	0x200000a6

08004764 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476a:	f107 0314 	add.w	r3, r7, #20
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	605a      	str	r2, [r3, #4]
 8004774:	609a      	str	r2, [r3, #8]
 8004776:	60da      	str	r2, [r3, #12]
 8004778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	4b35      	ldr	r3, [pc, #212]	; (8004854 <MX_GPIO_Init+0xf0>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	4a34      	ldr	r2, [pc, #208]	; (8004854 <MX_GPIO_Init+0xf0>)
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	6313      	str	r3, [r2, #48]	; 0x30
 800478a:	4b32      	ldr	r3, [pc, #200]	; (8004854 <MX_GPIO_Init+0xf0>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <MX_GPIO_Init+0xf0>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	4a2d      	ldr	r2, [pc, #180]	; (8004854 <MX_GPIO_Init+0xf0>)
 80047a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a4:	6313      	str	r3, [r2, #48]	; 0x30
 80047a6:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <MX_GPIO_Init+0xf0>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	4b27      	ldr	r3, [pc, #156]	; (8004854 <MX_GPIO_Init+0xf0>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	4a26      	ldr	r2, [pc, #152]	; (8004854 <MX_GPIO_Init+0xf0>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	6313      	str	r3, [r2, #48]	; 0x30
 80047c2:	4b24      	ldr	r3, [pc, #144]	; (8004854 <MX_GPIO_Init+0xf0>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	4b20      	ldr	r3, [pc, #128]	; (8004854 <MX_GPIO_Init+0xf0>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <MX_GPIO_Init+0xf0>)
 80047d8:	f043 0302 	orr.w	r3, r3, #2
 80047dc:	6313      	str	r3, [r2, #48]	; 0x30
 80047de:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <MX_GPIO_Init+0xf0>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80047ea:	2200      	movs	r2, #0
 80047ec:	2120      	movs	r1, #32
 80047ee:	481a      	ldr	r0, [pc, #104]	; (8004858 <MX_GPIO_Init+0xf4>)
 80047f0:	f7fd fce0 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80047f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047fa:	4b18      	ldr	r3, [pc, #96]	; (800485c <MX_GPIO_Init+0xf8>)
 80047fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004802:	f107 0314 	add.w	r3, r7, #20
 8004806:	4619      	mov	r1, r3
 8004808:	4815      	ldr	r0, [pc, #84]	; (8004860 <MX_GPIO_Init+0xfc>)
 800480a:	f7fd fb41 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800480e:	230c      	movs	r3, #12
 8004810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004812:	2302      	movs	r3, #2
 8004814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800481a:	2303      	movs	r3, #3
 800481c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800481e:	2307      	movs	r3, #7
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004822:	f107 0314 	add.w	r3, r7, #20
 8004826:	4619      	mov	r1, r3
 8004828:	480b      	ldr	r0, [pc, #44]	; (8004858 <MX_GPIO_Init+0xf4>)
 800482a:	f7fd fb31 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800482e:	2320      	movs	r3, #32
 8004830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800483e:	f107 0314 	add.w	r3, r7, #20
 8004842:	4619      	mov	r1, r3
 8004844:	4804      	ldr	r0, [pc, #16]	; (8004858 <MX_GPIO_Init+0xf4>)
 8004846:	f7fd fb23 	bl	8001e90 <HAL_GPIO_Init>

}
 800484a:	bf00      	nop
 800484c:	3728      	adds	r7, #40	; 0x28
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
 8004858:	40020000 	.word	0x40020000
 800485c:	10210000 	.word	0x10210000
 8004860:	40020800 	.word	0x40020800

08004864 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004868:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <MX_I2C1_Init+0x50>)
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <MX_I2C1_Init+0x54>)
 800486c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <MX_I2C1_Init+0x50>)
 8004870:	4a12      	ldr	r2, [pc, #72]	; (80048bc <MX_I2C1_Init+0x58>)
 8004872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <MX_I2C1_Init+0x50>)
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <MX_I2C1_Init+0x50>)
 800487c:	2200      	movs	r2, #0
 800487e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004880:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <MX_I2C1_Init+0x50>)
 8004882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004886:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <MX_I2C1_Init+0x50>)
 800488a:	2200      	movs	r2, #0
 800488c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <MX_I2C1_Init+0x50>)
 8004890:	2200      	movs	r2, #0
 8004892:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004894:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <MX_I2C1_Init+0x50>)
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <MX_I2C1_Init+0x50>)
 800489c:	2200      	movs	r2, #0
 800489e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048a0:	4804      	ldr	r0, [pc, #16]	; (80048b4 <MX_I2C1_Init+0x50>)
 80048a2:	f7fd fca1 	bl	80021e8 <HAL_I2C_Init>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80048ac:	f000 f9ac 	bl	8004c08 <Error_Handler>
  }

}
 80048b0:	bf00      	nop
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	200001c0 	.word	0x200001c0
 80048b8:	40005400 	.word	0x40005400
 80048bc:	00061a80 	.word	0x00061a80

080048c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_I2C_MspInit+0x84>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d12c      	bne.n	800493c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <HAL_I2C_MspInit+0x88>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_I2C_MspInit+0x88>)
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	6313      	str	r3, [r2, #48]	; 0x30
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <HAL_I2C_MspInit+0x88>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004904:	2312      	movs	r3, #18
 8004906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004908:	2301      	movs	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490c:	2303      	movs	r3, #3
 800490e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004910:	2304      	movs	r3, #4
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	4619      	mov	r1, r3
 800491a:	480c      	ldr	r0, [pc, #48]	; (800494c <HAL_I2C_MspInit+0x8c>)
 800491c:	f7fd fab8 	bl	8001e90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <HAL_I2C_MspInit+0x88>)
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	4a07      	ldr	r2, [pc, #28]	; (8004948 <HAL_I2C_MspInit+0x88>)
 800492a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800492e:	6413      	str	r3, [r2, #64]	; 0x40
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_I2C_MspInit+0x88>)
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800493c:	bf00      	nop
 800493e:	3728      	adds	r7, #40	; 0x28
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40005400 	.word	0x40005400
 8004948:	40023800 	.word	0x40023800
 800494c:	40020400 	.word	0x40020400

08004950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004950:	b5b0      	push	{r4, r5, r7, lr}
 8004952:	b08e      	sub	sp, #56	; 0x38
 8004954:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004956:	f7fd f921 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800495a:	f000 f8e3 	bl	8004b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800495e:	f7ff ff01 	bl	8004764 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004962:	f7ff ff7f 	bl	8004864 <MX_I2C1_Init>
  LCD_Init();
 8004966:	f7ff fa3b 	bl	8003de0 <LCD_Init>
  /* USER CODE BEGIN 2 */
  LCD_Printf("connecting to the sensors \n");
 800496a:	485e      	ldr	r0, [pc, #376]	; (8004ae4 <main+0x194>)
 800496c:	f7ff fdf0 	bl	8004550 <LCD_Printf>
  HAL_Delay(1000);
 8004970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004974:	f7fd f984 	bl	8001c80 <HAL_Delay>
  bmp280_t bmp280;
  bmp280.i2c_handle = &hi2c1;
 8004978:	4b5b      	ldr	r3, [pc, #364]	; (8004ae8 <main+0x198>)
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
  bmp280.dev_addr = BMP280_I2C_ADDRESS1;
 800497c:	2376      	movs	r3, #118	; 0x76
 800497e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  com_result = BMP280_init(&bmp280);
 8004982:	1d3b      	adds	r3, r7, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7fc faf7 	bl	8000f78 <BMP280_init>
 800498a:	4603      	mov	r3, r0
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4b57      	ldr	r3, [pc, #348]	; (8004aec <main+0x19c>)
 8004990:	701a      	strb	r2, [r3, #0]
  com_result += BMP280_set_power_mode(BMP280_NORMAL_MODE);
 8004992:	2003      	movs	r0, #3
 8004994:	f7fc fc6e 	bl	8001274 <BMP280_set_power_mode>
 8004998:	4603      	mov	r3, r0
 800499a:	b2da      	uxtb	r2, r3
 800499c:	4b53      	ldr	r3, [pc, #332]	; (8004aec <main+0x19c>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	4413      	add	r3, r2
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	4b51      	ldr	r3, [pc, #324]	; (8004aec <main+0x19c>)
 80049a6:	701a      	strb	r2, [r3, #0]
  com_result += BMP280_set_work_mode(BMP280_STANDARD_RESOLUTION_MODE);
 80049a8:	2002      	movs	r0, #2
 80049aa:	f7fc fceb 	bl	8001384 <BMP280_set_work_mode>
 80049ae:	4603      	mov	r3, r0
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	4b4e      	ldr	r3, [pc, #312]	; (8004aec <main+0x19c>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	4413      	add	r3, r2
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <main+0x19c>)
 80049bc:	701a      	strb	r2, [r3, #0]
  com_result += BMP280_set_standby_durn(BMP280_STANDBY_TIME_1_MS);
 80049be:	2000      	movs	r0, #0
 80049c0:	f7fc fc9a 	bl	80012f8 <BMP280_set_standby_durn>
 80049c4:	4603      	mov	r3, r0
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	4b48      	ldr	r3, [pc, #288]	; (8004aec <main+0x19c>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	4413      	add	r3, r2
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	4b46      	ldr	r3, [pc, #280]	; (8004aec <main+0x19c>)
 80049d2:	701a      	strb	r2, [r3, #0]

  if(!com_result){
 80049d4:	4b45      	ldr	r3, [pc, #276]	; (8004aec <main+0x19c>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d104      	bne.n	80049e6 <main+0x96>
	  LCD_Printf("please check the connection \n");
 80049dc:	4844      	ldr	r0, [pc, #272]	; (8004af0 <main+0x1a0>)
 80049de:	f7ff fdb7 	bl	8004550 <LCD_Printf>
	  return 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e07a      	b.n	8004adc <main+0x18c>
  }
  LCD_SetCursor(0, 0);
 80049e6:	2100      	movs	r1, #0
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7ff fe6f 	bl	80046cc <LCD_SetCursor>
  LCD_Printf("the connection is established >> \n");
 80049ee:	4841      	ldr	r0, [pc, #260]	; (8004af4 <main+0x1a4>)
 80049f0:	f7ff fdae 	bl	8004550 <LCD_Printf>
  HAL_Delay(2000);
 80049f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80049f8:	f7fd f942 	bl	8001c80 <HAL_Delay>
  //reading
  BMP280_read_temperature_double(&temp);
 80049fc:	483e      	ldr	r0, [pc, #248]	; (8004af8 <main+0x1a8>)
 80049fe:	f7fd f81b 	bl	8001a38 <BMP280_read_temperature_double>
  BMP280_read_pressure_double(&pres);
 8004a02:	483e      	ldr	r0, [pc, #248]	; (8004afc <main+0x1ac>)
 8004a04:	f7fd f842 	bl	8001a8c <BMP280_read_pressure_double>
  alt  =  BMP280_calculate_altitude(qnh * 100);
 8004a08:	483d      	ldr	r0, [pc, #244]	; (8004b00 <main+0x1b0>)
 8004a0a:	f7fd f869 	bl	8001ae0 <BMP280_calculate_altitude>
 8004a0e:	eeb0 7a40 	vmov.f32	s14, s0
 8004a12:	eef0 7a60 	vmov.f32	s15, s1
 8004a16:	4b3b      	ldr	r3, [pc, #236]	; (8004b04 <main+0x1b4>)
 8004a18:	ed83 7b00 	vstr	d7, [r3]
  //LCD_SetCursor(0, 10);
  LCD_Printf("Temp : %+2d.%02d C\n", (int) temp, (int) (abs(temp * 100) % 100));
 8004a1c:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <main+0x1a8>)
 8004a1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a22:	4618      	mov	r0, r3
 8004a24:	4621      	mov	r1, r4
 8004a26:	f7fc f8af 	bl	8000b88 <__aeabi_d2iz>
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	4b32      	ldr	r3, [pc, #200]	; (8004af8 <main+0x1a8>)
 8004a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	4b34      	ldr	r3, [pc, #208]	; (8004b08 <main+0x1b8>)
 8004a38:	f7fb fdf6 	bl	8000628 <__aeabi_dmul>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	4618      	mov	r0, r3
 8004a42:	4621      	mov	r1, r4
 8004a44:	f7fc f8a0 	bl	8000b88 <__aeabi_d2iz>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bfb8      	it	lt
 8004a4e:	425b      	neglt	r3, r3
 8004a50:	4a2e      	ldr	r2, [pc, #184]	; (8004b0c <main+0x1bc>)
 8004a52:	fb82 1203 	smull	r1, r2, r2, r3
 8004a56:	1151      	asrs	r1, r2, #5
 8004a58:	17da      	asrs	r2, r3, #31
 8004a5a:	1a8a      	subs	r2, r1, r2
 8004a5c:	2164      	movs	r1, #100	; 0x64
 8004a5e:	fb01 f202 	mul.w	r2, r1, r2
 8004a62:	1a9a      	subs	r2, r3, r2
 8004a64:	4629      	mov	r1, r5
 8004a66:	482a      	ldr	r0, [pc, #168]	; (8004b10 <main+0x1c0>)
 8004a68:	f7ff fd72 	bl	8004550 <LCD_Printf>
  LCD_Printf("Press: %6d Pa\n", (int) pres);
 8004a6c:	4b23      	ldr	r3, [pc, #140]	; (8004afc <main+0x1ac>)
 8004a6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a72:	4618      	mov	r0, r3
 8004a74:	4621      	mov	r1, r4
 8004a76:	f7fc f887 	bl	8000b88 <__aeabi_d2iz>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4825      	ldr	r0, [pc, #148]	; (8004b14 <main+0x1c4>)
 8004a80:	f7ff fd66 	bl	8004550 <LCD_Printf>
  LCD_Printf("Alt  : %+4d.%01d m", (int) alt, (int) (abs(alt * 10) % 10));
 8004a84:	4b1f      	ldr	r3, [pc, #124]	; (8004b04 <main+0x1b4>)
 8004a86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	f7fc f87b 	bl	8000b88 <__aeabi_d2iz>
 8004a92:	4605      	mov	r5, r0
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <main+0x1b4>)
 8004a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <main+0x1c8>)
 8004aa0:	f7fb fdc2 	bl	8000628 <__aeabi_dmul>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	4621      	mov	r1, r4
 8004aac:	f7fc f86c 	bl	8000b88 <__aeabi_d2iz>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004ab6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <main+0x1cc>)
 8004abc:	fb83 1302 	smull	r1, r3, r3, r2
 8004ac0:	1099      	asrs	r1, r3, #2
 8004ac2:	17d3      	asrs	r3, r2, #31
 8004ac4:	1ac9      	subs	r1, r1, r3
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	1ad1      	subs	r1, r2, r3
 8004ad0:	460a      	mov	r2, r1
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	4812      	ldr	r0, [pc, #72]	; (8004b20 <main+0x1d0>)
 8004ad6:	f7ff fd3b 	bl	8004550 <LCD_Printf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004ada:	e7fe      	b.n	8004ada <main+0x18a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3738      	adds	r7, #56	; 0x38
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae4:	08006718 	.word	0x08006718
 8004ae8:	200001c0 	.word	0x200001c0
 8004aec:	20000230 	.word	0x20000230
 8004af0:	08006734 	.word	0x08006734
 8004af4:	08006754 	.word	0x08006754
 8004af8:	20000220 	.word	0x20000220
 8004afc:	20000218 	.word	0x20000218
 8004b00:	00018830 	.word	0x00018830
 8004b04:	20000228 	.word	0x20000228
 8004b08:	40590000 	.word	0x40590000
 8004b0c:	51eb851f 	.word	0x51eb851f
 8004b10:	08006778 	.word	0x08006778
 8004b14:	0800678c 	.word	0x0800678c
 8004b18:	40240000 	.word	0x40240000
 8004b1c:	66666667 	.word	0x66666667
 8004b20:	0800679c 	.word	0x0800679c

08004b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b094      	sub	sp, #80	; 0x50
 8004b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b2a:	f107 031c 	add.w	r3, r7, #28
 8004b2e:	2234      	movs	r2, #52	; 0x34
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f97c 	bl	8004e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b38:	f107 0308 	add.w	r3, r7, #8
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b48:	2300      	movs	r3, #0
 8004b4a:	607b      	str	r3, [r7, #4]
 8004b4c:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <SystemClock_Config+0xdc>)
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	4a2b      	ldr	r2, [pc, #172]	; (8004c00 <SystemClock_Config+0xdc>)
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b56:	6413      	str	r3, [r2, #64]	; 0x40
 8004b58:	4b29      	ldr	r3, [pc, #164]	; (8004c00 <SystemClock_Config+0xdc>)
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b64:	2300      	movs	r3, #0
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <SystemClock_Config+0xe0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <SystemClock_Config+0xe0>)
 8004b6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <SystemClock_Config+0xe0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004b84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004b88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004b94:	2304      	movs	r3, #4
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004b98:	23b4      	movs	r3, #180	; 0xb4
 8004b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ba8:	f107 031c 	add.w	r3, r7, #28
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe fd8d 	bl	80036cc <HAL_RCC_OscConfig>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004bb8:	f000 f826 	bl	8004c08 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004bbc:	f7fe fa94 	bl	80030e8 <HAL_PWREx_EnableOverDrive>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004bc6:	f000 f81f 	bl	8004c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bca:	230f      	movs	r3, #15
 8004bcc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bce:	2302      	movs	r3, #2
 8004bd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004bd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004be0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	2105      	movs	r1, #5
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe facd 	bl	8003188 <HAL_RCC_ClockConfig>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004bf4:	f000 f808 	bl	8004c08 <Error_Handler>
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	3750      	adds	r7, #80	; 0x50
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40007000 	.word	0x40007000

08004c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	4a0f      	ldr	r2, [pc, #60]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c36:	607b      	str	r3, [r7, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004c56:	2007      	movs	r0, #7
 8004c58:	f7fd f8e6 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40023800 	.word	0x40023800

08004c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c7a:	e7fe      	b.n	8004c7a <HardFault_Handler+0x4>

08004c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c80:	e7fe      	b.n	8004c80 <MemManage_Handler+0x4>

08004c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c82:	b480      	push	{r7}
 8004c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c86:	e7fe      	b.n	8004c86 <BusFault_Handler+0x4>

08004c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c8c:	e7fe      	b.n	8004c8c <UsageFault_Handler+0x4>

08004c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c92:	bf00      	nop
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004caa:	b480      	push	{r7}
 8004cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cbc:	f7fc ffc0 	bl	8001c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cc0:	bf00      	nop
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <_sbrk+0x50>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <_sbrk+0x16>
		heap_end = &end;
 8004cd4:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <_sbrk+0x50>)
 8004cd6:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <_sbrk+0x54>)
 8004cd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004cda:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <_sbrk+0x50>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <_sbrk+0x50>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	466a      	mov	r2, sp
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d907      	bls.n	8004cfe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004cee:	f000 f875 	bl	8004ddc <__errno>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	230c      	movs	r3, #12
 8004cf6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfc:	e006      	b.n	8004d0c <_sbrk+0x48>
	}

	heap_end += incr;
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <_sbrk+0x50>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4413      	add	r3, r2
 8004d06:	4a03      	ldr	r2, [pc, #12]	; (8004d14 <_sbrk+0x50>)
 8004d08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	200001ac 	.word	0x200001ac
 8004d18:	20000238 	.word	0x20000238

08004d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d20:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <SystemInit+0x60>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <SystemInit+0x60>)
 8004d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004d30:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <SystemInit+0x64>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a12      	ldr	r2, [pc, #72]	; (8004d80 <SystemInit+0x64>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d3c:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <SystemInit+0x64>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d42:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <SystemInit+0x64>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a0e      	ldr	r2, [pc, #56]	; (8004d80 <SystemInit+0x64>)
 8004d48:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004d52:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <SystemInit+0x64>)
 8004d54:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <SystemInit+0x68>)
 8004d56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d58:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <SystemInit+0x64>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <SystemInit+0x64>)
 8004d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <SystemInit+0x64>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d6a:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <SystemInit+0x60>)
 8004d6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d70:	609a      	str	r2, [r3, #8]
#endif
}
 8004d72:	bf00      	nop
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	e000ed00 	.word	0xe000ed00
 8004d80:	40023800 	.word	0x40023800
 8004d84:	24003010 	.word	0x24003010

08004d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d8e:	e003      	b.n	8004d98 <LoopCopyDataInit>

08004d90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d90:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d96:	3104      	adds	r1, #4

08004d98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d98:	480b      	ldr	r0, [pc, #44]	; (8004dc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004da0:	d3f6      	bcc.n	8004d90 <CopyDataInit>
  ldr  r2, =_sbss
 8004da2:	4a0b      	ldr	r2, [pc, #44]	; (8004dd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004da4:	e002      	b.n	8004dac <LoopFillZerobss>

08004da6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004da6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004da8:	f842 3b04 	str.w	r3, [r2], #4

08004dac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004dae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004db0:	d3f9      	bcc.n	8004da6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004db2:	f7ff ffb3 	bl	8004d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004db6:	f000 f817 	bl	8004de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dba:	f7ff fdc9 	bl	8004950 <main>
  bx  lr    
 8004dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004dc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004dc4:	08006d90 	.word	0x08006d90
  ldr  r0, =_sdata
 8004dc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004dcc:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8004dd0:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8004dd4:	20000238 	.word	0x20000238

08004dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dd8:	e7fe      	b.n	8004dd8 <ADC_IRQHandler>
	...

08004ddc <__errno>:
 8004ddc:	4b01      	ldr	r3, [pc, #4]	; (8004de4 <__errno+0x8>)
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000018 	.word	0x20000018

08004de8 <__libc_init_array>:
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	4e0d      	ldr	r6, [pc, #52]	; (8004e20 <__libc_init_array+0x38>)
 8004dec:	4c0d      	ldr	r4, [pc, #52]	; (8004e24 <__libc_init_array+0x3c>)
 8004dee:	1ba4      	subs	r4, r4, r6
 8004df0:	10a4      	asrs	r4, r4, #2
 8004df2:	2500      	movs	r5, #0
 8004df4:	42a5      	cmp	r5, r4
 8004df6:	d109      	bne.n	8004e0c <__libc_init_array+0x24>
 8004df8:	4e0b      	ldr	r6, [pc, #44]	; (8004e28 <__libc_init_array+0x40>)
 8004dfa:	4c0c      	ldr	r4, [pc, #48]	; (8004e2c <__libc_init_array+0x44>)
 8004dfc:	f001 fc7e 	bl	80066fc <_init>
 8004e00:	1ba4      	subs	r4, r4, r6
 8004e02:	10a4      	asrs	r4, r4, #2
 8004e04:	2500      	movs	r5, #0
 8004e06:	42a5      	cmp	r5, r4
 8004e08:	d105      	bne.n	8004e16 <__libc_init_array+0x2e>
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e10:	4798      	blx	r3
 8004e12:	3501      	adds	r5, #1
 8004e14:	e7ee      	b.n	8004df4 <__libc_init_array+0xc>
 8004e16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e1a:	4798      	blx	r3
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	e7f2      	b.n	8004e06 <__libc_init_array+0x1e>
 8004e20:	08006d88 	.word	0x08006d88
 8004e24:	08006d88 	.word	0x08006d88
 8004e28:	08006d88 	.word	0x08006d88
 8004e2c:	08006d8c 	.word	0x08006d8c

08004e30 <memset>:
 8004e30:	4402      	add	r2, r0
 8004e32:	4603      	mov	r3, r0
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d100      	bne.n	8004e3a <memset+0xa>
 8004e38:	4770      	bx	lr
 8004e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3e:	e7f9      	b.n	8004e34 <memset+0x4>

08004e40 <_vsiprintf_r>:
 8004e40:	b500      	push	{lr}
 8004e42:	b09b      	sub	sp, #108	; 0x6c
 8004e44:	9100      	str	r1, [sp, #0]
 8004e46:	9104      	str	r1, [sp, #16]
 8004e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e4c:	9105      	str	r1, [sp, #20]
 8004e4e:	9102      	str	r1, [sp, #8]
 8004e50:	4905      	ldr	r1, [pc, #20]	; (8004e68 <_vsiprintf_r+0x28>)
 8004e52:	9103      	str	r1, [sp, #12]
 8004e54:	4669      	mov	r1, sp
 8004e56:	f000 f86d 	bl	8004f34 <_svfiprintf_r>
 8004e5a:	9b00      	ldr	r3, [sp, #0]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	b01b      	add	sp, #108	; 0x6c
 8004e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e66:	bf00      	nop
 8004e68:	ffff0208 	.word	0xffff0208

08004e6c <vsiprintf>:
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	460a      	mov	r2, r1
 8004e70:	4601      	mov	r1, r0
 8004e72:	4802      	ldr	r0, [pc, #8]	; (8004e7c <vsiprintf+0x10>)
 8004e74:	6800      	ldr	r0, [r0, #0]
 8004e76:	f7ff bfe3 	b.w	8004e40 <_vsiprintf_r>
 8004e7a:	bf00      	nop
 8004e7c:	20000018 	.word	0x20000018

08004e80 <__ssputs_r>:
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	688e      	ldr	r6, [r1, #8]
 8004e86:	429e      	cmp	r6, r3
 8004e88:	4682      	mov	sl, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	4690      	mov	r8, r2
 8004e8e:	4699      	mov	r9, r3
 8004e90:	d837      	bhi.n	8004f02 <__ssputs_r+0x82>
 8004e92:	898a      	ldrh	r2, [r1, #12]
 8004e94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e98:	d031      	beq.n	8004efe <__ssputs_r+0x7e>
 8004e9a:	6825      	ldr	r5, [r4, #0]
 8004e9c:	6909      	ldr	r1, [r1, #16]
 8004e9e:	1a6f      	subs	r7, r5, r1
 8004ea0:	6965      	ldr	r5, [r4, #20]
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ea8:	fb95 f5f3 	sdiv	r5, r5, r3
 8004eac:	f109 0301 	add.w	r3, r9, #1
 8004eb0:	443b      	add	r3, r7
 8004eb2:	429d      	cmp	r5, r3
 8004eb4:	bf38      	it	cc
 8004eb6:	461d      	movcc	r5, r3
 8004eb8:	0553      	lsls	r3, r2, #21
 8004eba:	d530      	bpl.n	8004f1e <__ssputs_r+0x9e>
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	f000 fb2b 	bl	8005518 <_malloc_r>
 8004ec2:	4606      	mov	r6, r0
 8004ec4:	b950      	cbnz	r0, 8004edc <__ssputs_r+0x5c>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	f8ca 3000 	str.w	r3, [sl]
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed2:	81a3      	strh	r3, [r4, #12]
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004edc:	463a      	mov	r2, r7
 8004ede:	6921      	ldr	r1, [r4, #16]
 8004ee0:	f000 faa8 	bl	8005434 <memcpy>
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	6126      	str	r6, [r4, #16]
 8004ef2:	6165      	str	r5, [r4, #20]
 8004ef4:	443e      	add	r6, r7
 8004ef6:	1bed      	subs	r5, r5, r7
 8004ef8:	6026      	str	r6, [r4, #0]
 8004efa:	60a5      	str	r5, [r4, #8]
 8004efc:	464e      	mov	r6, r9
 8004efe:	454e      	cmp	r6, r9
 8004f00:	d900      	bls.n	8004f04 <__ssputs_r+0x84>
 8004f02:	464e      	mov	r6, r9
 8004f04:	4632      	mov	r2, r6
 8004f06:	4641      	mov	r1, r8
 8004f08:	6820      	ldr	r0, [r4, #0]
 8004f0a:	f000 fa9e 	bl	800544a <memmove>
 8004f0e:	68a3      	ldr	r3, [r4, #8]
 8004f10:	1b9b      	subs	r3, r3, r6
 8004f12:	60a3      	str	r3, [r4, #8]
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	441e      	add	r6, r3
 8004f18:	6026      	str	r6, [r4, #0]
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e7dc      	b.n	8004ed8 <__ssputs_r+0x58>
 8004f1e:	462a      	mov	r2, r5
 8004f20:	f000 fb54 	bl	80055cc <_realloc_r>
 8004f24:	4606      	mov	r6, r0
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d1e2      	bne.n	8004ef0 <__ssputs_r+0x70>
 8004f2a:	6921      	ldr	r1, [r4, #16]
 8004f2c:	4650      	mov	r0, sl
 8004f2e:	f000 faa5 	bl	800547c <_free_r>
 8004f32:	e7c8      	b.n	8004ec6 <__ssputs_r+0x46>

08004f34 <_svfiprintf_r>:
 8004f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f38:	461d      	mov	r5, r3
 8004f3a:	898b      	ldrh	r3, [r1, #12]
 8004f3c:	061f      	lsls	r7, r3, #24
 8004f3e:	b09d      	sub	sp, #116	; 0x74
 8004f40:	4680      	mov	r8, r0
 8004f42:	460c      	mov	r4, r1
 8004f44:	4616      	mov	r6, r2
 8004f46:	d50f      	bpl.n	8004f68 <_svfiprintf_r+0x34>
 8004f48:	690b      	ldr	r3, [r1, #16]
 8004f4a:	b96b      	cbnz	r3, 8004f68 <_svfiprintf_r+0x34>
 8004f4c:	2140      	movs	r1, #64	; 0x40
 8004f4e:	f000 fae3 	bl	8005518 <_malloc_r>
 8004f52:	6020      	str	r0, [r4, #0]
 8004f54:	6120      	str	r0, [r4, #16]
 8004f56:	b928      	cbnz	r0, 8004f64 <_svfiprintf_r+0x30>
 8004f58:	230c      	movs	r3, #12
 8004f5a:	f8c8 3000 	str.w	r3, [r8]
 8004f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f62:	e0c8      	b.n	80050f6 <_svfiprintf_r+0x1c2>
 8004f64:	2340      	movs	r3, #64	; 0x40
 8004f66:	6163      	str	r3, [r4, #20]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6c:	2320      	movs	r3, #32
 8004f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f72:	2330      	movs	r3, #48	; 0x30
 8004f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f78:	9503      	str	r5, [sp, #12]
 8004f7a:	f04f 0b01 	mov.w	fp, #1
 8004f7e:	4637      	mov	r7, r6
 8004f80:	463d      	mov	r5, r7
 8004f82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f86:	b10b      	cbz	r3, 8004f8c <_svfiprintf_r+0x58>
 8004f88:	2b25      	cmp	r3, #37	; 0x25
 8004f8a:	d13e      	bne.n	800500a <_svfiprintf_r+0xd6>
 8004f8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f90:	d00b      	beq.n	8004faa <_svfiprintf_r+0x76>
 8004f92:	4653      	mov	r3, sl
 8004f94:	4632      	mov	r2, r6
 8004f96:	4621      	mov	r1, r4
 8004f98:	4640      	mov	r0, r8
 8004f9a:	f7ff ff71 	bl	8004e80 <__ssputs_r>
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	f000 80a4 	beq.w	80050ec <_svfiprintf_r+0x1b8>
 8004fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa6:	4453      	add	r3, sl
 8004fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8004faa:	783b      	ldrb	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 809d 	beq.w	80050ec <_svfiprintf_r+0x1b8>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fbc:	9304      	str	r3, [sp, #16]
 8004fbe:	9307      	str	r3, [sp, #28]
 8004fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8004fc6:	462f      	mov	r7, r5
 8004fc8:	2205      	movs	r2, #5
 8004fca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004fce:	4850      	ldr	r0, [pc, #320]	; (8005110 <_svfiprintf_r+0x1dc>)
 8004fd0:	f7fb f91e 	bl	8000210 <memchr>
 8004fd4:	9b04      	ldr	r3, [sp, #16]
 8004fd6:	b9d0      	cbnz	r0, 800500e <_svfiprintf_r+0xda>
 8004fd8:	06d9      	lsls	r1, r3, #27
 8004fda:	bf44      	itt	mi
 8004fdc:	2220      	movmi	r2, #32
 8004fde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fe2:	071a      	lsls	r2, r3, #28
 8004fe4:	bf44      	itt	mi
 8004fe6:	222b      	movmi	r2, #43	; 0x2b
 8004fe8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fec:	782a      	ldrb	r2, [r5, #0]
 8004fee:	2a2a      	cmp	r2, #42	; 0x2a
 8004ff0:	d015      	beq.n	800501e <_svfiprintf_r+0xea>
 8004ff2:	9a07      	ldr	r2, [sp, #28]
 8004ff4:	462f      	mov	r7, r5
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	250a      	movs	r5, #10
 8004ffa:	4639      	mov	r1, r7
 8004ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005000:	3b30      	subs	r3, #48	; 0x30
 8005002:	2b09      	cmp	r3, #9
 8005004:	d94d      	bls.n	80050a2 <_svfiprintf_r+0x16e>
 8005006:	b1b8      	cbz	r0, 8005038 <_svfiprintf_r+0x104>
 8005008:	e00f      	b.n	800502a <_svfiprintf_r+0xf6>
 800500a:	462f      	mov	r7, r5
 800500c:	e7b8      	b.n	8004f80 <_svfiprintf_r+0x4c>
 800500e:	4a40      	ldr	r2, [pc, #256]	; (8005110 <_svfiprintf_r+0x1dc>)
 8005010:	1a80      	subs	r0, r0, r2
 8005012:	fa0b f000 	lsl.w	r0, fp, r0
 8005016:	4318      	orrs	r0, r3
 8005018:	9004      	str	r0, [sp, #16]
 800501a:	463d      	mov	r5, r7
 800501c:	e7d3      	b.n	8004fc6 <_svfiprintf_r+0x92>
 800501e:	9a03      	ldr	r2, [sp, #12]
 8005020:	1d11      	adds	r1, r2, #4
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	9103      	str	r1, [sp, #12]
 8005026:	2a00      	cmp	r2, #0
 8005028:	db01      	blt.n	800502e <_svfiprintf_r+0xfa>
 800502a:	9207      	str	r2, [sp, #28]
 800502c:	e004      	b.n	8005038 <_svfiprintf_r+0x104>
 800502e:	4252      	negs	r2, r2
 8005030:	f043 0302 	orr.w	r3, r3, #2
 8005034:	9207      	str	r2, [sp, #28]
 8005036:	9304      	str	r3, [sp, #16]
 8005038:	783b      	ldrb	r3, [r7, #0]
 800503a:	2b2e      	cmp	r3, #46	; 0x2e
 800503c:	d10c      	bne.n	8005058 <_svfiprintf_r+0x124>
 800503e:	787b      	ldrb	r3, [r7, #1]
 8005040:	2b2a      	cmp	r3, #42	; 0x2a
 8005042:	d133      	bne.n	80050ac <_svfiprintf_r+0x178>
 8005044:	9b03      	ldr	r3, [sp, #12]
 8005046:	1d1a      	adds	r2, r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	9203      	str	r2, [sp, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	bfb8      	it	lt
 8005050:	f04f 33ff 	movlt.w	r3, #4294967295
 8005054:	3702      	adds	r7, #2
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	4d2e      	ldr	r5, [pc, #184]	; (8005114 <_svfiprintf_r+0x1e0>)
 800505a:	7839      	ldrb	r1, [r7, #0]
 800505c:	2203      	movs	r2, #3
 800505e:	4628      	mov	r0, r5
 8005060:	f7fb f8d6 	bl	8000210 <memchr>
 8005064:	b138      	cbz	r0, 8005076 <_svfiprintf_r+0x142>
 8005066:	2340      	movs	r3, #64	; 0x40
 8005068:	1b40      	subs	r0, r0, r5
 800506a:	fa03 f000 	lsl.w	r0, r3, r0
 800506e:	9b04      	ldr	r3, [sp, #16]
 8005070:	4303      	orrs	r3, r0
 8005072:	3701      	adds	r7, #1
 8005074:	9304      	str	r3, [sp, #16]
 8005076:	7839      	ldrb	r1, [r7, #0]
 8005078:	4827      	ldr	r0, [pc, #156]	; (8005118 <_svfiprintf_r+0x1e4>)
 800507a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800507e:	2206      	movs	r2, #6
 8005080:	1c7e      	adds	r6, r7, #1
 8005082:	f7fb f8c5 	bl	8000210 <memchr>
 8005086:	2800      	cmp	r0, #0
 8005088:	d038      	beq.n	80050fc <_svfiprintf_r+0x1c8>
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <_svfiprintf_r+0x1e8>)
 800508c:	bb13      	cbnz	r3, 80050d4 <_svfiprintf_r+0x1a0>
 800508e:	9b03      	ldr	r3, [sp, #12]
 8005090:	3307      	adds	r3, #7
 8005092:	f023 0307 	bic.w	r3, r3, #7
 8005096:	3308      	adds	r3, #8
 8005098:	9303      	str	r3, [sp, #12]
 800509a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509c:	444b      	add	r3, r9
 800509e:	9309      	str	r3, [sp, #36]	; 0x24
 80050a0:	e76d      	b.n	8004f7e <_svfiprintf_r+0x4a>
 80050a2:	fb05 3202 	mla	r2, r5, r2, r3
 80050a6:	2001      	movs	r0, #1
 80050a8:	460f      	mov	r7, r1
 80050aa:	e7a6      	b.n	8004ffa <_svfiprintf_r+0xc6>
 80050ac:	2300      	movs	r3, #0
 80050ae:	3701      	adds	r7, #1
 80050b0:	9305      	str	r3, [sp, #20]
 80050b2:	4619      	mov	r1, r3
 80050b4:	250a      	movs	r5, #10
 80050b6:	4638      	mov	r0, r7
 80050b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050bc:	3a30      	subs	r2, #48	; 0x30
 80050be:	2a09      	cmp	r2, #9
 80050c0:	d903      	bls.n	80050ca <_svfiprintf_r+0x196>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0c8      	beq.n	8005058 <_svfiprintf_r+0x124>
 80050c6:	9105      	str	r1, [sp, #20]
 80050c8:	e7c6      	b.n	8005058 <_svfiprintf_r+0x124>
 80050ca:	fb05 2101 	mla	r1, r5, r1, r2
 80050ce:	2301      	movs	r3, #1
 80050d0:	4607      	mov	r7, r0
 80050d2:	e7f0      	b.n	80050b6 <_svfiprintf_r+0x182>
 80050d4:	ab03      	add	r3, sp, #12
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	4622      	mov	r2, r4
 80050da:	4b11      	ldr	r3, [pc, #68]	; (8005120 <_svfiprintf_r+0x1ec>)
 80050dc:	a904      	add	r1, sp, #16
 80050de:	4640      	mov	r0, r8
 80050e0:	f3af 8000 	nop.w
 80050e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050e8:	4681      	mov	r9, r0
 80050ea:	d1d6      	bne.n	800509a <_svfiprintf_r+0x166>
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	065b      	lsls	r3, r3, #25
 80050f0:	f53f af35 	bmi.w	8004f5e <_svfiprintf_r+0x2a>
 80050f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f6:	b01d      	add	sp, #116	; 0x74
 80050f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fc:	ab03      	add	r3, sp, #12
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	4622      	mov	r2, r4
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <_svfiprintf_r+0x1ec>)
 8005104:	a904      	add	r1, sp, #16
 8005106:	4640      	mov	r0, r8
 8005108:	f000 f882 	bl	8005210 <_printf_i>
 800510c:	e7ea      	b.n	80050e4 <_svfiprintf_r+0x1b0>
 800510e:	bf00      	nop
 8005110:	08006d08 	.word	0x08006d08
 8005114:	08006d0e 	.word	0x08006d0e
 8005118:	08006d12 	.word	0x08006d12
 800511c:	00000000 	.word	0x00000000
 8005120:	08004e81 	.word	0x08004e81

08005124 <_printf_common>:
 8005124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	4691      	mov	r9, r2
 800512a:	461f      	mov	r7, r3
 800512c:	688a      	ldr	r2, [r1, #8]
 800512e:	690b      	ldr	r3, [r1, #16]
 8005130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005134:	4293      	cmp	r3, r2
 8005136:	bfb8      	it	lt
 8005138:	4613      	movlt	r3, r2
 800513a:	f8c9 3000 	str.w	r3, [r9]
 800513e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005142:	4606      	mov	r6, r0
 8005144:	460c      	mov	r4, r1
 8005146:	b112      	cbz	r2, 800514e <_printf_common+0x2a>
 8005148:	3301      	adds	r3, #1
 800514a:	f8c9 3000 	str.w	r3, [r9]
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	0699      	lsls	r1, r3, #26
 8005152:	bf42      	ittt	mi
 8005154:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005158:	3302      	addmi	r3, #2
 800515a:	f8c9 3000 	strmi.w	r3, [r9]
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	f015 0506 	ands.w	r5, r5, #6
 8005164:	d107      	bne.n	8005176 <_printf_common+0x52>
 8005166:	f104 0a19 	add.w	sl, r4, #25
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	f8d9 2000 	ldr.w	r2, [r9]
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	42ab      	cmp	r3, r5
 8005174:	dc28      	bgt.n	80051c8 <_printf_common+0xa4>
 8005176:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	3300      	adds	r3, #0
 800517e:	bf18      	it	ne
 8005180:	2301      	movne	r3, #1
 8005182:	0692      	lsls	r2, r2, #26
 8005184:	d42d      	bmi.n	80051e2 <_printf_common+0xbe>
 8005186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800518a:	4639      	mov	r1, r7
 800518c:	4630      	mov	r0, r6
 800518e:	47c0      	blx	r8
 8005190:	3001      	adds	r0, #1
 8005192:	d020      	beq.n	80051d6 <_printf_common+0xb2>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	68e5      	ldr	r5, [r4, #12]
 8005198:	f8d9 2000 	ldr.w	r2, [r9]
 800519c:	f003 0306 	and.w	r3, r3, #6
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	bf08      	it	eq
 80051a4:	1aad      	subeq	r5, r5, r2
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	6922      	ldr	r2, [r4, #16]
 80051aa:	bf0c      	ite	eq
 80051ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b0:	2500      	movne	r5, #0
 80051b2:	4293      	cmp	r3, r2
 80051b4:	bfc4      	itt	gt
 80051b6:	1a9b      	subgt	r3, r3, r2
 80051b8:	18ed      	addgt	r5, r5, r3
 80051ba:	f04f 0900 	mov.w	r9, #0
 80051be:	341a      	adds	r4, #26
 80051c0:	454d      	cmp	r5, r9
 80051c2:	d11a      	bne.n	80051fa <_printf_common+0xd6>
 80051c4:	2000      	movs	r0, #0
 80051c6:	e008      	b.n	80051da <_printf_common+0xb6>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4652      	mov	r2, sl
 80051cc:	4639      	mov	r1, r7
 80051ce:	4630      	mov	r0, r6
 80051d0:	47c0      	blx	r8
 80051d2:	3001      	adds	r0, #1
 80051d4:	d103      	bne.n	80051de <_printf_common+0xba>
 80051d6:	f04f 30ff 	mov.w	r0, #4294967295
 80051da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051de:	3501      	adds	r5, #1
 80051e0:	e7c3      	b.n	800516a <_printf_common+0x46>
 80051e2:	18e1      	adds	r1, r4, r3
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	2030      	movs	r0, #48	; 0x30
 80051e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ec:	4422      	add	r2, r4
 80051ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f6:	3302      	adds	r3, #2
 80051f8:	e7c5      	b.n	8005186 <_printf_common+0x62>
 80051fa:	2301      	movs	r3, #1
 80051fc:	4622      	mov	r2, r4
 80051fe:	4639      	mov	r1, r7
 8005200:	4630      	mov	r0, r6
 8005202:	47c0      	blx	r8
 8005204:	3001      	adds	r0, #1
 8005206:	d0e6      	beq.n	80051d6 <_printf_common+0xb2>
 8005208:	f109 0901 	add.w	r9, r9, #1
 800520c:	e7d8      	b.n	80051c0 <_printf_common+0x9c>
	...

08005210 <_printf_i>:
 8005210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005214:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005218:	460c      	mov	r4, r1
 800521a:	7e09      	ldrb	r1, [r1, #24]
 800521c:	b085      	sub	sp, #20
 800521e:	296e      	cmp	r1, #110	; 0x6e
 8005220:	4617      	mov	r7, r2
 8005222:	4606      	mov	r6, r0
 8005224:	4698      	mov	r8, r3
 8005226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005228:	f000 80b3 	beq.w	8005392 <_printf_i+0x182>
 800522c:	d822      	bhi.n	8005274 <_printf_i+0x64>
 800522e:	2963      	cmp	r1, #99	; 0x63
 8005230:	d036      	beq.n	80052a0 <_printf_i+0x90>
 8005232:	d80a      	bhi.n	800524a <_printf_i+0x3a>
 8005234:	2900      	cmp	r1, #0
 8005236:	f000 80b9 	beq.w	80053ac <_printf_i+0x19c>
 800523a:	2958      	cmp	r1, #88	; 0x58
 800523c:	f000 8083 	beq.w	8005346 <_printf_i+0x136>
 8005240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005244:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005248:	e032      	b.n	80052b0 <_printf_i+0xa0>
 800524a:	2964      	cmp	r1, #100	; 0x64
 800524c:	d001      	beq.n	8005252 <_printf_i+0x42>
 800524e:	2969      	cmp	r1, #105	; 0x69
 8005250:	d1f6      	bne.n	8005240 <_printf_i+0x30>
 8005252:	6820      	ldr	r0, [r4, #0]
 8005254:	6813      	ldr	r3, [r2, #0]
 8005256:	0605      	lsls	r5, r0, #24
 8005258:	f103 0104 	add.w	r1, r3, #4
 800525c:	d52a      	bpl.n	80052b4 <_printf_i+0xa4>
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6011      	str	r1, [r2, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	da03      	bge.n	800526e <_printf_i+0x5e>
 8005266:	222d      	movs	r2, #45	; 0x2d
 8005268:	425b      	negs	r3, r3
 800526a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800526e:	486f      	ldr	r0, [pc, #444]	; (800542c <_printf_i+0x21c>)
 8005270:	220a      	movs	r2, #10
 8005272:	e039      	b.n	80052e8 <_printf_i+0xd8>
 8005274:	2973      	cmp	r1, #115	; 0x73
 8005276:	f000 809d 	beq.w	80053b4 <_printf_i+0x1a4>
 800527a:	d808      	bhi.n	800528e <_printf_i+0x7e>
 800527c:	296f      	cmp	r1, #111	; 0x6f
 800527e:	d020      	beq.n	80052c2 <_printf_i+0xb2>
 8005280:	2970      	cmp	r1, #112	; 0x70
 8005282:	d1dd      	bne.n	8005240 <_printf_i+0x30>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	f043 0320 	orr.w	r3, r3, #32
 800528a:	6023      	str	r3, [r4, #0]
 800528c:	e003      	b.n	8005296 <_printf_i+0x86>
 800528e:	2975      	cmp	r1, #117	; 0x75
 8005290:	d017      	beq.n	80052c2 <_printf_i+0xb2>
 8005292:	2978      	cmp	r1, #120	; 0x78
 8005294:	d1d4      	bne.n	8005240 <_printf_i+0x30>
 8005296:	2378      	movs	r3, #120	; 0x78
 8005298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800529c:	4864      	ldr	r0, [pc, #400]	; (8005430 <_printf_i+0x220>)
 800529e:	e055      	b.n	800534c <_printf_i+0x13c>
 80052a0:	6813      	ldr	r3, [r2, #0]
 80052a2:	1d19      	adds	r1, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6011      	str	r1, [r2, #0]
 80052a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b0:	2301      	movs	r3, #1
 80052b2:	e08c      	b.n	80053ce <_printf_i+0x1be>
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6011      	str	r1, [r2, #0]
 80052b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052bc:	bf18      	it	ne
 80052be:	b21b      	sxthne	r3, r3
 80052c0:	e7cf      	b.n	8005262 <_printf_i+0x52>
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	6825      	ldr	r5, [r4, #0]
 80052c6:	1d18      	adds	r0, r3, #4
 80052c8:	6010      	str	r0, [r2, #0]
 80052ca:	0628      	lsls	r0, r5, #24
 80052cc:	d501      	bpl.n	80052d2 <_printf_i+0xc2>
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	e002      	b.n	80052d8 <_printf_i+0xc8>
 80052d2:	0668      	lsls	r0, r5, #25
 80052d4:	d5fb      	bpl.n	80052ce <_printf_i+0xbe>
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	4854      	ldr	r0, [pc, #336]	; (800542c <_printf_i+0x21c>)
 80052da:	296f      	cmp	r1, #111	; 0x6f
 80052dc:	bf14      	ite	ne
 80052de:	220a      	movne	r2, #10
 80052e0:	2208      	moveq	r2, #8
 80052e2:	2100      	movs	r1, #0
 80052e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052e8:	6865      	ldr	r5, [r4, #4]
 80052ea:	60a5      	str	r5, [r4, #8]
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	f2c0 8095 	blt.w	800541c <_printf_i+0x20c>
 80052f2:	6821      	ldr	r1, [r4, #0]
 80052f4:	f021 0104 	bic.w	r1, r1, #4
 80052f8:	6021      	str	r1, [r4, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d13d      	bne.n	800537a <_printf_i+0x16a>
 80052fe:	2d00      	cmp	r5, #0
 8005300:	f040 808e 	bne.w	8005420 <_printf_i+0x210>
 8005304:	4665      	mov	r5, ip
 8005306:	2a08      	cmp	r2, #8
 8005308:	d10b      	bne.n	8005322 <_printf_i+0x112>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	07db      	lsls	r3, r3, #31
 800530e:	d508      	bpl.n	8005322 <_printf_i+0x112>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	6862      	ldr	r2, [r4, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	bfde      	ittt	le
 8005318:	2330      	movle	r3, #48	; 0x30
 800531a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800531e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005322:	ebac 0305 	sub.w	r3, ip, r5
 8005326:	6123      	str	r3, [r4, #16]
 8005328:	f8cd 8000 	str.w	r8, [sp]
 800532c:	463b      	mov	r3, r7
 800532e:	aa03      	add	r2, sp, #12
 8005330:	4621      	mov	r1, r4
 8005332:	4630      	mov	r0, r6
 8005334:	f7ff fef6 	bl	8005124 <_printf_common>
 8005338:	3001      	adds	r0, #1
 800533a:	d14d      	bne.n	80053d8 <_printf_i+0x1c8>
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	b005      	add	sp, #20
 8005342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005346:	4839      	ldr	r0, [pc, #228]	; (800542c <_printf_i+0x21c>)
 8005348:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800534c:	6813      	ldr	r3, [r2, #0]
 800534e:	6821      	ldr	r1, [r4, #0]
 8005350:	1d1d      	adds	r5, r3, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6015      	str	r5, [r2, #0]
 8005356:	060a      	lsls	r2, r1, #24
 8005358:	d50b      	bpl.n	8005372 <_printf_i+0x162>
 800535a:	07ca      	lsls	r2, r1, #31
 800535c:	bf44      	itt	mi
 800535e:	f041 0120 	orrmi.w	r1, r1, #32
 8005362:	6021      	strmi	r1, [r4, #0]
 8005364:	b91b      	cbnz	r3, 800536e <_printf_i+0x15e>
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	f022 0220 	bic.w	r2, r2, #32
 800536c:	6022      	str	r2, [r4, #0]
 800536e:	2210      	movs	r2, #16
 8005370:	e7b7      	b.n	80052e2 <_printf_i+0xd2>
 8005372:	064d      	lsls	r5, r1, #25
 8005374:	bf48      	it	mi
 8005376:	b29b      	uxthmi	r3, r3
 8005378:	e7ef      	b.n	800535a <_printf_i+0x14a>
 800537a:	4665      	mov	r5, ip
 800537c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005380:	fb02 3311 	mls	r3, r2, r1, r3
 8005384:	5cc3      	ldrb	r3, [r0, r3]
 8005386:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800538a:	460b      	mov	r3, r1
 800538c:	2900      	cmp	r1, #0
 800538e:	d1f5      	bne.n	800537c <_printf_i+0x16c>
 8005390:	e7b9      	b.n	8005306 <_printf_i+0xf6>
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	6825      	ldr	r5, [r4, #0]
 8005396:	6961      	ldr	r1, [r4, #20]
 8005398:	1d18      	adds	r0, r3, #4
 800539a:	6010      	str	r0, [r2, #0]
 800539c:	0628      	lsls	r0, r5, #24
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	d501      	bpl.n	80053a6 <_printf_i+0x196>
 80053a2:	6019      	str	r1, [r3, #0]
 80053a4:	e002      	b.n	80053ac <_printf_i+0x19c>
 80053a6:	066a      	lsls	r2, r5, #25
 80053a8:	d5fb      	bpl.n	80053a2 <_printf_i+0x192>
 80053aa:	8019      	strh	r1, [r3, #0]
 80053ac:	2300      	movs	r3, #0
 80053ae:	6123      	str	r3, [r4, #16]
 80053b0:	4665      	mov	r5, ip
 80053b2:	e7b9      	b.n	8005328 <_printf_i+0x118>
 80053b4:	6813      	ldr	r3, [r2, #0]
 80053b6:	1d19      	adds	r1, r3, #4
 80053b8:	6011      	str	r1, [r2, #0]
 80053ba:	681d      	ldr	r5, [r3, #0]
 80053bc:	6862      	ldr	r2, [r4, #4]
 80053be:	2100      	movs	r1, #0
 80053c0:	4628      	mov	r0, r5
 80053c2:	f7fa ff25 	bl	8000210 <memchr>
 80053c6:	b108      	cbz	r0, 80053cc <_printf_i+0x1bc>
 80053c8:	1b40      	subs	r0, r0, r5
 80053ca:	6060      	str	r0, [r4, #4]
 80053cc:	6863      	ldr	r3, [r4, #4]
 80053ce:	6123      	str	r3, [r4, #16]
 80053d0:	2300      	movs	r3, #0
 80053d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d6:	e7a7      	b.n	8005328 <_printf_i+0x118>
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	462a      	mov	r2, r5
 80053dc:	4639      	mov	r1, r7
 80053de:	4630      	mov	r0, r6
 80053e0:	47c0      	blx	r8
 80053e2:	3001      	adds	r0, #1
 80053e4:	d0aa      	beq.n	800533c <_printf_i+0x12c>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	079b      	lsls	r3, r3, #30
 80053ea:	d413      	bmi.n	8005414 <_printf_i+0x204>
 80053ec:	68e0      	ldr	r0, [r4, #12]
 80053ee:	9b03      	ldr	r3, [sp, #12]
 80053f0:	4298      	cmp	r0, r3
 80053f2:	bfb8      	it	lt
 80053f4:	4618      	movlt	r0, r3
 80053f6:	e7a3      	b.n	8005340 <_printf_i+0x130>
 80053f8:	2301      	movs	r3, #1
 80053fa:	464a      	mov	r2, r9
 80053fc:	4639      	mov	r1, r7
 80053fe:	4630      	mov	r0, r6
 8005400:	47c0      	blx	r8
 8005402:	3001      	adds	r0, #1
 8005404:	d09a      	beq.n	800533c <_printf_i+0x12c>
 8005406:	3501      	adds	r5, #1
 8005408:	68e3      	ldr	r3, [r4, #12]
 800540a:	9a03      	ldr	r2, [sp, #12]
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	42ab      	cmp	r3, r5
 8005410:	dcf2      	bgt.n	80053f8 <_printf_i+0x1e8>
 8005412:	e7eb      	b.n	80053ec <_printf_i+0x1dc>
 8005414:	2500      	movs	r5, #0
 8005416:	f104 0919 	add.w	r9, r4, #25
 800541a:	e7f5      	b.n	8005408 <_printf_i+0x1f8>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ac      	bne.n	800537a <_printf_i+0x16a>
 8005420:	7803      	ldrb	r3, [r0, #0]
 8005422:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005426:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800542a:	e76c      	b.n	8005306 <_printf_i+0xf6>
 800542c:	08006d19 	.word	0x08006d19
 8005430:	08006d2a 	.word	0x08006d2a

08005434 <memcpy>:
 8005434:	b510      	push	{r4, lr}
 8005436:	1e43      	subs	r3, r0, #1
 8005438:	440a      	add	r2, r1
 800543a:	4291      	cmp	r1, r2
 800543c:	d100      	bne.n	8005440 <memcpy+0xc>
 800543e:	bd10      	pop	{r4, pc}
 8005440:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005448:	e7f7      	b.n	800543a <memcpy+0x6>

0800544a <memmove>:
 800544a:	4288      	cmp	r0, r1
 800544c:	b510      	push	{r4, lr}
 800544e:	eb01 0302 	add.w	r3, r1, r2
 8005452:	d807      	bhi.n	8005464 <memmove+0x1a>
 8005454:	1e42      	subs	r2, r0, #1
 8005456:	4299      	cmp	r1, r3
 8005458:	d00a      	beq.n	8005470 <memmove+0x26>
 800545a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800545e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005462:	e7f8      	b.n	8005456 <memmove+0xc>
 8005464:	4283      	cmp	r3, r0
 8005466:	d9f5      	bls.n	8005454 <memmove+0xa>
 8005468:	1881      	adds	r1, r0, r2
 800546a:	1ad2      	subs	r2, r2, r3
 800546c:	42d3      	cmn	r3, r2
 800546e:	d100      	bne.n	8005472 <memmove+0x28>
 8005470:	bd10      	pop	{r4, pc}
 8005472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005476:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800547a:	e7f7      	b.n	800546c <memmove+0x22>

0800547c <_free_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4605      	mov	r5, r0
 8005480:	2900      	cmp	r1, #0
 8005482:	d045      	beq.n	8005510 <_free_r+0x94>
 8005484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005488:	1f0c      	subs	r4, r1, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	bfb8      	it	lt
 800548e:	18e4      	addlt	r4, r4, r3
 8005490:	f000 f8d2 	bl	8005638 <__malloc_lock>
 8005494:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <_free_r+0x98>)
 8005496:	6813      	ldr	r3, [r2, #0]
 8005498:	4610      	mov	r0, r2
 800549a:	b933      	cbnz	r3, 80054aa <_free_r+0x2e>
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	6014      	str	r4, [r2, #0]
 80054a0:	4628      	mov	r0, r5
 80054a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054a6:	f000 b8c8 	b.w	800563a <__malloc_unlock>
 80054aa:	42a3      	cmp	r3, r4
 80054ac:	d90c      	bls.n	80054c8 <_free_r+0x4c>
 80054ae:	6821      	ldr	r1, [r4, #0]
 80054b0:	1862      	adds	r2, r4, r1
 80054b2:	4293      	cmp	r3, r2
 80054b4:	bf04      	itt	eq
 80054b6:	681a      	ldreq	r2, [r3, #0]
 80054b8:	685b      	ldreq	r3, [r3, #4]
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	bf04      	itt	eq
 80054be:	1852      	addeq	r2, r2, r1
 80054c0:	6022      	streq	r2, [r4, #0]
 80054c2:	6004      	str	r4, [r0, #0]
 80054c4:	e7ec      	b.n	80054a0 <_free_r+0x24>
 80054c6:	4613      	mov	r3, r2
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	b10a      	cbz	r2, 80054d0 <_free_r+0x54>
 80054cc:	42a2      	cmp	r2, r4
 80054ce:	d9fa      	bls.n	80054c6 <_free_r+0x4a>
 80054d0:	6819      	ldr	r1, [r3, #0]
 80054d2:	1858      	adds	r0, r3, r1
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d10b      	bne.n	80054f0 <_free_r+0x74>
 80054d8:	6820      	ldr	r0, [r4, #0]
 80054da:	4401      	add	r1, r0
 80054dc:	1858      	adds	r0, r3, r1
 80054de:	4282      	cmp	r2, r0
 80054e0:	6019      	str	r1, [r3, #0]
 80054e2:	d1dd      	bne.n	80054a0 <_free_r+0x24>
 80054e4:	6810      	ldr	r0, [r2, #0]
 80054e6:	6852      	ldr	r2, [r2, #4]
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	4401      	add	r1, r0
 80054ec:	6019      	str	r1, [r3, #0]
 80054ee:	e7d7      	b.n	80054a0 <_free_r+0x24>
 80054f0:	d902      	bls.n	80054f8 <_free_r+0x7c>
 80054f2:	230c      	movs	r3, #12
 80054f4:	602b      	str	r3, [r5, #0]
 80054f6:	e7d3      	b.n	80054a0 <_free_r+0x24>
 80054f8:	6820      	ldr	r0, [r4, #0]
 80054fa:	1821      	adds	r1, r4, r0
 80054fc:	428a      	cmp	r2, r1
 80054fe:	bf04      	itt	eq
 8005500:	6811      	ldreq	r1, [r2, #0]
 8005502:	6852      	ldreq	r2, [r2, #4]
 8005504:	6062      	str	r2, [r4, #4]
 8005506:	bf04      	itt	eq
 8005508:	1809      	addeq	r1, r1, r0
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	605c      	str	r4, [r3, #4]
 800550e:	e7c7      	b.n	80054a0 <_free_r+0x24>
 8005510:	bd38      	pop	{r3, r4, r5, pc}
 8005512:	bf00      	nop
 8005514:	200001b0 	.word	0x200001b0

08005518 <_malloc_r>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	1ccd      	adds	r5, r1, #3
 800551c:	f025 0503 	bic.w	r5, r5, #3
 8005520:	3508      	adds	r5, #8
 8005522:	2d0c      	cmp	r5, #12
 8005524:	bf38      	it	cc
 8005526:	250c      	movcc	r5, #12
 8005528:	2d00      	cmp	r5, #0
 800552a:	4606      	mov	r6, r0
 800552c:	db01      	blt.n	8005532 <_malloc_r+0x1a>
 800552e:	42a9      	cmp	r1, r5
 8005530:	d903      	bls.n	800553a <_malloc_r+0x22>
 8005532:	230c      	movs	r3, #12
 8005534:	6033      	str	r3, [r6, #0]
 8005536:	2000      	movs	r0, #0
 8005538:	bd70      	pop	{r4, r5, r6, pc}
 800553a:	f000 f87d 	bl	8005638 <__malloc_lock>
 800553e:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <_malloc_r+0xac>)
 8005540:	6814      	ldr	r4, [r2, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	b991      	cbnz	r1, 800556c <_malloc_r+0x54>
 8005546:	4c20      	ldr	r4, [pc, #128]	; (80055c8 <_malloc_r+0xb0>)
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	b91b      	cbnz	r3, 8005554 <_malloc_r+0x3c>
 800554c:	4630      	mov	r0, r6
 800554e:	f000 f863 	bl	8005618 <_sbrk_r>
 8005552:	6020      	str	r0, [r4, #0]
 8005554:	4629      	mov	r1, r5
 8005556:	4630      	mov	r0, r6
 8005558:	f000 f85e 	bl	8005618 <_sbrk_r>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d124      	bne.n	80055aa <_malloc_r+0x92>
 8005560:	230c      	movs	r3, #12
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	4630      	mov	r0, r6
 8005566:	f000 f868 	bl	800563a <__malloc_unlock>
 800556a:	e7e4      	b.n	8005536 <_malloc_r+0x1e>
 800556c:	680b      	ldr	r3, [r1, #0]
 800556e:	1b5b      	subs	r3, r3, r5
 8005570:	d418      	bmi.n	80055a4 <_malloc_r+0x8c>
 8005572:	2b0b      	cmp	r3, #11
 8005574:	d90f      	bls.n	8005596 <_malloc_r+0x7e>
 8005576:	600b      	str	r3, [r1, #0]
 8005578:	50cd      	str	r5, [r1, r3]
 800557a:	18cc      	adds	r4, r1, r3
 800557c:	4630      	mov	r0, r6
 800557e:	f000 f85c 	bl	800563a <__malloc_unlock>
 8005582:	f104 000b 	add.w	r0, r4, #11
 8005586:	1d23      	adds	r3, r4, #4
 8005588:	f020 0007 	bic.w	r0, r0, #7
 800558c:	1ac3      	subs	r3, r0, r3
 800558e:	d0d3      	beq.n	8005538 <_malloc_r+0x20>
 8005590:	425a      	negs	r2, r3
 8005592:	50e2      	str	r2, [r4, r3]
 8005594:	e7d0      	b.n	8005538 <_malloc_r+0x20>
 8005596:	428c      	cmp	r4, r1
 8005598:	684b      	ldr	r3, [r1, #4]
 800559a:	bf16      	itet	ne
 800559c:	6063      	strne	r3, [r4, #4]
 800559e:	6013      	streq	r3, [r2, #0]
 80055a0:	460c      	movne	r4, r1
 80055a2:	e7eb      	b.n	800557c <_malloc_r+0x64>
 80055a4:	460c      	mov	r4, r1
 80055a6:	6849      	ldr	r1, [r1, #4]
 80055a8:	e7cc      	b.n	8005544 <_malloc_r+0x2c>
 80055aa:	1cc4      	adds	r4, r0, #3
 80055ac:	f024 0403 	bic.w	r4, r4, #3
 80055b0:	42a0      	cmp	r0, r4
 80055b2:	d005      	beq.n	80055c0 <_malloc_r+0xa8>
 80055b4:	1a21      	subs	r1, r4, r0
 80055b6:	4630      	mov	r0, r6
 80055b8:	f000 f82e 	bl	8005618 <_sbrk_r>
 80055bc:	3001      	adds	r0, #1
 80055be:	d0cf      	beq.n	8005560 <_malloc_r+0x48>
 80055c0:	6025      	str	r5, [r4, #0]
 80055c2:	e7db      	b.n	800557c <_malloc_r+0x64>
 80055c4:	200001b0 	.word	0x200001b0
 80055c8:	200001b4 	.word	0x200001b4

080055cc <_realloc_r>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	4607      	mov	r7, r0
 80055d0:	4614      	mov	r4, r2
 80055d2:	460e      	mov	r6, r1
 80055d4:	b921      	cbnz	r1, 80055e0 <_realloc_r+0x14>
 80055d6:	4611      	mov	r1, r2
 80055d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055dc:	f7ff bf9c 	b.w	8005518 <_malloc_r>
 80055e0:	b922      	cbnz	r2, 80055ec <_realloc_r+0x20>
 80055e2:	f7ff ff4b 	bl	800547c <_free_r>
 80055e6:	4625      	mov	r5, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ec:	f000 f826 	bl	800563c <_malloc_usable_size_r>
 80055f0:	42a0      	cmp	r0, r4
 80055f2:	d20f      	bcs.n	8005614 <_realloc_r+0x48>
 80055f4:	4621      	mov	r1, r4
 80055f6:	4638      	mov	r0, r7
 80055f8:	f7ff ff8e 	bl	8005518 <_malloc_r>
 80055fc:	4605      	mov	r5, r0
 80055fe:	2800      	cmp	r0, #0
 8005600:	d0f2      	beq.n	80055e8 <_realloc_r+0x1c>
 8005602:	4631      	mov	r1, r6
 8005604:	4622      	mov	r2, r4
 8005606:	f7ff ff15 	bl	8005434 <memcpy>
 800560a:	4631      	mov	r1, r6
 800560c:	4638      	mov	r0, r7
 800560e:	f7ff ff35 	bl	800547c <_free_r>
 8005612:	e7e9      	b.n	80055e8 <_realloc_r+0x1c>
 8005614:	4635      	mov	r5, r6
 8005616:	e7e7      	b.n	80055e8 <_realloc_r+0x1c>

08005618 <_sbrk_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4c06      	ldr	r4, [pc, #24]	; (8005634 <_sbrk_r+0x1c>)
 800561c:	2300      	movs	r3, #0
 800561e:	4605      	mov	r5, r0
 8005620:	4608      	mov	r0, r1
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	f7ff fb4e 	bl	8004cc4 <_sbrk>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_sbrk_r+0x1a>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	b103      	cbz	r3, 8005632 <_sbrk_r+0x1a>
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20000234 	.word	0x20000234

08005638 <__malloc_lock>:
 8005638:	4770      	bx	lr

0800563a <__malloc_unlock>:
 800563a:	4770      	bx	lr

0800563c <_malloc_usable_size_r>:
 800563c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005640:	1f18      	subs	r0, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	bfbc      	itt	lt
 8005646:	580b      	ldrlt	r3, [r1, r0]
 8005648:	18c0      	addlt	r0, r0, r3
 800564a:	4770      	bx	lr

0800564c <pow>:
 800564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005650:	ed2d 8b04 	vpush	{d8-d9}
 8005654:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8005928 <pow+0x2dc>
 8005658:	b08d      	sub	sp, #52	; 0x34
 800565a:	ec57 6b10 	vmov	r6, r7, d0
 800565e:	ec55 4b11 	vmov	r4, r5, d1
 8005662:	f000 f965 	bl	8005930 <__ieee754_pow>
 8005666:	f999 3000 	ldrsb.w	r3, [r9]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	3301      	adds	r3, #1
 800566e:	eeb0 8a40 	vmov.f32	s16, s0
 8005672:	eef0 8a60 	vmov.f32	s17, s1
 8005676:	46c8      	mov	r8, r9
 8005678:	d05f      	beq.n	800573a <pow+0xee>
 800567a:	4622      	mov	r2, r4
 800567c:	462b      	mov	r3, r5
 800567e:	4620      	mov	r0, r4
 8005680:	4629      	mov	r1, r5
 8005682:	f7fb fa6b 	bl	8000b5c <__aeabi_dcmpun>
 8005686:	4683      	mov	fp, r0
 8005688:	2800      	cmp	r0, #0
 800568a:	d156      	bne.n	800573a <pow+0xee>
 800568c:	4632      	mov	r2, r6
 800568e:	463b      	mov	r3, r7
 8005690:	4630      	mov	r0, r6
 8005692:	4639      	mov	r1, r7
 8005694:	f7fb fa62 	bl	8000b5c <__aeabi_dcmpun>
 8005698:	9001      	str	r0, [sp, #4]
 800569a:	b1e8      	cbz	r0, 80056d8 <pow+0x8c>
 800569c:	2200      	movs	r2, #0
 800569e:	2300      	movs	r3, #0
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	f7fb fa28 	bl	8000af8 <__aeabi_dcmpeq>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d046      	beq.n	800573a <pow+0xee>
 80056ac:	2301      	movs	r3, #1
 80056ae:	9302      	str	r3, [sp, #8]
 80056b0:	4b96      	ldr	r3, [pc, #600]	; (800590c <pow+0x2c0>)
 80056b2:	9303      	str	r3, [sp, #12]
 80056b4:	4b96      	ldr	r3, [pc, #600]	; (8005910 <pow+0x2c4>)
 80056b6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80056ba:	2200      	movs	r2, #0
 80056bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80056c0:	9b00      	ldr	r3, [sp, #0]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80056c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80056cc:	d033      	beq.n	8005736 <pow+0xea>
 80056ce:	a802      	add	r0, sp, #8
 80056d0:	f000 fefd 	bl	80064ce <matherr>
 80056d4:	bb48      	cbnz	r0, 800572a <pow+0xde>
 80056d6:	e05d      	b.n	8005794 <pow+0x148>
 80056d8:	f04f 0a00 	mov.w	sl, #0
 80056dc:	f04f 0b00 	mov.w	fp, #0
 80056e0:	4652      	mov	r2, sl
 80056e2:	465b      	mov	r3, fp
 80056e4:	4630      	mov	r0, r6
 80056e6:	4639      	mov	r1, r7
 80056e8:	f7fb fa06 	bl	8000af8 <__aeabi_dcmpeq>
 80056ec:	ec4b ab19 	vmov	d9, sl, fp
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d054      	beq.n	800579e <pow+0x152>
 80056f4:	4652      	mov	r2, sl
 80056f6:	465b      	mov	r3, fp
 80056f8:	4620      	mov	r0, r4
 80056fa:	4629      	mov	r1, r5
 80056fc:	f7fb f9fc 	bl	8000af8 <__aeabi_dcmpeq>
 8005700:	4680      	mov	r8, r0
 8005702:	b318      	cbz	r0, 800574c <pow+0x100>
 8005704:	2301      	movs	r3, #1
 8005706:	9302      	str	r3, [sp, #8]
 8005708:	4b80      	ldr	r3, [pc, #512]	; (800590c <pow+0x2c0>)
 800570a:	9303      	str	r3, [sp, #12]
 800570c:	9b01      	ldr	r3, [sp, #4]
 800570e:	930a      	str	r3, [sp, #40]	; 0x28
 8005710:	9b00      	ldr	r3, [sp, #0]
 8005712:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005716:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800571a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0d5      	beq.n	80056ce <pow+0x82>
 8005722:	4b7b      	ldr	r3, [pc, #492]	; (8005910 <pow+0x2c4>)
 8005724:	2200      	movs	r2, #0
 8005726:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800572a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800572c:	b11b      	cbz	r3, 8005736 <pow+0xea>
 800572e:	f7ff fb55 	bl	8004ddc <__errno>
 8005732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005734:	6003      	str	r3, [r0, #0]
 8005736:	ed9d 8b08 	vldr	d8, [sp, #32]
 800573a:	eeb0 0a48 	vmov.f32	s0, s16
 800573e:	eef0 0a68 	vmov.f32	s1, s17
 8005742:	b00d      	add	sp, #52	; 0x34
 8005744:	ecbd 8b04 	vpop	{d8-d9}
 8005748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800574c:	ec45 4b10 	vmov	d0, r4, r5
 8005750:	f000 feb5 	bl	80064be <finite>
 8005754:	2800      	cmp	r0, #0
 8005756:	d0f0      	beq.n	800573a <pow+0xee>
 8005758:	4652      	mov	r2, sl
 800575a:	465b      	mov	r3, fp
 800575c:	4620      	mov	r0, r4
 800575e:	4629      	mov	r1, r5
 8005760:	f7fb f9d4 	bl	8000b0c <__aeabi_dcmplt>
 8005764:	2800      	cmp	r0, #0
 8005766:	d0e8      	beq.n	800573a <pow+0xee>
 8005768:	2301      	movs	r3, #1
 800576a:	9302      	str	r3, [sp, #8]
 800576c:	4b67      	ldr	r3, [pc, #412]	; (800590c <pow+0x2c0>)
 800576e:	9303      	str	r3, [sp, #12]
 8005770:	f999 3000 	ldrsb.w	r3, [r9]
 8005774:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005778:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800577c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005780:	b913      	cbnz	r3, 8005788 <pow+0x13c>
 8005782:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005786:	e7a2      	b.n	80056ce <pow+0x82>
 8005788:	4962      	ldr	r1, [pc, #392]	; (8005914 <pow+0x2c8>)
 800578a:	2000      	movs	r0, #0
 800578c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d19c      	bne.n	80056ce <pow+0x82>
 8005794:	f7ff fb22 	bl	8004ddc <__errno>
 8005798:	2321      	movs	r3, #33	; 0x21
 800579a:	6003      	str	r3, [r0, #0]
 800579c:	e7c5      	b.n	800572a <pow+0xde>
 800579e:	eeb0 0a48 	vmov.f32	s0, s16
 80057a2:	eef0 0a68 	vmov.f32	s1, s17
 80057a6:	f000 fe8a 	bl	80064be <finite>
 80057aa:	9000      	str	r0, [sp, #0]
 80057ac:	2800      	cmp	r0, #0
 80057ae:	f040 8081 	bne.w	80058b4 <pow+0x268>
 80057b2:	ec47 6b10 	vmov	d0, r6, r7
 80057b6:	f000 fe82 	bl	80064be <finite>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d07a      	beq.n	80058b4 <pow+0x268>
 80057be:	ec45 4b10 	vmov	d0, r4, r5
 80057c2:	f000 fe7c 	bl	80064be <finite>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d074      	beq.n	80058b4 <pow+0x268>
 80057ca:	ec53 2b18 	vmov	r2, r3, d8
 80057ce:	ee18 0a10 	vmov	r0, s16
 80057d2:	4619      	mov	r1, r3
 80057d4:	f7fb f9c2 	bl	8000b5c <__aeabi_dcmpun>
 80057d8:	f999 9000 	ldrsb.w	r9, [r9]
 80057dc:	4b4b      	ldr	r3, [pc, #300]	; (800590c <pow+0x2c0>)
 80057de:	b1b0      	cbz	r0, 800580e <pow+0x1c2>
 80057e0:	2201      	movs	r2, #1
 80057e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057e6:	9b00      	ldr	r3, [sp, #0]
 80057e8:	930a      	str	r3, [sp, #40]	; 0x28
 80057ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057ee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80057f2:	f1b9 0f00 	cmp.w	r9, #0
 80057f6:	d0c4      	beq.n	8005782 <pow+0x136>
 80057f8:	4652      	mov	r2, sl
 80057fa:	465b      	mov	r3, fp
 80057fc:	4650      	mov	r0, sl
 80057fe:	4659      	mov	r1, fp
 8005800:	f7fb f83c 	bl	800087c <__aeabi_ddiv>
 8005804:	f1b9 0f02 	cmp.w	r9, #2
 8005808:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800580c:	e7c1      	b.n	8005792 <pow+0x146>
 800580e:	2203      	movs	r2, #3
 8005810:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005814:	900a      	str	r0, [sp, #40]	; 0x28
 8005816:	4629      	mov	r1, r5
 8005818:	4620      	mov	r0, r4
 800581a:	2200      	movs	r2, #0
 800581c:	4b3e      	ldr	r3, [pc, #248]	; (8005918 <pow+0x2cc>)
 800581e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005822:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005826:	f7fa feff 	bl	8000628 <__aeabi_dmul>
 800582a:	4604      	mov	r4, r0
 800582c:	460d      	mov	r5, r1
 800582e:	f1b9 0f00 	cmp.w	r9, #0
 8005832:	d124      	bne.n	800587e <pow+0x232>
 8005834:	4b39      	ldr	r3, [pc, #228]	; (800591c <pow+0x2d0>)
 8005836:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800583a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800583e:	4630      	mov	r0, r6
 8005840:	4652      	mov	r2, sl
 8005842:	465b      	mov	r3, fp
 8005844:	4639      	mov	r1, r7
 8005846:	f7fb f961 	bl	8000b0c <__aeabi_dcmplt>
 800584a:	2800      	cmp	r0, #0
 800584c:	d056      	beq.n	80058fc <pow+0x2b0>
 800584e:	ec45 4b10 	vmov	d0, r4, r5
 8005852:	f000 fe49 	bl	80064e8 <rint>
 8005856:	4622      	mov	r2, r4
 8005858:	462b      	mov	r3, r5
 800585a:	ec51 0b10 	vmov	r0, r1, d0
 800585e:	f7fb f94b 	bl	8000af8 <__aeabi_dcmpeq>
 8005862:	b920      	cbnz	r0, 800586e <pow+0x222>
 8005864:	4b2e      	ldr	r3, [pc, #184]	; (8005920 <pow+0x2d4>)
 8005866:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800586a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800586e:	f998 3000 	ldrsb.w	r3, [r8]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d142      	bne.n	80058fc <pow+0x2b0>
 8005876:	f7ff fab1 	bl	8004ddc <__errno>
 800587a:	2322      	movs	r3, #34	; 0x22
 800587c:	e78d      	b.n	800579a <pow+0x14e>
 800587e:	4b29      	ldr	r3, [pc, #164]	; (8005924 <pow+0x2d8>)
 8005880:	2200      	movs	r2, #0
 8005882:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005886:	4630      	mov	r0, r6
 8005888:	4652      	mov	r2, sl
 800588a:	465b      	mov	r3, fp
 800588c:	4639      	mov	r1, r7
 800588e:	f7fb f93d 	bl	8000b0c <__aeabi_dcmplt>
 8005892:	2800      	cmp	r0, #0
 8005894:	d0eb      	beq.n	800586e <pow+0x222>
 8005896:	ec45 4b10 	vmov	d0, r4, r5
 800589a:	f000 fe25 	bl	80064e8 <rint>
 800589e:	4622      	mov	r2, r4
 80058a0:	462b      	mov	r3, r5
 80058a2:	ec51 0b10 	vmov	r0, r1, d0
 80058a6:	f7fb f927 	bl	8000af8 <__aeabi_dcmpeq>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d1df      	bne.n	800586e <pow+0x222>
 80058ae:	2200      	movs	r2, #0
 80058b0:	4b18      	ldr	r3, [pc, #96]	; (8005914 <pow+0x2c8>)
 80058b2:	e7da      	b.n	800586a <pow+0x21e>
 80058b4:	2200      	movs	r2, #0
 80058b6:	2300      	movs	r3, #0
 80058b8:	ec51 0b18 	vmov	r0, r1, d8
 80058bc:	f7fb f91c 	bl	8000af8 <__aeabi_dcmpeq>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	f43f af3a 	beq.w	800573a <pow+0xee>
 80058c6:	ec47 6b10 	vmov	d0, r6, r7
 80058ca:	f000 fdf8 	bl	80064be <finite>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f43f af33 	beq.w	800573a <pow+0xee>
 80058d4:	ec45 4b10 	vmov	d0, r4, r5
 80058d8:	f000 fdf1 	bl	80064be <finite>
 80058dc:	2800      	cmp	r0, #0
 80058de:	f43f af2c 	beq.w	800573a <pow+0xee>
 80058e2:	2304      	movs	r3, #4
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <pow+0x2c0>)
 80058e8:	9303      	str	r3, [sp, #12]
 80058ea:	2300      	movs	r3, #0
 80058ec:	930a      	str	r3, [sp, #40]	; 0x28
 80058ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80058f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80058f6:	ed8d 9b08 	vstr	d9, [sp, #32]
 80058fa:	e7b8      	b.n	800586e <pow+0x222>
 80058fc:	a802      	add	r0, sp, #8
 80058fe:	f000 fde6 	bl	80064ce <matherr>
 8005902:	2800      	cmp	r0, #0
 8005904:	f47f af11 	bne.w	800572a <pow+0xde>
 8005908:	e7b5      	b.n	8005876 <pow+0x22a>
 800590a:	bf00      	nop
 800590c:	08006d3b 	.word	0x08006d3b
 8005910:	3ff00000 	.word	0x3ff00000
 8005914:	fff00000 	.word	0xfff00000
 8005918:	3fe00000 	.word	0x3fe00000
 800591c:	47efffff 	.word	0x47efffff
 8005920:	c7efffff 	.word	0xc7efffff
 8005924:	7ff00000 	.word	0x7ff00000
 8005928:	2000007c 	.word	0x2000007c
 800592c:	00000000 	.word	0x00000000

08005930 <__ieee754_pow>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	b091      	sub	sp, #68	; 0x44
 8005936:	ed8d 1b00 	vstr	d1, [sp]
 800593a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800593e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005942:	ea58 0302 	orrs.w	r3, r8, r2
 8005946:	ec57 6b10 	vmov	r6, r7, d0
 800594a:	f000 84be 	beq.w	80062ca <__ieee754_pow+0x99a>
 800594e:	4b7a      	ldr	r3, [pc, #488]	; (8005b38 <__ieee754_pow+0x208>)
 8005950:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005954:	429c      	cmp	r4, r3
 8005956:	463d      	mov	r5, r7
 8005958:	ee10 aa10 	vmov	sl, s0
 800595c:	dc09      	bgt.n	8005972 <__ieee754_pow+0x42>
 800595e:	d103      	bne.n	8005968 <__ieee754_pow+0x38>
 8005960:	b93e      	cbnz	r6, 8005972 <__ieee754_pow+0x42>
 8005962:	45a0      	cmp	r8, r4
 8005964:	dc0d      	bgt.n	8005982 <__ieee754_pow+0x52>
 8005966:	e001      	b.n	800596c <__ieee754_pow+0x3c>
 8005968:	4598      	cmp	r8, r3
 800596a:	dc02      	bgt.n	8005972 <__ieee754_pow+0x42>
 800596c:	4598      	cmp	r8, r3
 800596e:	d10e      	bne.n	800598e <__ieee754_pow+0x5e>
 8005970:	b16a      	cbz	r2, 800598e <__ieee754_pow+0x5e>
 8005972:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005976:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800597a:	ea54 030a 	orrs.w	r3, r4, sl
 800597e:	f000 84a4 	beq.w	80062ca <__ieee754_pow+0x99a>
 8005982:	486e      	ldr	r0, [pc, #440]	; (8005b3c <__ieee754_pow+0x20c>)
 8005984:	b011      	add	sp, #68	; 0x44
 8005986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598a:	f000 bda5 	b.w	80064d8 <nan>
 800598e:	2d00      	cmp	r5, #0
 8005990:	da53      	bge.n	8005a3a <__ieee754_pow+0x10a>
 8005992:	4b6b      	ldr	r3, [pc, #428]	; (8005b40 <__ieee754_pow+0x210>)
 8005994:	4598      	cmp	r8, r3
 8005996:	dc4d      	bgt.n	8005a34 <__ieee754_pow+0x104>
 8005998:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800599c:	4598      	cmp	r8, r3
 800599e:	dd4c      	ble.n	8005a3a <__ieee754_pow+0x10a>
 80059a0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80059a4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059a8:	2b14      	cmp	r3, #20
 80059aa:	dd26      	ble.n	80059fa <__ieee754_pow+0xca>
 80059ac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80059b0:	fa22 f103 	lsr.w	r1, r2, r3
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d13e      	bne.n	8005a3a <__ieee754_pow+0x10a>
 80059bc:	f001 0101 	and.w	r1, r1, #1
 80059c0:	f1c1 0b02 	rsb	fp, r1, #2
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	d15b      	bne.n	8005a80 <__ieee754_pow+0x150>
 80059c8:	4b5b      	ldr	r3, [pc, #364]	; (8005b38 <__ieee754_pow+0x208>)
 80059ca:	4598      	cmp	r8, r3
 80059cc:	d124      	bne.n	8005a18 <__ieee754_pow+0xe8>
 80059ce:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80059d2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80059d6:	ea53 030a 	orrs.w	r3, r3, sl
 80059da:	f000 8476 	beq.w	80062ca <__ieee754_pow+0x99a>
 80059de:	4b59      	ldr	r3, [pc, #356]	; (8005b44 <__ieee754_pow+0x214>)
 80059e0:	429c      	cmp	r4, r3
 80059e2:	dd2d      	ble.n	8005a40 <__ieee754_pow+0x110>
 80059e4:	f1b9 0f00 	cmp.w	r9, #0
 80059e8:	f280 8473 	bge.w	80062d2 <__ieee754_pow+0x9a2>
 80059ec:	2000      	movs	r0, #0
 80059ee:	2100      	movs	r1, #0
 80059f0:	ec41 0b10 	vmov	d0, r0, r1
 80059f4:	b011      	add	sp, #68	; 0x44
 80059f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	d13e      	bne.n	8005a7c <__ieee754_pow+0x14c>
 80059fe:	f1c3 0314 	rsb	r3, r3, #20
 8005a02:	fa48 f103 	asr.w	r1, r8, r3
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	4543      	cmp	r3, r8
 8005a0c:	f040 8469 	bne.w	80062e2 <__ieee754_pow+0x9b2>
 8005a10:	f001 0101 	and.w	r1, r1, #1
 8005a14:	f1c1 0b02 	rsb	fp, r1, #2
 8005a18:	4b4b      	ldr	r3, [pc, #300]	; (8005b48 <__ieee754_pow+0x218>)
 8005a1a:	4598      	cmp	r8, r3
 8005a1c:	d118      	bne.n	8005a50 <__ieee754_pow+0x120>
 8005a1e:	f1b9 0f00 	cmp.w	r9, #0
 8005a22:	f280 845a 	bge.w	80062da <__ieee754_pow+0x9aa>
 8005a26:	4948      	ldr	r1, [pc, #288]	; (8005b48 <__ieee754_pow+0x218>)
 8005a28:	4632      	mov	r2, r6
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	f7fa ff25 	bl	800087c <__aeabi_ddiv>
 8005a32:	e7dd      	b.n	80059f0 <__ieee754_pow+0xc0>
 8005a34:	f04f 0b02 	mov.w	fp, #2
 8005a38:	e7c4      	b.n	80059c4 <__ieee754_pow+0x94>
 8005a3a:	f04f 0b00 	mov.w	fp, #0
 8005a3e:	e7c1      	b.n	80059c4 <__ieee754_pow+0x94>
 8005a40:	f1b9 0f00 	cmp.w	r9, #0
 8005a44:	dad2      	bge.n	80059ec <__ieee754_pow+0xbc>
 8005a46:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005a4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a4e:	e7cf      	b.n	80059f0 <__ieee754_pow+0xc0>
 8005a50:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005a54:	d106      	bne.n	8005a64 <__ieee754_pow+0x134>
 8005a56:	4632      	mov	r2, r6
 8005a58:	463b      	mov	r3, r7
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	f7fa fde3 	bl	8000628 <__aeabi_dmul>
 8005a62:	e7c5      	b.n	80059f0 <__ieee754_pow+0xc0>
 8005a64:	4b39      	ldr	r3, [pc, #228]	; (8005b4c <__ieee754_pow+0x21c>)
 8005a66:	4599      	cmp	r9, r3
 8005a68:	d10a      	bne.n	8005a80 <__ieee754_pow+0x150>
 8005a6a:	2d00      	cmp	r5, #0
 8005a6c:	db08      	blt.n	8005a80 <__ieee754_pow+0x150>
 8005a6e:	ec47 6b10 	vmov	d0, r6, r7
 8005a72:	b011      	add	sp, #68	; 0x44
 8005a74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a78:	f000 bc68 	b.w	800634c <__ieee754_sqrt>
 8005a7c:	f04f 0b00 	mov.w	fp, #0
 8005a80:	ec47 6b10 	vmov	d0, r6, r7
 8005a84:	f000 fd12 	bl	80064ac <fabs>
 8005a88:	ec51 0b10 	vmov	r0, r1, d0
 8005a8c:	f1ba 0f00 	cmp.w	sl, #0
 8005a90:	d127      	bne.n	8005ae2 <__ieee754_pow+0x1b2>
 8005a92:	b124      	cbz	r4, 8005a9e <__ieee754_pow+0x16e>
 8005a94:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <__ieee754_pow+0x218>)
 8005a96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d121      	bne.n	8005ae2 <__ieee754_pow+0x1b2>
 8005a9e:	f1b9 0f00 	cmp.w	r9, #0
 8005aa2:	da05      	bge.n	8005ab0 <__ieee754_pow+0x180>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4927      	ldr	r1, [pc, #156]	; (8005b48 <__ieee754_pow+0x218>)
 8005aac:	f7fa fee6 	bl	800087c <__aeabi_ddiv>
 8005ab0:	2d00      	cmp	r5, #0
 8005ab2:	da9d      	bge.n	80059f0 <__ieee754_pow+0xc0>
 8005ab4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005ab8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005abc:	ea54 030b 	orrs.w	r3, r4, fp
 8005ac0:	d108      	bne.n	8005ad4 <__ieee754_pow+0x1a4>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f7fa fbf5 	bl	80002b8 <__aeabi_dsub>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	e7ac      	b.n	8005a2e <__ieee754_pow+0xfe>
 8005ad4:	f1bb 0f01 	cmp.w	fp, #1
 8005ad8:	d18a      	bne.n	80059f0 <__ieee754_pow+0xc0>
 8005ada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ade:	4619      	mov	r1, r3
 8005ae0:	e786      	b.n	80059f0 <__ieee754_pow+0xc0>
 8005ae2:	0fed      	lsrs	r5, r5, #31
 8005ae4:	1e6b      	subs	r3, r5, #1
 8005ae6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ae8:	ea5b 0303 	orrs.w	r3, fp, r3
 8005aec:	d102      	bne.n	8005af4 <__ieee754_pow+0x1c4>
 8005aee:	4632      	mov	r2, r6
 8005af0:	463b      	mov	r3, r7
 8005af2:	e7e8      	b.n	8005ac6 <__ieee754_pow+0x196>
 8005af4:	4b16      	ldr	r3, [pc, #88]	; (8005b50 <__ieee754_pow+0x220>)
 8005af6:	4598      	cmp	r8, r3
 8005af8:	f340 80fe 	ble.w	8005cf8 <__ieee754_pow+0x3c8>
 8005afc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005b00:	4598      	cmp	r8, r3
 8005b02:	dd0a      	ble.n	8005b1a <__ieee754_pow+0x1ea>
 8005b04:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <__ieee754_pow+0x214>)
 8005b06:	429c      	cmp	r4, r3
 8005b08:	dc0d      	bgt.n	8005b26 <__ieee754_pow+0x1f6>
 8005b0a:	f1b9 0f00 	cmp.w	r9, #0
 8005b0e:	f6bf af6d 	bge.w	80059ec <__ieee754_pow+0xbc>
 8005b12:	a307      	add	r3, pc, #28	; (adr r3, 8005b30 <__ieee754_pow+0x200>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	e79f      	b.n	8005a5a <__ieee754_pow+0x12a>
 8005b1a:	4b0e      	ldr	r3, [pc, #56]	; (8005b54 <__ieee754_pow+0x224>)
 8005b1c:	429c      	cmp	r4, r3
 8005b1e:	ddf4      	ble.n	8005b0a <__ieee754_pow+0x1da>
 8005b20:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <__ieee754_pow+0x218>)
 8005b22:	429c      	cmp	r4, r3
 8005b24:	dd18      	ble.n	8005b58 <__ieee754_pow+0x228>
 8005b26:	f1b9 0f00 	cmp.w	r9, #0
 8005b2a:	dcf2      	bgt.n	8005b12 <__ieee754_pow+0x1e2>
 8005b2c:	e75e      	b.n	80059ec <__ieee754_pow+0xbc>
 8005b2e:	bf00      	nop
 8005b30:	8800759c 	.word	0x8800759c
 8005b34:	7e37e43c 	.word	0x7e37e43c
 8005b38:	7ff00000 	.word	0x7ff00000
 8005b3c:	08006d0d 	.word	0x08006d0d
 8005b40:	433fffff 	.word	0x433fffff
 8005b44:	3fefffff 	.word	0x3fefffff
 8005b48:	3ff00000 	.word	0x3ff00000
 8005b4c:	3fe00000 	.word	0x3fe00000
 8005b50:	41e00000 	.word	0x41e00000
 8005b54:	3feffffe 	.word	0x3feffffe
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4b63      	ldr	r3, [pc, #396]	; (8005ce8 <__ieee754_pow+0x3b8>)
 8005b5c:	f7fa fbac 	bl	80002b8 <__aeabi_dsub>
 8005b60:	a355      	add	r3, pc, #340	; (adr r3, 8005cb8 <__ieee754_pow+0x388>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	4604      	mov	r4, r0
 8005b68:	460d      	mov	r5, r1
 8005b6a:	f7fa fd5d 	bl	8000628 <__aeabi_dmul>
 8005b6e:	a354      	add	r3, pc, #336	; (adr r3, 8005cc0 <__ieee754_pow+0x390>)
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	4606      	mov	r6, r0
 8005b76:	460f      	mov	r7, r1
 8005b78:	4620      	mov	r0, r4
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	f7fa fd54 	bl	8000628 <__aeabi_dmul>
 8005b80:	2200      	movs	r2, #0
 8005b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b86:	4b59      	ldr	r3, [pc, #356]	; (8005cec <__ieee754_pow+0x3bc>)
 8005b88:	4620      	mov	r0, r4
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	f7fa fd4c 	bl	8000628 <__aeabi_dmul>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	a14c      	add	r1, pc, #304	; (adr r1, 8005cc8 <__ieee754_pow+0x398>)
 8005b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b9a:	f7fa fb8d 	bl	80002b8 <__aeabi_dsub>
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	462b      	mov	r3, r5
 8005ba2:	f7fa fd41 	bl	8000628 <__aeabi_dmul>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	2000      	movs	r0, #0
 8005bac:	4950      	ldr	r1, [pc, #320]	; (8005cf0 <__ieee754_pow+0x3c0>)
 8005bae:	f7fa fb83 	bl	80002b8 <__aeabi_dsub>
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	4689      	mov	r9, r1
 8005bba:	4620      	mov	r0, r4
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	f7fa fd33 	bl	8000628 <__aeabi_dmul>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	4649      	mov	r1, r9
 8005bca:	f7fa fd2d 	bl	8000628 <__aeabi_dmul>
 8005bce:	a340      	add	r3, pc, #256	; (adr r3, 8005cd0 <__ieee754_pow+0x3a0>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fa fd28 	bl	8000628 <__aeabi_dmul>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be0:	f7fa fb6a 	bl	80002b8 <__aeabi_dsub>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4604      	mov	r4, r0
 8005bea:	460d      	mov	r5, r1
 8005bec:	4630      	mov	r0, r6
 8005bee:	4639      	mov	r1, r7
 8005bf0:	f7fa fb64 	bl	80002bc <__adddf3>
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	f7fa fb5b 	bl	80002b8 <__aeabi_dsub>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4620      	mov	r0, r4
 8005c08:	4629      	mov	r1, r5
 8005c0a:	f7fa fb55 	bl	80002b8 <__aeabi_dsub>
 8005c0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c10:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005c14:	4313      	orrs	r3, r2
 8005c16:	4606      	mov	r6, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	f040 81eb 	bne.w	8005ff4 <__ieee754_pow+0x6c4>
 8005c1e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005cd8 <__ieee754_pow+0x3a8>
 8005c22:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005c26:	2400      	movs	r4, #0
 8005c28:	4622      	mov	r2, r4
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c34:	f7fa fb40 	bl	80002b8 <__aeabi_dsub>
 8005c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c3c:	f7fa fcf4 	bl	8000628 <__aeabi_dmul>
 8005c40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c44:	4680      	mov	r8, r0
 8005c46:	4689      	mov	r9, r1
 8005c48:	4630      	mov	r0, r6
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	f7fa fcec 	bl	8000628 <__aeabi_dmul>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa fb30 	bl	80002bc <__adddf3>
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	462b      	mov	r3, r5
 8005c60:	4680      	mov	r8, r0
 8005c62:	4689      	mov	r9, r1
 8005c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c68:	f7fa fcde 	bl	8000628 <__aeabi_dmul>
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4604      	mov	r4, r0
 8005c70:	460d      	mov	r5, r1
 8005c72:	4602      	mov	r2, r0
 8005c74:	4649      	mov	r1, r9
 8005c76:	4640      	mov	r0, r8
 8005c78:	e9cd 4500 	strd	r4, r5, [sp]
 8005c7c:	f7fa fb1e 	bl	80002bc <__adddf3>
 8005c80:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <__ieee754_pow+0x3c4>)
 8005c82:	4299      	cmp	r1, r3
 8005c84:	4606      	mov	r6, r0
 8005c86:	460f      	mov	r7, r1
 8005c88:	468b      	mov	fp, r1
 8005c8a:	f340 82f7 	ble.w	800627c <__ieee754_pow+0x94c>
 8005c8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005c92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005c96:	4303      	orrs	r3, r0
 8005c98:	f000 81ea 	beq.w	8006070 <__ieee754_pow+0x740>
 8005c9c:	a310      	add	r3, pc, #64	; (adr r3, 8005ce0 <__ieee754_pow+0x3b0>)
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca6:	f7fa fcbf 	bl	8000628 <__aeabi_dmul>
 8005caa:	a30d      	add	r3, pc, #52	; (adr r3, 8005ce0 <__ieee754_pow+0x3b0>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	e6d5      	b.n	8005a5e <__ieee754_pow+0x12e>
 8005cb2:	bf00      	nop
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	60000000 	.word	0x60000000
 8005cbc:	3ff71547 	.word	0x3ff71547
 8005cc0:	f85ddf44 	.word	0xf85ddf44
 8005cc4:	3e54ae0b 	.word	0x3e54ae0b
 8005cc8:	55555555 	.word	0x55555555
 8005ccc:	3fd55555 	.word	0x3fd55555
 8005cd0:	652b82fe 	.word	0x652b82fe
 8005cd4:	3ff71547 	.word	0x3ff71547
 8005cd8:	00000000 	.word	0x00000000
 8005cdc:	bff00000 	.word	0xbff00000
 8005ce0:	8800759c 	.word	0x8800759c
 8005ce4:	7e37e43c 	.word	0x7e37e43c
 8005ce8:	3ff00000 	.word	0x3ff00000
 8005cec:	3fd00000 	.word	0x3fd00000
 8005cf0:	3fe00000 	.word	0x3fe00000
 8005cf4:	408fffff 	.word	0x408fffff
 8005cf8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	da05      	bge.n	8005d0e <__ieee754_pow+0x3de>
 8005d02:	4bd3      	ldr	r3, [pc, #844]	; (8006050 <__ieee754_pow+0x720>)
 8005d04:	f7fa fc90 	bl	8000628 <__aeabi_dmul>
 8005d08:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	1523      	asrs	r3, r4, #20
 8005d10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d14:	4413      	add	r3, r2
 8005d16:	9309      	str	r3, [sp, #36]	; 0x24
 8005d18:	4bce      	ldr	r3, [pc, #824]	; (8006054 <__ieee754_pow+0x724>)
 8005d1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005d1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005d22:	429c      	cmp	r4, r3
 8005d24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005d28:	dd08      	ble.n	8005d3c <__ieee754_pow+0x40c>
 8005d2a:	4bcb      	ldr	r3, [pc, #812]	; (8006058 <__ieee754_pow+0x728>)
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	f340 815e 	ble.w	8005fee <__ieee754_pow+0x6be>
 8005d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d34:	3301      	adds	r3, #1
 8005d36:	9309      	str	r3, [sp, #36]	; 0x24
 8005d38:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005d3c:	f04f 0a00 	mov.w	sl, #0
 8005d40:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005d44:	930c      	str	r3, [sp, #48]	; 0x30
 8005d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d48:	4bc4      	ldr	r3, [pc, #784]	; (800605c <__ieee754_pow+0x72c>)
 8005d4a:	4413      	add	r3, r2
 8005d4c:	ed93 7b00 	vldr	d7, [r3]
 8005d50:	4629      	mov	r1, r5
 8005d52:	ec53 2b17 	vmov	r2, r3, d7
 8005d56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005d5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d5e:	f7fa faab 	bl	80002b8 <__aeabi_dsub>
 8005d62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d66:	4606      	mov	r6, r0
 8005d68:	460f      	mov	r7, r1
 8005d6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d6e:	f7fa faa5 	bl	80002bc <__adddf3>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	2000      	movs	r0, #0
 8005d78:	49b9      	ldr	r1, [pc, #740]	; (8006060 <__ieee754_pow+0x730>)
 8005d7a:	f7fa fd7f 	bl	800087c <__aeabi_ddiv>
 8005d7e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4630      	mov	r0, r6
 8005d88:	4639      	mov	r1, r7
 8005d8a:	f7fa fc4d 	bl	8000628 <__aeabi_dmul>
 8005d8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d92:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9302      	str	r3, [sp, #8]
 8005d9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005da2:	106d      	asrs	r5, r5, #1
 8005da4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005da8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005dac:	2200      	movs	r2, #0
 8005dae:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005db2:	4640      	mov	r0, r8
 8005db4:	4649      	mov	r1, r9
 8005db6:	4614      	mov	r4, r2
 8005db8:	461d      	mov	r5, r3
 8005dba:	f7fa fc35 	bl	8000628 <__aeabi_dmul>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	f7fa fa77 	bl	80002b8 <__aeabi_dsub>
 8005dca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460f      	mov	r7, r1
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	f7fa fa6f 	bl	80002b8 <__aeabi_dsub>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005de2:	f7fa fa69 	bl	80002b8 <__aeabi_dsub>
 8005de6:	4642      	mov	r2, r8
 8005de8:	464b      	mov	r3, r9
 8005dea:	f7fa fc1d 	bl	8000628 <__aeabi_dmul>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4630      	mov	r0, r6
 8005df4:	4639      	mov	r1, r7
 8005df6:	f7fa fa5f 	bl	80002b8 <__aeabi_dsub>
 8005dfa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005dfe:	f7fa fc13 	bl	8000628 <__aeabi_dmul>
 8005e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	f7fa fc0b 	bl	8000628 <__aeabi_dmul>
 8005e12:	a37b      	add	r3, pc, #492	; (adr r3, 8006000 <__ieee754_pow+0x6d0>)
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	4604      	mov	r4, r0
 8005e1a:	460d      	mov	r5, r1
 8005e1c:	f7fa fc04 	bl	8000628 <__aeabi_dmul>
 8005e20:	a379      	add	r3, pc, #484	; (adr r3, 8006008 <__ieee754_pow+0x6d8>)
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	f7fa fa49 	bl	80002bc <__adddf3>
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	462b      	mov	r3, r5
 8005e2e:	f7fa fbfb 	bl	8000628 <__aeabi_dmul>
 8005e32:	a377      	add	r3, pc, #476	; (adr r3, 8006010 <__ieee754_pow+0x6e0>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa fa40 	bl	80002bc <__adddf3>
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	462b      	mov	r3, r5
 8005e40:	f7fa fbf2 	bl	8000628 <__aeabi_dmul>
 8005e44:	a374      	add	r3, pc, #464	; (adr r3, 8006018 <__ieee754_pow+0x6e8>)
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f7fa fa37 	bl	80002bc <__adddf3>
 8005e4e:	4622      	mov	r2, r4
 8005e50:	462b      	mov	r3, r5
 8005e52:	f7fa fbe9 	bl	8000628 <__aeabi_dmul>
 8005e56:	a372      	add	r3, pc, #456	; (adr r3, 8006020 <__ieee754_pow+0x6f0>)
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f7fa fa2e 	bl	80002bc <__adddf3>
 8005e60:	4622      	mov	r2, r4
 8005e62:	462b      	mov	r3, r5
 8005e64:	f7fa fbe0 	bl	8000628 <__aeabi_dmul>
 8005e68:	a36f      	add	r3, pc, #444	; (adr r3, 8006028 <__ieee754_pow+0x6f8>)
 8005e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6e:	f7fa fa25 	bl	80002bc <__adddf3>
 8005e72:	4622      	mov	r2, r4
 8005e74:	4606      	mov	r6, r0
 8005e76:	460f      	mov	r7, r1
 8005e78:	462b      	mov	r3, r5
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f7fa fbd3 	bl	8000628 <__aeabi_dmul>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4630      	mov	r0, r6
 8005e88:	4639      	mov	r1, r7
 8005e8a:	f7fa fbcd 	bl	8000628 <__aeabi_dmul>
 8005e8e:	4642      	mov	r2, r8
 8005e90:	4604      	mov	r4, r0
 8005e92:	460d      	mov	r5, r1
 8005e94:	464b      	mov	r3, r9
 8005e96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e9a:	f7fa fa0f 	bl	80002bc <__adddf3>
 8005e9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ea2:	f7fa fbc1 	bl	8000628 <__aeabi_dmul>
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	462b      	mov	r3, r5
 8005eaa:	f7fa fa07 	bl	80002bc <__adddf3>
 8005eae:	4642      	mov	r2, r8
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	460f      	mov	r7, r1
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	4649      	mov	r1, r9
 8005eba:	f7fa fbb5 	bl	8000628 <__aeabi_dmul>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	4b68      	ldr	r3, [pc, #416]	; (8006064 <__ieee754_pow+0x734>)
 8005ec2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ec6:	f7fa f9f9 	bl	80002bc <__adddf3>
 8005eca:	4632      	mov	r2, r6
 8005ecc:	463b      	mov	r3, r7
 8005ece:	f7fa f9f5 	bl	80002bc <__adddf3>
 8005ed2:	9802      	ldr	r0, [sp, #8]
 8005ed4:	460d      	mov	r5, r1
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4640      	mov	r0, r8
 8005ede:	4649      	mov	r1, r9
 8005ee0:	f7fa fba2 	bl	8000628 <__aeabi_dmul>
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	4680      	mov	r8, r0
 8005ee8:	4689      	mov	r9, r1
 8005eea:	4b5e      	ldr	r3, [pc, #376]	; (8006064 <__ieee754_pow+0x734>)
 8005eec:	4620      	mov	r0, r4
 8005eee:	4629      	mov	r1, r5
 8005ef0:	f7fa f9e2 	bl	80002b8 <__aeabi_dsub>
 8005ef4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ef8:	f7fa f9de 	bl	80002b8 <__aeabi_dsub>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4630      	mov	r0, r6
 8005f02:	4639      	mov	r1, r7
 8005f04:	f7fa f9d8 	bl	80002b8 <__aeabi_dsub>
 8005f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f0c:	f7fa fb8c 	bl	8000628 <__aeabi_dmul>
 8005f10:	4622      	mov	r2, r4
 8005f12:	4606      	mov	r6, r0
 8005f14:	460f      	mov	r7, r1
 8005f16:	462b      	mov	r3, r5
 8005f18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f1c:	f7fa fb84 	bl	8000628 <__aeabi_dmul>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4630      	mov	r0, r6
 8005f26:	4639      	mov	r1, r7
 8005f28:	f7fa f9c8 	bl	80002bc <__adddf3>
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	460f      	mov	r7, r1
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4640      	mov	r0, r8
 8005f36:	4649      	mov	r1, r9
 8005f38:	f7fa f9c0 	bl	80002bc <__adddf3>
 8005f3c:	9802      	ldr	r0, [sp, #8]
 8005f3e:	a33c      	add	r3, pc, #240	; (adr r3, 8006030 <__ieee754_pow+0x700>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	4604      	mov	r4, r0
 8005f46:	460d      	mov	r5, r1
 8005f48:	f7fa fb6e 	bl	8000628 <__aeabi_dmul>
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f52:	464b      	mov	r3, r9
 8005f54:	4620      	mov	r0, r4
 8005f56:	4629      	mov	r1, r5
 8005f58:	f7fa f9ae 	bl	80002b8 <__aeabi_dsub>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4630      	mov	r0, r6
 8005f62:	4639      	mov	r1, r7
 8005f64:	f7fa f9a8 	bl	80002b8 <__aeabi_dsub>
 8005f68:	a333      	add	r3, pc, #204	; (adr r3, 8006038 <__ieee754_pow+0x708>)
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f7fa fb5b 	bl	8000628 <__aeabi_dmul>
 8005f72:	a333      	add	r3, pc, #204	; (adr r3, 8006040 <__ieee754_pow+0x710>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	4606      	mov	r6, r0
 8005f7a:	460f      	mov	r7, r1
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	f7fa fb52 	bl	8000628 <__aeabi_dmul>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4630      	mov	r0, r6
 8005f8a:	4639      	mov	r1, r7
 8005f8c:	f7fa f996 	bl	80002bc <__adddf3>
 8005f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f92:	4b35      	ldr	r3, [pc, #212]	; (8006068 <__ieee754_pow+0x738>)
 8005f94:	4413      	add	r3, r2
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa f98f 	bl	80002bc <__adddf3>
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	f7fa fad6 	bl	8000554 <__aeabi_i2d>
 8005fa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005faa:	4b30      	ldr	r3, [pc, #192]	; (800606c <__ieee754_pow+0x73c>)
 8005fac:	4413      	add	r3, r2
 8005fae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	462b      	mov	r3, r5
 8005fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fbe:	f7fa f97d 	bl	80002bc <__adddf3>
 8005fc2:	4642      	mov	r2, r8
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	f7fa f979 	bl	80002bc <__adddf3>
 8005fca:	4632      	mov	r2, r6
 8005fcc:	463b      	mov	r3, r7
 8005fce:	f7fa f975 	bl	80002bc <__adddf3>
 8005fd2:	9802      	ldr	r0, [sp, #8]
 8005fd4:	4632      	mov	r2, r6
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fdc:	f7fa f96c 	bl	80002b8 <__aeabi_dsub>
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	f7fa f968 	bl	80002b8 <__aeabi_dsub>
 8005fe8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fec:	e607      	b.n	8005bfe <__ieee754_pow+0x2ce>
 8005fee:	f04f 0a01 	mov.w	sl, #1
 8005ff2:	e6a5      	b.n	8005d40 <__ieee754_pow+0x410>
 8005ff4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006048 <__ieee754_pow+0x718>
 8005ff8:	e613      	b.n	8005c22 <__ieee754_pow+0x2f2>
 8005ffa:	bf00      	nop
 8005ffc:	f3af 8000 	nop.w
 8006000:	4a454eef 	.word	0x4a454eef
 8006004:	3fca7e28 	.word	0x3fca7e28
 8006008:	93c9db65 	.word	0x93c9db65
 800600c:	3fcd864a 	.word	0x3fcd864a
 8006010:	a91d4101 	.word	0xa91d4101
 8006014:	3fd17460 	.word	0x3fd17460
 8006018:	518f264d 	.word	0x518f264d
 800601c:	3fd55555 	.word	0x3fd55555
 8006020:	db6fabff 	.word	0xdb6fabff
 8006024:	3fdb6db6 	.word	0x3fdb6db6
 8006028:	33333303 	.word	0x33333303
 800602c:	3fe33333 	.word	0x3fe33333
 8006030:	e0000000 	.word	0xe0000000
 8006034:	3feec709 	.word	0x3feec709
 8006038:	dc3a03fd 	.word	0xdc3a03fd
 800603c:	3feec709 	.word	0x3feec709
 8006040:	145b01f5 	.word	0x145b01f5
 8006044:	be3e2fe0 	.word	0xbe3e2fe0
 8006048:	00000000 	.word	0x00000000
 800604c:	3ff00000 	.word	0x3ff00000
 8006050:	43400000 	.word	0x43400000
 8006054:	0003988e 	.word	0x0003988e
 8006058:	000bb679 	.word	0x000bb679
 800605c:	08006d40 	.word	0x08006d40
 8006060:	3ff00000 	.word	0x3ff00000
 8006064:	40080000 	.word	0x40080000
 8006068:	08006d60 	.word	0x08006d60
 800606c:	08006d50 	.word	0x08006d50
 8006070:	a3b4      	add	r3, pc, #720	; (adr r3, 8006344 <__ieee754_pow+0xa14>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	f7fa f91f 	bl	80002bc <__adddf3>
 800607e:	4622      	mov	r2, r4
 8006080:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006084:	462b      	mov	r3, r5
 8006086:	4630      	mov	r0, r6
 8006088:	4639      	mov	r1, r7
 800608a:	f7fa f915 	bl	80002b8 <__aeabi_dsub>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006096:	f7fa fd57 	bl	8000b48 <__aeabi_dcmpgt>
 800609a:	2800      	cmp	r0, #0
 800609c:	f47f adfe 	bne.w	8005c9c <__ieee754_pow+0x36c>
 80060a0:	4aa3      	ldr	r2, [pc, #652]	; (8006330 <__ieee754_pow+0xa00>)
 80060a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060a6:	4293      	cmp	r3, r2
 80060a8:	f340 810a 	ble.w	80062c0 <__ieee754_pow+0x990>
 80060ac:	151b      	asrs	r3, r3, #20
 80060ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80060b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80060b6:	fa4a f303 	asr.w	r3, sl, r3
 80060ba:	445b      	add	r3, fp
 80060bc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80060c0:	4e9c      	ldr	r6, [pc, #624]	; (8006334 <__ieee754_pow+0xa04>)
 80060c2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80060c6:	4116      	asrs	r6, r2
 80060c8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80060cc:	2000      	movs	r0, #0
 80060ce:	ea23 0106 	bic.w	r1, r3, r6
 80060d2:	f1c2 0214 	rsb	r2, r2, #20
 80060d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80060da:	fa4a fa02 	asr.w	sl, sl, r2
 80060de:	f1bb 0f00 	cmp.w	fp, #0
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	bfb8      	it	lt
 80060ec:	f1ca 0a00 	rsblt	sl, sl, #0
 80060f0:	f7fa f8e2 	bl	80002b8 <__aeabi_dsub>
 80060f4:	e9cd 0100 	strd	r0, r1, [sp]
 80060f8:	4642      	mov	r2, r8
 80060fa:	464b      	mov	r3, r9
 80060fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006100:	f7fa f8dc 	bl	80002bc <__adddf3>
 8006104:	2000      	movs	r0, #0
 8006106:	a378      	add	r3, pc, #480	; (adr r3, 80062e8 <__ieee754_pow+0x9b8>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	4604      	mov	r4, r0
 800610e:	460d      	mov	r5, r1
 8006110:	f7fa fa8a 	bl	8000628 <__aeabi_dmul>
 8006114:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006118:	4606      	mov	r6, r0
 800611a:	460f      	mov	r7, r1
 800611c:	4620      	mov	r0, r4
 800611e:	4629      	mov	r1, r5
 8006120:	f7fa f8ca 	bl	80002b8 <__aeabi_dsub>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4640      	mov	r0, r8
 800612a:	4649      	mov	r1, r9
 800612c:	f7fa f8c4 	bl	80002b8 <__aeabi_dsub>
 8006130:	a36f      	add	r3, pc, #444	; (adr r3, 80062f0 <__ieee754_pow+0x9c0>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa fa77 	bl	8000628 <__aeabi_dmul>
 800613a:	a36f      	add	r3, pc, #444	; (adr r3, 80062f8 <__ieee754_pow+0x9c8>)
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	4680      	mov	r8, r0
 8006142:	4689      	mov	r9, r1
 8006144:	4620      	mov	r0, r4
 8006146:	4629      	mov	r1, r5
 8006148:	f7fa fa6e 	bl	8000628 <__aeabi_dmul>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4640      	mov	r0, r8
 8006152:	4649      	mov	r1, r9
 8006154:	f7fa f8b2 	bl	80002bc <__adddf3>
 8006158:	4604      	mov	r4, r0
 800615a:	460d      	mov	r5, r1
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4630      	mov	r0, r6
 8006162:	4639      	mov	r1, r7
 8006164:	f7fa f8aa 	bl	80002bc <__adddf3>
 8006168:	4632      	mov	r2, r6
 800616a:	463b      	mov	r3, r7
 800616c:	4680      	mov	r8, r0
 800616e:	4689      	mov	r9, r1
 8006170:	f7fa f8a2 	bl	80002b8 <__aeabi_dsub>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4620      	mov	r0, r4
 800617a:	4629      	mov	r1, r5
 800617c:	f7fa f89c 	bl	80002b8 <__aeabi_dsub>
 8006180:	4642      	mov	r2, r8
 8006182:	4606      	mov	r6, r0
 8006184:	460f      	mov	r7, r1
 8006186:	464b      	mov	r3, r9
 8006188:	4640      	mov	r0, r8
 800618a:	4649      	mov	r1, r9
 800618c:	f7fa fa4c 	bl	8000628 <__aeabi_dmul>
 8006190:	a35b      	add	r3, pc, #364	; (adr r3, 8006300 <__ieee754_pow+0x9d0>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	4604      	mov	r4, r0
 8006198:	460d      	mov	r5, r1
 800619a:	f7fa fa45 	bl	8000628 <__aeabi_dmul>
 800619e:	a35a      	add	r3, pc, #360	; (adr r3, 8006308 <__ieee754_pow+0x9d8>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fa f888 	bl	80002b8 <__aeabi_dsub>
 80061a8:	4622      	mov	r2, r4
 80061aa:	462b      	mov	r3, r5
 80061ac:	f7fa fa3c 	bl	8000628 <__aeabi_dmul>
 80061b0:	a357      	add	r3, pc, #348	; (adr r3, 8006310 <__ieee754_pow+0x9e0>)
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	f7fa f881 	bl	80002bc <__adddf3>
 80061ba:	4622      	mov	r2, r4
 80061bc:	462b      	mov	r3, r5
 80061be:	f7fa fa33 	bl	8000628 <__aeabi_dmul>
 80061c2:	a355      	add	r3, pc, #340	; (adr r3, 8006318 <__ieee754_pow+0x9e8>)
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f7fa f876 	bl	80002b8 <__aeabi_dsub>
 80061cc:	4622      	mov	r2, r4
 80061ce:	462b      	mov	r3, r5
 80061d0:	f7fa fa2a 	bl	8000628 <__aeabi_dmul>
 80061d4:	a352      	add	r3, pc, #328	; (adr r3, 8006320 <__ieee754_pow+0x9f0>)
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f7fa f86f 	bl	80002bc <__adddf3>
 80061de:	4622      	mov	r2, r4
 80061e0:	462b      	mov	r3, r5
 80061e2:	f7fa fa21 	bl	8000628 <__aeabi_dmul>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4640      	mov	r0, r8
 80061ec:	4649      	mov	r1, r9
 80061ee:	f7fa f863 	bl	80002b8 <__aeabi_dsub>
 80061f2:	4604      	mov	r4, r0
 80061f4:	460d      	mov	r5, r1
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4640      	mov	r0, r8
 80061fc:	4649      	mov	r1, r9
 80061fe:	f7fa fa13 	bl	8000628 <__aeabi_dmul>
 8006202:	2200      	movs	r2, #0
 8006204:	e9cd 0100 	strd	r0, r1, [sp]
 8006208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800620c:	4620      	mov	r0, r4
 800620e:	4629      	mov	r1, r5
 8006210:	f7fa f852 	bl	80002b8 <__aeabi_dsub>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800621c:	f7fa fb2e 	bl	800087c <__aeabi_ddiv>
 8006220:	4632      	mov	r2, r6
 8006222:	4604      	mov	r4, r0
 8006224:	460d      	mov	r5, r1
 8006226:	463b      	mov	r3, r7
 8006228:	4640      	mov	r0, r8
 800622a:	4649      	mov	r1, r9
 800622c:	f7fa f9fc 	bl	8000628 <__aeabi_dmul>
 8006230:	4632      	mov	r2, r6
 8006232:	463b      	mov	r3, r7
 8006234:	f7fa f842 	bl	80002bc <__adddf3>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4620      	mov	r0, r4
 800623e:	4629      	mov	r1, r5
 8006240:	f7fa f83a 	bl	80002b8 <__aeabi_dsub>
 8006244:	4642      	mov	r2, r8
 8006246:	464b      	mov	r3, r9
 8006248:	f7fa f836 	bl	80002b8 <__aeabi_dsub>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	2000      	movs	r0, #0
 8006252:	4939      	ldr	r1, [pc, #228]	; (8006338 <__ieee754_pow+0xa08>)
 8006254:	f7fa f830 	bl	80002b8 <__aeabi_dsub>
 8006258:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800625c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	da2f      	bge.n	80062c6 <__ieee754_pow+0x996>
 8006266:	4650      	mov	r0, sl
 8006268:	ec43 2b10 	vmov	d0, r2, r3
 800626c:	f000 f9c0 	bl	80065f0 <scalbn>
 8006270:	ec51 0b10 	vmov	r0, r1, d0
 8006274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006278:	f7ff bbf1 	b.w	8005a5e <__ieee754_pow+0x12e>
 800627c:	4b2f      	ldr	r3, [pc, #188]	; (800633c <__ieee754_pow+0xa0c>)
 800627e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006282:	429e      	cmp	r6, r3
 8006284:	f77f af0c 	ble.w	80060a0 <__ieee754_pow+0x770>
 8006288:	4b2d      	ldr	r3, [pc, #180]	; (8006340 <__ieee754_pow+0xa10>)
 800628a:	440b      	add	r3, r1
 800628c:	4303      	orrs	r3, r0
 800628e:	d00b      	beq.n	80062a8 <__ieee754_pow+0x978>
 8006290:	a325      	add	r3, pc, #148	; (adr r3, 8006328 <__ieee754_pow+0x9f8>)
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800629a:	f7fa f9c5 	bl	8000628 <__aeabi_dmul>
 800629e:	a322      	add	r3, pc, #136	; (adr r3, 8006328 <__ieee754_pow+0x9f8>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7ff bbdb 	b.w	8005a5e <__ieee754_pow+0x12e>
 80062a8:	4622      	mov	r2, r4
 80062aa:	462b      	mov	r3, r5
 80062ac:	f7fa f804 	bl	80002b8 <__aeabi_dsub>
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	f7fa fc3e 	bl	8000b34 <__aeabi_dcmpge>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	f43f aef1 	beq.w	80060a0 <__ieee754_pow+0x770>
 80062be:	e7e7      	b.n	8006290 <__ieee754_pow+0x960>
 80062c0:	f04f 0a00 	mov.w	sl, #0
 80062c4:	e718      	b.n	80060f8 <__ieee754_pow+0x7c8>
 80062c6:	4621      	mov	r1, r4
 80062c8:	e7d4      	b.n	8006274 <__ieee754_pow+0x944>
 80062ca:	2000      	movs	r0, #0
 80062cc:	491a      	ldr	r1, [pc, #104]	; (8006338 <__ieee754_pow+0xa08>)
 80062ce:	f7ff bb8f 	b.w	80059f0 <__ieee754_pow+0xc0>
 80062d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062d6:	f7ff bb8b 	b.w	80059f0 <__ieee754_pow+0xc0>
 80062da:	4630      	mov	r0, r6
 80062dc:	4639      	mov	r1, r7
 80062de:	f7ff bb87 	b.w	80059f0 <__ieee754_pow+0xc0>
 80062e2:	4693      	mov	fp, r2
 80062e4:	f7ff bb98 	b.w	8005a18 <__ieee754_pow+0xe8>
 80062e8:	00000000 	.word	0x00000000
 80062ec:	3fe62e43 	.word	0x3fe62e43
 80062f0:	fefa39ef 	.word	0xfefa39ef
 80062f4:	3fe62e42 	.word	0x3fe62e42
 80062f8:	0ca86c39 	.word	0x0ca86c39
 80062fc:	be205c61 	.word	0xbe205c61
 8006300:	72bea4d0 	.word	0x72bea4d0
 8006304:	3e663769 	.word	0x3e663769
 8006308:	c5d26bf1 	.word	0xc5d26bf1
 800630c:	3ebbbd41 	.word	0x3ebbbd41
 8006310:	af25de2c 	.word	0xaf25de2c
 8006314:	3f11566a 	.word	0x3f11566a
 8006318:	16bebd93 	.word	0x16bebd93
 800631c:	3f66c16c 	.word	0x3f66c16c
 8006320:	5555553e 	.word	0x5555553e
 8006324:	3fc55555 	.word	0x3fc55555
 8006328:	c2f8f359 	.word	0xc2f8f359
 800632c:	01a56e1f 	.word	0x01a56e1f
 8006330:	3fe00000 	.word	0x3fe00000
 8006334:	000fffff 	.word	0x000fffff
 8006338:	3ff00000 	.word	0x3ff00000
 800633c:	4090cbff 	.word	0x4090cbff
 8006340:	3f6f3400 	.word	0x3f6f3400
 8006344:	652b82fe 	.word	0x652b82fe
 8006348:	3c971547 	.word	0x3c971547

0800634c <__ieee754_sqrt>:
 800634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006350:	4955      	ldr	r1, [pc, #340]	; (80064a8 <__ieee754_sqrt+0x15c>)
 8006352:	ec55 4b10 	vmov	r4, r5, d0
 8006356:	43a9      	bics	r1, r5
 8006358:	462b      	mov	r3, r5
 800635a:	462a      	mov	r2, r5
 800635c:	d112      	bne.n	8006384 <__ieee754_sqrt+0x38>
 800635e:	ee10 2a10 	vmov	r2, s0
 8006362:	ee10 0a10 	vmov	r0, s0
 8006366:	4629      	mov	r1, r5
 8006368:	f7fa f95e 	bl	8000628 <__aeabi_dmul>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4620      	mov	r0, r4
 8006372:	4629      	mov	r1, r5
 8006374:	f7f9 ffa2 	bl	80002bc <__adddf3>
 8006378:	4604      	mov	r4, r0
 800637a:	460d      	mov	r5, r1
 800637c:	ec45 4b10 	vmov	d0, r4, r5
 8006380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006384:	2d00      	cmp	r5, #0
 8006386:	ee10 0a10 	vmov	r0, s0
 800638a:	4621      	mov	r1, r4
 800638c:	dc0f      	bgt.n	80063ae <__ieee754_sqrt+0x62>
 800638e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006392:	4330      	orrs	r0, r6
 8006394:	d0f2      	beq.n	800637c <__ieee754_sqrt+0x30>
 8006396:	b155      	cbz	r5, 80063ae <__ieee754_sqrt+0x62>
 8006398:	ee10 2a10 	vmov	r2, s0
 800639c:	4620      	mov	r0, r4
 800639e:	4629      	mov	r1, r5
 80063a0:	f7f9 ff8a 	bl	80002b8 <__aeabi_dsub>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	f7fa fa68 	bl	800087c <__aeabi_ddiv>
 80063ac:	e7e4      	b.n	8006378 <__ieee754_sqrt+0x2c>
 80063ae:	151b      	asrs	r3, r3, #20
 80063b0:	d073      	beq.n	800649a <__ieee754_sqrt+0x14e>
 80063b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80063b6:	07dd      	lsls	r5, r3, #31
 80063b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80063bc:	bf48      	it	mi
 80063be:	0fc8      	lsrmi	r0, r1, #31
 80063c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80063c4:	bf44      	itt	mi
 80063c6:	0049      	lslmi	r1, r1, #1
 80063c8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80063cc:	2500      	movs	r5, #0
 80063ce:	1058      	asrs	r0, r3, #1
 80063d0:	0fcb      	lsrs	r3, r1, #31
 80063d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80063d6:	0049      	lsls	r1, r1, #1
 80063d8:	2316      	movs	r3, #22
 80063da:	462c      	mov	r4, r5
 80063dc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80063e0:	19a7      	adds	r7, r4, r6
 80063e2:	4297      	cmp	r7, r2
 80063e4:	bfde      	ittt	le
 80063e6:	19bc      	addle	r4, r7, r6
 80063e8:	1bd2      	suble	r2, r2, r7
 80063ea:	19ad      	addle	r5, r5, r6
 80063ec:	0fcf      	lsrs	r7, r1, #31
 80063ee:	3b01      	subs	r3, #1
 80063f0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80063f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80063f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80063fc:	d1f0      	bne.n	80063e0 <__ieee754_sqrt+0x94>
 80063fe:	f04f 0c20 	mov.w	ip, #32
 8006402:	469e      	mov	lr, r3
 8006404:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006408:	42a2      	cmp	r2, r4
 800640a:	eb06 070e 	add.w	r7, r6, lr
 800640e:	dc02      	bgt.n	8006416 <__ieee754_sqrt+0xca>
 8006410:	d112      	bne.n	8006438 <__ieee754_sqrt+0xec>
 8006412:	428f      	cmp	r7, r1
 8006414:	d810      	bhi.n	8006438 <__ieee754_sqrt+0xec>
 8006416:	2f00      	cmp	r7, #0
 8006418:	eb07 0e06 	add.w	lr, r7, r6
 800641c:	da42      	bge.n	80064a4 <__ieee754_sqrt+0x158>
 800641e:	f1be 0f00 	cmp.w	lr, #0
 8006422:	db3f      	blt.n	80064a4 <__ieee754_sqrt+0x158>
 8006424:	f104 0801 	add.w	r8, r4, #1
 8006428:	1b12      	subs	r2, r2, r4
 800642a:	428f      	cmp	r7, r1
 800642c:	bf88      	it	hi
 800642e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006432:	1bc9      	subs	r1, r1, r7
 8006434:	4433      	add	r3, r6
 8006436:	4644      	mov	r4, r8
 8006438:	0052      	lsls	r2, r2, #1
 800643a:	f1bc 0c01 	subs.w	ip, ip, #1
 800643e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006442:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006446:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800644a:	d1dd      	bne.n	8006408 <__ieee754_sqrt+0xbc>
 800644c:	430a      	orrs	r2, r1
 800644e:	d006      	beq.n	800645e <__ieee754_sqrt+0x112>
 8006450:	1c5c      	adds	r4, r3, #1
 8006452:	bf13      	iteet	ne
 8006454:	3301      	addne	r3, #1
 8006456:	3501      	addeq	r5, #1
 8006458:	4663      	moveq	r3, ip
 800645a:	f023 0301 	bicne.w	r3, r3, #1
 800645e:	106a      	asrs	r2, r5, #1
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	07e9      	lsls	r1, r5, #31
 8006464:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006468:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800646c:	bf48      	it	mi
 800646e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006472:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006476:	461c      	mov	r4, r3
 8006478:	e780      	b.n	800637c <__ieee754_sqrt+0x30>
 800647a:	0aca      	lsrs	r2, r1, #11
 800647c:	3815      	subs	r0, #21
 800647e:	0549      	lsls	r1, r1, #21
 8006480:	2a00      	cmp	r2, #0
 8006482:	d0fa      	beq.n	800647a <__ieee754_sqrt+0x12e>
 8006484:	02d6      	lsls	r6, r2, #11
 8006486:	d50a      	bpl.n	800649e <__ieee754_sqrt+0x152>
 8006488:	f1c3 0420 	rsb	r4, r3, #32
 800648c:	fa21 f404 	lsr.w	r4, r1, r4
 8006490:	1e5d      	subs	r5, r3, #1
 8006492:	4099      	lsls	r1, r3
 8006494:	4322      	orrs	r2, r4
 8006496:	1b43      	subs	r3, r0, r5
 8006498:	e78b      	b.n	80063b2 <__ieee754_sqrt+0x66>
 800649a:	4618      	mov	r0, r3
 800649c:	e7f0      	b.n	8006480 <__ieee754_sqrt+0x134>
 800649e:	0052      	lsls	r2, r2, #1
 80064a0:	3301      	adds	r3, #1
 80064a2:	e7ef      	b.n	8006484 <__ieee754_sqrt+0x138>
 80064a4:	46a0      	mov	r8, r4
 80064a6:	e7bf      	b.n	8006428 <__ieee754_sqrt+0xdc>
 80064a8:	7ff00000 	.word	0x7ff00000

080064ac <fabs>:
 80064ac:	ec51 0b10 	vmov	r0, r1, d0
 80064b0:	ee10 2a10 	vmov	r2, s0
 80064b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064b8:	ec43 2b10 	vmov	d0, r2, r3
 80064bc:	4770      	bx	lr

080064be <finite>:
 80064be:	ee10 3a90 	vmov	r3, s1
 80064c2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80064c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80064ca:	0fc0      	lsrs	r0, r0, #31
 80064cc:	4770      	bx	lr

080064ce <matherr>:
 80064ce:	2000      	movs	r0, #0
 80064d0:	4770      	bx	lr
 80064d2:	0000      	movs	r0, r0
 80064d4:	0000      	movs	r0, r0
	...

080064d8 <nan>:
 80064d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80064e0 <nan+0x8>
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	00000000 	.word	0x00000000
 80064e4:	7ff80000 	.word	0x7ff80000

080064e8 <rint>:
 80064e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ea:	ec51 0b10 	vmov	r0, r1, d0
 80064ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80064f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80064f6:	2e13      	cmp	r6, #19
 80064f8:	460b      	mov	r3, r1
 80064fa:	ee10 4a10 	vmov	r4, s0
 80064fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006502:	dc56      	bgt.n	80065b2 <rint+0xca>
 8006504:	2e00      	cmp	r6, #0
 8006506:	da2b      	bge.n	8006560 <rint+0x78>
 8006508:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800650c:	4302      	orrs	r2, r0
 800650e:	d023      	beq.n	8006558 <rint+0x70>
 8006510:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006514:	4302      	orrs	r2, r0
 8006516:	4254      	negs	r4, r2
 8006518:	4314      	orrs	r4, r2
 800651a:	0c4b      	lsrs	r3, r1, #17
 800651c:	0b24      	lsrs	r4, r4, #12
 800651e:	045b      	lsls	r3, r3, #17
 8006520:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006524:	ea44 0103 	orr.w	r1, r4, r3
 8006528:	460b      	mov	r3, r1
 800652a:	492f      	ldr	r1, [pc, #188]	; (80065e8 <rint+0x100>)
 800652c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006530:	e9d1 6700 	ldrd	r6, r7, [r1]
 8006534:	4602      	mov	r2, r0
 8006536:	4639      	mov	r1, r7
 8006538:	4630      	mov	r0, r6
 800653a:	f7f9 febf 	bl	80002bc <__adddf3>
 800653e:	e9cd 0100 	strd	r0, r1, [sp]
 8006542:	463b      	mov	r3, r7
 8006544:	4632      	mov	r2, r6
 8006546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800654a:	f7f9 feb5 	bl	80002b8 <__aeabi_dsub>
 800654e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006552:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006556:	4639      	mov	r1, r7
 8006558:	ec41 0b10 	vmov	d0, r0, r1
 800655c:	b003      	add	sp, #12
 800655e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006560:	4a22      	ldr	r2, [pc, #136]	; (80065ec <rint+0x104>)
 8006562:	4132      	asrs	r2, r6
 8006564:	ea01 0702 	and.w	r7, r1, r2
 8006568:	4307      	orrs	r7, r0
 800656a:	d0f5      	beq.n	8006558 <rint+0x70>
 800656c:	0852      	lsrs	r2, r2, #1
 800656e:	4011      	ands	r1, r2
 8006570:	430c      	orrs	r4, r1
 8006572:	d00b      	beq.n	800658c <rint+0xa4>
 8006574:	ea23 0202 	bic.w	r2, r3, r2
 8006578:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800657c:	2e13      	cmp	r6, #19
 800657e:	fa43 f306 	asr.w	r3, r3, r6
 8006582:	bf0c      	ite	eq
 8006584:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006588:	2400      	movne	r4, #0
 800658a:	4313      	orrs	r3, r2
 800658c:	4916      	ldr	r1, [pc, #88]	; (80065e8 <rint+0x100>)
 800658e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006592:	4622      	mov	r2, r4
 8006594:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006598:	4620      	mov	r0, r4
 800659a:	4629      	mov	r1, r5
 800659c:	f7f9 fe8e 	bl	80002bc <__adddf3>
 80065a0:	e9cd 0100 	strd	r0, r1, [sp]
 80065a4:	4622      	mov	r2, r4
 80065a6:	462b      	mov	r3, r5
 80065a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ac:	f7f9 fe84 	bl	80002b8 <__aeabi_dsub>
 80065b0:	e7d2      	b.n	8006558 <rint+0x70>
 80065b2:	2e33      	cmp	r6, #51	; 0x33
 80065b4:	dd07      	ble.n	80065c6 <rint+0xde>
 80065b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80065ba:	d1cd      	bne.n	8006558 <rint+0x70>
 80065bc:	ee10 2a10 	vmov	r2, s0
 80065c0:	f7f9 fe7c 	bl	80002bc <__adddf3>
 80065c4:	e7c8      	b.n	8006558 <rint+0x70>
 80065c6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295
 80065ce:	40f2      	lsrs	r2, r6
 80065d0:	4210      	tst	r0, r2
 80065d2:	d0c1      	beq.n	8006558 <rint+0x70>
 80065d4:	0852      	lsrs	r2, r2, #1
 80065d6:	4210      	tst	r0, r2
 80065d8:	bf1f      	itttt	ne
 80065da:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80065de:	ea20 0202 	bicne.w	r2, r0, r2
 80065e2:	4134      	asrne	r4, r6
 80065e4:	4314      	orrne	r4, r2
 80065e6:	e7d1      	b.n	800658c <rint+0xa4>
 80065e8:	08006d70 	.word	0x08006d70
 80065ec:	000fffff 	.word	0x000fffff

080065f0 <scalbn>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	ec55 4b10 	vmov	r4, r5, d0
 80065f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80065fa:	4606      	mov	r6, r0
 80065fc:	462b      	mov	r3, r5
 80065fe:	b9aa      	cbnz	r2, 800662c <scalbn+0x3c>
 8006600:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006604:	4323      	orrs	r3, r4
 8006606:	d03b      	beq.n	8006680 <scalbn+0x90>
 8006608:	4b31      	ldr	r3, [pc, #196]	; (80066d0 <scalbn+0xe0>)
 800660a:	4629      	mov	r1, r5
 800660c:	2200      	movs	r2, #0
 800660e:	ee10 0a10 	vmov	r0, s0
 8006612:	f7fa f809 	bl	8000628 <__aeabi_dmul>
 8006616:	4b2f      	ldr	r3, [pc, #188]	; (80066d4 <scalbn+0xe4>)
 8006618:	429e      	cmp	r6, r3
 800661a:	4604      	mov	r4, r0
 800661c:	460d      	mov	r5, r1
 800661e:	da12      	bge.n	8006646 <scalbn+0x56>
 8006620:	a327      	add	r3, pc, #156	; (adr r3, 80066c0 <scalbn+0xd0>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 ffff 	bl	8000628 <__aeabi_dmul>
 800662a:	e009      	b.n	8006640 <scalbn+0x50>
 800662c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006630:	428a      	cmp	r2, r1
 8006632:	d10c      	bne.n	800664e <scalbn+0x5e>
 8006634:	ee10 2a10 	vmov	r2, s0
 8006638:	4620      	mov	r0, r4
 800663a:	4629      	mov	r1, r5
 800663c:	f7f9 fe3e 	bl	80002bc <__adddf3>
 8006640:	4604      	mov	r4, r0
 8006642:	460d      	mov	r5, r1
 8006644:	e01c      	b.n	8006680 <scalbn+0x90>
 8006646:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800664a:	460b      	mov	r3, r1
 800664c:	3a36      	subs	r2, #54	; 0x36
 800664e:	4432      	add	r2, r6
 8006650:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006654:	428a      	cmp	r2, r1
 8006656:	dd0b      	ble.n	8006670 <scalbn+0x80>
 8006658:	ec45 4b11 	vmov	d1, r4, r5
 800665c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80066c8 <scalbn+0xd8>
 8006660:	f000 f83c 	bl	80066dc <copysign>
 8006664:	a318      	add	r3, pc, #96	; (adr r3, 80066c8 <scalbn+0xd8>)
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	ec51 0b10 	vmov	r0, r1, d0
 800666e:	e7da      	b.n	8006626 <scalbn+0x36>
 8006670:	2a00      	cmp	r2, #0
 8006672:	dd08      	ble.n	8006686 <scalbn+0x96>
 8006674:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006678:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800667c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006680:	ec45 4b10 	vmov	d0, r4, r5
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800668a:	da0d      	bge.n	80066a8 <scalbn+0xb8>
 800668c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006690:	429e      	cmp	r6, r3
 8006692:	ec45 4b11 	vmov	d1, r4, r5
 8006696:	dce1      	bgt.n	800665c <scalbn+0x6c>
 8006698:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80066c0 <scalbn+0xd0>
 800669c:	f000 f81e 	bl	80066dc <copysign>
 80066a0:	a307      	add	r3, pc, #28	; (adr r3, 80066c0 <scalbn+0xd0>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	e7e0      	b.n	800666a <scalbn+0x7a>
 80066a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066ac:	3236      	adds	r2, #54	; 0x36
 80066ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066b6:	4620      	mov	r0, r4
 80066b8:	4629      	mov	r1, r5
 80066ba:	2200      	movs	r2, #0
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <scalbn+0xe8>)
 80066be:	e7b2      	b.n	8006626 <scalbn+0x36>
 80066c0:	c2f8f359 	.word	0xc2f8f359
 80066c4:	01a56e1f 	.word	0x01a56e1f
 80066c8:	8800759c 	.word	0x8800759c
 80066cc:	7e37e43c 	.word	0x7e37e43c
 80066d0:	43500000 	.word	0x43500000
 80066d4:	ffff3cb0 	.word	0xffff3cb0
 80066d8:	3c900000 	.word	0x3c900000

080066dc <copysign>:
 80066dc:	ec51 0b10 	vmov	r0, r1, d0
 80066e0:	ee11 0a90 	vmov	r0, s3
 80066e4:	ee10 2a10 	vmov	r2, s0
 80066e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80066ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80066f0:	ea41 0300 	orr.w	r3, r1, r0
 80066f4:	ec43 2b10 	vmov	d0, r2, r3
 80066f8:	4770      	bx	lr
	...

080066fc <_init>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr

08006708 <_fini>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr
