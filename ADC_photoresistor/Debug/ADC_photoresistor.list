
ADC_photoresistor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a8  080045a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b0  080045b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080045b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000007c  08004634  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08004634  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5f1  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ec9  00000000  00000000  0002b69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b8  00000000  00000000  0002d568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002df20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e47  00000000  00000000  0002e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ccf  00000000  00000000  000515ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdc6a  00000000  00000000  0005b2be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128f28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002940  00000000  00000000  00128fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003fc4 	.word	0x08003fc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08003fc4 	.word	0x08003fc4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <HAL_Init+0x40>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <HAL_Init+0x40>)
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x40>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 fcf9 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f002 ff3a 	bl	800346c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fd03 	bl	800102e <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 fcd9 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000014 	.word	0x20000014
 800065c:	20000004 	.word	0x20000004
 8000660:	20000000 	.word	0x20000000

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	200001b4 	.word	0x200001b4

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200001b4 	.word	0x200001b4

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f7ff ffee 	bl	800068c <HAL_GetTick>
 80006b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d005      	beq.n	80006ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_Delay+0x40>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ca:	bf00      	nop
 80006cc:	f7ff ffde 	bl	800068c <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d8f7      	bhi.n	80006cc <HAL_Delay+0x28>
  {
  }
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004

080006e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d101      	bne.n	80006fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e033      	b.n	8000766 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	2b00      	cmp	r3, #0
 8000704:	d109      	bne.n	800071a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f002 fd28 	bl	800315c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	2b00      	cmp	r3, #0
 8000724:	d118      	bne.n	8000758 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800072e:	f023 0302 	bic.w	r3, r3, #2
 8000732:	f043 0202 	orr.w	r2, r3, #2
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 faa2 	bl	8000c84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f023 0303 	bic.w	r3, r3, #3
 800074e:	f043 0201 	orr.w	r2, r3, #1
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	641a      	str	r2, [r3, #64]	; 0x40
 8000756:	e001      	b.n	800075c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000782:	2b01      	cmp	r3, #1
 8000784:	d101      	bne.n	800078a <HAL_ADC_Start+0x1a>
 8000786:	2302      	movs	r3, #2
 8000788:	e0a5      	b.n	80008d6 <HAL_ADC_Start+0x166>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b01      	cmp	r3, #1
 800079e:	d018      	beq.n	80007d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	689a      	ldr	r2, [r3, #8]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f042 0201 	orr.w	r2, r2, #1
 80007ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007b0:	4b4c      	ldr	r3, [pc, #304]	; (80008e4 <HAL_ADC_Start+0x174>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a4c      	ldr	r2, [pc, #304]	; (80008e8 <HAL_ADC_Start+0x178>)
 80007b6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ba:	0c9a      	lsrs	r2, r3, #18
 80007bc:	4613      	mov	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	4413      	add	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007c4:	e002      	b.n	80007cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f9      	bne.n	80007c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d179      	bne.n	80008d4 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007e8:	f023 0301 	bic.w	r3, r3, #1
 80007ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d007      	beq.n	8000812 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800080a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800081a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800081e:	d106      	bne.n	800082e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000824:	f023 0206 	bic.w	r2, r3, #6
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	645a      	str	r2, [r3, #68]	; 0x44
 800082c:	e002      	b.n	8000834 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <HAL_ADC_Start+0x17c>)
 800083e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000848:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f003 031f 	and.w	r3, r3, #31
 8000852:	2b00      	cmp	r3, #0
 8000854:	d12a      	bne.n	80008ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <HAL_ADC_Start+0x180>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d015      	beq.n	800088c <HAL_ADC_Start+0x11c>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <HAL_ADC_Start+0x184>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d105      	bne.n	8000876 <HAL_ADC_Start+0x106>
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <HAL_ADC_Start+0x17c>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00a      	beq.n	800088c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <HAL_ADC_Start+0x188>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d129      	bne.n	80008d4 <HAL_ADC_Start+0x164>
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <HAL_ADC_Start+0x17c>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f003 031f 	and.w	r3, r3, #31
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d823      	bhi.n	80008d4 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000896:	2b00      	cmp	r3, #0
 8000898:	d11c      	bne.n	80008d4 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	e013      	b.n	80008d4 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <HAL_ADC_Start+0x180>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d10e      	bne.n	80008d4 <HAL_ADC_Start+0x164>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d107      	bne.n	80008d4 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008d2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000014 	.word	0x20000014
 80008e8:	431bde83 	.word	0x431bde83
 80008ec:	40012300 	.word	0x40012300
 80008f0:	40012000 	.word	0x40012000
 80008f4:	40012100 	.word	0x40012100
 80008f8:	40012200 	.word	0x40012200

080008fc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000918:	d113      	bne.n	8000942 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000928:	d10b      	bne.n	8000942 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f043 0220 	orr.w	r2, r3, #32
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e05c      	b.n	80009fc <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000942:	f7ff fea3 	bl	800068c <HAL_GetTick>
 8000946:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000948:	e01a      	b.n	8000980 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000950:	d016      	beq.n	8000980 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d007      	beq.n	8000968 <HAL_ADC_PollForConversion+0x6c>
 8000958:	f7ff fe98 	bl	800068c <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	429a      	cmp	r2, r3
 8000966:	d20b      	bcs.n	8000980 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f043 0204 	orr.w	r2, r3, #4
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800097c:	2303      	movs	r3, #3
 800097e:	e03d      	b.n	80009fc <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	2b02      	cmp	r3, #2
 800098c:	d1dd      	bne.n	800094a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f06f 0212 	mvn.w	r2, #18
 8000996:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d123      	bne.n	80009fa <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d11f      	bne.n	80009fa <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d006      	beq.n	80009d6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d111      	bne.n	80009fa <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d105      	bne.n	80009fa <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f043 0201 	orr.w	r2, r3, #1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d101      	bne.n	8000a3c <HAL_ADC_ConfigChannel+0x1c>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	e113      	b.n	8000c64 <HAL_ADC_ConfigChannel+0x244>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	d925      	bls.n	8000a98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	68d9      	ldr	r1, [r3, #12]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	3b1e      	subs	r3, #30
 8000a62:	2207      	movs	r2, #7
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	400a      	ands	r2, r1
 8000a70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68d9      	ldr	r1, [r3, #12]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	4603      	mov	r3, r0
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4403      	add	r3, r0
 8000a8a:	3b1e      	subs	r3, #30
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	430a      	orrs	r2, r1
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	e022      	b.n	8000ade <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6919      	ldr	r1, [r3, #16]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	2207      	movs	r2, #7
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	400a      	ands	r2, r1
 8000aba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6919      	ldr	r1, [r3, #16]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	4603      	mov	r3, r0
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4403      	add	r3, r0
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d824      	bhi.n	8000b30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	4613      	mov	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	3b05      	subs	r3, #5
 8000af8:	221f      	movs	r2, #31
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	400a      	ands	r2, r1
 8000b06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	3b05      	subs	r3, #5
 8000b22:	fa00 f203 	lsl.w	r2, r0, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b2e:	e04c      	b.n	8000bca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b0c      	cmp	r3, #12
 8000b36:	d824      	bhi.n	8000b82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	4613      	mov	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	3b23      	subs	r3, #35	; 0x23
 8000b4a:	221f      	movs	r2, #31
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43da      	mvns	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	400a      	ands	r2, r1
 8000b58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	3b23      	subs	r3, #35	; 0x23
 8000b74:	fa00 f203 	lsl.w	r2, r0, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b80:	e023      	b.n	8000bca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	3b41      	subs	r3, #65	; 0x41
 8000b94:	221f      	movs	r2, #31
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	400a      	ands	r2, r1
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	3b41      	subs	r3, #65	; 0x41
 8000bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <HAL_ADC_ConfigChannel+0x250>)
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <HAL_ADC_ConfigChannel+0x254>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d10f      	bne.n	8000bf8 <HAL_ADC_ConfigChannel+0x1d8>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b12      	cmp	r3, #18
 8000bde:	d10b      	bne.n	8000bf8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <HAL_ADC_ConfigChannel+0x254>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12b      	bne.n	8000c5a <HAL_ADC_ConfigChannel+0x23a>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <HAL_ADC_ConfigChannel+0x258>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d003      	beq.n	8000c14 <HAL_ADC_ConfigChannel+0x1f4>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b11      	cmp	r3, #17
 8000c12:	d122      	bne.n	8000c5a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <HAL_ADC_ConfigChannel+0x258>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d111      	bne.n	8000c5a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_ADC_ConfigChannel+0x25c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a11      	ldr	r2, [pc, #68]	; (8000c80 <HAL_ADC_ConfigChannel+0x260>)
 8000c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c40:	0c9a      	lsrs	r2, r3, #18
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000c4c:	e002      	b.n	8000c54 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f9      	bne.n	8000c4e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40012300 	.word	0x40012300
 8000c74:	40012000 	.word	0x40012000
 8000c78:	10000012 	.word	0x10000012
 8000c7c:	20000014 	.word	0x20000014
 8000c80:	431bde83 	.word	0x431bde83

08000c84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c8c:	4b79      	ldr	r3, [pc, #484]	; (8000e74 <ADC_Init+0x1f0>)
 8000c8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6859      	ldr	r1, [r3, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	021a      	lsls	r2, r3, #8
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6859      	ldr	r1, [r3, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6899      	ldr	r1, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	4a58      	ldr	r2, [pc, #352]	; (8000e78 <ADC_Init+0x1f4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d022      	beq.n	8000d62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6899      	ldr	r1, [r3, #8]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6899      	ldr	r1, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	e00f      	b.n	8000d82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0202 	bic.w	r2, r2, #2
 8000d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6899      	ldr	r1, [r3, #8]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7e1b      	ldrb	r3, [r3, #24]
 8000d9c:	005a      	lsls	r2, r3, #1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d01b      	beq.n	8000de8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000dce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6859      	ldr	r1, [r3, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	035a      	lsls	r2, r3, #13
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	e007      	b.n	8000df8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000df6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	051a      	lsls	r2, r3, #20
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6899      	ldr	r1, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e3a:	025a      	lsls	r2, r3, #9
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6899      	ldr	r1, [r3, #8]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	029a      	lsls	r2, r3, #10
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	609a      	str	r2, [r3, #8]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	40012300 	.word	0x40012300
 8000e78:	0f000001 	.word	0x0f000001

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff47 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff5c 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffb0 	bl	8000f9c <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e165      	b.n	8001330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8154 	bne.w	800132a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x4a>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b12      	cmp	r3, #18
 8001090:	d123      	bne.n	80010da <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	69b9      	ldr	r1, [r7, #24]
 80010d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0203 	and.w	r2, r3, #3
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d00b      	beq.n	800112e <HAL_GPIO_Init+0xe6>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001122:	2b11      	cmp	r3, #17
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b12      	cmp	r3, #18
 800112c:	d130      	bne.n	8001190 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0201 	and.w	r2, r3, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80ae 	beq.w	800132a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_GPIO_Init+0x2fc>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a5b      	ldr	r2, [pc, #364]	; (8001344 <HAL_GPIO_Init+0x2fc>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b59      	ldr	r3, [pc, #356]	; (8001344 <HAL_GPIO_Init+0x2fc>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a57      	ldr	r2, [pc, #348]	; (8001348 <HAL_GPIO_Init+0x300>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4e      	ldr	r2, [pc, #312]	; (800134c <HAL_GPIO_Init+0x304>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x21a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4d      	ldr	r2, [pc, #308]	; (8001350 <HAL_GPIO_Init+0x308>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x216>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_GPIO_Init+0x30c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x212>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <HAL_GPIO_Init+0x310>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x20e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_GPIO_Init+0x314>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x20a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a49      	ldr	r2, [pc, #292]	; (8001360 <HAL_GPIO_Init+0x318>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x206>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a48      	ldr	r2, [pc, #288]	; (8001364 <HAL_GPIO_Init+0x31c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x202>
 8001246:	2306      	movs	r3, #6
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800124a:	2307      	movs	r3, #7
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4934      	ldr	r1, [pc, #208]	; (8001348 <HAL_GPIO_Init+0x300>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <HAL_GPIO_Init+0x320>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a6:	4a30      	ldr	r2, [pc, #192]	; (8001368 <HAL_GPIO_Init+0x320>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_GPIO_Init+0x320>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d0:	4a25      	ldr	r2, [pc, #148]	; (8001368 <HAL_GPIO_Init+0x320>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_GPIO_Init+0x320>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fa:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <HAL_GPIO_Init+0x320>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_GPIO_Init+0x320>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001324:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_GPIO_Init+0x320>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae96 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	; 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40013c00 	.word	0x40013c00

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_PWREx_EnableOverDrive+0x90>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a1f      	ldr	r2, [pc, #124]	; (8001430 <HAL_PWREx_EnableOverDrive+0x90>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_PWREx_EnableOverDrive+0x90>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_PWREx_EnableOverDrive+0x94>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff f95e 	bl	800068c <HAL_GetTick>
 80013d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013d2:	e009      	b.n	80013e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013d4:	f7ff f95a 	bl	800068c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013e2:	d901      	bls.n	80013e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e01f      	b.n	8001428 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_PWREx_EnableOverDrive+0x98>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f4:	d1ee      	bne.n	80013d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_PWREx_EnableOverDrive+0x9c>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013fc:	f7ff f946 	bl	800068c <HAL_GetTick>
 8001400:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001402:	e009      	b.n	8001418 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001404:	f7ff f942 	bl	800068c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001412:	d901      	bls.n	8001418 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e007      	b.n	8001428 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_PWREx_EnableOverDrive+0x98>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001424:	d1ee      	bne.n	8001404 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	420e0040 	.word	0x420e0040
 8001438:	40007000 	.word	0x40007000
 800143c:	420e0044 	.word	0x420e0044

08001440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0ca      	b.n	80015ea <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001454:	4b67      	ldr	r3, [pc, #412]	; (80015f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d90c      	bls.n	800147c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	4b62      	ldr	r3, [pc, #392]	; (80015f4 <HAL_RCC_ClockConfig+0x1b4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0b6      	b.n	80015ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001494:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a57      	ldr	r2, [pc, #348]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 800149a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800149e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ac:	4b52      	ldr	r3, [pc, #328]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a51      	ldr	r2, [pc, #324]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 80014b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b8:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	494c      	ldr	r1, [pc, #304]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d044      	beq.n	8001560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d119      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e07d      	b.n	80015ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d003      	beq.n	80014fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fe:	4b3e      	ldr	r3, [pc, #248]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e06d      	b.n	80015ea <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e065      	b.n	80015ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f023 0203 	bic.w	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4933      	ldr	r1, [pc, #204]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	4313      	orrs	r3, r2
 800152e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001530:	f7ff f8ac 	bl	800068c <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	e00a      	b.n	800154e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001538:	f7ff f8a8 	bl	800068c <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e04d      	b.n	80015ea <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 020c 	and.w	r2, r3, #12
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	429a      	cmp	r2, r3
 800155e:	d1eb      	bne.n	8001538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d20c      	bcs.n	8001588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e030      	b.n	80015ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4915      	ldr	r1, [pc, #84]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	490d      	ldr	r1, [pc, #52]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015c6:	f000 f851 	bl	800166c <HAL_RCC_GetSysClockFreq>
 80015ca:	4601      	mov	r1, r0
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	fa21 f303 	lsr.w	r3, r1, r3
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff f80e 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00
 80015f8:	40023800 	.word	0x40023800
 80015fc:	0800455c 	.word	0x0800455c
 8001600:	20000014 	.word	0x20000014

08001604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_RCC_GetHCLKFreq+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000014 	.word	0x20000014

0800161c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001620:	f7ff fff0 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 8001624:	4601      	mov	r1, r0
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	0a9b      	lsrs	r3, r3, #10
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	4a03      	ldr	r2, [pc, #12]	; (8001640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	0800456c 	.word	0x0800456c

08001644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001648:	f7ff ffdc 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 800164c:	4601      	mov	r1, r0
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	0b5b      	lsrs	r3, r3, #13
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
 800165c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	0800456c 	.word	0x0800456c

0800166c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001686:	4bc6      	ldr	r3, [pc, #792]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b0c      	cmp	r3, #12
 8001690:	f200 817e 	bhi.w	8001990 <HAL_RCC_GetSysClockFreq+0x324>
 8001694:	a201      	add	r2, pc, #4	; (adr r2, 800169c <HAL_RCC_GetSysClockFreq+0x30>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016d1 	.word	0x080016d1
 80016a0:	08001991 	.word	0x08001991
 80016a4:	08001991 	.word	0x08001991
 80016a8:	08001991 	.word	0x08001991
 80016ac:	080016d7 	.word	0x080016d7
 80016b0:	08001991 	.word	0x08001991
 80016b4:	08001991 	.word	0x08001991
 80016b8:	08001991 	.word	0x08001991
 80016bc:	080016dd 	.word	0x080016dd
 80016c0:	08001991 	.word	0x08001991
 80016c4:	08001991 	.word	0x08001991
 80016c8:	08001991 	.word	0x08001991
 80016cc:	08001839 	.word	0x08001839
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016d0:	4bb4      	ldr	r3, [pc, #720]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x338>)
 80016d2:	613b      	str	r3, [r7, #16]
       break;
 80016d4:	e15f      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016d6:	4bb4      	ldr	r3, [pc, #720]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x33c>)
 80016d8:	613b      	str	r3, [r7, #16]
      break;
 80016da:	e15c      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016dc:	4bb0      	ldr	r3, [pc, #704]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016e4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e6:	4bae      	ldr	r3, [pc, #696]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d04a      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f2:	4bab      	ldr	r3, [pc, #684]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	099b      	lsrs	r3, r3, #6
 80016f8:	f04f 0400 	mov.w	r4, #0
 80016fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	ea03 0501 	and.w	r5, r3, r1
 8001708:	ea04 0602 	and.w	r6, r4, r2
 800170c:	4629      	mov	r1, r5
 800170e:	4632      	mov	r2, r6
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	f04f 0400 	mov.w	r4, #0
 8001718:	0154      	lsls	r4, r2, #5
 800171a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800171e:	014b      	lsls	r3, r1, #5
 8001720:	4619      	mov	r1, r3
 8001722:	4622      	mov	r2, r4
 8001724:	1b49      	subs	r1, r1, r5
 8001726:	eb62 0206 	sbc.w	r2, r2, r6
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	f04f 0400 	mov.w	r4, #0
 8001732:	0194      	lsls	r4, r2, #6
 8001734:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001738:	018b      	lsls	r3, r1, #6
 800173a:	1a5b      	subs	r3, r3, r1
 800173c:	eb64 0402 	sbc.w	r4, r4, r2
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	00e2      	lsls	r2, r4, #3
 800174a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800174e:	00d9      	lsls	r1, r3, #3
 8001750:	460b      	mov	r3, r1
 8001752:	4614      	mov	r4, r2
 8001754:	195b      	adds	r3, r3, r5
 8001756:	eb44 0406 	adc.w	r4, r4, r6
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	0262      	lsls	r2, r4, #9
 8001764:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001768:	0259      	lsls	r1, r3, #9
 800176a:	460b      	mov	r3, r1
 800176c:	4614      	mov	r4, r2
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f04f 0400 	mov.w	r4, #0
 8001778:	461a      	mov	r2, r3
 800177a:	4623      	mov	r3, r4
 800177c:	f7fe fda0 	bl	80002c0 <__aeabi_uldivmod>
 8001780:	4603      	mov	r3, r0
 8001782:	460c      	mov	r4, r1
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e049      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001788:	4b85      	ldr	r3, [pc, #532]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	f04f 0400 	mov.w	r4, #0
 8001792:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	ea03 0501 	and.w	r5, r3, r1
 800179e:	ea04 0602 	and.w	r6, r4, r2
 80017a2:	4629      	mov	r1, r5
 80017a4:	4632      	mov	r2, r6
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	f04f 0400 	mov.w	r4, #0
 80017ae:	0154      	lsls	r4, r2, #5
 80017b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017b4:	014b      	lsls	r3, r1, #5
 80017b6:	4619      	mov	r1, r3
 80017b8:	4622      	mov	r2, r4
 80017ba:	1b49      	subs	r1, r1, r5
 80017bc:	eb62 0206 	sbc.w	r2, r2, r6
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	f04f 0400 	mov.w	r4, #0
 80017c8:	0194      	lsls	r4, r2, #6
 80017ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017ce:	018b      	lsls	r3, r1, #6
 80017d0:	1a5b      	subs	r3, r3, r1
 80017d2:	eb64 0402 	sbc.w	r4, r4, r2
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	00e2      	lsls	r2, r4, #3
 80017e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017e4:	00d9      	lsls	r1, r3, #3
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	195b      	adds	r3, r3, r5
 80017ec:	eb44 0406 	adc.w	r4, r4, r6
 80017f0:	f04f 0100 	mov.w	r1, #0
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	02a2      	lsls	r2, r4, #10
 80017fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017fe:	0299      	lsls	r1, r3, #10
 8001800:	460b      	mov	r3, r1
 8001802:	4614      	mov	r4, r2
 8001804:	4618      	mov	r0, r3
 8001806:	4621      	mov	r1, r4
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f04f 0400 	mov.w	r4, #0
 800180e:	461a      	mov	r2, r3
 8001810:	4623      	mov	r3, r4
 8001812:	f7fe fd55 	bl	80002c0 <__aeabi_uldivmod>
 8001816:	4603      	mov	r3, r0
 8001818:	460c      	mov	r4, r1
 800181a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800181c:	4b60      	ldr	r3, [pc, #384]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	3301      	adds	r3, #1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	613b      	str	r3, [r7, #16]
      break;
 8001836:	e0ae      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001838:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001840:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001842:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d04a      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184e:	4b54      	ldr	r3, [pc, #336]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	099b      	lsrs	r3, r3, #6
 8001854:	f04f 0400 	mov.w	r4, #0
 8001858:	f240 11ff 	movw	r1, #511	; 0x1ff
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	ea03 0501 	and.w	r5, r3, r1
 8001864:	ea04 0602 	and.w	r6, r4, r2
 8001868:	4629      	mov	r1, r5
 800186a:	4632      	mov	r2, r6
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	f04f 0400 	mov.w	r4, #0
 8001874:	0154      	lsls	r4, r2, #5
 8001876:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800187a:	014b      	lsls	r3, r1, #5
 800187c:	4619      	mov	r1, r3
 800187e:	4622      	mov	r2, r4
 8001880:	1b49      	subs	r1, r1, r5
 8001882:	eb62 0206 	sbc.w	r2, r2, r6
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	f04f 0400 	mov.w	r4, #0
 800188e:	0194      	lsls	r4, r2, #6
 8001890:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001894:	018b      	lsls	r3, r1, #6
 8001896:	1a5b      	subs	r3, r3, r1
 8001898:	eb64 0402 	sbc.w	r4, r4, r2
 800189c:	f04f 0100 	mov.w	r1, #0
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	00e2      	lsls	r2, r4, #3
 80018a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018aa:	00d9      	lsls	r1, r3, #3
 80018ac:	460b      	mov	r3, r1
 80018ae:	4614      	mov	r4, r2
 80018b0:	195b      	adds	r3, r3, r5
 80018b2:	eb44 0406 	adc.w	r4, r4, r6
 80018b6:	f04f 0100 	mov.w	r1, #0
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	0262      	lsls	r2, r4, #9
 80018c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018c4:	0259      	lsls	r1, r3, #9
 80018c6:	460b      	mov	r3, r1
 80018c8:	4614      	mov	r4, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	4621      	mov	r1, r4
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f04f 0400 	mov.w	r4, #0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	f7fe fcf2 	bl	80002c0 <__aeabi_uldivmod>
 80018dc:	4603      	mov	r3, r0
 80018de:	460c      	mov	r4, r1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e049      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	099b      	lsrs	r3, r3, #6
 80018ea:	f04f 0400 	mov.w	r4, #0
 80018ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	ea03 0501 	and.w	r5, r3, r1
 80018fa:	ea04 0602 	and.w	r6, r4, r2
 80018fe:	4629      	mov	r1, r5
 8001900:	4632      	mov	r2, r6
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	f04f 0400 	mov.w	r4, #0
 800190a:	0154      	lsls	r4, r2, #5
 800190c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001910:	014b      	lsls	r3, r1, #5
 8001912:	4619      	mov	r1, r3
 8001914:	4622      	mov	r2, r4
 8001916:	1b49      	subs	r1, r1, r5
 8001918:	eb62 0206 	sbc.w	r2, r2, r6
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	f04f 0400 	mov.w	r4, #0
 8001924:	0194      	lsls	r4, r2, #6
 8001926:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800192a:	018b      	lsls	r3, r1, #6
 800192c:	1a5b      	subs	r3, r3, r1
 800192e:	eb64 0402 	sbc.w	r4, r4, r2
 8001932:	f04f 0100 	mov.w	r1, #0
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	00e2      	lsls	r2, r4, #3
 800193c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001940:	00d9      	lsls	r1, r3, #3
 8001942:	460b      	mov	r3, r1
 8001944:	4614      	mov	r4, r2
 8001946:	195b      	adds	r3, r3, r5
 8001948:	eb44 0406 	adc.w	r4, r4, r6
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	02a2      	lsls	r2, r4, #10
 8001956:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800195a:	0299      	lsls	r1, r3, #10
 800195c:	460b      	mov	r3, r1
 800195e:	4614      	mov	r4, r2
 8001960:	4618      	mov	r0, r3
 8001962:	4621      	mov	r1, r4
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f04f 0400 	mov.w	r4, #0
 800196a:	461a      	mov	r2, r3
 800196c:	4623      	mov	r3, r4
 800196e:	f7fe fca7 	bl	80002c0 <__aeabi_uldivmod>
 8001972:	4603      	mov	r3, r0
 8001974:	460c      	mov	r4, r1
 8001976:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	0f1b      	lsrs	r3, r3, #28
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	613b      	str	r3, [r7, #16]
      break;
 800198e:	e002      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x338>)
 8001992:	613b      	str	r3, [r7, #16]
      break;
 8001994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001996:	693b      	ldr	r3, [r7, #16]
}
 8001998:	4618      	mov	r0, r3
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	007a1200 	.word	0x007a1200

080019ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8083 	beq.w	8001acc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019c6:	4b95      	ldr	r3, [pc, #596]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d019      	beq.n	8001a06 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019d2:	4b92      	ldr	r3, [pc, #584]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d106      	bne.n	80019ec <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019de:	4b8f      	ldr	r3, [pc, #572]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ea:	d00c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ec:	4b8b      	ldr	r3, [pc, #556]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	d112      	bne.n	8001a1e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f8:	4b88      	ldr	r3, [pc, #544]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a04:	d10b      	bne.n	8001a1e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a06:	4b85      	ldr	r3, [pc, #532]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d05b      	beq.n	8001aca <HAL_RCC_OscConfig+0x11e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d157      	bne.n	8001aca <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e216      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x8a>
 8001a28:	4b7c      	ldr	r3, [pc, #496]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a7b      	ldr	r2, [pc, #492]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e01d      	b.n	8001a72 <HAL_RCC_OscConfig+0xc6>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3e:	d10c      	bne.n	8001a5a <HAL_RCC_OscConfig+0xae>
 8001a40:	4b76      	ldr	r3, [pc, #472]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a75      	ldr	r2, [pc, #468]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a72      	ldr	r2, [pc, #456]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e00b      	b.n	8001a72 <HAL_RCC_OscConfig+0xc6>
 8001a5a:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6f      	ldr	r2, [pc, #444]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b6d      	ldr	r3, [pc, #436]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6c      	ldr	r2, [pc, #432]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d013      	beq.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7fe fe07 	bl	800068c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a82:	f7fe fe03 	bl	800068c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	; 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e1db      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a94:	4b61      	ldr	r3, [pc, #388]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0xd6>
 8001aa0:	e014      	b.n	8001acc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7fe fdf3 	bl	800068c <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aaa:	f7fe fdef 	bl	800068c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	; 0x64
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1c7      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abc:	4b57      	ldr	r3, [pc, #348]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0xfe>
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d06f      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d017      	beq.n	8001b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001af0:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afc:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d11c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b08:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d116      	bne.n	8001b42 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b14:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_OscConfig+0x180>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e18f      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4938      	ldr	r1, [pc, #224]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b40:	e03a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d020      	beq.n	8001b8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7fe fd9c 	bl	800068c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b58:	f7fe fd98 	bl	800068c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e170      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4925      	ldr	r1, [pc, #148]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
 8001b8a:	e015      	b.n	8001bb8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7fe fd7b 	bl	800068c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7fe fd77 	bl	800068c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e14f      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d037      	beq.n	8001c34 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d016      	beq.n	8001bfa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x278>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7fe fd5b 	bl	800068c <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bda:	f7fe fd57 	bl	800068c <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e12f      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x22e>
 8001bf8:	e01c      	b.n	8001c34 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_OscConfig+0x278>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7fe fd44 	bl	800068c <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c06:	e00f      	b.n	8001c28 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7fe fd40 	bl	800068c <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d908      	bls.n	8001c28 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e118      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	42470000 	.word	0x42470000
 8001c24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	4b8a      	ldr	r3, [pc, #552]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e9      	bne.n	8001c08 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8097 	beq.w	8001d70 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b83      	ldr	r3, [pc, #524]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b7f      	ldr	r3, [pc, #508]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a7e      	ldr	r2, [pc, #504]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b7c      	ldr	r3, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7e:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a75      	ldr	r2, [pc, #468]	; (8001e58 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7fe fcff 	bl	800068c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7fe fcfb 	bl	800068c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0d3      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b6c      	ldr	r3, [pc, #432]	; (8001e58 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x31a>
 8001cb8:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a65      	ldr	r2, [pc, #404]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	e01c      	b.n	8001d00 <HAL_RCC_OscConfig+0x354>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x33c>
 8001cce:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a60      	ldr	r2, [pc, #384]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a5d      	ldr	r2, [pc, #372]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0x354>
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a59      	ldr	r2, [pc, #356]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cfa:	f023 0304 	bic.w	r3, r3, #4
 8001cfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d015      	beq.n	8001d34 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7fe fcc0 	bl	800068c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7fe fcbc 	bl	800068c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e092      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ee      	beq.n	8001d10 <HAL_RCC_OscConfig+0x364>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7fe fcaa 	bl	800068c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7fe fca6 	bl	800068c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e07c      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ee      	bne.n	8001d3c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	4a3a      	ldr	r2, [pc, #232]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d068      	beq.n	8001e4a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d060      	beq.n	8001e46 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d145      	bne.n	8001e18 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_RCC_OscConfig+0x4b0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7fe fc7b 	bl	800068c <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7fe fc77 	bl	800068c <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e04f      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	019b      	lsls	r3, r3, #6
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	061b      	lsls	r3, r3, #24
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	071b      	lsls	r3, r3, #28
 8001de4:	491b      	ldr	r1, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_RCC_OscConfig+0x4b0>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7fe fc4c 	bl	800068c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fc48 	bl	800068c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e020      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x44c>
 8001e16:	e018      	b.n	8001e4a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_RCC_OscConfig+0x4b0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fc35 	bl	800068c <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe fc31 	bl	800068c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e009      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x47a>
 8001e44:	e001      	b.n	8001e4a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	42470060 	.word	0x42470060

08001e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e03f      	b.n	8001ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f001 fbd2 	bl	8003630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	; 0x24
 8001e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f90b 	bl	80020c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b088      	sub	sp, #32
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	f040 8083 	bne.w	8002022 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_UART_Transmit+0x2e>
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e07b      	b.n	8002024 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_UART_Transmit+0x40>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e074      	b.n	8002024 <HAL_UART_Transmit+0x12a>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2221      	movs	r2, #33	; 0x21
 8001f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fb9c 	bl	800068c <HAL_GetTick>
 8001f54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	88fa      	ldrh	r2, [r7, #6]
 8001f5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	88fa      	ldrh	r2, [r7, #6]
 8001f60:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f62:	e042      	b.n	8001fea <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7a:	d122      	bne.n	8001fc2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f850 	bl	800202c <UART_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e046      	b.n	8002024 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fa8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	e017      	b.n	8001fea <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	e013      	b.n	8001fea <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f82d 	bl	800202c <UART_WaitOnFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e023      	b.n	8002024 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	60ba      	str	r2, [r7, #8]
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1b7      	bne.n	8001f64 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2140      	movs	r1, #64	; 0x40
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f814 	bl	800202c <UART_WaitOnFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e00a      	b.n	8002024 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002022:	2302      	movs	r3, #2
  }
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800203c:	e02c      	b.n	8002098 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d028      	beq.n	8002098 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <UART_WaitOnFlagUntilTimeout+0x30>
 800204c:	f7fe fb1e 	bl	800068c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	429a      	cmp	r2, r3
 800205a:	d21d      	bcs.n	8002098 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800206a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e00f      	b.n	80020b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4013      	ands	r3, r2
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d0c3      	beq.n	800203e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002100:	f023 030c 	bic.w	r3, r3, #12
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	68f9      	ldr	r1, [r7, #12]
 800210a:	430b      	orrs	r3, r1
 800210c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800212c:	f040 80e4 	bne.w	80022f8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4aab      	ldr	r2, [pc, #684]	; (80023e4 <UART_SetConfig+0x324>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <UART_SetConfig+0x84>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4aaa      	ldr	r2, [pc, #680]	; (80023e8 <UART_SetConfig+0x328>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d16c      	bne.n	800221e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002144:	f7ff fa7e 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 8002148:	4602      	mov	r2, r0
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	009a      	lsls	r2, r3, #2
 8002152:	441a      	add	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	4aa3      	ldr	r2, [pc, #652]	; (80023ec <UART_SetConfig+0x32c>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	011c      	lsls	r4, r3, #4
 8002168:	f7ff fa6c 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 800216c:	4602      	mov	r2, r0
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009a      	lsls	r2, r3, #2
 8002176:	441a      	add	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002182:	f7ff fa5f 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 8002186:	4602      	mov	r2, r0
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	441a      	add	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	4a93      	ldr	r2, [pc, #588]	; (80023ec <UART_SetConfig+0x32c>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2264      	movs	r2, #100	; 0x64
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	1aeb      	subs	r3, r5, r3
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	3332      	adds	r3, #50	; 0x32
 80021b0:	4a8e      	ldr	r2, [pc, #568]	; (80023ec <UART_SetConfig+0x32c>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021be:	441c      	add	r4, r3
 80021c0:	f7ff fa40 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009a      	lsls	r2, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fbb2 f5f3 	udiv	r5, r2, r3
 80021da:	f7ff fa33 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 80021de:	4602      	mov	r2, r0
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	009a      	lsls	r2, r3, #2
 80021e8:	441a      	add	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	4a7d      	ldr	r2, [pc, #500]	; (80023ec <UART_SetConfig+0x32c>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2264      	movs	r2, #100	; 0x64
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	1aeb      	subs	r3, r5, r3
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	3332      	adds	r3, #50	; 0x32
 8002208:	4a78      	ldr	r2, [pc, #480]	; (80023ec <UART_SetConfig+0x32c>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	f003 0207 	and.w	r2, r3, #7
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4422      	add	r2, r4
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	e154      	b.n	80024c8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800221e:	f7ff f9fd 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8002222:	4602      	mov	r2, r0
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	009a      	lsls	r2, r3, #2
 800222c:	441a      	add	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	4a6c      	ldr	r2, [pc, #432]	; (80023ec <UART_SetConfig+0x32c>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	011c      	lsls	r4, r3, #4
 8002242:	f7ff f9eb 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8002246:	4602      	mov	r2, r0
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	009a      	lsls	r2, r3, #2
 8002250:	441a      	add	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fbb2 f5f3 	udiv	r5, r2, r3
 800225c:	f7ff f9de 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8002260:	4602      	mov	r2, r0
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	009a      	lsls	r2, r3, #2
 800226a:	441a      	add	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4a5d      	ldr	r2, [pc, #372]	; (80023ec <UART_SetConfig+0x32c>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	2264      	movs	r2, #100	; 0x64
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	1aeb      	subs	r3, r5, r3
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	3332      	adds	r3, #50	; 0x32
 800228a:	4a58      	ldr	r2, [pc, #352]	; (80023ec <UART_SetConfig+0x32c>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002298:	441c      	add	r4, r3
 800229a:	f7ff f9bf 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80022b4:	f7ff f9b2 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	009a      	lsls	r2, r3, #2
 80022c2:	441a      	add	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4a47      	ldr	r2, [pc, #284]	; (80023ec <UART_SetConfig+0x32c>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	2264      	movs	r2, #100	; 0x64
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	1aeb      	subs	r3, r5, r3
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	3332      	adds	r3, #50	; 0x32
 80022e2:	4a42      	ldr	r2, [pc, #264]	; (80023ec <UART_SetConfig+0x32c>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	f003 0207 	and.w	r2, r3, #7
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4422      	add	r2, r4
 80022f4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80022f6:	e0e7      	b.n	80024c8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a39      	ldr	r2, [pc, #228]	; (80023e4 <UART_SetConfig+0x324>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <UART_SetConfig+0x24c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a38      	ldr	r2, [pc, #224]	; (80023e8 <UART_SetConfig+0x328>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d171      	bne.n	80023f0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800230c:	f7ff f99a 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 8002310:	4602      	mov	r2, r0
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	441a      	add	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4a31      	ldr	r2, [pc, #196]	; (80023ec <UART_SetConfig+0x32c>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	011c      	lsls	r4, r3, #4
 8002330:	f7ff f988 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 8002334:	4602      	mov	r2, r0
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	009a      	lsls	r2, r3, #2
 800233e:	441a      	add	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	fbb2 f5f3 	udiv	r5, r2, r3
 800234a:	f7ff f97b 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 800234e:	4602      	mov	r2, r0
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	009a      	lsls	r2, r3, #2
 8002358:	441a      	add	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	4a21      	ldr	r2, [pc, #132]	; (80023ec <UART_SetConfig+0x32c>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2264      	movs	r2, #100	; 0x64
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	1aeb      	subs	r3, r5, r3
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	3332      	adds	r3, #50	; 0x32
 8002378:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <UART_SetConfig+0x32c>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002384:	441c      	add	r4, r3
 8002386:	f7ff f95d 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 800238a:	4602      	mov	r2, r0
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	009a      	lsls	r2, r3, #2
 8002394:	441a      	add	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	fbb2 f5f3 	udiv	r5, r2, r3
 80023a0:	f7ff f950 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009a      	lsls	r2, r3, #2
 80023ae:	441a      	add	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <UART_SetConfig+0x32c>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	2264      	movs	r2, #100	; 0x64
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	1aeb      	subs	r3, r5, r3
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	3332      	adds	r3, #50	; 0x32
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <UART_SetConfig+0x32c>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	f003 020f 	and.w	r2, r3, #15
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4422      	add	r2, r4
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	e071      	b.n	80024c8 <UART_SetConfig+0x408>
 80023e4:	40011000 	.word	0x40011000
 80023e8:	40011400 	.word	0x40011400
 80023ec:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023f0:	f7ff f914 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009a      	lsls	r2, r3, #2
 80023fe:	441a      	add	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <UART_SetConfig+0x410>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	011c      	lsls	r4, r3, #4
 8002414:	f7ff f902 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8002418:	4602      	mov	r2, r0
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	009a      	lsls	r2, r3, #2
 8002422:	441a      	add	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	fbb2 f5f3 	udiv	r5, r2, r3
 800242e:	f7ff f8f5 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8002432:	4602      	mov	r2, r0
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	009a      	lsls	r2, r3, #2
 800243c:	441a      	add	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <UART_SetConfig+0x410>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2264      	movs	r2, #100	; 0x64
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	1aeb      	subs	r3, r5, r3
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	3332      	adds	r3, #50	; 0x32
 800245c:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <UART_SetConfig+0x410>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002468:	441c      	add	r4, r3
 800246a:	f7ff f8d7 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 800246e:	4602      	mov	r2, r0
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009a      	lsls	r2, r3, #2
 8002478:	441a      	add	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fbb2 f5f3 	udiv	r5, r2, r3
 8002484:	f7ff f8ca 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8002488:	4602      	mov	r2, r0
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	009a      	lsls	r2, r3, #2
 8002492:	441a      	add	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <UART_SetConfig+0x410>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	2264      	movs	r2, #100	; 0x64
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	1aeb      	subs	r3, r5, r3
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	3332      	adds	r3, #50	; 0x32
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <UART_SetConfig+0x410>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	f003 020f 	and.w	r2, r3, #15
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4422      	add	r2, r4
 80024c4:	609a      	str	r2, [r3, #8]
}
 80024c6:	e7ff      	b.n	80024c8 <UART_SetConfig+0x408>
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bdb0      	pop	{r4, r5, r7, pc}
 80024d0:	51eb851f 	.word	0x51eb851f

080024d4 <delay>:
 *
 * \param t		Number of "nop" cycles
 *
 * \return void
 */		
inline void delay(uint32_t t) {
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	for (; t; t--) __asm("nop");
 80024dc:	e003      	b.n	80024e6 <delay+0x12>
 80024de:	bf00      	nop
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f8      	bne.n	80024de <delay+0xa>
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <GPIO_Init>:
 *
 * \param
 *
 * \return void
 */
void GPIO_Init(uint32_t mode) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d003      	beq.n	800250e <GPIO_Init+0x16>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 8081 	bne.w	8002610 <GPIO_Init+0x118>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <GPIO_Init+0x120>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a40      	ldr	r2, [pc, #256]	; (8002618 <GPIO_Init+0x120>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <GPIO_Init+0x120>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <GPIO_Init+0x120>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a39      	ldr	r2, [pc, #228]	; (8002618 <GPIO_Init+0x120>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <GPIO_Init+0x120>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	4b33      	ldr	r3, [pc, #204]	; (8002618 <GPIO_Init+0x120>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a32      	ldr	r2, [pc, #200]	; (8002618 <GPIO_Init+0x120>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <GPIO_Init+0x120>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8002562:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002566:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4619      	mov	r1, r3
 800257a:	4828      	ldr	r0, [pc, #160]	; (800261c <GPIO_Init+0x124>)
 800257c:	f7fe fd64 	bl	8001048 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 8002580:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8002584:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4821      	ldr	r0, [pc, #132]	; (8002620 <GPIO_Init+0x128>)
 800259a:	f7fe fd55 	bl	8001048 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	481b      	ldr	r0, [pc, #108]	; (8002624 <GPIO_Init+0x12c>)
 80025b6:	f7fe fd47 	bl	8001048 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 80025ba:	2313      	movs	r3, #19
 80025bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025be:	2301      	movs	r3, #1
 80025c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4812      	ldr	r0, [pc, #72]	; (800261c <GPIO_Init+0x124>)
 80025d2:	f7fe fd39 	bl	8001048 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025d6:	2301      	movs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	2301      	movs	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <GPIO_Init+0x128>)
 80025ee:	f7fe fd2b 	bl	8001048 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025f2:	2302      	movs	r3, #2
 80025f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002602:	f107 0314 	add.w	r3, r7, #20
 8002606:	4619      	mov	r1, r3
 8002608:	4806      	ldr	r0, [pc, #24]	; (8002624 <GPIO_Init+0x12c>)
 800260a:	f7fe fd1d 	bl	8001048 <HAL_GPIO_Init>
 800260e:	e000      	b.n	8002612 <GPIO_Init+0x11a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8002610:	bf00      	nop
}
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	40020000 	.word	0x40020000
 8002620:	40020400 	.word	0x40020400
 8002624:	40020800 	.word	0x40020800

08002628 <LCD_Write8>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline void LCD_Write8(uint8_t data) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <LCD_Write8+0xa4>)
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800263a:	4013      	ands	r3, r2
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	0252      	lsls	r2, r2, #9
 8002640:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002644:	431a      	orrs	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264e:	431a      	orrs	r2, r3
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	491c      	ldr	r1, [pc, #112]	; (80026cc <LCD_Write8+0xa4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <LCD_Write8+0xa8>)
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8002666:	4013      	ands	r3, r2
 8002668:	79fa      	ldrb	r2, [r7, #7]
 800266a:	f002 0208 	and.w	r2, r2, #8
 800266e:	431a      	orrs	r2, r3
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	431a      	orrs	r2, r3
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	105b      	asrs	r3, r3, #1
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	431a      	orrs	r2, r3
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	4910      	ldr	r1, [pc, #64]	; (80026d0 <LCD_Write8+0xa8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <LCD_Write8+0xac>)
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800269a:	4013      	ands	r3, r2
 800269c:	79fa      	ldrb	r2, [r7, #7]
 800269e:	0192      	lsls	r2, r2, #6
 80026a0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80026a4:	490b      	ldr	r1, [pc, #44]	; (80026d4 <LCD_Write8+0xac>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <LCD_Write8+0xa4>)
 80026ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b0:	619a      	str	r2, [r3, #24]
 80026b2:	2002      	movs	r0, #2
 80026b4:	f7ff ff0e 	bl	80024d4 <delay>
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <LCD_Write8+0xa4>)
 80026ba:	2202      	movs	r2, #2
 80026bc:	619a      	str	r2, [r3, #24]
 80026be:	2002      	movs	r0, #2
 80026c0:	f7ff ff08 	bl	80024d4 <delay>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40020400 	.word	0x40020400
 80026d4:	40020800 	.word	0x40020800

080026d8 <LCD_Write16Register16>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	460a      	mov	r2, r1
 80026e2:	80fb      	strh	r3, [r7, #6]
 80026e4:	4613      	mov	r3, r2
 80026e6:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <LCD_Write16Register16+0x58>)
 80026ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026ee:	619a      	str	r2, [r3, #24]
	LCD_Write8(a >> 8);
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff95 	bl	8002628 <LCD_Write8>
	LCD_Write8(a);
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff90 	bl	8002628 <LCD_Write8>
	LCD_CD_DATA();
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <LCD_Write16Register16+0x58>)
 800270a:	2210      	movs	r2, #16
 800270c:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 800270e:	88bb      	ldrh	r3, [r7, #4]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	b29b      	uxth	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff86 	bl	8002628 <LCD_Write8>
	LCD_Write8(d);
 800271c:	88bb      	ldrh	r3, [r7, #4]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff81 	bl	8002628 <LCD_Write8>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40020000 	.word	0x40020000

08002734 <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <LCD_Init+0xf4>)
 800273c:	22f0      	movs	r2, #240	; 0xf0
 800273e:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8002740:	4b3a      	ldr	r3, [pc, #232]	; (800282c <LCD_Init+0xf8>)
 8002742:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002746:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8002748:	4b39      	ldr	r3, [pc, #228]	; (8002830 <LCD_Init+0xfc>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 800274e:	4b39      	ldr	r3, [pc, #228]	; (8002834 <LCD_Init+0x100>)
 8002750:	2200      	movs	r2, #0
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	4b37      	ldr	r3, [pc, #220]	; (8002834 <LCD_Init+0x100>)
 8002756:	f9b3 2000 	ldrsh.w	r2, [r3]
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <LCD_Init+0x104>)
 800275c:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <LCD_Init+0x108>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <LCD_Init+0x10c>)
 8002766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800276a:	801a      	strh	r2, [r3, #0]
 800276c:	4b34      	ldr	r3, [pc, #208]	; (8002840 <LCD_Init+0x10c>)
 800276e:	881a      	ldrh	r2, [r3, #0]
 8002770:	4b34      	ldr	r3, [pc, #208]	; (8002844 <LCD_Init+0x110>)
 8002772:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8002774:	4b34      	ldr	r3, [pc, #208]	; (8002848 <LCD_Init+0x114>)
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]

	GPIO_Init(GPIO_MODE_OUTPUT_PP);
 800277a:	2001      	movs	r0, #1
 800277c:	f7ff febc 	bl	80024f8 <GPIO_Init>

	LCD_Reset();
 8002780:	f000 f96c 	bl	8002a5c <LCD_Reset>
	HAL_Delay(50);
 8002784:	2032      	movs	r0, #50	; 0x32
 8002786:	f7fd ff8d 	bl	80006a4 <HAL_Delay>

	LCD_CS_ACTIVE();
 800278a:	4b30      	ldr	r3, [pc, #192]	; (800284c <LCD_Init+0x118>)
 800278c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002790:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined (ILI9328)
	uint8_t i = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8002796:	e01d      	b.n	80027d4 <LCD_Init+0xa0>
		a = ILI932x_regValues[i++];
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	71fa      	strb	r2, [r7, #7]
 800279e:	461a      	mov	r2, r3
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <LCD_Init+0x11c>)
 80027a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027a6:	80bb      	strh	r3, [r7, #4]
		d = ILI932x_regValues[i++];
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	71fa      	strb	r2, [r7, #7]
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <LCD_Init+0x11c>)
 80027b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027b6:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 80027b8:	88bb      	ldrh	r3, [r7, #4]
 80027ba:	2bff      	cmp	r3, #255	; 0xff
 80027bc:	d104      	bne.n	80027c8 <LCD_Init+0x94>
			HAL_Delay(d);
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd ff6f 	bl	80006a4 <HAL_Delay>
 80027c6:	e005      	b.n	80027d4 <LCD_Init+0xa0>
		} else {
			LCD_Write16Register16(a, d);
 80027c8:	887a      	ldrh	r2, [r7, #2]
 80027ca:	88bb      	ldrh	r3, [r7, #4]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff82 	bl	80026d8 <LCD_Write16Register16>
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	2b65      	cmp	r3, #101	; 0x65
 80027d8:	d9de      	bls.n	8002798 <LCD_Init+0x64>
		}
	}
	LCD_SetRotation(m_rotation);
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <LCD_Init+0xfc>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fa18 	bl	8002c14 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <LCD_Init+0xf4>)
 80027e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <LCD_Init+0xf8>)
 80027f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2100      	movs	r1, #0
 80027fe:	2000      	movs	r0, #0
 8002800:	f000 f976 	bl	8002af0 <LCD_SetAddrWindow>
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif

	LCD_CS_IDLE();
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <LCD_Init+0x118>)
 8002806:	2201      	movs	r2, #1
 8002808:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 800280a:	2000      	movs	r0, #0
 800280c:	f000 f8e4 	bl	80029d8 <LCD_FillScreen>
	LCD_SetTextSize(0);
 8002810:	2000      	movs	r0, #0
 8002812:	f000 fc1f 	bl	8003054 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 8002816:	2100      	movs	r1, #0
 8002818:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800281c:	f000 fc34 	bl	8003088 <LCD_SetTextColor>
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000098 	.word	0x20000098
 800282c:	2000009a 	.word	0x2000009a
 8002830:	200000a5 	.word	0x200000a5
 8002834:	2000009c 	.word	0x2000009c
 8002838:	2000009e 	.word	0x2000009e
 800283c:	200000a4 	.word	0x200000a4
 8002840:	200000a2 	.word	0x200000a2
 8002844:	200000a0 	.word	0x200000a0
 8002848:	200000a6 	.word	0x200000a6
 800284c:	40020400 	.word	0x40020400
 8002850:	08004490 	.word	0x08004490

08002854 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	80fb      	strh	r3, [r7, #6]
 800285e:	460b      	mov	r3, r1
 8002860:	80bb      	strh	r3, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8002866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db51      	blt.n	8002912 <LCD_DrawPixel+0xbe>
 800286e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	db4d      	blt.n	8002912 <LCD_DrawPixel+0xbe>
 8002876:	4b29      	ldr	r3, [pc, #164]	; (800291c <LCD_DrawPixel+0xc8>)
 8002878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002880:	429a      	cmp	r2, r3
 8002882:	da46      	bge.n	8002912 <LCD_DrawPixel+0xbe>
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <LCD_DrawPixel+0xcc>)
 8002886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	da3f      	bge.n	8002912 <LCD_DrawPixel+0xbe>

	LCD_CS_ACTIVE();
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <LCD_DrawPixel+0xd0>)
 8002894:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002898:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	int16_t t;
	switch (m_rotation) {
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <LCD_DrawPixel+0xd4>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d00d      	beq.n	80028be <LCD_DrawPixel+0x6a>
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d017      	beq.n	80028d6 <LCD_DrawPixel+0x82>
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d120      	bne.n	80028ec <LCD_DrawPixel+0x98>
	case 1:
		t = x;
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 80028ae:	88bb      	ldrh	r3, [r7, #4]
 80028b0:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	80fb      	strh	r3, [r7, #6]
		y = t;
 80028b8:	89fb      	ldrh	r3, [r7, #14]
 80028ba:	80bb      	strh	r3, [r7, #4]
		break;
 80028bc:	e016      	b.n	80028ec <LCD_DrawPixel+0x98>
	case 2:
		x = TFTWIDTH - 1 - x;
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 80028c8:	88bb      	ldrh	r3, [r7, #4]
 80028ca:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80028ce:	3301      	adds	r3, #1
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	80bb      	strh	r3, [r7, #4]
		break;
 80028d4:	e00a      	b.n	80028ec <LCD_DrawPixel+0x98>
	case 3:
		t = x;
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	81fb      	strh	r3, [r7, #14]
		x = y;
 80028da:	88bb      	ldrh	r3, [r7, #4]
 80028dc:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 80028de:	89fb      	ldrh	r3, [r7, #14]
 80028e0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80028e4:	3301      	adds	r3, #1
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	80bb      	strh	r3, [r7, #4]
		break;
 80028ea:	bf00      	nop
	}
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	4619      	mov	r1, r3
 80028f0:	2020      	movs	r0, #32
 80028f2:	f7ff fef1 	bl	80026d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 80028f6:	88bb      	ldrh	r3, [r7, #4]
 80028f8:	4619      	mov	r1, r3
 80028fa:	2021      	movs	r0, #33	; 0x21
 80028fc:	f7ff feec 	bl	80026d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	4619      	mov	r1, r3
 8002904:	2022      	movs	r0, #34	; 0x22
 8002906:	f7ff fee7 	bl	80026d8 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif

	LCD_CS_IDLE();
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <LCD_DrawPixel+0xd0>)
 800290c:	2201      	movs	r2, #1
 800290e:	619a      	str	r2, [r3, #24]
 8002910:	e000      	b.n	8002914 <LCD_DrawPixel+0xc0>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8002912:	bf00      	nop
}
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000098 	.word	0x20000098
 8002920:	2000009a 	.word	0x2000009a
 8002924:	40020400 	.word	0x40020400
 8002928:	200000a5 	.word	0x200000a5

0800292c <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	80fb      	strh	r3, [r7, #6]
#if defined(SSD1297)
	uint8_t red = LCD_Color565_to_R(color);
	uint8_t green = LCD_Color565_to_G(color);
	uint8_t blue = LCD_Color565_to_B(color);
#else
	uint8_t hi = color >> 8, lo = color;
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	b29b      	uxth	r3, r3
 800293e:	73fb      	strb	r3, [r7, #15]
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	73bb      	strb	r3, [r7, #14]
#endif

	LCD_CS_ACTIVE();
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <LCD_Flood+0xa4>)
 8002946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800294a:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	4619      	mov	r1, r3
 8002950:	2022      	movs	r0, #34	; 0x22
 8002952:	f7ff fec1 	bl	80026d8 <LCD_Write16Register16>
#elif defined(HX8357D)
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif
	len--;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	3b01      	subs	r3, #1
 800295a:	603b      	str	r3, [r7, #0]
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
#else
	if (hi == lo) {
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	7bbb      	ldrb	r3, [r7, #14]
 8002960:	429a      	cmp	r2, r3
 8002962:	d128      	bne.n	80029b6 <LCD_Flood+0x8a>
#endif
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (len--) {
 8002964:	e019      	b.n	800299a <LCD_Flood+0x6e>
#if defined(SSD1297)
			LCD_WR_STROBE();
#endif
			LCD_WR_STROBE();
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <LCD_Flood+0xa8>)
 8002968:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800296c:	619a      	str	r2, [r3, #24]
 800296e:	2002      	movs	r0, #2
 8002970:	f7ff fdb0 	bl	80024d4 <delay>
 8002974:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <LCD_Flood+0xa8>)
 8002976:	2202      	movs	r2, #2
 8002978:	619a      	str	r2, [r3, #24]
 800297a:	2002      	movs	r0, #2
 800297c:	f7ff fdaa 	bl	80024d4 <delay>
			LCD_WR_STROBE();
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <LCD_Flood+0xa8>)
 8002982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002986:	619a      	str	r2, [r3, #24]
 8002988:	2002      	movs	r0, #2
 800298a:	f7ff fda3 	bl	80024d4 <delay>
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <LCD_Flood+0xa8>)
 8002990:	2202      	movs	r2, #2
 8002992:	619a      	str	r2, [r3, #24]
 8002994:	2002      	movs	r0, #2
 8002996:	f7ff fd9d 	bl	80024d4 <delay>
		while (len--) {
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	603a      	str	r2, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e0      	bne.n	8002966 <LCD_Flood+0x3a>
 80029a4:	e00c      	b.n	80029c0 <LCD_Flood+0x94>
#if defined(SSD1297)
			LCD_Write8(red);
			LCD_Write8(green);
			LCD_Write8(blue);
#else
			LCD_Write8(hi);
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fe3d 	bl	8002628 <LCD_Write8>
			LCD_Write8(lo);
 80029ae:	7bbb      	ldrb	r3, [r7, #14]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fe39 	bl	8002628 <LCD_Write8>
		while (len--) {
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	603a      	str	r2, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f2      	bne.n	80029a6 <LCD_Flood+0x7a>
#endif
		}
	}

	LCD_CS_IDLE();
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <LCD_Flood+0xa4>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	619a      	str	r2, [r3, #24]
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40020400 	.word	0x40020400
 80029d4:	40020000 	.word	0x40020000

080029d8 <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <LCD_FillScreen+0x7c>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d00d      	beq.n	8002a06 <LCD_FillScreen+0x2e>
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d011      	beq.n	8002a12 <LCD_FillScreen+0x3a>
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d004      	beq.n	80029fc <LCD_FillScreen+0x24>
	default:
		x = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	81fb      	strh	r3, [r7, #14]
		y = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	81bb      	strh	r3, [r7, #12]
		break;
 80029fa:	e010      	b.n	8002a1e <LCD_FillScreen+0x46>
	case 1:
		x = TFTWIDTH - 1;
 80029fc:	23ef      	movs	r3, #239	; 0xef
 80029fe:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	81bb      	strh	r3, [r7, #12]
		break;
 8002a04:	e00b      	b.n	8002a1e <LCD_FillScreen+0x46>
	case 2:
		x = TFTWIDTH - 1;
 8002a06:	23ef      	movs	r3, #239	; 0xef
 8002a08:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8002a0a:	f240 133f 	movw	r3, #319	; 0x13f
 8002a0e:	81bb      	strh	r3, [r7, #12]
		break;
 8002a10:	e005      	b.n	8002a1e <LCD_FillScreen+0x46>
	case 3:
		x = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8002a16:	f240 133f 	movw	r3, #319	; 0x13f
 8002a1a:	81bb      	strh	r3, [r7, #12]
		break;
 8002a1c:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <LCD_FillScreen+0x80>)
 8002a20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a24:	619a      	str	r2, [r3, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	2020      	movs	r0, #32
 8002a2c:	f7ff fe54 	bl	80026d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8002a30:	89bb      	ldrh	r3, [r7, #12]
 8002a32:	4619      	mov	r1, r3
 8002a34:	2021      	movs	r0, #33	; 0x21
 8002a36:	f7ff fe4f 	bl	80026d8 <LCD_Write16Register16>
#endif
	LCD_CS_IDLE();
 8002a3a:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <LCD_FillScreen+0x80>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	619a      	str	r2, [r3, #24]
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ff70 	bl	800292c <LCD_Flood>
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	200000a5 	.word	0x200000a5
 8002a58:	40020400 	.word	0x40020400

08002a5c <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <LCD_Reset+0x88>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <LCD_Reset+0x8c>)
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <LCD_Reset+0x8c>)
 8002a70:	2202      	movs	r2, #2
 8002a72:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 8002a74:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <LCD_Reset+0x8c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	619a      	str	r2, [r3, #24]

	LCD_RST_ACTIVE();
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <LCD_Reset+0x90>)
 8002a7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a80:	619a      	str	r2, [r3, #24]
	HAL_Delay(2);
 8002a82:	2002      	movs	r0, #2
 8002a84:	f7fd fe0e 	bl	80006a4 <HAL_Delay>
	LCD_RST_IDLE();
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <LCD_Reset+0x90>)
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 8002a8e:	2078      	movs	r0, #120	; 0x78
 8002a90:	f7fd fe08 	bl	80006a4 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <LCD_Reset+0x88>)
 8002a96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a9a:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <LCD_Reset+0x8c>)
 8002a9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002aa2:	619a      	str	r2, [r3, #24]
	LCD_Write8(0x00);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7ff fdbf 	bl	8002628 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) LCD_WR_STROBE(); // Three extra 0x00s
 8002aaa:	2300      	movs	r3, #0
 8002aac:	71fb      	strb	r3, [r7, #7]
 8002aae:	e00f      	b.n	8002ad0 <LCD_Reset+0x74>
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <LCD_Reset+0x8c>)
 8002ab2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ab6:	619a      	str	r2, [r3, #24]
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f7ff fd0b 	bl	80024d4 <delay>
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <LCD_Reset+0x8c>)
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	619a      	str	r2, [r3, #24]
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f7ff fd05 	bl	80024d4 <delay>
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	3301      	adds	r3, #1
 8002ace:	71fb      	strb	r3, [r7, #7]
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d9ec      	bls.n	8002ab0 <LCD_Reset+0x54>
	LCD_CS_IDLE();
 8002ad6:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <LCD_Reset+0x88>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	619a      	str	r2, [r3, #24]
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40020400 	.word	0x40020400
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40020800 	.word	0x40020800

08002af0 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4604      	mov	r4, r0
 8002af8:	4608      	mov	r0, r1
 8002afa:	4611      	mov	r1, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	4623      	mov	r3, r4
 8002b00:	80fb      	strh	r3, [r7, #6]
 8002b02:	4603      	mov	r3, r0
 8002b04:	80bb      	strh	r3, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	807b      	strh	r3, [r7, #2]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 8002b0e:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <LCD_SetAddrWindow+0x11c>)
 8002b10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b14:	619a      	str	r2, [r3, #24]
		done in any direction, the current screen rotation is applied
		because some users find it disconcerting when a fill does not
		occur top-to-bottom.
	*/
	int x, y, t;
	switch (m_rotation) {
 8002b16:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <LCD_SetAddrWindow+0x120>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d01c      	beq.n	8002b58 <LCD_SetAddrWindow+0x68>
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d037      	beq.n	8002b92 <LCD_SetAddrWindow+0xa2>
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d004      	beq.n	8002b30 <LCD_SetAddrWindow+0x40>
	default:
		x = x1;
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	617b      	str	r3, [r7, #20]
		y = y1;
 8002b2a:	88bb      	ldrh	r3, [r7, #4]
 8002b2c:	613b      	str	r3, [r7, #16]
		break;
 8002b2e:	e046      	b.n	8002bbe <LCD_SetAddrWindow+0xce>
	case 1:
		t = y1;
 8002b30:	88bb      	ldrh	r3, [r7, #4]
 8002b32:	60fb      	str	r3, [r7, #12]
		y1 = x1;
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	80bb      	strh	r3, [r7, #4]
		x1 = TFTWIDTH - 1 - y2;
 8002b38:	883b      	ldrh	r3, [r7, #0]
 8002b3a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002b3e:	80fb      	strh	r3, [r7, #6]
		y2 = x2;
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	803b      	strh	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002b4c:	807b      	strh	r3, [r7, #2]
		x = x2;
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	617b      	str	r3, [r7, #20]
		y = y1;
 8002b52:	88bb      	ldrh	r3, [r7, #4]
 8002b54:	613b      	str	r3, [r7, #16]
		break;
 8002b56:	e032      	b.n	8002bbe <LCD_SetAddrWindow+0xce>
	case 2:
		t = x1;
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	60fb      	str	r3, [r7, #12]
		x1 = TFTWIDTH - 1 - x2;
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002b62:	80fb      	strh	r3, [r7, #6]
		x2 = TFTWIDTH - 1 - t;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002b6c:	807b      	strh	r3, [r7, #2]
		t = y1;
 8002b6e:	88bb      	ldrh	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - y2;
 8002b72:	883b      	ldrh	r3, [r7, #0]
 8002b74:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002b78:	3301      	adds	r3, #1
 8002b7a:	80bb      	strh	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002b84:	3301      	adds	r3, #1
 8002b86:	803b      	strh	r3, [r7, #0]
		x = x2;
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	617b      	str	r3, [r7, #20]
		y = y2;
 8002b8c:	883b      	ldrh	r3, [r7, #0]
 8002b8e:	613b      	str	r3, [r7, #16]
		break;
 8002b90:	e015      	b.n	8002bbe <LCD_SetAddrWindow+0xce>
	case 3:
		t = x1;
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	60fb      	str	r3, [r7, #12]
		x1 = y1;
 8002b96:	88bb      	ldrh	r3, [r7, #4]
 8002b98:	80fb      	strh	r3, [r7, #6]
		y1 = TFTHEIGHT - 1 - x2;
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	80bb      	strh	r3, [r7, #4]
		x2 = y2;
 8002ba4:	883b      	ldrh	r3, [r7, #0]
 8002ba6:	807b      	strh	r3, [r7, #2]
		y2 = TFTHEIGHT - 1 - t;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	803b      	strh	r3, [r7, #0]
		x = x1;
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	617b      	str	r3, [r7, #20]
		y = y2;
 8002bb8:	883b      	ldrh	r3, [r7, #0]
 8002bba:	613b      	str	r3, [r7, #16]
		break;
 8002bbc:	bf00      	nop
	}
#if defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V)
	LCD_Write16Register16(ILI932X_HOR_START_AD, x1); // Set address window
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	2050      	movs	r0, #80	; 0x50
 8002bc4:	f7ff fd88 	bl	80026d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_HOR_END_AD, x2);
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	2051      	movs	r0, #81	; 0x51
 8002bce:	f7ff fd83 	bl	80026d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_START_AD, y1);
 8002bd2:	88bb      	ldrh	r3, [r7, #4]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	2052      	movs	r0, #82	; 0x52
 8002bd8:	f7ff fd7e 	bl	80026d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_END_AD, y2);
 8002bdc:	883b      	ldrh	r3, [r7, #0]
 8002bde:	4619      	mov	r1, r3
 8002be0:	2053      	movs	r0, #83	; 0x53
 8002be2:	f7ff fd79 	bl	80026d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x); // Set address counter to top left
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	4619      	mov	r1, r3
 8002bec:	2020      	movs	r0, #32
 8002bee:	f7ff fd73 	bl	80026d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	2021      	movs	r0, #33	; 0x21
 8002bfa:	f7ff fd6d 	bl	80026d8 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
	}
#endif
	LCD_CS_IDLE();
 8002bfe:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <LCD_SetAddrWindow+0x11c>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	619a      	str	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	200000a5 	.word	0x200000a5

08002c14 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <LCD_SetRotation+0xb4>)
 8002c28:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8002c2a:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <LCD_SetRotation+0xb4>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d009      	beq.n	8002c46 <LCD_SetRotation+0x32>
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d007      	beq.n	8002c46 <LCD_SetRotation+0x32>
	default:
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <LCD_SetRotation+0xb8>)
 8002c38:	22f0      	movs	r2, #240	; 0xf0
 8002c3a:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 8002c3c:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <LCD_SetRotation+0xbc>)
 8002c3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c42:	801a      	strh	r2, [r3, #0]
		break;
 8002c44:	e007      	b.n	8002c56 <LCD_SetRotation+0x42>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <LCD_SetRotation+0xb8>)
 8002c48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c4c:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <LCD_SetRotation+0xbc>)
 8002c50:	22f0      	movs	r2, #240	; 0xf0
 8002c52:	801a      	strh	r2, [r3, #0]
		break;
 8002c54:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <LCD_SetRotation+0xc0>)
 8002c58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c5c:	619a      	str	r2, [r3, #24]
#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
    uint16_t t;
    switch(m_rotation) {
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <LCD_SetRotation+0xb4>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d00b      	beq.n	8002c7e <LCD_SetRotation+0x6a>
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d00d      	beq.n	8002c86 <LCD_SetRotation+0x72>
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d003      	beq.n	8002c76 <LCD_SetRotation+0x62>
		default: t = 0x1030; break;
 8002c6e:	f241 0330 	movw	r3, #4144	; 0x1030
 8002c72:	81fb      	strh	r3, [r7, #14]
 8002c74:	e00b      	b.n	8002c8e <LCD_SetRotation+0x7a>
		case 1: t = 0x1028; break;
 8002c76:	f241 0328 	movw	r3, #4136	; 0x1028
 8002c7a:	81fb      	strh	r3, [r7, #14]
 8002c7c:	e007      	b.n	8002c8e <LCD_SetRotation+0x7a>
		case 2: t = 0x1000; break;
 8002c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c82:	81fb      	strh	r3, [r7, #14]
 8002c84:	e003      	b.n	8002c8e <LCD_SetRotation+0x7a>
		case 3: t = 0x1018; break;
 8002c86:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c8a:	81fb      	strh	r3, [r7, #14]
 8002c8c:	bf00      	nop
    }
    LCD_Write16Register16(ILI932X_ENTRY_MOD, t); // MADCTL
 8002c8e:	89fb      	ldrh	r3, [r7, #14]
 8002c90:	4619      	mov	r1, r3
 8002c92:	2003      	movs	r0, #3
 8002c94:	f7ff fd20 	bl	80026d8 <LCD_Write16Register16>
    // For 932X, init default full-screen address window:
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <LCD_SetRotation+0xb8>)
 8002c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <LCD_SetRotation+0xbc>)
 8002ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7ff ff1c 	bl	8002af0 <LCD_SetAddrWindow>
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_CS_IDLE();
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <LCD_SetRotation+0xc0>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	619a      	str	r2, [r3, #24]
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200000a5 	.word	0x200000a5
 8002ccc:	20000098 	.word	0x20000098
 8002cd0:	2000009a 	.word	0x2000009a
 8002cd4:	40020400 	.word	0x40020400

08002cd8 <LCD_DrawChar>:
 * \param bg		Background color
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b08b      	sub	sp, #44	; 0x2c
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4604      	mov	r4, r0
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	80fb      	strh	r3, [r7, #6]
 8002cea:	4603      	mov	r3, r0
 8002cec:	80bb      	strh	r3, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	70fb      	strb	r3, [r7, #3]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
	uint8_t *pchar;
	uint32_t line = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 8002cfe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002d02:	4a65      	ldr	r2, [pc, #404]	; (8002e98 <LCD_DrawChar+0x1c0>)
 8002d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d08:	88db      	ldrh	r3, [r3, #6]
 8002d0a:	82fb      	strh	r3, [r7, #22]
	width = fonts[fontindex]->Width;
 8002d0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002d10:	4a61      	ldr	r2, [pc, #388]	; (8002e98 <LCD_DrawChar+0x1c0>)
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	889b      	ldrh	r3, [r3, #4]
 8002d18:	82bb      	strh	r3, [r7, #20]

	if ((x >= m_width) || // Clip right
 8002d1a:	4b60      	ldr	r3, [pc, #384]	; (8002e9c <LCD_DrawChar+0x1c4>)
 8002d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	f280 80b2 	bge.w	8002e8e <LCD_DrawChar+0x1b6>
		(y >= m_height) || // Clip bottom
 8002d2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <LCD_DrawChar+0x1c8>)
 8002d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8002d30:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f280 80aa 	bge.w	8002e8e <LCD_DrawChar+0x1b6>
		((x + width - 1) < 0) || // Clip left
 8002d3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d3e:	8abb      	ldrh	r3, [r7, #20]
 8002d40:	4413      	add	r3, r2
 8002d42:	3b01      	subs	r3, #1
		(y >= m_height) || // Clip bottom
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f2c0 80a2 	blt.w	8002e8e <LCD_DrawChar+0x1b6>
		((y + height - 1) < 0))   // Clip top
 8002d4a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d4e:	8afb      	ldrh	r3, [r7, #22]
 8002d50:	4413      	add	r3, r2
 8002d52:	3b01      	subs	r3, #1
		((x + width - 1) < 0) || // Clip left
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f2c0 809a 	blt.w	8002e8e <LCD_DrawChar+0x1b6>
		return;

	bytes = (width + 7) / 8;
 8002d5a:	8abb      	ldrh	r3, [r7, #20]
 8002d5c:	3307      	adds	r3, #7
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	da00      	bge.n	8002d64 <LCD_DrawChar+0x8c>
 8002d62:	3307      	adds	r3, #7
 8002d64:	10db      	asrs	r3, r3, #3
 8002d66:	827b      	strh	r3, [r7, #18]
	if (c < ' ') c = ' ';
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	2b1f      	cmp	r3, #31
 8002d6c:	d802      	bhi.n	8002d74 <LCD_DrawChar+0x9c>
 8002d6e:	2320      	movs	r3, #32
 8002d70:	70fb      	strb	r3, [r7, #3]
 8002d72:	e004      	b.n	8002d7e <LCD_DrawChar+0xa6>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	2b7e      	cmp	r3, #126	; 0x7e
 8002d78:	d901      	bls.n	8002d7e <LCD_DrawChar+0xa6>
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	3b20      	subs	r3, #32
 8002d82:	8afa      	ldrh	r2, [r7, #22]
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	8a7a      	ldrh	r2, [r7, #18]
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	61bb      	str	r3, [r7, #24]
	offset = 8 * bytes - width;
 8002d90:	8a7b      	ldrh	r3, [r7, #18]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	8abb      	ldrh	r3, [r7, #20]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	747b      	strb	r3, [r7, #17]

	for (uint32_t i = 0; i < height; i++) {
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
 8002da4:	e06e      	b.n	8002e84 <LCD_DrawChar+0x1ac>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 8002da6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002daa:	4a3b      	ldr	r2, [pc, #236]	; (8002e98 <LCD_DrawChar+0x1c0>)
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	441a      	add	r2, r3
 8002db6:	8abb      	ldrh	r3, [r7, #20]
 8002db8:	3307      	adds	r3, #7
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	da00      	bge.n	8002dc0 <LCD_DrawChar+0xe8>
 8002dbe:	3307      	adds	r3, #7
 8002dc0:	10db      	asrs	r3, r3, #3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	fb03 f301 	mul.w	r3, r3, r1
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
		switch (bytes) {
 8002dce:	8a7b      	ldrh	r3, [r7, #18]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d002      	beq.n	8002dda <LCD_DrawChar+0x102>
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d004      	beq.n	8002de2 <LCD_DrawChar+0x10a>
 8002dd8:	e00c      	b.n	8002df4 <LCD_DrawChar+0x11c>
		case 1:
			line = pchar[0];
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002de0:	e016      	b.n	8002e10 <LCD_DrawChar+0x138>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	3201      	adds	r2, #1
 8002dec:	7812      	ldrb	r2, [r2, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002df2:	e00d      	b.n	8002e10 <LCD_DrawChar+0x138>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	041a      	lsls	r2, r3, #16
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	4313      	orrs	r3, r2
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	3202      	adds	r2, #2
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002e0e:	bf00      	nop
		}
		for (uint32_t j = 0; j < width; j++) {
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	e029      	b.n	8002e6a <LCD_DrawChar+0x192>
			if (line & (1 << (width - j + offset - 1))) {
 8002e16:	8aba      	ldrh	r2, [r7, #20]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	1ad2      	subs	r2, r2, r3
 8002e1c:	7c7b      	ldrb	r3, [r7, #17]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b01      	subs	r3, #1
 8002e22:	2201      	movs	r2, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <LCD_DrawChar+0x174>
				LCD_DrawPixel((x + j), y, color);
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	4413      	add	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b21b      	sxth	r3, r3
 8002e3e:	883a      	ldrh	r2, [r7, #0]
 8002e40:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fd05 	bl	8002854 <LCD_DrawPixel>
 8002e4a:	e00b      	b.n	8002e64 <LCD_DrawChar+0x18c>
			} else {
				LCD_DrawPixel((x + j), y, bg);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	4413      	add	r3, r2
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002e5a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fcf8 	bl	8002854 <LCD_DrawPixel>
		for (uint32_t j = 0; j < width; j++) {
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	3301      	adds	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	8abb      	ldrh	r3, [r7, #20]
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3d1      	bcc.n	8002e16 <LCD_DrawChar+0x13e>
			}
		}
		y++;
 8002e72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	3301      	adds	r3, #1
 8002e82:	623b      	str	r3, [r7, #32]
 8002e84:	8afb      	ldrh	r3, [r7, #22]
 8002e86:	6a3a      	ldr	r2, [r7, #32]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d38c      	bcc.n	8002da6 <LCD_DrawChar+0xce>
 8002e8c:	e000      	b.n	8002e90 <LCD_DrawChar+0x1b8>
		return;
 8002e8e:	bf00      	nop
	}
}
 8002e90:	372c      	adds	r7, #44	; 0x2c
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd90      	pop	{r4, r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000010 	.word	0x20000010
 8002e9c:	20000098 	.word	0x20000098
 8002ea0:	2000009a 	.word	0x2000009a

08002ea4 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8002ea4:	b40f      	push	{r0, r1, r2, r3}
 8002ea6:	b5b0      	push	{r4, r5, r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8002eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb0:	60bb      	str	r3, [r7, #8]
	vsprintf(buf, fmt, lst);
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	6a39      	ldr	r1, [r7, #32]
 8002eb6:	4850      	ldr	r0, [pc, #320]	; (8002ff8 <LCD_Printf+0x154>)
 8002eb8:	f000 fc94 	bl	80037e4 <vsiprintf>
	va_end(lst);
	
	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 8002ebc:	4b4f      	ldr	r3, [pc, #316]	; (8002ffc <LCD_Printf+0x158>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b4f      	ldr	r3, [pc, #316]	; (8003000 <LCD_Printf+0x15c>)
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	88db      	ldrh	r3, [r3, #6]
 8002eca:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <LCD_Printf+0x158>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <LCD_Printf+0x15c>)
 8002ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed8:	889b      	ldrh	r3, [r3, #4]
 8002eda:	80bb      	strh	r3, [r7, #4]

	p = buf;
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <LCD_Printf+0x154>)
 8002ede:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8002ee0:	e07d      	b.n	8002fde <LCD_Printf+0x13a>
		if (*p == '\n') {
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b0a      	cmp	r3, #10
 8002ee8:	d10e      	bne.n	8002f08 <LCD_Printf+0x64>
			m_cursor_y += height;
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	4b45      	ldr	r3, [pc, #276]	; (8003004 <LCD_Printf+0x160>)
 8002ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	b21a      	sxth	r2, r3
 8002efc:	4b41      	ldr	r3, [pc, #260]	; (8003004 <LCD_Printf+0x160>)
 8002efe:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8002f00:	4b41      	ldr	r3, [pc, #260]	; (8003008 <LCD_Printf+0x164>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	801a      	strh	r2, [r3, #0]
 8002f06:	e067      	b.n	8002fd8 <LCD_Printf+0x134>
		} else if (*p == '\r') {
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b0d      	cmp	r3, #13
 8002f0e:	d103      	bne.n	8002f18 <LCD_Printf+0x74>
			m_cursor_x = 0;
 8002f10:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <LCD_Printf+0x164>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	e05f      	b.n	8002fd8 <LCD_Printf+0x134>
		} else if (*p == '\t') {
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b09      	cmp	r3, #9
 8002f1e:	d10d      	bne.n	8002f3c <LCD_Printf+0x98>
			m_cursor_x += width * 4;
 8002f20:	88bb      	ldrh	r3, [r7, #4]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4b37      	ldr	r3, [pc, #220]	; (8003008 <LCD_Printf+0x164>)
 8002f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	b21a      	sxth	r2, r3
 8002f36:	4b34      	ldr	r3, [pc, #208]	; (8003008 <LCD_Printf+0x164>)
 8002f38:	801a      	strh	r2, [r3, #0]
 8002f3a:	e04d      	b.n	8002fd8 <LCD_Printf+0x134>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
				LCD_Flood(m_textbgcolor, (long) m_width * height);
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 8002f3c:	4b31      	ldr	r3, [pc, #196]	; (8003004 <LCD_Printf+0x160>)
 8002f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b31      	ldr	r3, [pc, #196]	; (800300c <LCD_Printf+0x168>)
 8002f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	1acb      	subs	r3, r1, r3
 8002f52:	429a      	cmp	r2, r3
 8002f54:	db02      	blt.n	8002f5c <LCD_Printf+0xb8>
				m_cursor_y = 0;
 8002f56:	4b2b      	ldr	r3, [pc, #172]	; (8003004 <LCD_Printf+0x160>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
#endif
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 8002f5c:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <LCD_Printf+0x164>)
 8002f5e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002f62:	4b28      	ldr	r3, [pc, #160]	; (8003004 <LCD_Printf+0x160>)
 8002f64:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	781c      	ldrb	r4, [r3, #0]
 8002f6c:	4b28      	ldr	r3, [pc, #160]	; (8003010 <LCD_Printf+0x16c>)
 8002f6e:	881d      	ldrh	r5, [r3, #0]
 8002f70:	4b28      	ldr	r3, [pc, #160]	; (8003014 <LCD_Printf+0x170>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <LCD_Printf+0x158>)
 8002f76:	7812      	ldrb	r2, [r2, #0]
 8002f78:	9201      	str	r2, [sp, #4]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	4622      	mov	r2, r4
 8002f80:	f7ff feaa 	bl	8002cd8 <LCD_DrawChar>
			m_cursor_x += width;
 8002f84:	88bb      	ldrh	r3, [r7, #4]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <LCD_Printf+0x164>)
 8002f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <LCD_Printf+0x164>)
 8002f98:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <LCD_Printf+0x174>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01a      	beq.n	8002fd8 <LCD_Printf+0x134>
 8002fa2:	4b19      	ldr	r3, [pc, #100]	; (8003008 <LCD_Printf+0x164>)
 8002fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <LCD_Printf+0x178>)
 8002fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	88bb      	ldrh	r3, [r7, #4]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	1acb      	subs	r3, r1, r3
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	dd0d      	ble.n	8002fd8 <LCD_Printf+0x134>
				m_cursor_y += height;
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <LCD_Printf+0x160>)
 8002fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	b21a      	sxth	r2, r3
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <LCD_Printf+0x160>)
 8002fd0:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <LCD_Printf+0x164>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f47f af7d 	bne.w	8002ee2 <LCD_Printf+0x3e>
	}
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ff2:	b004      	add	sp, #16
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	200000a8 	.word	0x200000a8
 8002ffc:	200000a4 	.word	0x200000a4
 8003000:	20000010 	.word	0x20000010
 8003004:	2000009e 	.word	0x2000009e
 8003008:	2000009c 	.word	0x2000009c
 800300c:	2000009a 	.word	0x2000009a
 8003010:	200000a0 	.word	0x200000a0
 8003014:	200000a2 	.word	0x200000a2
 8003018:	200000a6 	.word	0x200000a6
 800301c:	20000098 	.word	0x20000098

08003020 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 *
 * \return void
 */
void LCD_SetCursor(uint16_t x, uint16_t y) {
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	460a      	mov	r2, r1
 800302a:	80fb      	strh	r3, [r7, #6]
 800302c:	4613      	mov	r3, r2
 800302e:	80bb      	strh	r3, [r7, #4]
	m_cursor_x = x;
 8003030:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <LCD_SetCursor+0x2c>)
 8003036:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8003038:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <LCD_SetCursor+0x30>)
 800303e:	801a      	strh	r2, [r3, #0]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	2000009c 	.word	0x2000009c
 8003050:	2000009e 	.word	0x2000009e

08003054 <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 800305e:	2201      	movs	r2, #1
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	4293      	cmp	r3, r2
 8003064:	d305      	bcc.n	8003072 <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 8003066:	2301      	movs	r3, #1
 8003068:	3b01      	subs	r3, #1
 800306a:	b2da      	uxtb	r2, r3
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <LCD_SetTextSize+0x30>)
 800306e:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 8003070:	e002      	b.n	8003078 <LCD_SetTextSize+0x24>
		m_font = s;
 8003072:	4a04      	ldr	r2, [pc, #16]	; (8003084 <LCD_SetTextSize+0x30>)
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	7013      	strb	r3, [r2, #0]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	200000a4 	.word	0x200000a4

08003088 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	460a      	mov	r2, r1
 8003092:	80fb      	strh	r3, [r7, #6]
 8003094:	4613      	mov	r3, r2
 8003096:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8003098:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <LCD_SetTextColor+0x28>)
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 800309e:	4a05      	ldr	r2, [pc, #20]	; (80030b4 <LCD_SetTextColor+0x2c>)
 80030a0:	88bb      	ldrh	r3, [r7, #4]
 80030a2:	8013      	strh	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	200000a0 	.word	0x200000a0
 80030b4:	200000a2 	.word	0x200000a2

080030b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80030be:	463b      	mov	r3, r7
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80030ca:	4b21      	ldr	r3, [pc, #132]	; (8003150 <MX_ADC1_Init+0x98>)
 80030cc:	4a21      	ldr	r2, [pc, #132]	; (8003154 <MX_ADC1_Init+0x9c>)
 80030ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80030d0:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <MX_ADC1_Init+0x98>)
 80030d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <MX_ADC1_Init+0x98>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <MX_ADC1_Init+0x98>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030e4:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <MX_ADC1_Init+0x98>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <MX_ADC1_Init+0x98>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <MX_ADC1_Init+0x98>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030f8:	4b15      	ldr	r3, [pc, #84]	; (8003150 <MX_ADC1_Init+0x98>)
 80030fa:	4a17      	ldr	r2, [pc, #92]	; (8003158 <MX_ADC1_Init+0xa0>)
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <MX_ADC1_Init+0x98>)
 8003100:	2200      	movs	r2, #0
 8003102:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <MX_ADC1_Init+0x98>)
 8003106:	2201      	movs	r2, #1
 8003108:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <MX_ADC1_Init+0x98>)
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003112:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <MX_ADC1_Init+0x98>)
 8003114:	2201      	movs	r2, #1
 8003116:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003118:	480d      	ldr	r0, [pc, #52]	; (8003150 <MX_ADC1_Init+0x98>)
 800311a:	f7fd fae5 	bl	80006e8 <HAL_ADC_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003124:	f000 f99a 	bl	800345c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003128:	230d      	movs	r3, #13
 800312a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800312c:	2301      	movs	r3, #1
 800312e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003134:	463b      	mov	r3, r7
 8003136:	4619      	mov	r1, r3
 8003138:	4805      	ldr	r0, [pc, #20]	; (8003150 <MX_ADC1_Init+0x98>)
 800313a:	f7fd fc71 	bl	8000a20 <HAL_ADC_ConfigChannel>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003144:	f000 f98a 	bl	800345c <Error_Handler>
  }

}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200001b8 	.word	0x200001b8
 8003154:	40012000 	.word	0x40012000
 8003158:	0f000001 	.word	0x0f000001

0800315c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_ADC_MspInit+0x7c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d127      	bne.n	80031ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <HAL_ADC_MspInit+0x80>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	4a15      	ldr	r2, [pc, #84]	; (80031dc <HAL_ADC_MspInit+0x80>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6453      	str	r3, [r2, #68]	; 0x44
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_ADC_MspInit+0x80>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <HAL_ADC_MspInit+0x80>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <HAL_ADC_MspInit+0x80>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <HAL_ADC_MspInit+0x80>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031b6:	2308      	movs	r3, #8
 80031b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ba:	2303      	movs	r3, #3
 80031bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	4619      	mov	r1, r3
 80031c8:	4805      	ldr	r0, [pc, #20]	; (80031e0 <HAL_ADC_MspInit+0x84>)
 80031ca:	f7fd ff3d 	bl	8001048 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80031ce:	bf00      	nop
 80031d0:	3728      	adds	r7, #40	; 0x28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40012000 	.word	0x40012000
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40020800 	.word	0x40020800

080031e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <MX_GPIO_Init+0xd0>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a2c      	ldr	r2, [pc, #176]	; (80032b4 <MX_GPIO_Init+0xd0>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <MX_GPIO_Init+0xd0>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <MX_GPIO_Init+0xd0>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a25      	ldr	r2, [pc, #148]	; (80032b4 <MX_GPIO_Init+0xd0>)
 8003220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <MX_GPIO_Init+0xd0>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <MX_GPIO_Init+0xd0>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <MX_GPIO_Init+0xd0>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <MX_GPIO_Init+0xd0>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <MX_GPIO_Init+0xd0>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <MX_GPIO_Init+0xd0>)
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <MX_GPIO_Init+0xd0>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800326a:	2200      	movs	r2, #0
 800326c:	2120      	movs	r1, #32
 800326e:	4812      	ldr	r0, [pc, #72]	; (80032b8 <MX_GPIO_Init+0xd4>)
 8003270:	f7fe f87c 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <MX_GPIO_Init+0xd8>)
 800327c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003282:	f107 0314 	add.w	r3, r7, #20
 8003286:	4619      	mov	r1, r3
 8003288:	480d      	ldr	r0, [pc, #52]	; (80032c0 <MX_GPIO_Init+0xdc>)
 800328a:	f7fd fedd 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800328e:	2320      	movs	r3, #32
 8003290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003292:	2301      	movs	r3, #1
 8003294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329a:	2300      	movs	r3, #0
 800329c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800329e:	f107 0314 	add.w	r3, r7, #20
 80032a2:	4619      	mov	r1, r3
 80032a4:	4804      	ldr	r0, [pc, #16]	; (80032b8 <MX_GPIO_Init+0xd4>)
 80032a6:	f7fd fecf 	bl	8001048 <HAL_GPIO_Init>

}
 80032aa:	bf00      	nop
 80032ac:	3728      	adds	r7, #40	; 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	10210000 	.word	0x10210000
 80032c0:	40020800 	.word	0x40020800

080032c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032ca:	f7fd f979 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032ce:	f000 f853 	bl	8003378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032d2:	f7ff ff87 	bl	80031e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80032d6:	f000 f981 	bl	80035dc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80032da:	f7ff feed 	bl	80030b8 <MX_ADC1_Init>
  LCD_Init();
 80032de:	f7ff fa29 	bl	8002734 <LCD_Init>
  /* USER CODE BEGIN 2 */
  uint8_t tx[] = "transmitting ";
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <main+0x9c>)
 80032e4:	463c      	mov	r4, r7
 80032e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032e8:	c407      	stmia	r4!, {r0, r1, r2}
 80032ea:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart2,tx, strlen((char *) tx), 100);
 80032ec:	463b      	mov	r3, r7
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fc ff8e 	bl	8000210 <strlen>
 80032f4:	4603      	mov	r3, r0
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	4639      	mov	r1, r7
 80032fa:	2364      	movs	r3, #100	; 0x64
 80032fc:	4819      	ldr	r0, [pc, #100]	; (8003364 <main+0xa0>)
 80032fe:	f7fe fdfc 	bl	8001efa <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  LCD_SetCursor(0 ,  0);
 8003302:	2100      	movs	r1, #0
 8003304:	2000      	movs	r0, #0
 8003306:	f7ff fe8b 	bl	8003020 <LCD_SetCursor>
	       	       LCD_Printf("transmitting .\n");
 800330a:	4817      	ldr	r0, [pc, #92]	; (8003368 <main+0xa4>)
 800330c:	f7ff fdca 	bl	8002ea4 <LCD_Printf>
	       	       HAL_Delay(1000);
 8003310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003314:	f7fd f9c6 	bl	80006a4 <HAL_Delay>
	       	       LCD_Printf("transmitting ..");
 8003318:	4814      	ldr	r0, [pc, #80]	; (800336c <main+0xa8>)
 800331a:	f7ff fdc3 	bl	8002ea4 <LCD_Printf>
	 HAL_ADC_Start(&hadc1);
 800331e:	4814      	ldr	r0, [pc, #80]	; (8003370 <main+0xac>)
 8003320:	f7fd fa26 	bl	8000770 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 100);
 8003324:	2164      	movs	r1, #100	; 0x64
 8003326:	4812      	ldr	r0, [pc, #72]	; (8003370 <main+0xac>)
 8003328:	f7fd fae8 	bl	80008fc <HAL_ADC_PollForConversion>
     sprintf(tx ," ASC == %d4 ", HAL_ADC_GetValue(&hadc1));
 800332c:	4810      	ldr	r0, [pc, #64]	; (8003370 <main+0xac>)
 800332e:	f7fd fb69 	bl	8000a04 <HAL_ADC_GetValue>
 8003332:	4602      	mov	r2, r0
 8003334:	463b      	mov	r3, r7
 8003336:	490f      	ldr	r1, [pc, #60]	; (8003374 <main+0xb0>)
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fa1d 	bl	8003778 <siprintf>
     HAL_UART_Transmit(&huart2,tx, strlen((char *) tx), 100);
 800333e:	463b      	mov	r3, r7
 8003340:	4618      	mov	r0, r3
 8003342:	f7fc ff65 	bl	8000210 <strlen>
 8003346:	4603      	mov	r3, r0
 8003348:	b29a      	uxth	r2, r3
 800334a:	4639      	mov	r1, r7
 800334c:	2364      	movs	r3, #100	; 0x64
 800334e:	4805      	ldr	r0, [pc, #20]	; (8003364 <main+0xa0>)
 8003350:	f7fe fdd3 	bl	8001efa <HAL_UART_Transmit>
     HAL_Delay(1000);
 8003354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003358:	f7fd f9a4 	bl	80006a4 <HAL_Delay>
  {
 800335c:	e7d1      	b.n	8003302 <main+0x3e>
 800335e:	bf00      	nop
 8003360:	0800400c 	.word	0x0800400c
 8003364:	20000200 	.word	0x20000200
 8003368:	08003fdc 	.word	0x08003fdc
 800336c:	08003fec 	.word	0x08003fec
 8003370:	200001b8 	.word	0x200001b8
 8003374:	08003ffc 	.word	0x08003ffc

08003378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b094      	sub	sp, #80	; 0x50
 800337c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800337e:	f107 031c 	add.w	r3, r7, #28
 8003382:	2234      	movs	r2, #52	; 0x34
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f9ee 	bl	8003768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	2300      	movs	r3, #0
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <SystemClock_Config+0xdc>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	4a2b      	ldr	r2, [pc, #172]	; (8003454 <SystemClock_Config+0xdc>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	; 0x40
 80033ac:	4b29      	ldr	r3, [pc, #164]	; (8003454 <SystemClock_Config+0xdc>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b8:	2300      	movs	r3, #0
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	4b26      	ldr	r3, [pc, #152]	; (8003458 <SystemClock_Config+0xe0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a25      	ldr	r2, [pc, #148]	; (8003458 <SystemClock_Config+0xe0>)
 80033c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <SystemClock_Config+0xe0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033d4:	2302      	movs	r3, #2
 80033d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033d8:	2301      	movs	r3, #1
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033dc:	2310      	movs	r3, #16
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e0:	2302      	movs	r3, #2
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033e4:	2300      	movs	r3, #0
 80033e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033e8:	2308      	movs	r3, #8
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80033ec:	23b4      	movs	r3, #180	; 0xb4
 80033ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033f0:	2302      	movs	r3, #2
 80033f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80033f4:	2302      	movs	r3, #2
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80033f8:	2302      	movs	r3, #2
 80033fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fad3 	bl	80019ac <HAL_RCC_OscConfig>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800340c:	f000 f826 	bl	800345c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003410:	f7fd ffc6 	bl	80013a0 <HAL_PWREx_EnableOverDrive>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800341a:	f000 f81f 	bl	800345c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800341e:	230f      	movs	r3, #15
 8003420:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003422:	2302      	movs	r3, #2
 8003424:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800342a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800342e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003434:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	2105      	movs	r1, #5
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd ffff 	bl	8001440 <HAL_RCC_ClockConfig>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003448:	f000 f808 	bl	800345c <Error_Handler>
  }
}
 800344c:	bf00      	nop
 800344e:	3750      	adds	r7, #80	; 0x50
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	40007000 	.word	0x40007000

0800345c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_MspInit+0x4c>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <HAL_MspInit+0x4c>)
 800347c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <HAL_MspInit+0x4c>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	603b      	str	r3, [r7, #0]
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_MspInit+0x4c>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <HAL_MspInit+0x4c>)
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_MspInit+0x4c>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034aa:	2007      	movs	r0, #7
 80034ac:	f7fd fd98 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800

080034bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ce:	e7fe      	b.n	80034ce <HardFault_Handler+0x4>

080034d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <MemManage_Handler+0x4>

080034d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034da:	e7fe      	b.n	80034da <BusFault_Handler+0x4>

080034dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e0:	e7fe      	b.n	80034e0 <UsageFault_Handler+0x4>

080034e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003510:	f7fd f8a8 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}

08003518 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <_sbrk+0x50>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <_sbrk+0x16>
		heap_end = &end;
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <_sbrk+0x50>)
 800352a:	4a10      	ldr	r2, [pc, #64]	; (800356c <_sbrk+0x54>)
 800352c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <_sbrk+0x50>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <_sbrk+0x50>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	466a      	mov	r2, sp
 800353e:	4293      	cmp	r3, r2
 8003540:	d907      	bls.n	8003552 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003542:	f000 f8e7 	bl	8003714 <__errno>
 8003546:	4602      	mov	r2, r0
 8003548:	230c      	movs	r3, #12
 800354a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	e006      	b.n	8003560 <_sbrk+0x48>
	}

	heap_end += incr;
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <_sbrk+0x50>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	4a03      	ldr	r2, [pc, #12]	; (8003568 <_sbrk+0x50>)
 800355c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200001a8 	.word	0x200001a8
 800356c:	20000248 	.word	0x20000248

08003570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <SystemInit+0x60>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <SystemInit+0x60>)
 800357c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <SystemInit+0x64>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <SystemInit+0x64>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <SystemInit+0x64>)
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <SystemInit+0x64>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <SystemInit+0x64>)
 800359c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80035a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <SystemInit+0x64>)
 80035a8:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <SystemInit+0x68>)
 80035aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <SystemInit+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <SystemInit+0x64>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <SystemInit+0x64>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <SystemInit+0x60>)
 80035c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035c4:	609a      	str	r2, [r3, #8]
#endif
}
 80035c6:	bf00      	nop
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00
 80035d4:	40023800 	.word	0x40023800
 80035d8:	24003010 	.word	0x24003010

080035dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <MX_USART2_UART_Init+0x4c>)
 80035e2:	4a12      	ldr	r2, [pc, #72]	; (800362c <MX_USART2_UART_Init+0x50>)
 80035e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <MX_USART2_UART_Init+0x4c>)
 80035e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <MX_USART2_UART_Init+0x4c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <MX_USART2_UART_Init+0x4c>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <MX_USART2_UART_Init+0x4c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <MX_USART2_UART_Init+0x4c>)
 8003602:	220c      	movs	r2, #12
 8003604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <MX_USART2_UART_Init+0x4c>)
 8003608:	2200      	movs	r2, #0
 800360a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <MX_USART2_UART_Init+0x4c>)
 800360e:	2200      	movs	r2, #0
 8003610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003612:	4805      	ldr	r0, [pc, #20]	; (8003628 <MX_USART2_UART_Init+0x4c>)
 8003614:	f7fe fc24 	bl	8001e60 <HAL_UART_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800361e:	f7ff ff1d 	bl	800345c <Error_Handler>
  }

}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000200 	.word	0x20000200
 800362c:	40004400 	.word	0x40004400

08003630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_UART_MspInit+0x84>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d12b      	bne.n	80036aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_UART_MspInit+0x88>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_UART_MspInit+0x88>)
 800365c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003660:	6413      	str	r3, [r2, #64]	; 0x40
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_UART_MspInit+0x88>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_UART_MspInit+0x88>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <HAL_UART_MspInit+0x88>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <HAL_UART_MspInit+0x88>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800368a:	230c      	movs	r3, #12
 800368c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003692:	2301      	movs	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003696:	2303      	movs	r3, #3
 8003698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800369a:	2307      	movs	r3, #7
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	4619      	mov	r1, r3
 80036a4:	4805      	ldr	r0, [pc, #20]	; (80036bc <HAL_UART_MspInit+0x8c>)
 80036a6:	f7fd fccf 	bl	8001048 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036aa:	bf00      	nop
 80036ac:	3728      	adds	r7, #40	; 0x28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40004400 	.word	0x40004400
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40020000 	.word	0x40020000

080036c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036c6:	e003      	b.n	80036d0 <LoopCopyDataInit>

080036c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036ce:	3104      	adds	r1, #4

080036d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036d0:	480b      	ldr	r0, [pc, #44]	; (8003700 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036d2:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036d8:	d3f6      	bcc.n	80036c8 <CopyDataInit>
  ldr  r2, =_sbss
 80036da:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036dc:	e002      	b.n	80036e4 <LoopFillZerobss>

080036de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036e0:	f842 3b04 	str.w	r3, [r2], #4

080036e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036e8:	d3f9      	bcc.n	80036de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036ea:	f7ff ff41 	bl	8003570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ee:	f000 f817 	bl	8003720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036f2:	f7ff fde7 	bl	80032c4 <main>
  bx  lr    
 80036f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80036fc:	080045b8 	.word	0x080045b8
  ldr  r0, =_sdata
 8003700:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003704:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003708:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800370c:	20000244 	.word	0x20000244

08003710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003710:	e7fe      	b.n	8003710 <ADC_IRQHandler>
	...

08003714 <__errno>:
 8003714:	4b01      	ldr	r3, [pc, #4]	; (800371c <__errno+0x8>)
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000018 	.word	0x20000018

08003720 <__libc_init_array>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4e0d      	ldr	r6, [pc, #52]	; (8003758 <__libc_init_array+0x38>)
 8003724:	4c0d      	ldr	r4, [pc, #52]	; (800375c <__libc_init_array+0x3c>)
 8003726:	1ba4      	subs	r4, r4, r6
 8003728:	10a4      	asrs	r4, r4, #2
 800372a:	2500      	movs	r5, #0
 800372c:	42a5      	cmp	r5, r4
 800372e:	d109      	bne.n	8003744 <__libc_init_array+0x24>
 8003730:	4e0b      	ldr	r6, [pc, #44]	; (8003760 <__libc_init_array+0x40>)
 8003732:	4c0c      	ldr	r4, [pc, #48]	; (8003764 <__libc_init_array+0x44>)
 8003734:	f000 fc46 	bl	8003fc4 <_init>
 8003738:	1ba4      	subs	r4, r4, r6
 800373a:	10a4      	asrs	r4, r4, #2
 800373c:	2500      	movs	r5, #0
 800373e:	42a5      	cmp	r5, r4
 8003740:	d105      	bne.n	800374e <__libc_init_array+0x2e>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003748:	4798      	blx	r3
 800374a:	3501      	adds	r5, #1
 800374c:	e7ee      	b.n	800372c <__libc_init_array+0xc>
 800374e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003752:	4798      	blx	r3
 8003754:	3501      	adds	r5, #1
 8003756:	e7f2      	b.n	800373e <__libc_init_array+0x1e>
 8003758:	080045b0 	.word	0x080045b0
 800375c:	080045b0 	.word	0x080045b0
 8003760:	080045b0 	.word	0x080045b0
 8003764:	080045b4 	.word	0x080045b4

08003768 <memset>:
 8003768:	4402      	add	r2, r0
 800376a:	4603      	mov	r3, r0
 800376c:	4293      	cmp	r3, r2
 800376e:	d100      	bne.n	8003772 <memset+0xa>
 8003770:	4770      	bx	lr
 8003772:	f803 1b01 	strb.w	r1, [r3], #1
 8003776:	e7f9      	b.n	800376c <memset+0x4>

08003778 <siprintf>:
 8003778:	b40e      	push	{r1, r2, r3}
 800377a:	b500      	push	{lr}
 800377c:	b09c      	sub	sp, #112	; 0x70
 800377e:	ab1d      	add	r3, sp, #116	; 0x74
 8003780:	9002      	str	r0, [sp, #8]
 8003782:	9006      	str	r0, [sp, #24]
 8003784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003788:	4809      	ldr	r0, [pc, #36]	; (80037b0 <siprintf+0x38>)
 800378a:	9107      	str	r1, [sp, #28]
 800378c:	9104      	str	r1, [sp, #16]
 800378e:	4909      	ldr	r1, [pc, #36]	; (80037b4 <siprintf+0x3c>)
 8003790:	f853 2b04 	ldr.w	r2, [r3], #4
 8003794:	9105      	str	r1, [sp, #20]
 8003796:	6800      	ldr	r0, [r0, #0]
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	a902      	add	r1, sp, #8
 800379c:	f000 f886 	bl	80038ac <_svfiprintf_r>
 80037a0:	9b02      	ldr	r3, [sp, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	b01c      	add	sp, #112	; 0x70
 80037a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037ac:	b003      	add	sp, #12
 80037ae:	4770      	bx	lr
 80037b0:	20000018 	.word	0x20000018
 80037b4:	ffff0208 	.word	0xffff0208

080037b8 <_vsiprintf_r>:
 80037b8:	b500      	push	{lr}
 80037ba:	b09b      	sub	sp, #108	; 0x6c
 80037bc:	9100      	str	r1, [sp, #0]
 80037be:	9104      	str	r1, [sp, #16]
 80037c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037c4:	9105      	str	r1, [sp, #20]
 80037c6:	9102      	str	r1, [sp, #8]
 80037c8:	4905      	ldr	r1, [pc, #20]	; (80037e0 <_vsiprintf_r+0x28>)
 80037ca:	9103      	str	r1, [sp, #12]
 80037cc:	4669      	mov	r1, sp
 80037ce:	f000 f86d 	bl	80038ac <_svfiprintf_r>
 80037d2:	9b00      	ldr	r3, [sp, #0]
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	b01b      	add	sp, #108	; 0x6c
 80037da:	f85d fb04 	ldr.w	pc, [sp], #4
 80037de:	bf00      	nop
 80037e0:	ffff0208 	.word	0xffff0208

080037e4 <vsiprintf>:
 80037e4:	4613      	mov	r3, r2
 80037e6:	460a      	mov	r2, r1
 80037e8:	4601      	mov	r1, r0
 80037ea:	4802      	ldr	r0, [pc, #8]	; (80037f4 <vsiprintf+0x10>)
 80037ec:	6800      	ldr	r0, [r0, #0]
 80037ee:	f7ff bfe3 	b.w	80037b8 <_vsiprintf_r>
 80037f2:	bf00      	nop
 80037f4:	20000018 	.word	0x20000018

080037f8 <__ssputs_r>:
 80037f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037fc:	688e      	ldr	r6, [r1, #8]
 80037fe:	429e      	cmp	r6, r3
 8003800:	4682      	mov	sl, r0
 8003802:	460c      	mov	r4, r1
 8003804:	4690      	mov	r8, r2
 8003806:	4699      	mov	r9, r3
 8003808:	d837      	bhi.n	800387a <__ssputs_r+0x82>
 800380a:	898a      	ldrh	r2, [r1, #12]
 800380c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003810:	d031      	beq.n	8003876 <__ssputs_r+0x7e>
 8003812:	6825      	ldr	r5, [r4, #0]
 8003814:	6909      	ldr	r1, [r1, #16]
 8003816:	1a6f      	subs	r7, r5, r1
 8003818:	6965      	ldr	r5, [r4, #20]
 800381a:	2302      	movs	r3, #2
 800381c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003820:	fb95 f5f3 	sdiv	r5, r5, r3
 8003824:	f109 0301 	add.w	r3, r9, #1
 8003828:	443b      	add	r3, r7
 800382a:	429d      	cmp	r5, r3
 800382c:	bf38      	it	cc
 800382e:	461d      	movcc	r5, r3
 8003830:	0553      	lsls	r3, r2, #21
 8003832:	d530      	bpl.n	8003896 <__ssputs_r+0x9e>
 8003834:	4629      	mov	r1, r5
 8003836:	f000 fb2b 	bl	8003e90 <_malloc_r>
 800383a:	4606      	mov	r6, r0
 800383c:	b950      	cbnz	r0, 8003854 <__ssputs_r+0x5c>
 800383e:	230c      	movs	r3, #12
 8003840:	f8ca 3000 	str.w	r3, [sl]
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800384a:	81a3      	strh	r3, [r4, #12]
 800384c:	f04f 30ff 	mov.w	r0, #4294967295
 8003850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003854:	463a      	mov	r2, r7
 8003856:	6921      	ldr	r1, [r4, #16]
 8003858:	f000 faa8 	bl	8003dac <memcpy>
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003866:	81a3      	strh	r3, [r4, #12]
 8003868:	6126      	str	r6, [r4, #16]
 800386a:	6165      	str	r5, [r4, #20]
 800386c:	443e      	add	r6, r7
 800386e:	1bed      	subs	r5, r5, r7
 8003870:	6026      	str	r6, [r4, #0]
 8003872:	60a5      	str	r5, [r4, #8]
 8003874:	464e      	mov	r6, r9
 8003876:	454e      	cmp	r6, r9
 8003878:	d900      	bls.n	800387c <__ssputs_r+0x84>
 800387a:	464e      	mov	r6, r9
 800387c:	4632      	mov	r2, r6
 800387e:	4641      	mov	r1, r8
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	f000 fa9e 	bl	8003dc2 <memmove>
 8003886:	68a3      	ldr	r3, [r4, #8]
 8003888:	1b9b      	subs	r3, r3, r6
 800388a:	60a3      	str	r3, [r4, #8]
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	441e      	add	r6, r3
 8003890:	6026      	str	r6, [r4, #0]
 8003892:	2000      	movs	r0, #0
 8003894:	e7dc      	b.n	8003850 <__ssputs_r+0x58>
 8003896:	462a      	mov	r2, r5
 8003898:	f000 fb54 	bl	8003f44 <_realloc_r>
 800389c:	4606      	mov	r6, r0
 800389e:	2800      	cmp	r0, #0
 80038a0:	d1e2      	bne.n	8003868 <__ssputs_r+0x70>
 80038a2:	6921      	ldr	r1, [r4, #16]
 80038a4:	4650      	mov	r0, sl
 80038a6:	f000 faa5 	bl	8003df4 <_free_r>
 80038aa:	e7c8      	b.n	800383e <__ssputs_r+0x46>

080038ac <_svfiprintf_r>:
 80038ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b0:	461d      	mov	r5, r3
 80038b2:	898b      	ldrh	r3, [r1, #12]
 80038b4:	061f      	lsls	r7, r3, #24
 80038b6:	b09d      	sub	sp, #116	; 0x74
 80038b8:	4680      	mov	r8, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	4616      	mov	r6, r2
 80038be:	d50f      	bpl.n	80038e0 <_svfiprintf_r+0x34>
 80038c0:	690b      	ldr	r3, [r1, #16]
 80038c2:	b96b      	cbnz	r3, 80038e0 <_svfiprintf_r+0x34>
 80038c4:	2140      	movs	r1, #64	; 0x40
 80038c6:	f000 fae3 	bl	8003e90 <_malloc_r>
 80038ca:	6020      	str	r0, [r4, #0]
 80038cc:	6120      	str	r0, [r4, #16]
 80038ce:	b928      	cbnz	r0, 80038dc <_svfiprintf_r+0x30>
 80038d0:	230c      	movs	r3, #12
 80038d2:	f8c8 3000 	str.w	r3, [r8]
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295
 80038da:	e0c8      	b.n	8003a6e <_svfiprintf_r+0x1c2>
 80038dc:	2340      	movs	r3, #64	; 0x40
 80038de:	6163      	str	r3, [r4, #20]
 80038e0:	2300      	movs	r3, #0
 80038e2:	9309      	str	r3, [sp, #36]	; 0x24
 80038e4:	2320      	movs	r3, #32
 80038e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038ea:	2330      	movs	r3, #48	; 0x30
 80038ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038f0:	9503      	str	r5, [sp, #12]
 80038f2:	f04f 0b01 	mov.w	fp, #1
 80038f6:	4637      	mov	r7, r6
 80038f8:	463d      	mov	r5, r7
 80038fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80038fe:	b10b      	cbz	r3, 8003904 <_svfiprintf_r+0x58>
 8003900:	2b25      	cmp	r3, #37	; 0x25
 8003902:	d13e      	bne.n	8003982 <_svfiprintf_r+0xd6>
 8003904:	ebb7 0a06 	subs.w	sl, r7, r6
 8003908:	d00b      	beq.n	8003922 <_svfiprintf_r+0x76>
 800390a:	4653      	mov	r3, sl
 800390c:	4632      	mov	r2, r6
 800390e:	4621      	mov	r1, r4
 8003910:	4640      	mov	r0, r8
 8003912:	f7ff ff71 	bl	80037f8 <__ssputs_r>
 8003916:	3001      	adds	r0, #1
 8003918:	f000 80a4 	beq.w	8003a64 <_svfiprintf_r+0x1b8>
 800391c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800391e:	4453      	add	r3, sl
 8003920:	9309      	str	r3, [sp, #36]	; 0x24
 8003922:	783b      	ldrb	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 809d 	beq.w	8003a64 <_svfiprintf_r+0x1b8>
 800392a:	2300      	movs	r3, #0
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003934:	9304      	str	r3, [sp, #16]
 8003936:	9307      	str	r3, [sp, #28]
 8003938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800393c:	931a      	str	r3, [sp, #104]	; 0x68
 800393e:	462f      	mov	r7, r5
 8003940:	2205      	movs	r2, #5
 8003942:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003946:	4850      	ldr	r0, [pc, #320]	; (8003a88 <_svfiprintf_r+0x1dc>)
 8003948:	f7fc fc6a 	bl	8000220 <memchr>
 800394c:	9b04      	ldr	r3, [sp, #16]
 800394e:	b9d0      	cbnz	r0, 8003986 <_svfiprintf_r+0xda>
 8003950:	06d9      	lsls	r1, r3, #27
 8003952:	bf44      	itt	mi
 8003954:	2220      	movmi	r2, #32
 8003956:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800395a:	071a      	lsls	r2, r3, #28
 800395c:	bf44      	itt	mi
 800395e:	222b      	movmi	r2, #43	; 0x2b
 8003960:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003964:	782a      	ldrb	r2, [r5, #0]
 8003966:	2a2a      	cmp	r2, #42	; 0x2a
 8003968:	d015      	beq.n	8003996 <_svfiprintf_r+0xea>
 800396a:	9a07      	ldr	r2, [sp, #28]
 800396c:	462f      	mov	r7, r5
 800396e:	2000      	movs	r0, #0
 8003970:	250a      	movs	r5, #10
 8003972:	4639      	mov	r1, r7
 8003974:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003978:	3b30      	subs	r3, #48	; 0x30
 800397a:	2b09      	cmp	r3, #9
 800397c:	d94d      	bls.n	8003a1a <_svfiprintf_r+0x16e>
 800397e:	b1b8      	cbz	r0, 80039b0 <_svfiprintf_r+0x104>
 8003980:	e00f      	b.n	80039a2 <_svfiprintf_r+0xf6>
 8003982:	462f      	mov	r7, r5
 8003984:	e7b8      	b.n	80038f8 <_svfiprintf_r+0x4c>
 8003986:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <_svfiprintf_r+0x1dc>)
 8003988:	1a80      	subs	r0, r0, r2
 800398a:	fa0b f000 	lsl.w	r0, fp, r0
 800398e:	4318      	orrs	r0, r3
 8003990:	9004      	str	r0, [sp, #16]
 8003992:	463d      	mov	r5, r7
 8003994:	e7d3      	b.n	800393e <_svfiprintf_r+0x92>
 8003996:	9a03      	ldr	r2, [sp, #12]
 8003998:	1d11      	adds	r1, r2, #4
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	9103      	str	r1, [sp, #12]
 800399e:	2a00      	cmp	r2, #0
 80039a0:	db01      	blt.n	80039a6 <_svfiprintf_r+0xfa>
 80039a2:	9207      	str	r2, [sp, #28]
 80039a4:	e004      	b.n	80039b0 <_svfiprintf_r+0x104>
 80039a6:	4252      	negs	r2, r2
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	9207      	str	r2, [sp, #28]
 80039ae:	9304      	str	r3, [sp, #16]
 80039b0:	783b      	ldrb	r3, [r7, #0]
 80039b2:	2b2e      	cmp	r3, #46	; 0x2e
 80039b4:	d10c      	bne.n	80039d0 <_svfiprintf_r+0x124>
 80039b6:	787b      	ldrb	r3, [r7, #1]
 80039b8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ba:	d133      	bne.n	8003a24 <_svfiprintf_r+0x178>
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	1d1a      	adds	r2, r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	9203      	str	r2, [sp, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bfb8      	it	lt
 80039c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80039cc:	3702      	adds	r7, #2
 80039ce:	9305      	str	r3, [sp, #20]
 80039d0:	4d2e      	ldr	r5, [pc, #184]	; (8003a8c <_svfiprintf_r+0x1e0>)
 80039d2:	7839      	ldrb	r1, [r7, #0]
 80039d4:	2203      	movs	r2, #3
 80039d6:	4628      	mov	r0, r5
 80039d8:	f7fc fc22 	bl	8000220 <memchr>
 80039dc:	b138      	cbz	r0, 80039ee <_svfiprintf_r+0x142>
 80039de:	2340      	movs	r3, #64	; 0x40
 80039e0:	1b40      	subs	r0, r0, r5
 80039e2:	fa03 f000 	lsl.w	r0, r3, r0
 80039e6:	9b04      	ldr	r3, [sp, #16]
 80039e8:	4303      	orrs	r3, r0
 80039ea:	3701      	adds	r7, #1
 80039ec:	9304      	str	r3, [sp, #16]
 80039ee:	7839      	ldrb	r1, [r7, #0]
 80039f0:	4827      	ldr	r0, [pc, #156]	; (8003a90 <_svfiprintf_r+0x1e4>)
 80039f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039f6:	2206      	movs	r2, #6
 80039f8:	1c7e      	adds	r6, r7, #1
 80039fa:	f7fc fc11 	bl	8000220 <memchr>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d038      	beq.n	8003a74 <_svfiprintf_r+0x1c8>
 8003a02:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <_svfiprintf_r+0x1e8>)
 8003a04:	bb13      	cbnz	r3, 8003a4c <_svfiprintf_r+0x1a0>
 8003a06:	9b03      	ldr	r3, [sp, #12]
 8003a08:	3307      	adds	r3, #7
 8003a0a:	f023 0307 	bic.w	r3, r3, #7
 8003a0e:	3308      	adds	r3, #8
 8003a10:	9303      	str	r3, [sp, #12]
 8003a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a14:	444b      	add	r3, r9
 8003a16:	9309      	str	r3, [sp, #36]	; 0x24
 8003a18:	e76d      	b.n	80038f6 <_svfiprintf_r+0x4a>
 8003a1a:	fb05 3202 	mla	r2, r5, r2, r3
 8003a1e:	2001      	movs	r0, #1
 8003a20:	460f      	mov	r7, r1
 8003a22:	e7a6      	b.n	8003972 <_svfiprintf_r+0xc6>
 8003a24:	2300      	movs	r3, #0
 8003a26:	3701      	adds	r7, #1
 8003a28:	9305      	str	r3, [sp, #20]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	250a      	movs	r5, #10
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a34:	3a30      	subs	r2, #48	; 0x30
 8003a36:	2a09      	cmp	r2, #9
 8003a38:	d903      	bls.n	8003a42 <_svfiprintf_r+0x196>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0c8      	beq.n	80039d0 <_svfiprintf_r+0x124>
 8003a3e:	9105      	str	r1, [sp, #20]
 8003a40:	e7c6      	b.n	80039d0 <_svfiprintf_r+0x124>
 8003a42:	fb05 2101 	mla	r1, r5, r1, r2
 8003a46:	2301      	movs	r3, #1
 8003a48:	4607      	mov	r7, r0
 8003a4a:	e7f0      	b.n	8003a2e <_svfiprintf_r+0x182>
 8003a4c:	ab03      	add	r3, sp, #12
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	4622      	mov	r2, r4
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <_svfiprintf_r+0x1ec>)
 8003a54:	a904      	add	r1, sp, #16
 8003a56:	4640      	mov	r0, r8
 8003a58:	f3af 8000 	nop.w
 8003a5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a60:	4681      	mov	r9, r0
 8003a62:	d1d6      	bne.n	8003a12 <_svfiprintf_r+0x166>
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	065b      	lsls	r3, r3, #25
 8003a68:	f53f af35 	bmi.w	80038d6 <_svfiprintf_r+0x2a>
 8003a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a6e:	b01d      	add	sp, #116	; 0x74
 8003a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a74:	ab03      	add	r3, sp, #12
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4622      	mov	r2, r4
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <_svfiprintf_r+0x1ec>)
 8003a7c:	a904      	add	r1, sp, #16
 8003a7e:	4640      	mov	r0, r8
 8003a80:	f000 f882 	bl	8003b88 <_printf_i>
 8003a84:	e7ea      	b.n	8003a5c <_svfiprintf_r+0x1b0>
 8003a86:	bf00      	nop
 8003a88:	08004574 	.word	0x08004574
 8003a8c:	0800457a 	.word	0x0800457a
 8003a90:	0800457e 	.word	0x0800457e
 8003a94:	00000000 	.word	0x00000000
 8003a98:	080037f9 	.word	0x080037f9

08003a9c <_printf_common>:
 8003a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa0:	4691      	mov	r9, r2
 8003aa2:	461f      	mov	r7, r3
 8003aa4:	688a      	ldr	r2, [r1, #8]
 8003aa6:	690b      	ldr	r3, [r1, #16]
 8003aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aac:	4293      	cmp	r3, r2
 8003aae:	bfb8      	it	lt
 8003ab0:	4613      	movlt	r3, r2
 8003ab2:	f8c9 3000 	str.w	r3, [r9]
 8003ab6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aba:	4606      	mov	r6, r0
 8003abc:	460c      	mov	r4, r1
 8003abe:	b112      	cbz	r2, 8003ac6 <_printf_common+0x2a>
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f8c9 3000 	str.w	r3, [r9]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	0699      	lsls	r1, r3, #26
 8003aca:	bf42      	ittt	mi
 8003acc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ad0:	3302      	addmi	r3, #2
 8003ad2:	f8c9 3000 	strmi.w	r3, [r9]
 8003ad6:	6825      	ldr	r5, [r4, #0]
 8003ad8:	f015 0506 	ands.w	r5, r5, #6
 8003adc:	d107      	bne.n	8003aee <_printf_common+0x52>
 8003ade:	f104 0a19 	add.w	sl, r4, #25
 8003ae2:	68e3      	ldr	r3, [r4, #12]
 8003ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	42ab      	cmp	r3, r5
 8003aec:	dc28      	bgt.n	8003b40 <_printf_common+0xa4>
 8003aee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	3300      	adds	r3, #0
 8003af6:	bf18      	it	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	0692      	lsls	r2, r2, #26
 8003afc:	d42d      	bmi.n	8003b5a <_printf_common+0xbe>
 8003afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b02:	4639      	mov	r1, r7
 8003b04:	4630      	mov	r0, r6
 8003b06:	47c0      	blx	r8
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d020      	beq.n	8003b4e <_printf_common+0xb2>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	68e5      	ldr	r5, [r4, #12]
 8003b10:	f8d9 2000 	ldr.w	r2, [r9]
 8003b14:	f003 0306 	and.w	r3, r3, #6
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	bf08      	it	eq
 8003b1c:	1aad      	subeq	r5, r5, r2
 8003b1e:	68a3      	ldr	r3, [r4, #8]
 8003b20:	6922      	ldr	r2, [r4, #16]
 8003b22:	bf0c      	ite	eq
 8003b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b28:	2500      	movne	r5, #0
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bfc4      	itt	gt
 8003b2e:	1a9b      	subgt	r3, r3, r2
 8003b30:	18ed      	addgt	r5, r5, r3
 8003b32:	f04f 0900 	mov.w	r9, #0
 8003b36:	341a      	adds	r4, #26
 8003b38:	454d      	cmp	r5, r9
 8003b3a:	d11a      	bne.n	8003b72 <_printf_common+0xd6>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e008      	b.n	8003b52 <_printf_common+0xb6>
 8003b40:	2301      	movs	r3, #1
 8003b42:	4652      	mov	r2, sl
 8003b44:	4639      	mov	r1, r7
 8003b46:	4630      	mov	r0, r6
 8003b48:	47c0      	blx	r8
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	d103      	bne.n	8003b56 <_printf_common+0xba>
 8003b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b56:	3501      	adds	r5, #1
 8003b58:	e7c3      	b.n	8003ae2 <_printf_common+0x46>
 8003b5a:	18e1      	adds	r1, r4, r3
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	2030      	movs	r0, #48	; 0x30
 8003b60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b64:	4422      	add	r2, r4
 8003b66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b6e:	3302      	adds	r3, #2
 8003b70:	e7c5      	b.n	8003afe <_printf_common+0x62>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4622      	mov	r2, r4
 8003b76:	4639      	mov	r1, r7
 8003b78:	4630      	mov	r0, r6
 8003b7a:	47c0      	blx	r8
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d0e6      	beq.n	8003b4e <_printf_common+0xb2>
 8003b80:	f109 0901 	add.w	r9, r9, #1
 8003b84:	e7d8      	b.n	8003b38 <_printf_common+0x9c>
	...

08003b88 <_printf_i>:
 8003b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003b90:	460c      	mov	r4, r1
 8003b92:	7e09      	ldrb	r1, [r1, #24]
 8003b94:	b085      	sub	sp, #20
 8003b96:	296e      	cmp	r1, #110	; 0x6e
 8003b98:	4617      	mov	r7, r2
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	4698      	mov	r8, r3
 8003b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ba0:	f000 80b3 	beq.w	8003d0a <_printf_i+0x182>
 8003ba4:	d822      	bhi.n	8003bec <_printf_i+0x64>
 8003ba6:	2963      	cmp	r1, #99	; 0x63
 8003ba8:	d036      	beq.n	8003c18 <_printf_i+0x90>
 8003baa:	d80a      	bhi.n	8003bc2 <_printf_i+0x3a>
 8003bac:	2900      	cmp	r1, #0
 8003bae:	f000 80b9 	beq.w	8003d24 <_printf_i+0x19c>
 8003bb2:	2958      	cmp	r1, #88	; 0x58
 8003bb4:	f000 8083 	beq.w	8003cbe <_printf_i+0x136>
 8003bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003bc0:	e032      	b.n	8003c28 <_printf_i+0xa0>
 8003bc2:	2964      	cmp	r1, #100	; 0x64
 8003bc4:	d001      	beq.n	8003bca <_printf_i+0x42>
 8003bc6:	2969      	cmp	r1, #105	; 0x69
 8003bc8:	d1f6      	bne.n	8003bb8 <_printf_i+0x30>
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	0605      	lsls	r5, r0, #24
 8003bd0:	f103 0104 	add.w	r1, r3, #4
 8003bd4:	d52a      	bpl.n	8003c2c <_printf_i+0xa4>
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6011      	str	r1, [r2, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	da03      	bge.n	8003be6 <_printf_i+0x5e>
 8003bde:	222d      	movs	r2, #45	; 0x2d
 8003be0:	425b      	negs	r3, r3
 8003be2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003be6:	486f      	ldr	r0, [pc, #444]	; (8003da4 <_printf_i+0x21c>)
 8003be8:	220a      	movs	r2, #10
 8003bea:	e039      	b.n	8003c60 <_printf_i+0xd8>
 8003bec:	2973      	cmp	r1, #115	; 0x73
 8003bee:	f000 809d 	beq.w	8003d2c <_printf_i+0x1a4>
 8003bf2:	d808      	bhi.n	8003c06 <_printf_i+0x7e>
 8003bf4:	296f      	cmp	r1, #111	; 0x6f
 8003bf6:	d020      	beq.n	8003c3a <_printf_i+0xb2>
 8003bf8:	2970      	cmp	r1, #112	; 0x70
 8003bfa:	d1dd      	bne.n	8003bb8 <_printf_i+0x30>
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	f043 0320 	orr.w	r3, r3, #32
 8003c02:	6023      	str	r3, [r4, #0]
 8003c04:	e003      	b.n	8003c0e <_printf_i+0x86>
 8003c06:	2975      	cmp	r1, #117	; 0x75
 8003c08:	d017      	beq.n	8003c3a <_printf_i+0xb2>
 8003c0a:	2978      	cmp	r1, #120	; 0x78
 8003c0c:	d1d4      	bne.n	8003bb8 <_printf_i+0x30>
 8003c0e:	2378      	movs	r3, #120	; 0x78
 8003c10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c14:	4864      	ldr	r0, [pc, #400]	; (8003da8 <_printf_i+0x220>)
 8003c16:	e055      	b.n	8003cc4 <_printf_i+0x13c>
 8003c18:	6813      	ldr	r3, [r2, #0]
 8003c1a:	1d19      	adds	r1, r3, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6011      	str	r1, [r2, #0]
 8003c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e08c      	b.n	8003d46 <_printf_i+0x1be>
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6011      	str	r1, [r2, #0]
 8003c30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c34:	bf18      	it	ne
 8003c36:	b21b      	sxthne	r3, r3
 8003c38:	e7cf      	b.n	8003bda <_printf_i+0x52>
 8003c3a:	6813      	ldr	r3, [r2, #0]
 8003c3c:	6825      	ldr	r5, [r4, #0]
 8003c3e:	1d18      	adds	r0, r3, #4
 8003c40:	6010      	str	r0, [r2, #0]
 8003c42:	0628      	lsls	r0, r5, #24
 8003c44:	d501      	bpl.n	8003c4a <_printf_i+0xc2>
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	e002      	b.n	8003c50 <_printf_i+0xc8>
 8003c4a:	0668      	lsls	r0, r5, #25
 8003c4c:	d5fb      	bpl.n	8003c46 <_printf_i+0xbe>
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	4854      	ldr	r0, [pc, #336]	; (8003da4 <_printf_i+0x21c>)
 8003c52:	296f      	cmp	r1, #111	; 0x6f
 8003c54:	bf14      	ite	ne
 8003c56:	220a      	movne	r2, #10
 8003c58:	2208      	moveq	r2, #8
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c60:	6865      	ldr	r5, [r4, #4]
 8003c62:	60a5      	str	r5, [r4, #8]
 8003c64:	2d00      	cmp	r5, #0
 8003c66:	f2c0 8095 	blt.w	8003d94 <_printf_i+0x20c>
 8003c6a:	6821      	ldr	r1, [r4, #0]
 8003c6c:	f021 0104 	bic.w	r1, r1, #4
 8003c70:	6021      	str	r1, [r4, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d13d      	bne.n	8003cf2 <_printf_i+0x16a>
 8003c76:	2d00      	cmp	r5, #0
 8003c78:	f040 808e 	bne.w	8003d98 <_printf_i+0x210>
 8003c7c:	4665      	mov	r5, ip
 8003c7e:	2a08      	cmp	r2, #8
 8003c80:	d10b      	bne.n	8003c9a <_printf_i+0x112>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	07db      	lsls	r3, r3, #31
 8003c86:	d508      	bpl.n	8003c9a <_printf_i+0x112>
 8003c88:	6923      	ldr	r3, [r4, #16]
 8003c8a:	6862      	ldr	r2, [r4, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	bfde      	ittt	le
 8003c90:	2330      	movle	r3, #48	; 0x30
 8003c92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c9a:	ebac 0305 	sub.w	r3, ip, r5
 8003c9e:	6123      	str	r3, [r4, #16]
 8003ca0:	f8cd 8000 	str.w	r8, [sp]
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	aa03      	add	r2, sp, #12
 8003ca8:	4621      	mov	r1, r4
 8003caa:	4630      	mov	r0, r6
 8003cac:	f7ff fef6 	bl	8003a9c <_printf_common>
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d14d      	bne.n	8003d50 <_printf_i+0x1c8>
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	b005      	add	sp, #20
 8003cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cbe:	4839      	ldr	r0, [pc, #228]	; (8003da4 <_printf_i+0x21c>)
 8003cc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003cc4:	6813      	ldr	r3, [r2, #0]
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	1d1d      	adds	r5, r3, #4
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6015      	str	r5, [r2, #0]
 8003cce:	060a      	lsls	r2, r1, #24
 8003cd0:	d50b      	bpl.n	8003cea <_printf_i+0x162>
 8003cd2:	07ca      	lsls	r2, r1, #31
 8003cd4:	bf44      	itt	mi
 8003cd6:	f041 0120 	orrmi.w	r1, r1, #32
 8003cda:	6021      	strmi	r1, [r4, #0]
 8003cdc:	b91b      	cbnz	r3, 8003ce6 <_printf_i+0x15e>
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	f022 0220 	bic.w	r2, r2, #32
 8003ce4:	6022      	str	r2, [r4, #0]
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	e7b7      	b.n	8003c5a <_printf_i+0xd2>
 8003cea:	064d      	lsls	r5, r1, #25
 8003cec:	bf48      	it	mi
 8003cee:	b29b      	uxthmi	r3, r3
 8003cf0:	e7ef      	b.n	8003cd2 <_printf_i+0x14a>
 8003cf2:	4665      	mov	r5, ip
 8003cf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cf8:	fb02 3311 	mls	r3, r2, r1, r3
 8003cfc:	5cc3      	ldrb	r3, [r0, r3]
 8003cfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d02:	460b      	mov	r3, r1
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d1f5      	bne.n	8003cf4 <_printf_i+0x16c>
 8003d08:	e7b9      	b.n	8003c7e <_printf_i+0xf6>
 8003d0a:	6813      	ldr	r3, [r2, #0]
 8003d0c:	6825      	ldr	r5, [r4, #0]
 8003d0e:	6961      	ldr	r1, [r4, #20]
 8003d10:	1d18      	adds	r0, r3, #4
 8003d12:	6010      	str	r0, [r2, #0]
 8003d14:	0628      	lsls	r0, r5, #24
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	d501      	bpl.n	8003d1e <_printf_i+0x196>
 8003d1a:	6019      	str	r1, [r3, #0]
 8003d1c:	e002      	b.n	8003d24 <_printf_i+0x19c>
 8003d1e:	066a      	lsls	r2, r5, #25
 8003d20:	d5fb      	bpl.n	8003d1a <_printf_i+0x192>
 8003d22:	8019      	strh	r1, [r3, #0]
 8003d24:	2300      	movs	r3, #0
 8003d26:	6123      	str	r3, [r4, #16]
 8003d28:	4665      	mov	r5, ip
 8003d2a:	e7b9      	b.n	8003ca0 <_printf_i+0x118>
 8003d2c:	6813      	ldr	r3, [r2, #0]
 8003d2e:	1d19      	adds	r1, r3, #4
 8003d30:	6011      	str	r1, [r2, #0]
 8003d32:	681d      	ldr	r5, [r3, #0]
 8003d34:	6862      	ldr	r2, [r4, #4]
 8003d36:	2100      	movs	r1, #0
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f7fc fa71 	bl	8000220 <memchr>
 8003d3e:	b108      	cbz	r0, 8003d44 <_printf_i+0x1bc>
 8003d40:	1b40      	subs	r0, r0, r5
 8003d42:	6060      	str	r0, [r4, #4]
 8003d44:	6863      	ldr	r3, [r4, #4]
 8003d46:	6123      	str	r3, [r4, #16]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d4e:	e7a7      	b.n	8003ca0 <_printf_i+0x118>
 8003d50:	6923      	ldr	r3, [r4, #16]
 8003d52:	462a      	mov	r2, r5
 8003d54:	4639      	mov	r1, r7
 8003d56:	4630      	mov	r0, r6
 8003d58:	47c0      	blx	r8
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d0aa      	beq.n	8003cb4 <_printf_i+0x12c>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	079b      	lsls	r3, r3, #30
 8003d62:	d413      	bmi.n	8003d8c <_printf_i+0x204>
 8003d64:	68e0      	ldr	r0, [r4, #12]
 8003d66:	9b03      	ldr	r3, [sp, #12]
 8003d68:	4298      	cmp	r0, r3
 8003d6a:	bfb8      	it	lt
 8003d6c:	4618      	movlt	r0, r3
 8003d6e:	e7a3      	b.n	8003cb8 <_printf_i+0x130>
 8003d70:	2301      	movs	r3, #1
 8003d72:	464a      	mov	r2, r9
 8003d74:	4639      	mov	r1, r7
 8003d76:	4630      	mov	r0, r6
 8003d78:	47c0      	blx	r8
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d09a      	beq.n	8003cb4 <_printf_i+0x12c>
 8003d7e:	3501      	adds	r5, #1
 8003d80:	68e3      	ldr	r3, [r4, #12]
 8003d82:	9a03      	ldr	r2, [sp, #12]
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	42ab      	cmp	r3, r5
 8003d88:	dcf2      	bgt.n	8003d70 <_printf_i+0x1e8>
 8003d8a:	e7eb      	b.n	8003d64 <_printf_i+0x1dc>
 8003d8c:	2500      	movs	r5, #0
 8003d8e:	f104 0919 	add.w	r9, r4, #25
 8003d92:	e7f5      	b.n	8003d80 <_printf_i+0x1f8>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ac      	bne.n	8003cf2 <_printf_i+0x16a>
 8003d98:	7803      	ldrb	r3, [r0, #0]
 8003d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003da2:	e76c      	b.n	8003c7e <_printf_i+0xf6>
 8003da4:	08004585 	.word	0x08004585
 8003da8:	08004596 	.word	0x08004596

08003dac <memcpy>:
 8003dac:	b510      	push	{r4, lr}
 8003dae:	1e43      	subs	r3, r0, #1
 8003db0:	440a      	add	r2, r1
 8003db2:	4291      	cmp	r1, r2
 8003db4:	d100      	bne.n	8003db8 <memcpy+0xc>
 8003db6:	bd10      	pop	{r4, pc}
 8003db8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dc0:	e7f7      	b.n	8003db2 <memcpy+0x6>

08003dc2 <memmove>:
 8003dc2:	4288      	cmp	r0, r1
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	eb01 0302 	add.w	r3, r1, r2
 8003dca:	d807      	bhi.n	8003ddc <memmove+0x1a>
 8003dcc:	1e42      	subs	r2, r0, #1
 8003dce:	4299      	cmp	r1, r3
 8003dd0:	d00a      	beq.n	8003de8 <memmove+0x26>
 8003dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dd6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003dda:	e7f8      	b.n	8003dce <memmove+0xc>
 8003ddc:	4283      	cmp	r3, r0
 8003dde:	d9f5      	bls.n	8003dcc <memmove+0xa>
 8003de0:	1881      	adds	r1, r0, r2
 8003de2:	1ad2      	subs	r2, r2, r3
 8003de4:	42d3      	cmn	r3, r2
 8003de6:	d100      	bne.n	8003dea <memmove+0x28>
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003df2:	e7f7      	b.n	8003de4 <memmove+0x22>

08003df4 <_free_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4605      	mov	r5, r0
 8003df8:	2900      	cmp	r1, #0
 8003dfa:	d045      	beq.n	8003e88 <_free_r+0x94>
 8003dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e00:	1f0c      	subs	r4, r1, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bfb8      	it	lt
 8003e06:	18e4      	addlt	r4, r4, r3
 8003e08:	f000 f8d2 	bl	8003fb0 <__malloc_lock>
 8003e0c:	4a1f      	ldr	r2, [pc, #124]	; (8003e8c <_free_r+0x98>)
 8003e0e:	6813      	ldr	r3, [r2, #0]
 8003e10:	4610      	mov	r0, r2
 8003e12:	b933      	cbnz	r3, 8003e22 <_free_r+0x2e>
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	6014      	str	r4, [r2, #0]
 8003e18:	4628      	mov	r0, r5
 8003e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e1e:	f000 b8c8 	b.w	8003fb2 <__malloc_unlock>
 8003e22:	42a3      	cmp	r3, r4
 8003e24:	d90c      	bls.n	8003e40 <_free_r+0x4c>
 8003e26:	6821      	ldr	r1, [r4, #0]
 8003e28:	1862      	adds	r2, r4, r1
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	bf04      	itt	eq
 8003e2e:	681a      	ldreq	r2, [r3, #0]
 8003e30:	685b      	ldreq	r3, [r3, #4]
 8003e32:	6063      	str	r3, [r4, #4]
 8003e34:	bf04      	itt	eq
 8003e36:	1852      	addeq	r2, r2, r1
 8003e38:	6022      	streq	r2, [r4, #0]
 8003e3a:	6004      	str	r4, [r0, #0]
 8003e3c:	e7ec      	b.n	8003e18 <_free_r+0x24>
 8003e3e:	4613      	mov	r3, r2
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	b10a      	cbz	r2, 8003e48 <_free_r+0x54>
 8003e44:	42a2      	cmp	r2, r4
 8003e46:	d9fa      	bls.n	8003e3e <_free_r+0x4a>
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	1858      	adds	r0, r3, r1
 8003e4c:	42a0      	cmp	r0, r4
 8003e4e:	d10b      	bne.n	8003e68 <_free_r+0x74>
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	4401      	add	r1, r0
 8003e54:	1858      	adds	r0, r3, r1
 8003e56:	4282      	cmp	r2, r0
 8003e58:	6019      	str	r1, [r3, #0]
 8003e5a:	d1dd      	bne.n	8003e18 <_free_r+0x24>
 8003e5c:	6810      	ldr	r0, [r2, #0]
 8003e5e:	6852      	ldr	r2, [r2, #4]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	4401      	add	r1, r0
 8003e64:	6019      	str	r1, [r3, #0]
 8003e66:	e7d7      	b.n	8003e18 <_free_r+0x24>
 8003e68:	d902      	bls.n	8003e70 <_free_r+0x7c>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	e7d3      	b.n	8003e18 <_free_r+0x24>
 8003e70:	6820      	ldr	r0, [r4, #0]
 8003e72:	1821      	adds	r1, r4, r0
 8003e74:	428a      	cmp	r2, r1
 8003e76:	bf04      	itt	eq
 8003e78:	6811      	ldreq	r1, [r2, #0]
 8003e7a:	6852      	ldreq	r2, [r2, #4]
 8003e7c:	6062      	str	r2, [r4, #4]
 8003e7e:	bf04      	itt	eq
 8003e80:	1809      	addeq	r1, r1, r0
 8003e82:	6021      	streq	r1, [r4, #0]
 8003e84:	605c      	str	r4, [r3, #4]
 8003e86:	e7c7      	b.n	8003e18 <_free_r+0x24>
 8003e88:	bd38      	pop	{r3, r4, r5, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200001ac 	.word	0x200001ac

08003e90 <_malloc_r>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	1ccd      	adds	r5, r1, #3
 8003e94:	f025 0503 	bic.w	r5, r5, #3
 8003e98:	3508      	adds	r5, #8
 8003e9a:	2d0c      	cmp	r5, #12
 8003e9c:	bf38      	it	cc
 8003e9e:	250c      	movcc	r5, #12
 8003ea0:	2d00      	cmp	r5, #0
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	db01      	blt.n	8003eaa <_malloc_r+0x1a>
 8003ea6:	42a9      	cmp	r1, r5
 8003ea8:	d903      	bls.n	8003eb2 <_malloc_r+0x22>
 8003eaa:	230c      	movs	r3, #12
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	2000      	movs	r0, #0
 8003eb0:	bd70      	pop	{r4, r5, r6, pc}
 8003eb2:	f000 f87d 	bl	8003fb0 <__malloc_lock>
 8003eb6:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <_malloc_r+0xac>)
 8003eb8:	6814      	ldr	r4, [r2, #0]
 8003eba:	4621      	mov	r1, r4
 8003ebc:	b991      	cbnz	r1, 8003ee4 <_malloc_r+0x54>
 8003ebe:	4c20      	ldr	r4, [pc, #128]	; (8003f40 <_malloc_r+0xb0>)
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	b91b      	cbnz	r3, 8003ecc <_malloc_r+0x3c>
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f000 f863 	bl	8003f90 <_sbrk_r>
 8003eca:	6020      	str	r0, [r4, #0]
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4630      	mov	r0, r6
 8003ed0:	f000 f85e 	bl	8003f90 <_sbrk_r>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d124      	bne.n	8003f22 <_malloc_r+0x92>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	6033      	str	r3, [r6, #0]
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f868 	bl	8003fb2 <__malloc_unlock>
 8003ee2:	e7e4      	b.n	8003eae <_malloc_r+0x1e>
 8003ee4:	680b      	ldr	r3, [r1, #0]
 8003ee6:	1b5b      	subs	r3, r3, r5
 8003ee8:	d418      	bmi.n	8003f1c <_malloc_r+0x8c>
 8003eea:	2b0b      	cmp	r3, #11
 8003eec:	d90f      	bls.n	8003f0e <_malloc_r+0x7e>
 8003eee:	600b      	str	r3, [r1, #0]
 8003ef0:	50cd      	str	r5, [r1, r3]
 8003ef2:	18cc      	adds	r4, r1, r3
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 f85c 	bl	8003fb2 <__malloc_unlock>
 8003efa:	f104 000b 	add.w	r0, r4, #11
 8003efe:	1d23      	adds	r3, r4, #4
 8003f00:	f020 0007 	bic.w	r0, r0, #7
 8003f04:	1ac3      	subs	r3, r0, r3
 8003f06:	d0d3      	beq.n	8003eb0 <_malloc_r+0x20>
 8003f08:	425a      	negs	r2, r3
 8003f0a:	50e2      	str	r2, [r4, r3]
 8003f0c:	e7d0      	b.n	8003eb0 <_malloc_r+0x20>
 8003f0e:	428c      	cmp	r4, r1
 8003f10:	684b      	ldr	r3, [r1, #4]
 8003f12:	bf16      	itet	ne
 8003f14:	6063      	strne	r3, [r4, #4]
 8003f16:	6013      	streq	r3, [r2, #0]
 8003f18:	460c      	movne	r4, r1
 8003f1a:	e7eb      	b.n	8003ef4 <_malloc_r+0x64>
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	6849      	ldr	r1, [r1, #4]
 8003f20:	e7cc      	b.n	8003ebc <_malloc_r+0x2c>
 8003f22:	1cc4      	adds	r4, r0, #3
 8003f24:	f024 0403 	bic.w	r4, r4, #3
 8003f28:	42a0      	cmp	r0, r4
 8003f2a:	d005      	beq.n	8003f38 <_malloc_r+0xa8>
 8003f2c:	1a21      	subs	r1, r4, r0
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 f82e 	bl	8003f90 <_sbrk_r>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d0cf      	beq.n	8003ed8 <_malloc_r+0x48>
 8003f38:	6025      	str	r5, [r4, #0]
 8003f3a:	e7db      	b.n	8003ef4 <_malloc_r+0x64>
 8003f3c:	200001ac 	.word	0x200001ac
 8003f40:	200001b0 	.word	0x200001b0

08003f44 <_realloc_r>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	4607      	mov	r7, r0
 8003f48:	4614      	mov	r4, r2
 8003f4a:	460e      	mov	r6, r1
 8003f4c:	b921      	cbnz	r1, 8003f58 <_realloc_r+0x14>
 8003f4e:	4611      	mov	r1, r2
 8003f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f54:	f7ff bf9c 	b.w	8003e90 <_malloc_r>
 8003f58:	b922      	cbnz	r2, 8003f64 <_realloc_r+0x20>
 8003f5a:	f7ff ff4b 	bl	8003df4 <_free_r>
 8003f5e:	4625      	mov	r5, r4
 8003f60:	4628      	mov	r0, r5
 8003f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f64:	f000 f826 	bl	8003fb4 <_malloc_usable_size_r>
 8003f68:	42a0      	cmp	r0, r4
 8003f6a:	d20f      	bcs.n	8003f8c <_realloc_r+0x48>
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4638      	mov	r0, r7
 8003f70:	f7ff ff8e 	bl	8003e90 <_malloc_r>
 8003f74:	4605      	mov	r5, r0
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d0f2      	beq.n	8003f60 <_realloc_r+0x1c>
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	f7ff ff15 	bl	8003dac <memcpy>
 8003f82:	4631      	mov	r1, r6
 8003f84:	4638      	mov	r0, r7
 8003f86:	f7ff ff35 	bl	8003df4 <_free_r>
 8003f8a:	e7e9      	b.n	8003f60 <_realloc_r+0x1c>
 8003f8c:	4635      	mov	r5, r6
 8003f8e:	e7e7      	b.n	8003f60 <_realloc_r+0x1c>

08003f90 <_sbrk_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	4c06      	ldr	r4, [pc, #24]	; (8003fac <_sbrk_r+0x1c>)
 8003f94:	2300      	movs	r3, #0
 8003f96:	4605      	mov	r5, r0
 8003f98:	4608      	mov	r0, r1
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	f7ff fabc 	bl	8003518 <_sbrk>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_sbrk_r+0x1a>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_sbrk_r+0x1a>
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	20000240 	.word	0x20000240

08003fb0 <__malloc_lock>:
 8003fb0:	4770      	bx	lr

08003fb2 <__malloc_unlock>:
 8003fb2:	4770      	bx	lr

08003fb4 <_malloc_usable_size_r>:
 8003fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fb8:	1f18      	subs	r0, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bfbc      	itt	lt
 8003fbe:	580b      	ldrlt	r3, [r1, r0]
 8003fc0:	18c0      	addlt	r0, r0, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_init>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr

08003fd0 <_fini>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr
