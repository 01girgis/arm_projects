
STM_ESP8266_http_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000979c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08009970  08009970  00019970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2d8  0800a2d8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2d8  0800a2d8  0001a2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2e0  0800a2e0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2e4  0800a2e4  0001a2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000236c  200001f0  0800a4d4  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000255c  0800a4d4  0002255c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108db  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027c6  00000000  00000000  00030af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  000332c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  00034058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023a7a  00000000  00000000  00034ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3f3  00000000  00000000  0005871a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf486  00000000  00000000  00065b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134f93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004368  00000000  00000000  00135010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009954 	.word	0x08009954

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08009954 	.word	0x08009954

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_DMA_Init+0x3c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <MX_DMA_Init+0x3c>)
 8000ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_DMA_Init+0x3c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	200d      	movs	r0, #13
 8000f10:	f001 fcc7 	bl	80028a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f14:	200d      	movs	r0, #13
 8000f16:	f001 fce0 	bl	80028da <HAL_NVIC_EnableIRQ>

}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b35      	ldr	r3, [pc, #212]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a34      	ldr	r2, [pc, #208]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b32      	ldr	r3, [pc, #200]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a2d      	ldr	r2, [pc, #180]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b27      	ldr	r3, [pc, #156]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a26      	ldr	r2, [pc, #152]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	481a      	ldr	r0, [pc, #104]	; (800101c <MX_GPIO_Init+0xf4>)
 8000fb4:	f002 f9ac 	bl	8003310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_GPIO_Init+0xf8>)
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4815      	ldr	r0, [pc, #84]	; (8001024 <MX_GPIO_Init+0xfc>)
 8000fce:	f002 f80d 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <MX_GPIO_Init+0xf4>)
 8000fee:	f001 fffd 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ff2:	2320      	movs	r3, #32
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_GPIO_Init+0xf4>)
 800100a:	f001 ffef 	bl	8002fec <HAL_GPIO_Init>

}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000
 8001020:	10210000 	.word	0x10210000
 8001024:	40020800 	.word	0x40020800

08001028 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_I2C1_Init+0x50>)
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <MX_I2C1_Init+0x54>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_I2C1_Init+0x50>)
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_I2C1_Init+0x58>)
 8001036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_I2C1_Init+0x50>)
 8001046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_I2C1_Init+0x50>)
 8001066:	f002 f96d 	bl	8003344 <HAL_I2C_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001070:	f000 faca 	bl	8001608 <Error_Handler>
  }

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000032c 	.word	0x2000032c
 800107c:	40005400 	.word	0x40005400
 8001080:	00061a80 	.word	0x00061a80

08001084 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_I2C_MspInit+0x84>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12c      	bne.n	8001100 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c8:	2312      	movs	r3, #18
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010d4:	2304      	movs	r3, #4
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	480c      	ldr	r0, [pc, #48]	; (8001110 <HAL_I2C_MspInit+0x8c>)
 80010e0:	f001 ff84 	bl	8002fec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40005400 	.word	0x40005400
 800110c:	40023800 	.word	0x40023800
 8001110:	40020400 	.word	0x40020400

08001114 <UART_R>:

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void UART_R(){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	rx_count = RingBuffer_DMA_Count(&ring);
 800111a:	481b      	ldr	r0, [pc, #108]	; (8001188 <UART_R+0x74>)
 800111c:	f005 fabe 	bl	800669c <RingBuffer_DMA_Count>
 8001120:	4602      	mov	r2, r0
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <UART_R+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
    while(rx_count --){
 8001126:	e023      	b.n	8001170 <UART_R+0x5c>
    	uint8_t byte = RingBuffer_DMA_GetByte(&ring);
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <UART_R+0x74>)
 800112a:	f005 fade 	bl	80066ea <RingBuffer_DMA_GetByte>
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
    	if(byte == '\n'){
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b0a      	cmp	r3, #10
 8001136:	d10d      	bne.n	8001154 <UART_R+0x40>
    		command[icmd] = 0;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <UART_R+0x7c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <UART_R+0x80>)
 8001140:	2100      	movs	r1, #0
 8001142:	5499      	strb	r1, [r3, r2]
    		icmd = 0 ;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <UART_R+0x7c>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    		LCD_Printf("%s \n", command);
 800114a:	4912      	ldr	r1, [pc, #72]	; (8001194 <UART_R+0x80>)
 800114c:	4812      	ldr	r0, [pc, #72]	; (8001198 <UART_R+0x84>)
 800114e:	f005 f949 	bl	80063e4 <LCD_Printf>
    		continue;
 8001152:	e00d      	b.n	8001170 <UART_R+0x5c>
    	}
    	else if (byte == '\r') {
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b0d      	cmp	r3, #13
 8001158:	d100      	bne.n	800115c <UART_R+0x48>
    		//LCD_Printf("trying to get information \n");
            continue;
 800115a:	e009      	b.n	8001170 <UART_R+0x5c>
    	}
    	else{
    		command[icmd++ % BUF_SIZE] = byte;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <UART_R+0x7c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	b2d1      	uxtb	r1, r2
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <UART_R+0x7c>)
 8001166:	7011      	strb	r1, [r2, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <UART_R+0x80>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	5453      	strb	r3, [r2, r1]
    while(rx_count --){
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <UART_R+0x78>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	1e5a      	subs	r2, r3, #1
 8001176:	4905      	ldr	r1, [pc, #20]	; (800118c <UART_R+0x78>)
 8001178:	600a      	str	r2, [r1, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1d4      	bne.n	8001128 <UART_R+0x14>
    	}
    }
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000249c 	.word	0x2000249c
 800118c:	200024ac 	.word	0x200024ac
 8001190:	2000020c 	.word	0x2000020c
 8001194:	20000480 	.word	0x20000480
 8001198:	08009970 	.word	0x08009970

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	b0d5      	sub	sp, #340	; 0x154
 80011a0:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a2:	f001 fa0f 	bl	80025c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a6:	f000 f9bd 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011aa:	f7ff febd 	bl	8000f28 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ae:	f7ff fe9b 	bl	8000ee8 <MX_DMA_Init>
  MX_UART4_Init();
 80011b2:	f000 fad3 	bl	800175c <MX_UART4_Init>
  MX_I2C1_Init();
 80011b6:	f7ff ff37 	bl	8001028 <MX_I2C1_Init>
  LCD_Init();
 80011ba:	f004 fd37 	bl	8005c2c <LCD_Init>

  /* USER CODE BEGIN 2 */
  //R***ING buffer in.
  RingBuffer_DMA_Init(&ring , huart4.hdmarx , rx , BUF_SIZE);
 80011be:	4bbe      	ldr	r3, [pc, #760]	; (80014b8 <main+0x31c>)
 80011c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c6:	4abd      	ldr	r2, [pc, #756]	; (80014bc <main+0x320>)
 80011c8:	48bd      	ldr	r0, [pc, #756]	; (80014c0 <main+0x324>)
 80011ca:	f005 fac5 	bl	8006758 <RingBuffer_DMA_Init>
  //U***ART recieving DMA
  HAL_UART_Receive_DMA(&huart4, rx, BUF_SIZE);
 80011ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d2:	49ba      	ldr	r1, [pc, #744]	; (80014bc <main+0x320>)
 80011d4:	48b8      	ldr	r0, [pc, #736]	; (80014b8 <main+0x31c>)
 80011d6:	f003 feaf 	bl	8004f38 <HAL_UART_Receive_DMA>
  //B***MP280
  LCD_Printf("Connecting to BMP280...\n");
 80011da:	48ba      	ldr	r0, [pc, #744]	; (80014c4 <main+0x328>)
 80011dc:	f005 f902 	bl	80063e4 <LCD_Printf>
  	bmp280_t bmp280 = {.i2c_handle = &hi2c1};
 80011e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80011e4:	2234      	movs	r2, #52	; 0x34
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f005 faf9 	bl	80067e0 <memset>
 80011ee:	4bb6      	ldr	r3, [pc, #728]	; (80014c8 <main+0x32c>)
 80011f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  	com_rslt = BMP280_init(&bmp280);
 80011f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fbcf 	bl	800199c <BMP280_init>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4bb2      	ldr	r3, [pc, #712]	; (80014cc <main+0x330>)
 8001204:	701a      	strb	r2, [r3, #0]
  	com_rslt += BMP280_set_power_mode(BMP280_NORMAL_MODE);
 8001206:	2003      	movs	r0, #3
 8001208:	f000 fd46 	bl	8001c98 <BMP280_set_power_mode>
 800120c:	4603      	mov	r3, r0
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4bae      	ldr	r3, [pc, #696]	; (80014cc <main+0x330>)
 8001212:	f993 3000 	ldrsb.w	r3, [r3]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4413      	add	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	b25a      	sxtb	r2, r3
 800121e:	4bab      	ldr	r3, [pc, #684]	; (80014cc <main+0x330>)
 8001220:	701a      	strb	r2, [r3, #0]
  	com_rslt += BMP280_set_work_mode(BMP280_STANDARD_RESOLUTION_MODE);
 8001222:	2002      	movs	r0, #2
 8001224:	f000 fdc0 	bl	8001da8 <BMP280_set_work_mode>
 8001228:	4603      	mov	r3, r0
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4ba7      	ldr	r3, [pc, #668]	; (80014cc <main+0x330>)
 800122e:	f993 3000 	ldrsb.w	r3, [r3]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4413      	add	r3, r2
 8001236:	b2db      	uxtb	r3, r3
 8001238:	b25a      	sxtb	r2, r3
 800123a:	4ba4      	ldr	r3, [pc, #656]	; (80014cc <main+0x330>)
 800123c:	701a      	strb	r2, [r3, #0]
  	com_rslt += BMP280_set_standby_durn(BMP280_STANDBY_TIME_1_MS);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 fd6c 	bl	8001d1c <BMP280_set_standby_durn>
 8001244:	4603      	mov	r3, r0
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4ba0      	ldr	r3, [pc, #640]	; (80014cc <main+0x330>)
 800124a:	f993 3000 	ldrsb.w	r3, [r3]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4413      	add	r3, r2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	b25a      	sxtb	r2, r3
 8001256:	4b9d      	ldr	r3, [pc, #628]	; (80014cc <main+0x330>)
 8001258:	701a      	strb	r2, [r3, #0]
  	if (com_rslt != SUCCESS) {
 800125a:	4b9c      	ldr	r3, [pc, #624]	; (80014cc <main+0x330>)
 800125c:	f993 3000 	ldrsb.w	r3, [r3]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <main+0xd2>
  		LCD_Printf("Check BMP280 connection!\nProgram terminated");
 8001264:	489a      	ldr	r0, [pc, #616]	; (80014d0 <main+0x334>)
 8001266:	f005 f8bd 	bl	80063e4 <LCD_Printf>
  		return 0;
 800126a:	2300      	movs	r3, #0
 800126c:	e11f      	b.n	80014ae <main+0x312>
  	}
  	LCD_Printf("Connection successful!\n");
 800126e:	4899      	ldr	r0, [pc, #612]	; (80014d4 <main+0x338>)
 8001270:	f005 f8b8 	bl	80063e4 <LCD_Printf>
  ///*** CONNECTING TO THE ROUTER
    //##ping
  sprintf(uart_co, "AT+RST\r\n");
 8001274:	4a98      	ldr	r2, [pc, #608]	; (80014d8 <main+0x33c>)
 8001276:	4b99      	ldr	r3, [pc, #612]	; (80014dc <main+0x340>)
 8001278:	cb03      	ldmia	r3!, {r0, r1}
 800127a:	6010      	str	r0, [r2, #0]
 800127c:	6051      	str	r1, [r2, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	7213      	strb	r3, [r2, #8]
  HAL_UART_Transmit(&huart4, (uint8_t * )uart_co, strlen(uart_co), HAL_MAX_DELAY);
 8001282:	4895      	ldr	r0, [pc, #596]	; (80014d8 <main+0x33c>)
 8001284:	f7fe ffc4 	bl	8000210 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	4991      	ldr	r1, [pc, #580]	; (80014d8 <main+0x33c>)
 8001292:	4889      	ldr	r0, [pc, #548]	; (80014b8 <main+0x31c>)
 8001294:	f003 fdb7 	bl	8004e06 <HAL_UART_Transmit>
  HAL_Delay(300);
 8001298:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800129c:	f001 fa04 	bl	80026a8 <HAL_Delay>
  UART_R();
 80012a0:	f7ff ff38 	bl	8001114 <UART_R>
    //##Turn on message echo
  sprintf(uart_co, "ATE1\r\n");
 80012a4:	4b8c      	ldr	r3, [pc, #560]	; (80014d8 <main+0x33c>)
 80012a6:	4a8e      	ldr	r2, [pc, #568]	; (80014e0 <main+0x344>)
 80012a8:	6810      	ldr	r0, [r2, #0]
 80012aa:	6018      	str	r0, [r3, #0]
 80012ac:	8891      	ldrh	r1, [r2, #4]
 80012ae:	7992      	ldrb	r2, [r2, #6]
 80012b0:	8099      	strh	r1, [r3, #4]
 80012b2:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&huart4, (uint8_t *)uart_co, strlen(uart_co), HAL_MAX_DELAY);
 80012b4:	4888      	ldr	r0, [pc, #544]	; (80014d8 <main+0x33c>)
 80012b6:	f7fe ffab 	bl	8000210 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	4985      	ldr	r1, [pc, #532]	; (80014d8 <main+0x33c>)
 80012c4:	487c      	ldr	r0, [pc, #496]	; (80014b8 <main+0x31c>)
 80012c6:	f003 fd9e 	bl	8004e06 <HAL_UART_Transmit>
  HAL_Delay(100);
 80012ca:	2064      	movs	r0, #100	; 0x64
 80012cc:	f001 f9ec 	bl	80026a8 <HAL_Delay>
  UART_R();
 80012d0:	f7ff ff20 	bl	8001114 <UART_R>
    //##Display version info
  sprintf(uart_co, "AT+GMR\r\n");
 80012d4:	4a80      	ldr	r2, [pc, #512]	; (80014d8 <main+0x33c>)
 80012d6:	4b83      	ldr	r3, [pc, #524]	; (80014e4 <main+0x348>)
 80012d8:	cb03      	ldmia	r3!, {r0, r1}
 80012da:	6010      	str	r0, [r2, #0]
 80012dc:	6051      	str	r1, [r2, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	7213      	strb	r3, [r2, #8]
  HAL_UART_Transmit(&huart4, (uint8_t *)uart_co, strlen(uart_co), HAL_MAX_DELAY);
 80012e2:	487d      	ldr	r0, [pc, #500]	; (80014d8 <main+0x33c>)
 80012e4:	f7fe ff94 	bl	8000210 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	4979      	ldr	r1, [pc, #484]	; (80014d8 <main+0x33c>)
 80012f2:	4871      	ldr	r0, [pc, #452]	; (80014b8 <main+0x31c>)
 80012f4:	f003 fd87 	bl	8004e06 <HAL_UART_Transmit>
  HAL_Delay(500);
 80012f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fc:	f001 f9d4 	bl	80026a8 <HAL_Delay>
  UART_R();
 8001300:	f7ff ff08 	bl	8001114 <UART_R>
    //##Set to client mode
  sprintf(uart_co, "AT+CWMODE_CUR=1\r\n");
 8001304:	4a74      	ldr	r2, [pc, #464]	; (80014d8 <main+0x33c>)
 8001306:	4b78      	ldr	r3, [pc, #480]	; (80014e8 <main+0x34c>)
 8001308:	4615      	mov	r5, r2
 800130a:	461c      	mov	r4, r3
 800130c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130e:	6028      	str	r0, [r5, #0]
 8001310:	6069      	str	r1, [r5, #4]
 8001312:	60aa      	str	r2, [r5, #8]
 8001314:	60eb      	str	r3, [r5, #12]
 8001316:	8823      	ldrh	r3, [r4, #0]
 8001318:	822b      	strh	r3, [r5, #16]
  HAL_UART_Transmit(&huart4, (uint8_t *)uart_co, strlen(uart_co), HAL_MAX_DELAY);
 800131a:	486f      	ldr	r0, [pc, #444]	; (80014d8 <main+0x33c>)
 800131c:	f7fe ff78 	bl	8000210 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	496b      	ldr	r1, [pc, #428]	; (80014d8 <main+0x33c>)
 800132a:	4863      	ldr	r0, [pc, #396]	; (80014b8 <main+0x31c>)
 800132c:	f003 fd6b 	bl	8004e06 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001330:	2064      	movs	r0, #100	; 0x64
 8001332:	f001 f9b9 	bl	80026a8 <HAL_Delay>
  UART_R();
 8001336:	f7ff feed 	bl	8001114 <UART_R>
  HAL_Delay(2000);
 800133a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800133e:	f001 f9b3 	bl	80026a8 <HAL_Delay>
    //##Connect to network
  sprintf(uart_co, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", WIFI_SSID, WIFI_PASS);
 8001342:	4b6a      	ldr	r3, [pc, #424]	; (80014ec <main+0x350>)
 8001344:	4a6a      	ldr	r2, [pc, #424]	; (80014f0 <main+0x354>)
 8001346:	496b      	ldr	r1, [pc, #428]	; (80014f4 <main+0x358>)
 8001348:	4863      	ldr	r0, [pc, #396]	; (80014d8 <main+0x33c>)
 800134a:	f005 fead 	bl	80070a8 <siprintf>
  HAL_UART_Transmit(&huart4, (uint8_t *)uart_co, strlen(uart_co), HAL_MAX_DELAY);
 800134e:	4862      	ldr	r0, [pc, #392]	; (80014d8 <main+0x33c>)
 8001350:	f7fe ff5e 	bl	8000210 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	495e      	ldr	r1, [pc, #376]	; (80014d8 <main+0x33c>)
 800135e:	4856      	ldr	r0, [pc, #344]	; (80014b8 <main+0x31c>)
 8001360:	f003 fd51 	bl	8004e06 <HAL_UART_Transmit>
  HAL_Delay(10000);
 8001364:	f242 7010 	movw	r0, #10000	; 0x2710
 8001368:	f001 f99e 	bl	80026a8 <HAL_Delay>
  UART_R();
 800136c:	f7ff fed2 	bl	8001114 <UART_R>
    //##Check for IP
  sprintf(uart_co, "AT+CIFSR\r\n");
 8001370:	4a59      	ldr	r2, [pc, #356]	; (80014d8 <main+0x33c>)
 8001372:	4b61      	ldr	r3, [pc, #388]	; (80014f8 <main+0x35c>)
 8001374:	cb03      	ldmia	r3!, {r0, r1}
 8001376:	6010      	str	r0, [r2, #0]
 8001378:	6051      	str	r1, [r2, #4]
 800137a:	8819      	ldrh	r1, [r3, #0]
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	8111      	strh	r1, [r2, #8]
 8001380:	7293      	strb	r3, [r2, #10]
  HAL_UART_Transmit(&huart4, (uint8_t *)uart_co, strlen(uart_co), HAL_MAX_DELAY);
 8001382:	4855      	ldr	r0, [pc, #340]	; (80014d8 <main+0x33c>)
 8001384:	f7fe ff44 	bl	8000210 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	4951      	ldr	r1, [pc, #324]	; (80014d8 <main+0x33c>)
 8001392:	4849      	ldr	r0, [pc, #292]	; (80014b8 <main+0x31c>)
 8001394:	f003 fd37 	bl	8004e06 <HAL_UART_Transmit>
  HAL_Delay(5000);
 8001398:	f241 3088 	movw	r0, #5000	; 0x1388
 800139c:	f001 f984 	bl	80026a8 <HAL_Delay>
  UART_R();
 80013a0:	f7ff feb8 	bl	8001114 <UART_R>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  /* Get BMP280 data */
     BMP280_read_temperature_double(&temp);
 80013a4:	4855      	ldr	r0, [pc, #340]	; (80014fc <main+0x360>)
 80013a6:	f001 f85b 	bl	8002460 <BMP280_read_temperature_double>
	 BMP280_read_pressure_double(&press);
 80013aa:	4855      	ldr	r0, [pc, #340]	; (8001500 <main+0x364>)
 80013ac:	f001 f882 	bl	80024b4 <BMP280_read_pressure_double>
	 alt = BMP280_calculate_altitude(QNH*100);
 80013b0:	4854      	ldr	r0, [pc, #336]	; (8001504 <main+0x368>)
 80013b2:	f001 f8a9 	bl	8002508 <BMP280_calculate_altitude>
 80013b6:	eeb0 7a40 	vmov.f32	s14, s0
 80013ba:	eef0 7a60 	vmov.f32	s15, s1
 80013be:	4b52      	ldr	r3, [pc, #328]	; (8001508 <main+0x36c>)
 80013c0:	ed83 7b00 	vstr	d7, [r3]
	 //***REQUEST for sending
	 char rq[256];
	 sprintf(rq,"&temp=%.1f&press=%.0f %.1f HTTP/1.1\r\nHost: %s\r\n\r\n", temp, press, alt, SERVER_ADD);
 80013c4:	4b4d      	ldr	r3, [pc, #308]	; (80014fc <main+0x360>)
 80013c6:	e9d3 5600 	ldrd	r5, r6, [r3]
 80013ca:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <main+0x364>)
 80013cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013d0:	4a4d      	ldr	r2, [pc, #308]	; (8001508 <main+0x36c>)
 80013d2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80013d6:	f107 0c04 	add.w	ip, r7, #4
 80013da:	484c      	ldr	r0, [pc, #304]	; (800150c <main+0x370>)
 80013dc:	9004      	str	r0, [sp, #16]
 80013de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80013e2:	e9cd 3400 	strd	r3, r4, [sp]
 80013e6:	462a      	mov	r2, r5
 80013e8:	4633      	mov	r3, r6
 80013ea:	4949      	ldr	r1, [pc, #292]	; (8001510 <main+0x374>)
 80013ec:	4660      	mov	r0, ip
 80013ee:	f005 fe5b 	bl	80070a8 <siprintf>
	 //***CONNECTING to the server
		sprintf(uart_co, "AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", SERVER_ADD , SERVER_PORT);
 80013f2:	4b48      	ldr	r3, [pc, #288]	; (8001514 <main+0x378>)
 80013f4:	4a45      	ldr	r2, [pc, #276]	; (800150c <main+0x370>)
 80013f6:	4948      	ldr	r1, [pc, #288]	; (8001518 <main+0x37c>)
 80013f8:	4837      	ldr	r0, [pc, #220]	; (80014d8 <main+0x33c>)
 80013fa:	f005 fe55 	bl	80070a8 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)uart_co, strlen(uart_co), 1000);
 80013fe:	4836      	ldr	r0, [pc, #216]	; (80014d8 <main+0x33c>)
 8001400:	f7fe ff06 	bl	8000210 <strlen>
 8001404:	4603      	mov	r3, r0
 8001406:	b29a      	uxth	r2, r3
 8001408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140c:	4932      	ldr	r1, [pc, #200]	; (80014d8 <main+0x33c>)
 800140e:	482a      	ldr	r0, [pc, #168]	; (80014b8 <main+0x31c>)
 8001410:	f003 fcf9 	bl	8004e06 <HAL_UART_Transmit>
		HAL_Delay(10000);
 8001414:	f242 7010 	movw	r0, #10000	; 0x2710
 8001418:	f001 f946 	bl	80026a8 <HAL_Delay>
		UART_R();
 800141c:	f7ff fe7a 	bl	8001114 <UART_R>
	//*** send length to
		sprintf(uart_co, "AT+CIPSEND=%d\r\n", strlen(rq));
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe fef4 	bl	8000210 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	493b      	ldr	r1, [pc, #236]	; (800151c <main+0x380>)
 800142e:	482a      	ldr	r0, [pc, #168]	; (80014d8 <main+0x33c>)
 8001430:	f005 fe3a 	bl	80070a8 <siprintf>
				HAL_UART_Transmit(&huart4, (uint8_t *)uart_co, strlen(uart_co), HAL_MAX_DELAY);
 8001434:	4828      	ldr	r0, [pc, #160]	; (80014d8 <main+0x33c>)
 8001436:	f7fe feeb 	bl	8000210 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	4925      	ldr	r1, [pc, #148]	; (80014d8 <main+0x33c>)
 8001444:	481c      	ldr	r0, [pc, #112]	; (80014b8 <main+0x31c>)
 8001446:	f003 fcde 	bl	8004e06 <HAL_UART_Transmit>
				HAL_Delay(200); // wait for ">"
 800144a:	20c8      	movs	r0, #200	; 0xc8
 800144c:	f001 f92c 	bl	80026a8 <HAL_Delay>
				UART_R();
 8001450:	f7ff fe60 	bl	8001114 <UART_R>
	///***Send data
	   HAL_UART_Transmit(&huart4, (uint8_t *)rq, strlen(rq), 1000);
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe feda 	bl	8000210 <strlen>
 800145c:	4603      	mov	r3, r0
 800145e:	b29a      	uxth	r2, r3
 8001460:	1d39      	adds	r1, r7, #4
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	4814      	ldr	r0, [pc, #80]	; (80014b8 <main+0x31c>)
 8001468:	f003 fccd 	bl	8004e06 <HAL_UART_Transmit>
	   HAL_Delay(1800);
 800146c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001470:	f001 f91a 	bl	80026a8 <HAL_Delay>
	   UART_R();
 8001474:	f7ff fe4e 	bl	8001114 <UART_R>
	///***Disconnect from server */
	    sprintf(uart_co, "AT+CIPCLOSE\r\n");
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <main+0x33c>)
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <main+0x384>)
 800147c:	4614      	mov	r4, r2
 800147e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001480:	6020      	str	r0, [r4, #0]
 8001482:	6061      	str	r1, [r4, #4]
 8001484:	60a2      	str	r2, [r4, #8]
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	81a3      	strh	r3, [r4, #12]
		HAL_UART_Transmit(&huart4, (uint8_t *)uart_co, strlen(uart_co), 1000);
 800148a:	4813      	ldr	r0, [pc, #76]	; (80014d8 <main+0x33c>)
 800148c:	f7fe fec0 	bl	8000210 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001498:	490f      	ldr	r1, [pc, #60]	; (80014d8 <main+0x33c>)
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <main+0x31c>)
 800149c:	f003 fcb3 	bl	8004e06 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80014a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a4:	f001 f900 	bl	80026a8 <HAL_Delay>
		UART_R();
 80014a8:	f7ff fe34 	bl	8001114 <UART_R>
  while (1){
 80014ac:	e77a      	b.n	80013a4 <main+0x208>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	20002510 	.word	0x20002510
 80014bc:	20001488 	.word	0x20001488
 80014c0:	2000249c 	.word	0x2000249c
 80014c4:	08009978 	.word	0x08009978
 80014c8:	2000032c 	.word	0x2000032c
 80014cc:	20002498 	.word	0x20002498
 80014d0:	08009994 	.word	0x08009994
 80014d4:	080099c0 	.word	0x080099c0
 80014d8:	20000380 	.word	0x20000380
 80014dc:	080099d8 	.word	0x080099d8
 80014e0:	080099e4 	.word	0x080099e4
 80014e4:	080099ec 	.word	0x080099ec
 80014e8:	080099f8 	.word	0x080099f8
 80014ec:	08009a0c 	.word	0x08009a0c
 80014f0:	08009a18 	.word	0x08009a18
 80014f4:	08009a24 	.word	0x08009a24
 80014f8:	08009a40 	.word	0x08009a40
 80014fc:	20001480 	.word	0x20001480
 8001500:	20002490 	.word	0x20002490
 8001504:	00018894 	.word	0x00018894
 8001508:	20002488 	.word	0x20002488
 800150c:	08009a80 	.word	0x08009a80
 8001510:	08009a4c 	.word	0x08009a4c
 8001514:	08009a90 	.word	0x08009a90
 8001518:	08009a98 	.word	0x08009a98
 800151c:	08009ab4 	.word	0x08009ab4
 8001520:	08009ac4 	.word	0x08009ac4

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b094      	sub	sp, #80	; 0x50
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	2234      	movs	r2, #52	; 0x34
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f005 f954 	bl	80067e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <SystemClock_Config+0xdc>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <SystemClock_Config+0xdc>)
 8001552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <SystemClock_Config+0xdc>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001564:	2300      	movs	r3, #0
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4b26      	ldr	r3, [pc, #152]	; (8001604 <SystemClock_Config+0xe0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a25      	ldr	r2, [pc, #148]	; (8001604 <SystemClock_Config+0xe0>)
 800156e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <SystemClock_Config+0xe0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001584:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158a:	2302      	movs	r3, #2
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001594:	2304      	movs	r3, #4
 8001596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001598:	23b4      	movs	r3, #180	; 0xb4
 800159a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800159c:	2302      	movs	r3, #2
 800159e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 f983 	bl	80048b8 <HAL_RCC_OscConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015b8:	f000 f826 	bl	8001608 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015bc:	f002 fe72 	bl	80042a4 <HAL_PWREx_EnableOverDrive>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015c6:	f000 f81f 	bl	8001608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2302      	movs	r3, #2
 80015d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2105      	movs	r1, #5
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 feab 	bl	8004344 <HAL_RCC_ClockConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80015f4:	f000 f808 	bl	8001608 <Error_Handler>
  }
}
 80015f8:	bf00      	nop
 80015fa:	3750      	adds	r7, #80	; 0x50
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_MspInit+0x4c>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_MspInit+0x4c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001656:	2007      	movs	r0, #7
 8001658:	f001 f918 	bl	800288c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <MemManage_Handler+0x4>

08001682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <UsageFault_Handler+0x4>

0800168e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016bc:	f000 ffd4 	bl	8002668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <DMA1_Stream2_IRQHandler+0x10>)
 80016ca:	f001 fa27 	bl	8002b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200024b0 	.word	0x200024b0

080016d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x50>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x16>
		heap_end = &end;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <_sbrk+0x50>)
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <_sbrk+0x54>)
 80016ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <_sbrk+0x50>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <_sbrk+0x50>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	466a      	mov	r2, sp
 80016fe:	4293      	cmp	r3, r2
 8001700:	d907      	bls.n	8001712 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001702:	f005 f843 	bl	800678c <__errno>
 8001706:	4602      	mov	r2, r0
 8001708:	230c      	movs	r3, #12
 800170a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	e006      	b.n	8001720 <_sbrk+0x48>
	}

	heap_end += incr;
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <_sbrk+0x50>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a03      	ldr	r2, [pc, #12]	; (8001728 <_sbrk+0x50>)
 800171c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000210 	.word	0x20000210
 800172c:	20002560 	.word	0x20002560

08001730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <SystemInit+0x28>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <SystemInit+0x28>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SystemInit+0x28>)
 8001746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174a:	609a      	str	r2, [r3, #8]
#endif
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_UART4_Init+0x4c>)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <MX_UART4_Init+0x50>)
 8001764:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_UART4_Init+0x4c>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_UART4_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_UART4_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_UART4_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_UART4_Init+0x4c>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_UART4_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_UART4_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_UART4_Init+0x4c>)
 8001794:	f003 faea 	bl	8004d6c <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800179e:	f7ff ff33 	bl	8001608 <Error_Handler>
  }

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20002510 	.word	0x20002510
 80017ac:	40004c00 	.word	0x40004c00

080017b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a31      	ldr	r2, [pc, #196]	; (8001894 <HAL_UART_MspInit+0xe4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d15b      	bne.n	800188a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_UART_MspInit+0xe8>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a2f      	ldr	r2, [pc, #188]	; (8001898 <HAL_UART_MspInit+0xe8>)
 80017dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <HAL_UART_MspInit+0xe8>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_UART_MspInit+0xe8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a28      	ldr	r2, [pc, #160]	; (8001898 <HAL_UART_MspInit+0xe8>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_UART_MspInit+0xe8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800180a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001814:	2301      	movs	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800181c:	2308      	movs	r3, #8
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	481d      	ldr	r0, [pc, #116]	; (800189c <HAL_UART_MspInit+0xec>)
 8001828:	f001 fbe0 	bl	8002fec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 800182e:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <HAL_UART_MspInit+0xf4>)
 8001830:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 8001834:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001838:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 8001848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 800185c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001860:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800186e:	480c      	ldr	r0, [pc, #48]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 8001870:	f001 f84e 	bl	8002910 <HAL_DMA_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800187a:	f7ff fec5 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 8001882:	635a      	str	r2, [r3, #52]	; 0x34
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <HAL_UART_MspInit+0xf0>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40004c00 	.word	0x40004c00
 8001898:	40023800 	.word	0x40023800
 800189c:	40020800 	.word	0x40020800
 80018a0:	200024b0 	.word	0x200024b0
 80018a4:	40026040 	.word	0x40026040

080018a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ae:	e003      	b.n	80018b8 <LoopCopyDataInit>

080018b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018b6:	3104      	adds	r1, #4

080018b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018c0:	d3f6      	bcc.n	80018b0 <CopyDataInit>
  ldr  r2, =_sbss
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018c4:	e002      	b.n	80018cc <LoopFillZerobss>

080018c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018c8:	f842 3b04 	str.w	r3, [r2], #4

080018cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018d0:	d3f9      	bcc.n	80018c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018d2:	f7ff ff2d 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d6:	f004 ff5f 	bl	8006798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018da:	f7ff fc5f 	bl	800119c <main>
  bx  lr    
 80018de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018e4:	0800a2e8 	.word	0x0800a2e8
  ldr  r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018ec:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80018f0:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80018f4:	2000255c 	.word	0x2000255c

080018f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC_IRQHandler>
	...

080018fc <BMP280_I2C_Write>:
 *
 */
static inline s8 BMP280_I2C_Write (u8 dev_addr,
		u8 reg_addr,
		u8 *reg_data,
		u8 cnt) {
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b087      	sub	sp, #28
 8001900:	af04      	add	r7, sp, #16
 8001902:	603a      	str	r2, [r7, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
 800190a:	460b      	mov	r3, r1
 800190c:	71bb      	strb	r3, [r7, #6]
 800190e:	4613      	mov	r3, r2
 8001910:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(p_bmp280->i2c_handle, dev_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <BMP280_I2C_Write+0x4c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a18      	ldr	r0, [r3, #32]
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	b29b      	uxth	r3, r3
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	b299      	uxth	r1, r3
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	b29c      	uxth	r4, r3
 8001924:	797b      	ldrb	r3, [r7, #5]
 8001926:	b29b      	uxth	r3, r3
 8001928:	2264      	movs	r2, #100	; 0x64
 800192a:	9202      	str	r2, [sp, #8]
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2301      	movs	r3, #1
 8001934:	4622      	mov	r2, r4
 8001936:	f001 fe3d 	bl	80035b4 <HAL_I2C_Mem_Write>
 800193a:	4603      	mov	r3, r0
 800193c:	b25b      	sxtb	r3, r3
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	20002550 	.word	0x20002550

0800194c <BMP280_I2C_Read>:
 *
 */
static inline s8 BMP280_I2C_Read (u8 dev_addr,
		u8 reg_addr,
		u8 *reg_data,
		u8 cnt) {
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b087      	sub	sp, #28
 8001950:	af04      	add	r7, sp, #16
 8001952:	603a      	str	r2, [r7, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	460b      	mov	r3, r1
 800195c:	71bb      	strb	r3, [r7, #6]
 800195e:	4613      	mov	r3, r2
 8001960:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(p_bmp280->i2c_handle, dev_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <BMP280_I2C_Read+0x4c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a18      	ldr	r0, [r3, #32]
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	b29b      	uxth	r3, r3
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	b299      	uxth	r1, r3
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	b29c      	uxth	r4, r3
 8001974:	797b      	ldrb	r3, [r7, #5]
 8001976:	b29b      	uxth	r3, r3
 8001978:	2264      	movs	r2, #100	; 0x64
 800197a:	9202      	str	r2, [sp, #8]
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	4622      	mov	r2, r4
 8001986:	f001 ff0f 	bl	80037a8 <HAL_I2C_Mem_Read>
 800198a:	4603      	mov	r3, r0
 800198c:	b25b      	sxtb	r3, r3
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	bf00      	nop
 8001998:	20002550 	.word	0x20002550

0800199c <BMP280_init>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_init(bmp280_t *bmp280)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80019a4:	23ff      	movs	r3, #255	; 0xff
 80019a6:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	737b      	strb	r3, [r7, #13]
	u8 v_chip_id_read_count = BMP280_CHIP_ID_READ_COUNT;
 80019ac:	2305      	movs	r3, #5
 80019ae:	73bb      	strb	r3, [r7, #14]

	p_bmp280 = bmp280;/* assign BMP280 ptr */
 80019b0:	4a2b      	ldr	r2, [pc, #172]	; (8001a60 <BMP280_init+0xc4>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
#ifdef HAL_I2C_MODULE_ENABLED
	p_bmp280->bus_write = BMP280_I2C_Write;
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <BMP280_init+0xc4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <BMP280_init+0xc8>)
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
	p_bmp280->bus_read = BMP280_I2C_Read;
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <BMP280_init+0xc4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a29      	ldr	r2, [pc, #164]	; (8001a68 <BMP280_init+0xcc>)
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif HAL_SPI_MODULE_ENABLED
	p_bmp280->bus_write = BMP280_SPI_Write;
	p_bmp280->bus_read = BMP280_SPI_Read;
#endif
	if (p_bmp280->dev_addr == 0) {
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <BMP280_init+0xc4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	7f5b      	ldrb	r3, [r3, #29]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <BMP280_init+0x3c>
		p_bmp280->dev_addr = BMP280_I2C_ADDRESS1;
 80019d0:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <BMP280_init+0xc4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2276      	movs	r2, #118	; 0x76
 80019d6:	775a      	strb	r2, [r3, #29]
	}
	p_bmp280->delay_msec = HAL_Delay;
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <BMP280_init+0xc4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <BMP280_init+0xd0>)
 80019de:	631a      	str	r2, [r3, #48]	; 0x30

	while (v_chip_id_read_count > 0) {
 80019e0:	e01d      	b.n	8001a1e <BMP280_init+0x82>
		/* read chip id */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <BMP280_init+0xc4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <BMP280_init+0xc4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	7f58      	ldrb	r0, [r3, #29]
 80019ee:	f107 020d 	add.w	r2, r7, #13
 80019f2:	2301      	movs	r3, #1
 80019f4:	21d0      	movs	r1, #208	; 0xd0
 80019f6:	47a0      	blx	r4
 80019f8:	4603      	mov	r3, r0
 80019fa:	73fb      	strb	r3, [r7, #15]
				BMP280_CHIP_ID_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		/* Check for the correct chip id */
		if ((v_data_u8 == BMP280_CHIP_ID1)
 80019fc:	7b7b      	ldrb	r3, [r7, #13]
 80019fe:	2b56      	cmp	r3, #86	; 0x56
 8001a00:	d010      	beq.n	8001a24 <BMP280_init+0x88>
			|| (v_data_u8 == BMP280_CHIP_ID2)
 8001a02:	7b7b      	ldrb	r3, [r7, #13]
 8001a04:	2b57      	cmp	r3, #87	; 0x57
 8001a06:	d00d      	beq.n	8001a24 <BMP280_init+0x88>
			|| (v_data_u8 == BMP280_CHIP_ID3))
 8001a08:	7b7b      	ldrb	r3, [r7, #13]
 8001a0a:	2b58      	cmp	r3, #88	; 0x58
 8001a0c:	d00a      	beq.n	8001a24 <BMP280_init+0x88>
			break;
		v_chip_id_read_count--;
 8001a0e:	7bbb      	ldrb	r3, [r7, #14]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	73bb      	strb	r3, [r7, #14]
		/* Delay added concerning the low speed of power up system to
		facilitate the proper reading of the chip ID */
		p_bmp280->delay_msec(BMP280_REGISTER_READ_DELAY);
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <BMP280_init+0xc4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	4798      	blx	r3
	while (v_chip_id_read_count > 0) {
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1de      	bne.n	80019e2 <BMP280_init+0x46>
	}

	/*assign chip ID to the global structure*/
	p_bmp280->chip_id = v_data_u8;
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <BMP280_init+0xc4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	7b7a      	ldrb	r2, [r7, #13]
 8001a2a:	771a      	strb	r2, [r3, #28]
	/*com_rslt status of chip ID read*/
	com_rslt = (v_chip_id_read_count == BMP280_INIT_VALUE) ?
 8001a2c:	7bbb      	ldrb	r3, [r7, #14]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <BMP280_init+0x9c>
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e000      	b.n	8001a3a <BMP280_init+0x9e>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
			BMP280_CHIP_ID_READ_FAIL : BMP280_CHIP_ID_READ_SUCCESS;

	if (com_rslt == BMP280_CHIP_ID_READ_SUCCESS) {
 8001a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <BMP280_init+0xb8>
		/* readout bmp280 calibration parameter structure */
		com_rslt += BMP280_get_calib_param();
 8001a44:	f000 f87c 	bl	8001b40 <BMP280_get_calib_param>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	4413      	add	r3, r2
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	73fb      	strb	r3, [r7, #15]
	}
	return com_rslt;
 8001a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	20002550 	.word	0x20002550
 8001a64:	080018fd 	.word	0x080018fd
 8001a68:	0800194d 	.word	0x0800194d
 8001a6c:	080026a9 	.word	0x080026a9

08001a70 <BMP280_read_uncomp_temperature>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_uncomp_temperature(
		s32 *v_uncomp_temperature_s32)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001a78:	23ff      	movs	r3, #255	; 0xff
 8001a7a:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8r[0] - Temperature MSB
	 a_data_u8r[1] - Temperature LSB
	 a_data_u8r[2] - Temperature LSB
	 */
	u8 a_data_u8r[BMP280_TEMPERATURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	733b      	strb	r3, [r7, #12]
 8001a80:	2300      	movs	r3, #0
 8001a82:	737b      	strb	r3, [r7, #13]
 8001a84:	2300      	movs	r3, #0
 8001a86:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <BMP280_read_uncomp_temperature+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <BMP280_read_uncomp_temperature+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 8001a90:	2381      	movs	r3, #129	; 0x81
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e018      	b.n	8001ac8 <BMP280_read_uncomp_temperature+0x58>
	} else {
		/* read temperature data */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <BMP280_read_uncomp_temperature+0x64>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <BMP280_read_uncomp_temperature+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	7f58      	ldrb	r0, [r3, #29]
 8001aa2:	f107 020c 	add.w	r2, r7, #12
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	21fa      	movs	r1, #250	; 0xfa
 8001aaa:	47a0      	blx	r4
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
				BMP280_TEMPERATURE_MSB_REG, a_data_u8r,
				BMP280_TEMPERATURE_DATA_LENGTH);
		*v_uncomp_temperature_s32 = (s32)((((u32)(
				a_data_u8r[BMP280_TEMPERATURE_MSB_DATA]))
 8001ab0:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 8001ab2:	031a      	lsls	r2, r3, #12
				| (((u32)(
				a_data_u8r[BMP280_TEMPERATURE_LSB_DATA]))
 8001ab4:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 8001ab6:	011b      	lsls	r3, r3, #4
				| (((u32)(
 8001ab8:	4313      	orrs	r3, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 8001aba:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 8001abc:	0912      	lsrs	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 8001ac0:	4313      	orrs	r3, r2
		*v_uncomp_temperature_s32 = (s32)((((u32)(
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 8001ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	20002550 	.word	0x20002550

08001ad8 <BMP280_read_uncomp_pressure>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_uncomp_pressure(
		s32 *v_uncomp_pressure_s32)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001ae0:	23ff      	movs	r3, #255	; 0xff
 8001ae2:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8[0] - Pressure MSB
	 a_data_u8[1] - Pressure LSB
	 a_data_u8[2] - Pressure LSB
	 */
	u8 a_data_u8[BMP280_PRESSURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	733b      	strb	r3, [r7, #12]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	737b      	strb	r3, [r7, #13]
 8001aec:	2300      	movs	r3, #0
 8001aee:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <BMP280_read_uncomp_pressure+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <BMP280_read_uncomp_pressure+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 8001af8:	2381      	movs	r3, #129	; 0x81
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	e018      	b.n	8001b30 <BMP280_read_uncomp_pressure+0x58>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <BMP280_read_uncomp_pressure+0x64>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <BMP280_read_uncomp_pressure+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	7f58      	ldrb	r0, [r3, #29]
 8001b0a:	f107 020c 	add.w	r2, r7, #12
 8001b0e:	2303      	movs	r3, #3
 8001b10:	21f7      	movs	r1, #247	; 0xf7
 8001b12:	47a0      	blx	r4
 8001b14:	4603      	mov	r3, r0
 8001b16:	73fb      	strb	r3, [r7, #15]
				BMP280_PRESSURE_MSB_REG, a_data_u8,
				BMP280_PRESSURE_DATA_LENGTH);
		*v_uncomp_pressure_s32 = (s32)((((u32)(
				a_data_u8[BMP280_PRESSURE_MSB_DATA]))
 8001b18:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 8001b1a:	031a      	lsls	r2, r3, #12
				| (((u32)(a_data_u8[BMP280_PRESSURE_LSB_DATA]))
 8001b1c:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 8001b1e:	011b      	lsls	r3, r3, #4
				| (((u32)(a_data_u8[BMP280_PRESSURE_LSB_DATA]))
 8001b20:	4313      	orrs	r3, r2
				| ((u32)a_data_u8[BMP280_PRESSURE_XLSB_DATA]
 8001b22:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 8001b24:	0912      	lsrs	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8[BMP280_PRESSURE_XLSB_DATA]
 8001b28:	4313      	orrs	r3, r2
		*v_uncomp_pressure_s32 = (s32)((((u32)(
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 8001b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}
 8001b3c:	20002550 	.word	0x20002550

08001b40 <BMP280_get_calib_param>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_get_calib_param(void)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001b46:	23ff      	movs	r3, #255	; 0xff
 8001b48:	77fb      	strb	r3, [r7, #31]
	u8 a_data_u8[BMP280_CALIB_DATA_SIZE] = {BMP280_INIT_VALUE,
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	615a      	str	r2, [r3, #20]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001b5a:	4b4e      	ldr	r3, [pc, #312]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <BMP280_get_calib_param+0x28>
		com_rslt = E_BMP280_NULL_PTR;
 8001b62:	2381      	movs	r3, #129	; 0x81
 8001b64:	77fb      	strb	r3, [r7, #31]
 8001b66:	e08f      	b.n	8001c88 <BMP280_get_calib_param+0x148>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8001b68:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001b6e:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	7f58      	ldrb	r0, [r3, #29]
 8001b74:	1d3a      	adds	r2, r7, #4
 8001b76:	2318      	movs	r3, #24
 8001b78:	2188      	movs	r1, #136	; 0x88
 8001b7a:	47a0      	blx	r4
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	77fb      	strb	r3, [r7, #31]
				BMP280_TEMPERATURE_CALIB_DIG_T1_LSB_REG,
				a_data_u8,
				BMP280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH);
		/* read calibration values*/
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 8001b80:	797b      	ldrb	r3, [r7, #5]
					BMP280_TEMPERATURE_CALIB_DIG_T1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001b82:	021b      	lsls	r3, r3, #8
					| a_data_u8[
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	793b      	ldrb	r3, [r7, #4]
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 8001b8e:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b292      	uxth	r2, r2
 8001b94:	801a      	strh	r2, [r3, #0]
					BMP280_TEMPERATURE_CALIB_DIG_T1_LSB]);
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	b25b      	sxtb	r3, r3
					BMP280_TEMPERATURE_CALIB_DIG_T2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001b9a:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001b9c:	b219      	sxth	r1, r3
					| a_data_u8[
 8001b9e:	79bb      	ldrb	r3, [r7, #6]
 8001ba0:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001ba2:	4b3c      	ldr	r3, [pc, #240]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	b212      	sxth	r2, r2
 8001baa:	805a      	strh	r2, [r3, #2]
					BMP280_TEMPERATURE_CALIB_DIG_T2_LSB]);
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8001bac:	7a7b      	ldrb	r3, [r7, #9]
 8001bae:	b25b      	sxtb	r3, r3
					BMP280_TEMPERATURE_CALIB_DIG_T3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001bb0:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8001bb2:	b219      	sxth	r1, r3
					| a_data_u8[
 8001bb4:	7a3b      	ldrb	r3, [r7, #8]
 8001bb6:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8001bb8:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	b212      	sxth	r2, r2
 8001bc0:	809a      	strh	r2, [r3, #4]
					BMP280_TEMPERATURE_CALIB_DIG_T3_LSB]);
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
					BMP280_PRESSURE_CALIB_DIG_P1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001bc4:	021b      	lsls	r3, r3, #8
					| a_data_u8[
 8001bc6:	b21a      	sxth	r2, r3
 8001bc8:	7abb      	ldrb	r3, [r7, #10]
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	80da      	strh	r2, [r3, #6]
					BMP280_PRESSURE_CALIB_DIG_P1_LSB]);
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8001bd8:	7b7b      	ldrb	r3, [r7, #13]
 8001bda:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001bdc:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8001bde:	b219      	sxth	r1, r3
					| a_data_u8[
 8001be0:	7b3b      	ldrb	r3, [r7, #12]
 8001be2:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	b212      	sxth	r2, r2
 8001bec:	811a      	strh	r2, [r3, #8]
					BMP280_PRESSURE_CALIB_DIG_P2_LSB]);
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001bf2:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 8001bf4:	b219      	sxth	r1, r3
					| a_data_u8[
 8001bf6:	7bbb      	ldrb	r3, [r7, #14]
 8001bf8:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	b212      	sxth	r2, r2
 8001c02:	815a      	strh	r2, [r3, #10]
					BMP280_PRESSURE_CALIB_DIG_P3_LSB]);
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8001c04:	7c7b      	ldrb	r3, [r7, #17]
 8001c06:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P4_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001c08:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8001c0a:	b219      	sxth	r1, r3
					| a_data_u8[
 8001c0c:	7c3b      	ldrb	r3, [r7, #16]
 8001c0e:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	b212      	sxth	r2, r2
 8001c18:	819a      	strh	r2, [r3, #12]
					BMP280_PRESSURE_CALIB_DIG_P4_LSB]);
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8001c1a:	7cfb      	ldrb	r3, [r7, #19]
 8001c1c:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P5_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001c1e:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8001c20:	b219      	sxth	r1, r3
					| a_data_u8[
 8001c22:	7cbb      	ldrb	r3, [r7, #18]
 8001c24:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	b212      	sxth	r2, r2
 8001c2e:	81da      	strh	r2, [r3, #14]
					BMP280_PRESSURE_CALIB_DIG_P5_LSB]);
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001c30:	7d7b      	ldrb	r3, [r7, #21]
 8001c32:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P6_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001c34:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001c36:	b219      	sxth	r1, r3
					| a_data_u8[
 8001c38:	7d3b      	ldrb	r3, [r7, #20]
 8001c3a:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	b212      	sxth	r2, r2
 8001c44:	821a      	strh	r2, [r3, #16]
					BMP280_PRESSURE_CALIB_DIG_P6_LSB]);
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P7_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001c4a:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8001c4c:	b219      	sxth	r1, r3
					| a_data_u8[
 8001c4e:	7dbb      	ldrb	r3, [r7, #22]
 8001c50:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	b212      	sxth	r2, r2
 8001c5a:	825a      	strh	r2, [r3, #18]
					BMP280_PRESSURE_CALIB_DIG_P7_LSB]);
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8001c5c:	7e7b      	ldrb	r3, [r7, #25]
 8001c5e:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P8_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001c60:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8001c62:	b219      	sxth	r1, r3
					| a_data_u8[
 8001c64:	7e3b      	ldrb	r3, [r7, #24]
 8001c66:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	b212      	sxth	r2, r2
 8001c70:	829a      	strh	r2, [r3, #20]
					BMP280_PRESSURE_CALIB_DIG_P8_LSB]);
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8001c72:	7efb      	ldrb	r3, [r7, #27]
 8001c74:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P9_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001c76:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8001c78:	b219      	sxth	r1, r3
					| a_data_u8[
 8001c7a:	7ebb      	ldrb	r3, [r7, #26]
 8001c7c:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <BMP280_get_calib_param+0x154>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	b212      	sxth	r2, r2
 8001c86:	82da      	strh	r2, [r3, #22]
					BMP280_PRESSURE_CALIB_DIG_P9_LSB]);
	}
	return com_rslt;
 8001c88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3724      	adds	r7, #36	; 0x24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}
 8001c94:	20002550 	.word	0x20002550

08001c98 <BMP280_set_power_mode>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_power_mode(u8 v_power_mode_u8)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001ca2:	23ff      	movs	r3, #255	; 0xff
 8001ca4:	73fb      	strb	r3, [r7, #15]
	u8 v_mode_u8 = BMP280_INIT_VALUE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <BMP280_set_power_mode+0x80>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <BMP280_set_power_mode+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8001cb2:	2381      	movs	r3, #129	; 0x81
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e029      	b.n	8001d0c <BMP280_set_power_mode+0x74>
	} else {
		if (v_power_mode_u8 <= BMP280_NORMAL_MODE) {
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d824      	bhi.n	8001d08 <BMP280_set_power_mode+0x70>
			/* write the power mode*/
			v_mode_u8 = (p_bmp280->oversamp_temperature
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <BMP280_set_power_mode+0x80>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
					<< BMP280_SHIFT_BIT_POSITION_BY_05_BITS)
 8001cc6:	015b      	lsls	r3, r3, #5
 8001cc8:	b2da      	uxtb	r2, r3
					+ (p_bmp280->oversamp_pressure
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <BMP280_set_power_mode+0x80>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
					<< BMP280_SHIFT_BIT_POSITION_BY_02_BITS)
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	b2db      	uxtb	r3, r3
					+ (p_bmp280->oversamp_pressure
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b2da      	uxtb	r2, r3
					+ v_power_mode_u8;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4413      	add	r3, r2
 8001cde:	b2db      	uxtb	r3, r3
			v_mode_u8 = (p_bmp280->oversamp_temperature
 8001ce0:	73bb      	strb	r3, [r7, #14]
			com_rslt = p_bmp280->BMP280_BUS_WRITE_FUNC(
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <BMP280_set_power_mode+0x80>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <BMP280_set_power_mode+0x80>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	7f58      	ldrb	r0, [r3, #29]
 8001cee:	f107 020e 	add.w	r2, r7, #14
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	21f4      	movs	r1, #244	; 0xf4
 8001cf6:	47a0      	blx	r4
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
					BMP280_CTRL_MEAS_REG_POWER_MODE__REG,
					&v_mode_u8,
					BMP280_GEN_READ_WRITE_DATA_LENGTH);
			/* Delay added concerning the low speed of power up system to
			facilitate the proper setting of power mode */
			p_bmp280->delay_msec(T_INIT_MAX);
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <BMP280_set_power_mode+0x80>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	2014      	movs	r0, #20
 8001d04:	4798      	blx	r3
 8001d06:	e001      	b.n	8001d0c <BMP280_set_power_mode+0x74>
		} else {
			com_rslt = E_BMP280_OUT_OF_RANGE;
 8001d08:	23fe      	movs	r3, #254	; 0xfe
 8001d0a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return com_rslt;
 8001d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	20002550 	.word	0x20002550

08001d1c <BMP280_set_standby_durn>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_standby_durn(u8 v_standby_durn_u8)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001d26:	23ff      	movs	r3, #255	; 0xff
 8001d28:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <BMP280_set_standby_durn+0x88>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <BMP280_set_standby_durn+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8001d36:	2381      	movs	r3, #129	; 0x81
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e02d      	b.n	8001d98 <BMP280_set_standby_durn+0x7c>
	} else {
		/* write the standby duration*/
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <BMP280_set_standby_durn+0x88>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <BMP280_set_standby_durn+0x88>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	7f58      	ldrb	r0, [r3, #29]
 8001d48:	f107 020e 	add.w	r2, r7, #14
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	21f5      	movs	r1, #245	; 0xf5
 8001d50:	47a0      	blx	r4
 8001d52:	4603      	mov	r3, r0
 8001d54:	73fb      	strb	r3, [r7, #15]
				BMP280_CONFIG_REG_STANDBY_DURN__REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		if (com_rslt == SUCCESS) {
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d11c      	bne.n	8001d98 <BMP280_set_standby_durn+0x7c>
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	b25a      	sxtb	r2, r3
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	015b      	lsls	r3, r3, #5
 8001d6c:	b25b      	sxtb	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	73bb      	strb	r3, [r7, #14]
					BMP280_CONFIG_REG_STANDBY_DURN,
					v_standby_durn_u8);
			com_rslt += p_bmp280->BMP280_BUS_WRITE_FUNC(
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <BMP280_set_standby_durn+0x88>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <BMP280_set_standby_durn+0x88>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	7f58      	ldrb	r0, [r3, #29]
 8001d82:	f107 020e 	add.w	r2, r7, #14
 8001d86:	2301      	movs	r3, #1
 8001d88:	21f5      	movs	r1, #245	; 0xf5
 8001d8a:	47a0      	blx	r4
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	4413      	add	r3, r2
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	73fb      	strb	r3, [r7, #15]
					BMP280_CONFIG_REG_STANDBY_DURN__REG,
					&v_data_u8,
					BMP280_GEN_READ_WRITE_DATA_LENGTH);
		}
	}
	return com_rslt;
 8001d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}
 8001da4:	20002550 	.word	0x20002550

08001da8 <BMP280_set_work_mode>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_work_mode(u8 v_work_mode_u8)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001db2:	23ff      	movs	r3, #255	; 0xff
 8001db4:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001dba:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <BMP280_set_work_mode+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8001dc2:	2381      	movs	r3, #129	; 0x81
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e091      	b.n	8001eec <BMP280_set_work_mode+0x144>
	} else {
	if (v_work_mode_u8 <= BMP280_ULTRA_HIGH_RESOLUTION_MODE) {
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	f200 808c 	bhi.w	8001ee8 <BMP280_set_work_mode+0x140>
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(
 8001dd0:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001dd6:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	7f58      	ldrb	r0, [r3, #29]
 8001ddc:	f107 020e 	add.w	r2, r7, #14
 8001de0:	2301      	movs	r3, #1
 8001de2:	21f4      	movs	r1, #244	; 0xf4
 8001de4:	47a0      	blx	r4
 8001de6:	4603      	mov	r3, r0
 8001de8:	73fb      	strb	r3, [r7, #15]
				p_bmp280->dev_addr,
				BMP280_CTRL_MEAS_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		if (com_rslt == SUCCESS) {
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d17c      	bne.n	8001eec <BMP280_set_work_mode+0x144>
			switch (v_work_mode_u8) {
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d844      	bhi.n	8001e82 <BMP280_set_work_mode+0xda>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <BMP280_set_work_mode+0x58>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e15 	.word	0x08001e15
 8001e04:	08001e2b 	.word	0x08001e2b
 8001e08:	08001e41 	.word	0x08001e41
 8001e0c:	08001e57 	.word	0x08001e57
 8001e10:	08001e6d 	.word	0x08001e6d
			/* write work mode*/
			case BMP280_ULTRA_LOW_POWER_MODE:
				p_bmp280->oversamp_temperature =
 8001e14:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_ULTRALOWPOWER_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					BMP280_ULTRALOWPOWER_OVERSAMP_PRESSURE;
				break;
 8001e28:	e02b      	b.n	8001e82 <BMP280_set_work_mode+0xda>
			case BMP280_LOW_POWER_MODE:
				p_bmp280->oversamp_temperature =
 8001e2a:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					BMP280_LOWPOWER_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001e34:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					BMP280_LOWPOWER_OVERSAMP_PRESSURE;
				break;
 8001e3e:	e020      	b.n	8001e82 <BMP280_set_work_mode+0xda>
			case BMP280_STANDARD_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001e40:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_STANDARDRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_STANDARDRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001e54:	e015      	b.n	8001e82 <BMP280_set_work_mode+0xda>
			case BMP280_HIGH_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001e56:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_HIGHRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2204      	movs	r2, #4
 8001e66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_HIGHRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001e6a:	e00a      	b.n	8001e82 <BMP280_set_work_mode+0xda>
			case BMP280_ULTRA_HIGH_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2202      	movs	r2, #2
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_ULTRAHIGHRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2205      	movs	r2, #5
 8001e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_ULTRAHIGHRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001e80:	bf00      	nop
			}
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8001e82:	7bbb      	ldrb	r3, [r7, #14]
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	b25a      	sxtb	r2, r3
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e94:	015b      	lsls	r3, r3, #5
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	b25b      	sxtb	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	73bb      	strb	r3, [r7, #14]
				BMP280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE,
				p_bmp280->oversamp_temperature);
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	f023 031c 	bic.w	r3, r3, #28
 8001ea8:	b25a      	sxtb	r2, r3
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	f003 031c 	and.w	r3, r3, #28
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	73bb      	strb	r3, [r7, #14]
				BMP280_CTRL_MEAS_REG_OVERSAMP_PRESSURE,
				p_bmp280->oversamp_pressure);
			com_rslt += p_bmp280->BMP280_BUS_WRITE_FUNC(
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <BMP280_set_work_mode+0x150>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	7f58      	ldrb	r0, [r3, #29]
 8001ed0:	f107 020e 	add.w	r2, r7, #14
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	21f4      	movs	r1, #244	; 0xf4
 8001ed8:	47a0      	blx	r4
 8001eda:	4603      	mov	r3, r0
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	e001      	b.n	8001eec <BMP280_set_work_mode+0x144>
				p_bmp280->dev_addr, BMP280_CTRL_MEAS_REG,
				&v_data_u8, BMP280_GEN_READ_WRITE_DATA_LENGTH);
		}
	} else {
		com_rslt = E_BMP280_OUT_OF_RANGE;
 8001ee8:	23fe      	movs	r3, #254	; 0xfe
 8001eea:	73fb      	strb	r3, [r7, #15]
	}
	}
	return com_rslt;
 8001eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd90      	pop	{r4, r7, pc}
 8001ef8:	20002550 	.word	0x20002550

08001efc <BMP280_compensate_temperature_double>:
 *  @return
 *	Actual temperature in floating point
 *
 */
double BMP280_compensate_temperature_double(s32 v_uncomp_temperature_s32)
{
 8001efc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f00:	b088      	sub	sp, #32
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	double v_x1_u32r = BMP280_INIT_VALUE;
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	f04f 0400 	mov.w	r4, #0
 8001f0e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double v_x2_u32r = BMP280_INIT_VALUE;
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	f04f 0400 	mov.w	r4, #0
 8001f1a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double temperature = BMP280_INIT_VALUE;
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	f04f 0400 	mov.w	r4, #0
 8001f26:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* calculate x1*/
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fb1a 	bl	8000564 <__aeabi_i2d>
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <BMP280_compensate_temperature_double+0x1ac>)
 8001f36:	f7fe fca9 	bl	800088c <__aeabi_ddiv>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	4625      	mov	r5, r4
 8001f40:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_T1) / 1024.0) *
 8001f42:	4b5a      	ldr	r3, [pc, #360]	; (80020ac <BMP280_compensate_temperature_double+0x1b0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fafb 	bl	8000544 <__aeabi_ui2d>
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <BMP280_compensate_temperature_double+0x1b4>)
 8001f54:	f7fe fc9a 	bl	800088c <__aeabi_ddiv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	4629      	mov	r1, r5
 8001f60:	f7fe f9b2 	bl	80002c8 <__aeabi_dsub>
 8001f64:	4603      	mov	r3, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	4625      	mov	r5, r4
 8001f6a:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_T2);
 8001f6c:	4b4f      	ldr	r3, [pc, #316]	; (80020ac <BMP280_compensate_temperature_double+0x1b0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe faf5 	bl	8000564 <__aeabi_i2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe fb59 	bl	8000638 <__aeabi_dmul>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	/* calculate x2*/
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7fe fae8 	bl	8000564 <__aeabi_i2d>
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001f9c:	f7fe fc76 	bl	800088c <__aeabi_ddiv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	460c      	mov	r4, r1
 8001fa4:	4625      	mov	r5, r4
 8001fa6:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_T1) / 8192.0) *
 8001fa8:	4b40      	ldr	r3, [pc, #256]	; (80020ac <BMP280_compensate_temperature_double+0x1b0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fac8 	bl	8000544 <__aeabi_ui2d>
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <BMP280_compensate_temperature_double+0x1b8>)
 8001fba:	f7fe fc67 	bl	800088c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	f7fe f97f 	bl	80002c8 <__aeabi_dsub>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	460c      	mov	r4, r1
 8001fce:	4625      	mov	r5, r4
 8001fd0:	461c      	mov	r4, r3
			(((double)v_uncomp_temperature_s32) / 131072.0 -
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fac6 	bl	8000564 <__aeabi_i2d>
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001fe0:	f7fe fc54 	bl	800088c <__aeabi_ddiv>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4690      	mov	r8, r2
 8001fea:	4699      	mov	r9, r3
			((double)p_bmp280->calib_param.dig_T1) / 8192.0)) *
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <BMP280_compensate_temperature_double+0x1b0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe faa6 	bl	8000544 <__aeabi_ui2d>
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <BMP280_compensate_temperature_double+0x1b8>)
 8001ffe:	f7fe fc45 	bl	800088c <__aeabi_ddiv>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
			(((double)v_uncomp_temperature_s32) / 131072.0 -
 8002006:	4640      	mov	r0, r8
 8002008:	4649      	mov	r1, r9
 800200a:	f7fe f95d 	bl	80002c8 <__aeabi_dsub>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
			((double)p_bmp280->calib_param.dig_T1) / 8192.0) *
 8002012:	4620      	mov	r0, r4
 8002014:	4629      	mov	r1, r5
 8002016:	f7fe fb0f 	bl	8000638 <__aeabi_dmul>
 800201a:	4603      	mov	r3, r0
 800201c:	460c      	mov	r4, r1
 800201e:	4625      	mov	r5, r4
 8002020:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_T3);
 8002022:	4b22      	ldr	r3, [pc, #136]	; (80020ac <BMP280_compensate_temperature_double+0x1b0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa9a 	bl	8000564 <__aeabi_i2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe fafe 	bl	8000638 <__aeabi_dmul>
 800203c:	4603      	mov	r3, r0
 800203e:	460c      	mov	r4, r1
 8002040:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/* calculate t_fine*/
	p_bmp280->calib_param.t_fine = (s32)(v_x1_u32r + v_x2_u32r);
 8002044:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002048:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800204c:	f7fe f93e 	bl	80002cc <__adddf3>
 8002050:	4603      	mov	r3, r0
 8002052:	460c      	mov	r4, r1
 8002054:	4619      	mov	r1, r3
 8002056:	4622      	mov	r2, r4
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <BMP280_compensate_temperature_double+0x1b0>)
 800205a:	681c      	ldr	r4, [r3, #0]
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	f7fe fd9a 	bl	8000b98 <__aeabi_d2iz>
 8002064:	4603      	mov	r3, r0
 8002066:	61a3      	str	r3, [r4, #24]
	/* calculate true pressure*/
	temperature = (v_x1_u32r + v_x2_u32r) / 5120.0;
 8002068:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800206c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002070:	f7fe f92c 	bl	80002cc <__adddf3>
 8002074:	4603      	mov	r3, r0
 8002076:	460c      	mov	r4, r1
 8002078:	4618      	mov	r0, r3
 800207a:	4621      	mov	r1, r4
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <BMP280_compensate_temperature_double+0x1bc>)
 8002082:	f7fe fc03 	bl	800088c <__aeabi_ddiv>
 8002086:	4603      	mov	r3, r0
 8002088:	460c      	mov	r4, r1
 800208a:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return temperature;
 800208e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002092:	ec44 3b17 	vmov	d7, r3, r4
}
 8002096:	eeb0 0a47 	vmov.f32	s0, s14
 800209a:	eef0 0a67 	vmov.f32	s1, s15
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020a6:	bf00      	nop
 80020a8:	40d00000 	.word	0x40d00000
 80020ac:	20002550 	.word	0x20002550
 80020b0:	40900000 	.word	0x40900000
 80020b4:	40c00000 	.word	0x40c00000
 80020b8:	40b40000 	.word	0x40b40000
 80020bc:	00000000 	.word	0x00000000

080020c0 <BMP280_compensate_pressure_double>:
 *  @return
 *	Actual pressure in floating point
 *
 */
double BMP280_compensate_pressure_double(s32 v_uncomp_pressure_s32)
{
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	double v_x1_u32r = BMP280_INIT_VALUE;
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f04f 0400 	mov.w	r4, #0
 80020d0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double v_x2_u32r = BMP280_INIT_VALUE;
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	f04f 0400 	mov.w	r4, #0
 80020dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double pressure = BMP280_INIT_VALUE;
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	f04f 0400 	mov.w	r4, #0
 80020e8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	v_x1_u32r = ((double)p_bmp280->calib_param.t_fine/2.0) - 64000.0;
 80020ec:	4bca      	ldr	r3, [pc, #808]	; (8002418 <BMP280_compensate_pressure_double+0x358>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa36 	bl	8000564 <__aeabi_i2d>
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002100:	f7fe fbc4 	bl	800088c <__aeabi_ddiv>
 8002104:	4603      	mov	r3, r0
 8002106:	460c      	mov	r4, r1
 8002108:	4618      	mov	r0, r3
 800210a:	4621      	mov	r1, r4
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	4bc2      	ldr	r3, [pc, #776]	; (800241c <BMP280_compensate_pressure_double+0x35c>)
 8002112:	f7fe f8d9 	bl	80002c8 <__aeabi_dsub>
 8002116:	4603      	mov	r3, r0
 8002118:	460c      	mov	r4, r1
 800211a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x2_u32r = v_x1_u32r * v_x1_u32r *
 800211e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002122:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002126:	f7fe fa87 	bl	8000638 <__aeabi_dmul>
 800212a:	4603      	mov	r3, r0
 800212c:	460c      	mov	r4, r1
 800212e:	4625      	mov	r5, r4
 8002130:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_P6) / 32768.0;
 8002132:	4bb9      	ldr	r3, [pc, #740]	; (8002418 <BMP280_compensate_pressure_double+0x358>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fa12 	bl	8000564 <__aeabi_i2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
	v_x2_u32r = v_x1_u32r * v_x1_u32r *
 8002144:	4620      	mov	r0, r4
 8002146:	4629      	mov	r1, r5
 8002148:	f7fe fa76 	bl	8000638 <__aeabi_dmul>
 800214c:	4603      	mov	r3, r0
 800214e:	460c      	mov	r4, r1
 8002150:	4618      	mov	r0, r3
 8002152:	4621      	mov	r1, r4
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	4bb1      	ldr	r3, [pc, #708]	; (8002420 <BMP280_compensate_pressure_double+0x360>)
 800215a:	f7fe fb97 	bl	800088c <__aeabi_ddiv>
 800215e:	4603      	mov	r3, r0
 8002160:	460c      	mov	r4, r1
 8002162:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
	((double)p_bmp280->calib_param.dig_P5) * 2.0;
 8002166:	4bac      	ldr	r3, [pc, #688]	; (8002418 <BMP280_compensate_pressure_double+0x358>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f9f8 	bl	8000564 <__aeabi_i2d>
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
 8002174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002178:	f7fe fa5e 	bl	8000638 <__aeabi_dmul>
 800217c:	4603      	mov	r3, r0
 800217e:	460c      	mov	r4, r1
 8002180:	4618      	mov	r0, r3
 8002182:	4621      	mov	r1, r4
	((double)p_bmp280->calib_param.dig_P5) * 2.0;
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	f7fe f8a0 	bl	80002cc <__adddf3>
 800218c:	4603      	mov	r3, r0
 800218e:	460c      	mov	r4, r1
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
 8002190:	461a      	mov	r2, r3
 8002192:	4623      	mov	r3, r4
 8002194:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002198:	f7fe f898 	bl	80002cc <__adddf3>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x2_u32r = (v_x2_u32r / 4.0) +
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b9e      	ldr	r3, [pc, #632]	; (8002424 <BMP280_compensate_pressure_double+0x364>)
 80021aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021ae:	f7fe fb6d 	bl	800088c <__aeabi_ddiv>
 80021b2:	4603      	mov	r3, r0
 80021b4:	460c      	mov	r4, r1
 80021b6:	4625      	mov	r5, r4
 80021b8:	461c      	mov	r4, r3
	(((double)p_bmp280->calib_param.dig_P4) * 65536.0);
 80021ba:	4b97      	ldr	r3, [pc, #604]	; (8002418 <BMP280_compensate_pressure_double+0x358>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f9ce 	bl	8000564 <__aeabi_i2d>
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b96      	ldr	r3, [pc, #600]	; (8002428 <BMP280_compensate_pressure_double+0x368>)
 80021ce:	f7fe fa33 	bl	8000638 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
	v_x2_u32r = (v_x2_u32r / 4.0) +
 80021d6:	4620      	mov	r0, r4
 80021d8:	4629      	mov	r1, r5
 80021da:	f7fe f877 	bl	80002cc <__adddf3>
 80021de:	4603      	mov	r3, r0
 80021e0:	460c      	mov	r4, r1
 80021e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x1_u32r = (((double)p_bmp280->calib_param.dig_P3) *
 80021e6:	4b8c      	ldr	r3, [pc, #560]	; (8002418 <BMP280_compensate_pressure_double+0x358>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f9b8 	bl	8000564 <__aeabi_i2d>
 80021f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f8:	f7fe fa1e 	bl	8000638 <__aeabi_dmul>
 80021fc:	4603      	mov	r3, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	4618      	mov	r0, r3
 8002202:	4621      	mov	r1, r4
		v_x1_u32r * v_x1_u32r / 524288.0 +
 8002204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002208:	f7fe fa16 	bl	8000638 <__aeabi_dmul>
 800220c:	4603      	mov	r3, r0
 800220e:	460c      	mov	r4, r1
 8002210:	4618      	mov	r0, r3
 8002212:	4621      	mov	r1, r4
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	4b84      	ldr	r3, [pc, #528]	; (800242c <BMP280_compensate_pressure_double+0x36c>)
 800221a:	f7fe fb37 	bl	800088c <__aeabi_ddiv>
 800221e:	4603      	mov	r3, r0
 8002220:	460c      	mov	r4, r1
 8002222:	4625      	mov	r5, r4
 8002224:	461c      	mov	r4, r3
		((double)p_bmp280->calib_param.dig_P2) * v_x1_u32r) / 524288.0;
 8002226:	4b7c      	ldr	r3, [pc, #496]	; (8002418 <BMP280_compensate_pressure_double+0x358>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f998 	bl	8000564 <__aeabi_i2d>
 8002234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002238:	f7fe f9fe 	bl	8000638 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
		v_x1_u32r * v_x1_u32r / 524288.0 +
 8002240:	4620      	mov	r0, r4
 8002242:	4629      	mov	r1, r5
 8002244:	f7fe f842 	bl	80002cc <__adddf3>
 8002248:	4603      	mov	r3, r0
 800224a:	460c      	mov	r4, r1
 800224c:	4618      	mov	r0, r3
 800224e:	4621      	mov	r1, r4
	v_x1_u32r = (((double)p_bmp280->calib_param.dig_P3) *
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b75      	ldr	r3, [pc, #468]	; (800242c <BMP280_compensate_pressure_double+0x36c>)
 8002256:	f7fe fb19 	bl	800088c <__aeabi_ddiv>
 800225a:	4603      	mov	r3, r0
 800225c:	460c      	mov	r4, r1
 800225e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x1_u32r = (1.0 + v_x1_u32r / 32768.0) *
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b6e      	ldr	r3, [pc, #440]	; (8002420 <BMP280_compensate_pressure_double+0x360>)
 8002268:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800226c:	f7fe fb0e 	bl	800088c <__aeabi_ddiv>
 8002270:	4603      	mov	r3, r0
 8002272:	460c      	mov	r4, r1
 8002274:	4618      	mov	r0, r3
 8002276:	4621      	mov	r1, r4
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <BMP280_compensate_pressure_double+0x370>)
 800227e:	f7fe f825 	bl	80002cc <__adddf3>
 8002282:	4603      	mov	r3, r0
 8002284:	460c      	mov	r4, r1
 8002286:	4625      	mov	r5, r4
 8002288:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_P1);
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <BMP280_compensate_pressure_double+0x358>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	88db      	ldrh	r3, [r3, #6]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f957 	bl	8000544 <__aeabi_ui2d>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
	v_x1_u32r = (1.0 + v_x1_u32r / 32768.0) *
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fe f9cb 	bl	8000638 <__aeabi_dmul>
 80022a2:	4603      	mov	r3, r0
 80022a4:	460c      	mov	r4, r1
 80022a6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	pressure = 1048576.0 - (double)v_uncomp_pressure_s32;
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe f95a 	bl	8000564 <__aeabi_i2d>
 80022b0:	4603      	mov	r3, r0
 80022b2:	460c      	mov	r4, r1
 80022b4:	461a      	mov	r2, r3
 80022b6:	4623      	mov	r3, r4
 80022b8:	f04f 0000 	mov.w	r0, #0
 80022bc:	495d      	ldr	r1, [pc, #372]	; (8002434 <BMP280_compensate_pressure_double+0x374>)
 80022be:	f7fe f803 	bl	80002c8 <__aeabi_dsub>
 80022c2:	4603      	mov	r3, r0
 80022c4:	460c      	mov	r4, r1
 80022c6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* Avoid exception caused by division by zero */
	if ((v_x1_u32r > 0) || (v_x1_u32r < 0))
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022d6:	f7fe fc3f 	bl	8000b58 <__aeabi_dcmpgt>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <BMP280_compensate_pressure_double+0x238>
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022ec:	f7fe fc16 	bl	8000b1c <__aeabi_dcmplt>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80a7 	beq.w	8002446 <BMP280_compensate_pressure_double+0x386>
		pressure = (pressure - (v_x2_u32r / 4096.0)) *
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <BMP280_compensate_pressure_double+0x378>)
 80022fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002302:	f7fe fac3 	bl	800088c <__aeabi_ddiv>
 8002306:	4603      	mov	r3, r0
 8002308:	460c      	mov	r4, r1
 800230a:	461a      	mov	r2, r3
 800230c:	4623      	mov	r3, r4
 800230e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002312:	f7fd ffd9 	bl	80002c8 <__aeabi_dsub>
 8002316:	4603      	mov	r3, r0
 8002318:	460c      	mov	r4, r1
 800231a:	4618      	mov	r0, r3
 800231c:	4621      	mov	r1, r4
 800231e:	a33c      	add	r3, pc, #240	; (adr r3, 8002410 <BMP280_compensate_pressure_double+0x350>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe f988 	bl	8000638 <__aeabi_dmul>
 8002328:	4603      	mov	r3, r0
 800232a:	460c      	mov	r4, r1
 800232c:	4618      	mov	r0, r3
 800232e:	4621      	mov	r1, r4
 8002330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002334:	f7fe faaa 	bl	800088c <__aeabi_ddiv>
 8002338:	4603      	mov	r3, r0
 800233a:	460c      	mov	r4, r1
 800233c:	e9c7 3402 	strd	r3, r4, [r7, #8]
					6250.0 / v_x1_u32r;
	else
	return BMP280_INVALID_DATA;
	v_x1_u32r = ((double)p_bmp280->calib_param.dig_P9) *
 8002340:	4b35      	ldr	r3, [pc, #212]	; (8002418 <BMP280_compensate_pressure_double+0x358>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f90b 	bl	8000564 <__aeabi_i2d>
 800234e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002352:	f7fe f971 	bl	8000638 <__aeabi_dmul>
 8002356:	4603      	mov	r3, r0
 8002358:	460c      	mov	r4, r1
 800235a:	4618      	mov	r0, r3
 800235c:	4621      	mov	r1, r4
	pressure * pressure / 2147483648.0;
 800235e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002362:	f7fe f969 	bl	8000638 <__aeabi_dmul>
 8002366:	4603      	mov	r3, r0
 8002368:	460c      	mov	r4, r1
 800236a:	4618      	mov	r0, r3
 800236c:	4621      	mov	r1, r4
	v_x1_u32r = ((double)p_bmp280->calib_param.dig_P9) *
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <BMP280_compensate_pressure_double+0x37c>)
 8002374:	f7fe fa8a 	bl	800088c <__aeabi_ddiv>
 8002378:	4603      	mov	r3, r0
 800237a:	460c      	mov	r4, r1
 800237c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x2_u32r = pressure * ((double)p_bmp280->calib_param.dig_P8) / 32768.0;
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <BMP280_compensate_pressure_double+0x358>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f8eb 	bl	8000564 <__aeabi_i2d>
 800238e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002392:	f7fe f951 	bl	8000638 <__aeabi_dmul>
 8002396:	4603      	mov	r3, r0
 8002398:	460c      	mov	r4, r1
 800239a:	4618      	mov	r0, r3
 800239c:	4621      	mov	r1, r4
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <BMP280_compensate_pressure_double+0x360>)
 80023a4:	f7fe fa72 	bl	800088c <__aeabi_ddiv>
 80023a8:	4603      	mov	r3, r0
 80023aa:	460c      	mov	r4, r1
 80023ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 80023b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023b8:	f7fd ff88 	bl	80002cc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	4625      	mov	r5, r4
 80023c2:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_P7)) / 16.0;
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <BMP280_compensate_pressure_double+0x358>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f8c9 	bl	8000564 <__aeabi_i2d>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 80023d6:	4620      	mov	r0, r4
 80023d8:	4629      	mov	r1, r5
 80023da:	f7fd ff77 	bl	80002cc <__adddf3>
 80023de:	4603      	mov	r3, r0
 80023e0:	460c      	mov	r4, r1
 80023e2:	4618      	mov	r0, r3
 80023e4:	4621      	mov	r1, r4
			((double)p_bmp280->calib_param.dig_P7)) / 16.0;
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <BMP280_compensate_pressure_double+0x380>)
 80023ec:	f7fe fa4e 	bl	800088c <__aeabi_ddiv>
 80023f0:	4603      	mov	r3, r0
 80023f2:	460c      	mov	r4, r1
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 80023f4:	461a      	mov	r2, r3
 80023f6:	4623      	mov	r3, r4
 80023f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023fc:	f7fd ff66 	bl	80002cc <__adddf3>
 8002400:	4603      	mov	r3, r0
 8002402:	460c      	mov	r4, r1
 8002404:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return pressure;
 8002408:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800240c:	e01a      	b.n	8002444 <BMP280_compensate_pressure_double+0x384>
 800240e:	bf00      	nop
 8002410:	00000000 	.word	0x00000000
 8002414:	40b86a00 	.word	0x40b86a00
 8002418:	20002550 	.word	0x20002550
 800241c:	40ef4000 	.word	0x40ef4000
 8002420:	40e00000 	.word	0x40e00000
 8002424:	40100000 	.word	0x40100000
 8002428:	40f00000 	.word	0x40f00000
 800242c:	41200000 	.word	0x41200000
 8002430:	3ff00000 	.word	0x3ff00000
 8002434:	41300000 	.word	0x41300000
 8002438:	40b00000 	.word	0x40b00000
 800243c:	41e00000 	.word	0x41e00000
 8002440:	40300000 	.word	0x40300000
 8002444:	e003      	b.n	800244e <BMP280_compensate_pressure_double+0x38e>
	return BMP280_INVALID_DATA;
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	f04f 0400 	mov.w	r4, #0
 800244e:	ec44 3b17 	vmov	d7, r3, r4
}
 8002452:	eeb0 0a47 	vmov.f32	s0, s14
 8002456:	eef0 0a67 	vmov.f32	s1, s15
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bdb0      	pop	{r4, r5, r7, pc}

08002460 <BMP280_read_temperature_double>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_temperature_double(double *v_temperature_d)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8002468:	23ff      	movs	r3, #255	; 0xff
 800246a:	73fb      	strb	r3, [r7, #15]
	s32 v_uncomp_temperature_s32 = BMP280_INIT_VALUE;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <BMP280_read_temperature_double+0x50>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <BMP280_read_temperature_double+0x1e>
		com_rslt = E_BMP280_NULL_PTR;
 8002478:	2381      	movs	r3, #129	; 0x81
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e011      	b.n	80024a2 <BMP280_read_temperature_double+0x42>
	} else {
		/* read uncompensated temperature*/
		com_rslt = BMP280_read_uncomp_temperature(
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff faf4 	bl	8001a70 <BMP280_read_uncomp_temperature>
 8002488:	4603      	mov	r3, r0
 800248a:	73fb      	strb	r3, [r7, #15]
				&v_uncomp_temperature_s32);
		/* read true temperature as double*/
		*v_temperature_d = BMP280_compensate_temperature_double(
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fd34 	bl	8001efc <BMP280_compensate_temperature_double>
 8002494:	eeb0 7a40 	vmov.f32	s14, s0
 8002498:	eef0 7a60 	vmov.f32	s15, s1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	ed83 7b00 	vstr	d7, [r3]
				v_uncomp_temperature_s32);
	}
	return com_rslt;
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20002550 	.word	0x20002550

080024b4 <BMP280_read_pressure_double>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_pressure_double(double *v_pressure_d)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80024bc:	23ff      	movs	r3, #255	; 0xff
 80024be:	73fb      	strb	r3, [r7, #15]
	s32 v_uncomp_pressure_s32 = BMP280_INIT_VALUE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <BMP280_read_pressure_double+0x50>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <BMP280_read_pressure_double+0x1e>
		com_rslt = E_BMP280_NULL_PTR;
 80024cc:	2381      	movs	r3, #129	; 0x81
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e011      	b.n	80024f6 <BMP280_read_pressure_double+0x42>
	} else {
		/* read uncompensated pressure*/
		com_rslt = BMP280_read_uncomp_pressure(
 80024d2:	f107 0308 	add.w	r3, r7, #8
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fafe 	bl	8001ad8 <BMP280_read_uncomp_pressure>
 80024dc:	4603      	mov	r3, r0
 80024de:	73fb      	strb	r3, [r7, #15]
				&v_uncomp_pressure_s32);
		/* read true pressure as double*/
		*v_pressure_d = BMP280_compensate_pressure_double(
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fdec 	bl	80020c0 <BMP280_compensate_pressure_double>
 80024e8:	eeb0 7a40 	vmov.f32	s14, s0
 80024ec:	eef0 7a60 	vmov.f32	s15, s1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	ed83 7b00 	vstr	d7, [r3]
				v_uncomp_pressure_s32);
	}
	return com_rslt;
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20002550 	.word	0x20002550

08002508 <BMP280_calculate_altitude>:
 *  @return Actual altitude output as float
 *
 *
 */
double BMP280_calculate_altitude(u32 v_sea_level_pressure_u32)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
		BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8002510:	23ff      	movs	r3, #255	; 0xff
 8002512:	75fb      	strb	r3, [r7, #23]
	/* read true pressure*/
	double v_pressure_d = BMP280_INIT_VALUE;
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	f04f 0400 	mov.w	r4, #0
 800251c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	com_rslt = BMP280_read_pressure_double(&v_pressure_d);
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ffc5 	bl	80024b4 <BMP280_read_pressure_double>
 800252a:	4603      	mov	r3, r0
 800252c:	75fb      	strb	r3, [r7, #23]
	/* check the successful pressure read*/
	if (com_rslt == ERROR) {
 800252e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d104      	bne.n	8002542 <BMP280_calculate_altitude+0x3a>
		return 0.0;
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	f04f 0400 	mov.w	r4, #0
 8002540:	e02a      	b.n	8002598 <BMP280_calculate_altitude+0x90>
	} else {
		/* calculate altitude*/
		return 44330 * (1.0 - pow(v_pressure_d / v_sea_level_pressure_u32, 1 / 5.255));
 8002542:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fd fffc 	bl	8000544 <__aeabi_ui2d>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4620      	mov	r0, r4
 8002552:	4629      	mov	r1, r5
 8002554:	f7fe f99a 	bl	800088c <__aeabi_ddiv>
 8002558:	4603      	mov	r3, r0
 800255a:	460c      	mov	r4, r1
 800255c:	ec44 3b17 	vmov	d7, r3, r4
 8002560:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80025b0 <BMP280_calculate_altitude+0xa8>
 8002564:	eeb0 0a47 	vmov.f32	s0, s14
 8002568:	eef0 0a67 	vmov.f32	s1, s15
 800256c:	f006 f99c 	bl	80088a8 <pow>
 8002570:	ec54 3b10 	vmov	r3, r4, d0
 8002574:	461a      	mov	r2, r3
 8002576:	4623      	mov	r3, r4
 8002578:	f04f 0000 	mov.w	r0, #0
 800257c:	4910      	ldr	r1, [pc, #64]	; (80025c0 <BMP280_calculate_altitude+0xb8>)
 800257e:	f7fd fea3 	bl	80002c8 <__aeabi_dsub>
 8002582:	4603      	mov	r3, r0
 8002584:	460c      	mov	r4, r1
 8002586:	4618      	mov	r0, r3
 8002588:	4621      	mov	r1, r4
 800258a:	a30b      	add	r3, pc, #44	; (adr r3, 80025b8 <BMP280_calculate_altitude+0xb0>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f7fe f852 	bl	8000638 <__aeabi_dmul>
 8002594:	4603      	mov	r3, r0
 8002596:	460c      	mov	r4, r1
 8002598:	ec44 3b17 	vmov	d7, r3, r4
	}
}
 800259c:	eeb0 0a47 	vmov.f32	s0, s14
 80025a0:	eef0 0a67 	vmov.f32	s1, s15
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bdb0      	pop	{r4, r5, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	f3af 8000 	nop.w
 80025b0:	ccd9456c 	.word	0xccd9456c
 80025b4:	3fc85b95 	.word	0x3fc85b95
 80025b8:	00000000 	.word	0x00000000
 80025bc:	40e5a540 	.word	0x40e5a540
 80025c0:	3ff00000 	.word	0x3ff00000

080025c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_Init+0x40>)
 80025ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_Init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_Init+0x40>)
 80025da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a07      	ldr	r2, [pc, #28]	; (8002604 <HAL_Init+0x40>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f000 f94d 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f000 f808 	bl	8002608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f8:	f7ff f80e 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00

08002608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_InitTick+0x54>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_InitTick+0x58>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f965 	bl	80028f6 <HAL_SYSTICK_Config>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e00e      	b.n	8002654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b0f      	cmp	r3, #15
 800263a:	d80a      	bhi.n	8002652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800263c:	2200      	movs	r2, #0
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	f000 f92d 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002648:	4a06      	ldr	r2, [pc, #24]	; (8002664 <HAL_InitTick+0x5c>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000000 	.word	0x20000000
 8002660:	20000008 	.word	0x20000008
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_IncTick+0x20>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_IncTick+0x24>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4413      	add	r3, r2
 8002678:	4a04      	ldr	r2, [pc, #16]	; (800268c <HAL_IncTick+0x24>)
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000008 	.word	0x20000008
 800268c:	20002554 	.word	0x20002554

08002690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return uwTick;
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_GetTick+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20002554 	.word	0x20002554

080026a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff ffee 	bl	8002690 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d005      	beq.n	80026ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_Delay+0x40>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ce:	bf00      	nop
 80026d0:	f7ff ffde 	bl	8002690 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d8f7      	bhi.n	80026d0 <HAL_Delay+0x28>
  {
  }
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000008 	.word	0x20000008

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4907      	ldr	r1, [pc, #28]	; (8002788 <__NVIC_EnableIRQ+0x38>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	; (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f7ff ff8e 	bl	800278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff29 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff3e 	bl	8002734 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff8e 	bl	80027e0 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5d 	bl	800278c <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff31 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa2 	bl	8002848 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800291c:	f7ff feb8 	bl	8002690 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e099      	b.n	8002a60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800294c:	e00f      	b.n	800296e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800294e:	f7ff fe9f 	bl	8002690 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b05      	cmp	r3, #5
 800295a:	d908      	bls.n	800296e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2203      	movs	r2, #3
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e078      	b.n	8002a60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e8      	bne.n	800294e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <HAL_DMA_Init+0x158>)
 8002988:	4013      	ands	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800299a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d107      	bne.n	80029d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	4313      	orrs	r3, r2
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0307 	bic.w	r3, r3, #7
 80029ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d117      	bne.n	8002a32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fa6f 	bl	8002ef8 <DMA_CheckFifoParam>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e016      	b.n	8002a60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fa26 	bl	8002e8c <DMA_CalcBaseAndBitshift>
 8002a40:	4603      	mov	r3, r0
 8002a42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	223f      	movs	r2, #63	; 0x3f
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	f010803f 	.word	0xf010803f

08002a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_DMA_Start_IT+0x26>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e040      	b.n	8002b14 <HAL_DMA_Start_IT+0xa8>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d12f      	bne.n	8002b06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f9b8 	bl	8002e30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	223f      	movs	r2, #63	; 0x3f
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0216 	orr.w	r2, r2, #22
 8002ada:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0208 	orr.w	r2, r2, #8
 8002af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e005      	b.n	8002b12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b28:	4b92      	ldr	r3, [pc, #584]	; (8002d74 <HAL_DMA_IRQHandler+0x258>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a92      	ldr	r2, [pc, #584]	; (8002d78 <HAL_DMA_IRQHandler+0x25c>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0a9b      	lsrs	r3, r3, #10
 8002b34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	2208      	movs	r2, #8
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01a      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	2208      	movs	r2, #8
 8002b76:	409a      	lsls	r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	f043 0201 	orr.w	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d012      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	2201      	movs	r2, #1
 8002bac:	409a      	lsls	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	f043 0202 	orr.w	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d012      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	2204      	movs	r2, #4
 8002be2:	409a      	lsls	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d043      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d03c      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	2210      	movs	r2, #16
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d018      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d108      	bne.n	8002c4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d024      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
 8002c4a:	e01f      	b.n	8002c8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01b      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
 8002c5c:	e016      	b.n	8002c8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0208 	bic.w	r2, r2, #8
 8002c7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	2220      	movs	r2, #32
 8002c92:	409a      	lsls	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 808e 	beq.w	8002dba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8086 	beq.w	8002dba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	d136      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0216 	bic.w	r2, r2, #22
 8002cd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ce4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <HAL_DMA_IRQHandler+0x1da>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0208 	bic.w	r2, r2, #8
 8002d04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	223f      	movs	r2, #63	; 0x3f
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d07d      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
        }
        return;
 8002d32:	e078      	b.n	8002e26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01c      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d030      	beq.n	8002dba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
 8002d60:	e02b      	b.n	8002dba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d027      	beq.n	8002dba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
 8002d72:	e022      	b.n	8002dba <HAL_DMA_IRQHandler+0x29e>
 8002d74:	20000000 	.word	0x20000000
 8002d78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0210 	bic.w	r2, r2, #16
 8002d98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d032      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d022      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2205      	movs	r2, #5
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3301      	adds	r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d307      	bcc.n	8002e02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f2      	bne.n	8002de6 <HAL_DMA_IRQHandler+0x2ca>
 8002e00:	e000      	b.n	8002e04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
 8002e24:	e000      	b.n	8002e28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e26:	bf00      	nop
    }
  }
}
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop

08002e30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b40      	cmp	r3, #64	; 0x40
 8002e5c:	d108      	bne.n	8002e70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e6e:	e007      	b.n	8002e80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	3b10      	subs	r3, #16
 8002e9c:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <DMA_CalcBaseAndBitshift+0x64>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ea6:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d909      	bls.n	8002ece <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	1d1a      	adds	r2, r3, #4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	659a      	str	r2, [r3, #88]	; 0x58
 8002ecc:	e007      	b.n	8002ede <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ed6:	f023 0303 	bic.w	r3, r3, #3
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	aaaaaaab 	.word	0xaaaaaaab
 8002ef4:	08009aec 	.word	0x08009aec

08002ef8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d11f      	bne.n	8002f52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d855      	bhi.n	8002fc4 <DMA_CheckFifoParam+0xcc>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <DMA_CheckFifoParam+0x28>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f43 	.word	0x08002f43
 8002f28:	08002f31 	.word	0x08002f31
 8002f2c:	08002fc5 	.word	0x08002fc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d045      	beq.n	8002fc8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f40:	e042      	b.n	8002fc8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f4a:	d13f      	bne.n	8002fcc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f50:	e03c      	b.n	8002fcc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5a:	d121      	bne.n	8002fa0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d836      	bhi.n	8002fd0 <DMA_CheckFifoParam+0xd8>
 8002f62:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <DMA_CheckFifoParam+0x70>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f7f 	.word	0x08002f7f
 8002f70:	08002f79 	.word	0x08002f79
 8002f74:	08002f91 	.word	0x08002f91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e02f      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d024      	beq.n	8002fd4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f8e:	e021      	b.n	8002fd4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f98:	d11e      	bne.n	8002fd8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f9e:	e01b      	b.n	8002fd8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d902      	bls.n	8002fac <DMA_CheckFifoParam+0xb4>
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d003      	beq.n	8002fb2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002faa:	e018      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb0:	e015      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00e      	beq.n	8002fdc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc2:	e00b      	b.n	8002fdc <DMA_CheckFifoParam+0xe4>
      break;
 8002fc4:	bf00      	nop
 8002fc6:	e00a      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
      break;
 8002fc8:	bf00      	nop
 8002fca:	e008      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
      break;
 8002fcc:	bf00      	nop
 8002fce:	e006      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
      break;
 8002fd0:	bf00      	nop
 8002fd2:	e004      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
      break;
 8002fd4:	bf00      	nop
 8002fd6:	e002      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
      break;   
 8002fd8:	bf00      	nop
 8002fda:	e000      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
      break;
 8002fdc:	bf00      	nop
    }
  } 
  
  return status; 
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e165      	b.n	80032d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003008:	2201      	movs	r2, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	f040 8154 	bne.w	80032ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d00b      	beq.n	8003046 <HAL_GPIO_Init+0x5a>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d007      	beq.n	8003046 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800303a:	2b11      	cmp	r3, #17
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b12      	cmp	r3, #18
 8003044:	d130      	bne.n	80030a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800307c:	2201      	movs	r2, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 0201 	and.w	r2, r3, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0xfc>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b12      	cmp	r3, #18
 80030e6:	d123      	bne.n	8003130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	08da      	lsrs	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3208      	adds	r2, #8
 80030f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	220f      	movs	r2, #15
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	08da      	lsrs	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3208      	adds	r2, #8
 800312a:	69b9      	ldr	r1, [r7, #24]
 800312c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80ae 	beq.w	80032ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4b5c      	ldr	r3, [pc, #368]	; (80032e8 <HAL_GPIO_Init+0x2fc>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	4a5b      	ldr	r2, [pc, #364]	; (80032e8 <HAL_GPIO_Init+0x2fc>)
 800317c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003180:	6453      	str	r3, [r2, #68]	; 0x44
 8003182:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_GPIO_Init+0x2fc>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318e:	4a57      	ldr	r2, [pc, #348]	; (80032ec <HAL_GPIO_Init+0x300>)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	220f      	movs	r2, #15
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4e      	ldr	r2, [pc, #312]	; (80032f0 <HAL_GPIO_Init+0x304>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d025      	beq.n	8003206 <HAL_GPIO_Init+0x21a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4d      	ldr	r2, [pc, #308]	; (80032f4 <HAL_GPIO_Init+0x308>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01f      	beq.n	8003202 <HAL_GPIO_Init+0x216>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4c      	ldr	r2, [pc, #304]	; (80032f8 <HAL_GPIO_Init+0x30c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d019      	beq.n	80031fe <HAL_GPIO_Init+0x212>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <HAL_GPIO_Init+0x310>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_GPIO_Init+0x20e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <HAL_GPIO_Init+0x314>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00d      	beq.n	80031f6 <HAL_GPIO_Init+0x20a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a49      	ldr	r2, [pc, #292]	; (8003304 <HAL_GPIO_Init+0x318>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x206>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a48      	ldr	r2, [pc, #288]	; (8003308 <HAL_GPIO_Init+0x31c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_GPIO_Init+0x202>
 80031ea:	2306      	movs	r3, #6
 80031ec:	e00c      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 80031ee:	2307      	movs	r3, #7
 80031f0:	e00a      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 80031f2:	2305      	movs	r3, #5
 80031f4:	e008      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 80031f6:	2304      	movs	r3, #4
 80031f8:	e006      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 80031fa:	2303      	movs	r3, #3
 80031fc:	e004      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 80031fe:	2302      	movs	r3, #2
 8003200:	e002      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_GPIO_Init+0x21c>
 8003206:	2300      	movs	r3, #0
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	f002 0203 	and.w	r2, r2, #3
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	4093      	lsls	r3, r2
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003218:	4934      	ldr	r1, [pc, #208]	; (80032ec <HAL_GPIO_Init+0x300>)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003226:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_GPIO_Init+0x320>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800324a:	4a30      	ldr	r2, [pc, #192]	; (800330c <HAL_GPIO_Init+0x320>)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003250:	4b2e      	ldr	r3, [pc, #184]	; (800330c <HAL_GPIO_Init+0x320>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003274:	4a25      	ldr	r2, [pc, #148]	; (800330c <HAL_GPIO_Init+0x320>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_GPIO_Init+0x320>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800329e:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_GPIO_Init+0x320>)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_GPIO_Init+0x320>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032c8:	4a10      	ldr	r2, [pc, #64]	; (800330c <HAL_GPIO_Init+0x320>)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3301      	adds	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b0f      	cmp	r3, #15
 80032d8:	f67f ae96 	bls.w	8003008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032dc:	bf00      	nop
 80032de:	3724      	adds	r7, #36	; 0x24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40020000 	.word	0x40020000
 80032f4:	40020400 	.word	0x40020400
 80032f8:	40020800 	.word	0x40020800
 80032fc:	40020c00 	.word	0x40020c00
 8003300:	40021000 	.word	0x40021000
 8003304:	40021400 	.word	0x40021400
 8003308:	40021800 	.word	0x40021800
 800330c:	40013c00 	.word	0x40013c00

08003310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
 800331c:	4613      	mov	r3, r2
 800331e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003320:	787b      	ldrb	r3, [r7, #1]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800332c:	e003      	b.n	8003336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	041a      	lsls	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	619a      	str	r2, [r3, #24]
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e11f      	b.n	8003596 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fe8a 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	; 0x24
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033a8:	f001 f8be 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 80033ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a7b      	ldr	r2, [pc, #492]	; (80035a0 <HAL_I2C_Init+0x25c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d807      	bhi.n	80033c8 <HAL_I2C_Init+0x84>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a7a      	ldr	r2, [pc, #488]	; (80035a4 <HAL_I2C_Init+0x260>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	bf94      	ite	ls
 80033c0:	2301      	movls	r3, #1
 80033c2:	2300      	movhi	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e006      	b.n	80033d6 <HAL_I2C_Init+0x92>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a77      	ldr	r2, [pc, #476]	; (80035a8 <HAL_I2C_Init+0x264>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bf94      	ite	ls
 80033d0:	2301      	movls	r3, #1
 80033d2:	2300      	movhi	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0db      	b.n	8003596 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a72      	ldr	r2, [pc, #456]	; (80035ac <HAL_I2C_Init+0x268>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	0c9b      	lsrs	r3, r3, #18
 80033e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a64      	ldr	r2, [pc, #400]	; (80035a0 <HAL_I2C_Init+0x25c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d802      	bhi.n	8003418 <HAL_I2C_Init+0xd4>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3301      	adds	r3, #1
 8003416:	e009      	b.n	800342c <HAL_I2C_Init+0xe8>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	4a63      	ldr	r2, [pc, #396]	; (80035b0 <HAL_I2C_Init+0x26c>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	3301      	adds	r3, #1
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	430b      	orrs	r3, r1
 8003432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800343e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4956      	ldr	r1, [pc, #344]	; (80035a0 <HAL_I2C_Init+0x25c>)
 8003448:	428b      	cmp	r3, r1
 800344a:	d80d      	bhi.n	8003468 <HAL_I2C_Init+0x124>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e59      	subs	r1, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	fbb1 f3f3 	udiv	r3, r1, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	2b04      	cmp	r3, #4
 8003462:	bf38      	it	cc
 8003464:	2304      	movcc	r3, #4
 8003466:	e04f      	b.n	8003508 <HAL_I2C_Init+0x1c4>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d111      	bne.n	8003494 <HAL_I2C_Init+0x150>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	440b      	add	r3, r1
 800347e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003482:	3301      	adds	r3, #1
 8003484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e012      	b.n	80034ba <HAL_I2C_Init+0x176>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1e58      	subs	r0, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	0099      	lsls	r1, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034aa:	3301      	adds	r3, #1
 80034ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Init+0x17e>
 80034be:	2301      	movs	r3, #1
 80034c0:	e022      	b.n	8003508 <HAL_I2C_Init+0x1c4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10e      	bne.n	80034e8 <HAL_I2C_Init+0x1a4>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1e58      	subs	r0, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	440b      	add	r3, r1
 80034d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e6:	e00f      	b.n	8003508 <HAL_I2C_Init+0x1c4>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1e58      	subs	r0, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	0099      	lsls	r1, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fe:	3301      	adds	r3, #1
 8003500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	6809      	ldr	r1, [r1, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6911      	ldr	r1, [r2, #16]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68d2      	ldr	r2, [r2, #12]
 8003542:	4311      	orrs	r1, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	430b      	orrs	r3, r1
 800354a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	000186a0 	.word	0x000186a0
 80035a4:	001e847f 	.word	0x001e847f
 80035a8:	003d08ff 	.word	0x003d08ff
 80035ac:	431bde83 	.word	0x431bde83
 80035b0:	10624dd3 	.word	0x10624dd3

080035b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	460b      	mov	r3, r1
 80035c8:	813b      	strh	r3, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ce:	f7ff f85f 	bl	8002690 <HAL_GetTick>
 80035d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b20      	cmp	r3, #32
 80035de:	f040 80d9 	bne.w	8003794 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2319      	movs	r3, #25
 80035e8:	2201      	movs	r2, #1
 80035ea:	496d      	ldr	r1, [pc, #436]	; (80037a0 <HAL_I2C_Mem_Write+0x1ec>)
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fc7b 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0cc      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_I2C_Mem_Write+0x56>
 8003606:	2302      	movs	r3, #2
 8003608:	e0c5      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d007      	beq.n	8003630 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2221      	movs	r2, #33	; 0x21
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a3a      	ldr	r2, [r7, #32]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003672:	88f8      	ldrh	r0, [r7, #6]
 8003674:	893a      	ldrh	r2, [r7, #8]
 8003676:	8979      	ldrh	r1, [r7, #10]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4603      	mov	r3, r0
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fab6 	bl	8003bf4 <I2C_RequestMemoryWrite>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d052      	beq.n	8003734 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e081      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 fcfc 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d107      	bne.n	80036ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e06b      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d11b      	bne.n	8003734 <HAL_I2C_Mem_Write+0x180>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	d017      	beq.n	8003734 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1aa      	bne.n	8003692 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fce8 	bl	8004116 <I2C_WaitOnBTFFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00d      	beq.n	8003768 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	2b04      	cmp	r3, #4
 8003752:	d107      	bne.n	8003764 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003762:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e016      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	00100002 	.word	0x00100002
 80037a4:	ffff0000 	.word	0xffff0000

080037a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08c      	sub	sp, #48	; 0x30
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	460b      	mov	r3, r1
 80037bc:	813b      	strh	r3, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037c2:	f7fe ff65 	bl	8002690 <HAL_GetTick>
 80037c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	f040 8208 	bne.w	8003be6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2319      	movs	r3, #25
 80037dc:	2201      	movs	r2, #1
 80037de:	497b      	ldr	r1, [pc, #492]	; (80039cc <HAL_I2C_Mem_Read+0x224>)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fb81 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
 80037ee:	e1fb      	b.n	8003be8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_I2C_Mem_Read+0x56>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e1f4      	b.n	8003be8 <HAL_I2C_Mem_Read+0x440>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d007      	beq.n	8003824 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2222      	movs	r2, #34	; 0x22
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a5b      	ldr	r2, [pc, #364]	; (80039d0 <HAL_I2C_Mem_Read+0x228>)
 8003864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003866:	88f8      	ldrh	r0, [r7, #6]
 8003868:	893a      	ldrh	r2, [r7, #8]
 800386a:	8979      	ldrh	r1, [r7, #10]
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4603      	mov	r3, r0
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fa50 	bl	8003d1c <I2C_RequestMemoryRead>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1b0      	b.n	8003be8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388a:	2b00      	cmp	r3, #0
 800388c:	d113      	bne.n	80038b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	623b      	str	r3, [r7, #32]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e184      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d11b      	bne.n	80038f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	e164      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d11b      	bne.n	8003936 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	e144      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800394c:	e138      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	2b03      	cmp	r3, #3
 8003954:	f200 80f1 	bhi.w	8003b3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	2b01      	cmp	r3, #1
 800395e:	d123      	bne.n	80039a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003962:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fc17 	bl	8004198 <I2C_WaitOnRXNEFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e139      	b.n	8003be8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039a6:	e10b      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d14e      	bne.n	8003a4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	2200      	movs	r2, #0
 80039b8:	4906      	ldr	r1, [pc, #24]	; (80039d4 <HAL_I2C_Mem_Read+0x22c>)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fa94 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e10e      	b.n	8003be8 <HAL_I2C_Mem_Read+0x440>
 80039ca:	bf00      	nop
 80039cc:	00100002 	.word	0x00100002
 80039d0:	ffff0000 	.word	0xffff0000
 80039d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a4c:	e0b8      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	2200      	movs	r2, #0
 8003a56:	4966      	ldr	r1, [pc, #408]	; (8003bf0 <HAL_I2C_Mem_Read+0x448>)
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fa45 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0bf      	b.n	8003be8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	494f      	ldr	r1, [pc, #316]	; (8003bf0 <HAL_I2C_Mem_Read+0x448>)
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fa17 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e091      	b.n	8003be8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b38:	e042      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fb2a 	bl	8004198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e04c      	b.n	8003be8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d118      	bne.n	8003bc0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f47f aec2 	bne.w	800394e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e000      	b.n	8003be8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
  }
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3728      	adds	r7, #40	; 0x28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	00010004 	.word	0x00010004

08003bf4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	817b      	strh	r3, [r7, #10]
 8003c06:	460b      	mov	r3, r1
 8003c08:	813b      	strh	r3, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f95c 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00c      	beq.n	8003c50 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e05f      	b.n	8003d10 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c50:	897b      	ldrh	r3, [r7, #10]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	6a3a      	ldr	r2, [r7, #32]
 8003c64:	492c      	ldr	r1, [pc, #176]	; (8003d18 <I2C_RequestMemoryWrite+0x124>)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f995 	bl	8003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e04c      	b.n	8003d10 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8e:	6a39      	ldr	r1, [r7, #32]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f9ff 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d107      	bne.n	8003cb4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e02b      	b.n	8003d10 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cbe:	893b      	ldrh	r3, [r7, #8]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	611a      	str	r2, [r3, #16]
 8003cc8:	e021      	b.n	8003d0e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cca:	893b      	ldrh	r3, [r7, #8]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cda:	6a39      	ldr	r1, [r7, #32]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f9d9 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d107      	bne.n	8003d00 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e005      	b.n	8003d10 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	00010002 	.word	0x00010002

08003d1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	4608      	mov	r0, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	817b      	strh	r3, [r7, #10]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	813b      	strh	r3, [r7, #8]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f8c0 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0a9      	b.n	8003edc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d88:	897b      	ldrh	r3, [r7, #10]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	6a3a      	ldr	r2, [r7, #32]
 8003d9c:	4951      	ldr	r1, [pc, #324]	; (8003ee4 <I2C_RequestMemoryRead+0x1c8>)
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f8f9 	bl	8003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e096      	b.n	8003edc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	6a39      	ldr	r1, [r7, #32]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f963 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00d      	beq.n	8003df0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d107      	bne.n	8003dec <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e075      	b.n	8003edc <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df6:	893b      	ldrh	r3, [r7, #8]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	611a      	str	r2, [r3, #16]
 8003e00:	e021      	b.n	8003e46 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e02:	893b      	ldrh	r3, [r7, #8]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	6a39      	ldr	r1, [r7, #32]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f93d 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00d      	beq.n	8003e3c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d107      	bne.n	8003e38 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e04f      	b.n	8003edc <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e3c:	893b      	ldrh	r3, [r7, #8]
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e48:	6a39      	ldr	r1, [r7, #32]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f922 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d107      	bne.n	8003e6e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e034      	b.n	8003edc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f82a 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e013      	b.n	8003edc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003eb4:	897b      	ldrh	r3, [r7, #10]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	6a3a      	ldr	r2, [r7, #32]
 8003ec8:	4906      	ldr	r1, [pc, #24]	; (8003ee4 <I2C_RequestMemoryRead+0x1c8>)
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f863 	bl	8003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	00010002 	.word	0x00010002

08003ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef8:	e025      	b.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d021      	beq.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f02:	f7fe fbc5 	bl	8002690 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d302      	bcc.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d116      	bne.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0220 	orr.w	r2, r3, #32
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e023      	b.n	8003f8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d10d      	bne.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	43da      	mvns	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	e00c      	b.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	43da      	mvns	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d0b6      	beq.n	8003efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fa4:	e051      	b.n	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb4:	d123      	bne.n	8003ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f043 0204 	orr.w	r2, r3, #4
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e046      	b.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d021      	beq.n	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004006:	f7fe fb43 	bl	8002690 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d116      	bne.n	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f043 0220 	orr.w	r2, r3, #32
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e020      	b.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10c      	bne.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e00b      	b.n	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	43da      	mvns	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d18d      	bne.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040a0:	e02d      	b.n	80040fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f8ce 	bl	8004244 <I2C_IsAcknowledgeFailed>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e02d      	b.n	800410e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d021      	beq.n	80040fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fe fae9 	bl	8002690 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e007      	b.n	800410e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004108:	2b80      	cmp	r3, #128	; 0x80
 800410a:	d1ca      	bne.n	80040a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004122:	e02d      	b.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f88d 	bl	8004244 <I2C_IsAcknowledgeFailed>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e02d      	b.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d021      	beq.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413c:	f7fe faa8 	bl	8002690 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d116      	bne.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e007      	b.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b04      	cmp	r3, #4
 800418c:	d1ca      	bne.n	8004124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041a4:	e042      	b.n	800422c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d119      	bne.n	80041e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0210 	mvn.w	r2, #16
 80041bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e029      	b.n	800423c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e8:	f7fe fa52 	bl	8002690 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d302      	bcc.n	80041fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e007      	b.n	800423c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d1b5      	bne.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d11b      	bne.n	8004294 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004264:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0204 	orr.w	r2, r3, #4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	4b20      	ldr	r3, [pc, #128]	; (8004334 <HAL_PWREx_EnableOverDrive+0x90>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <HAL_PWREx_EnableOverDrive+0x90>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
 80042be:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <HAL_PWREx_EnableOverDrive+0x90>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042ca:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_PWREx_EnableOverDrive+0x94>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d0:	f7fe f9de 	bl	8002690 <HAL_GetTick>
 80042d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042d6:	e009      	b.n	80042ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042d8:	f7fe f9da 	bl	8002690 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042e6:	d901      	bls.n	80042ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e01f      	b.n	800432c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042ec:	4b13      	ldr	r3, [pc, #76]	; (800433c <HAL_PWREx_EnableOverDrive+0x98>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d1ee      	bne.n	80042d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004300:	f7fe f9c6 	bl	8002690 <HAL_GetTick>
 8004304:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004306:	e009      	b.n	800431c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004308:	f7fe f9c2 	bl	8002690 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004316:	d901      	bls.n	800431c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e007      	b.n	800432c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <HAL_PWREx_EnableOverDrive+0x98>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004328:	d1ee      	bne.n	8004308 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	420e0040 	.word	0x420e0040
 800433c:	40007000 	.word	0x40007000
 8004340:	420e0044 	.word	0x420e0044

08004344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0cc      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004358:	4b68      	ldr	r3, [pc, #416]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d90c      	bls.n	8004380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b65      	ldr	r3, [pc, #404]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b63      	ldr	r3, [pc, #396]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0b8      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a58      	ldr	r2, [pc, #352]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b0:	4b53      	ldr	r3, [pc, #332]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a52      	ldr	r2, [pc, #328]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043bc:	4b50      	ldr	r3, [pc, #320]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	494d      	ldr	r1, [pc, #308]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d044      	beq.n	8004464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d119      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e07f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e06f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e067      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004422:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4934      	ldr	r1, [pc, #208]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004434:	f7fe f92c 	bl	8002690 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	e00a      	b.n	8004452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443c:	f7fe f928 	bl	8002690 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e04f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 020c 	and.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	429a      	cmp	r2, r3
 8004462:	d1eb      	bne.n	800443c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d20c      	bcs.n	800448c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e032      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004498:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4916      	ldr	r1, [pc, #88]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	490e      	ldr	r1, [pc, #56]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ca:	f000 f855 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 80044ce:	4601      	mov	r1, r0
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	fa21 f303 	lsr.w	r3, r1, r3
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044e6:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe f88c 	bl	8002608 <HAL_InitTick>

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40023c00 	.word	0x40023c00
 8004500:	40023800 	.word	0x40023800
 8004504:	08009ad4 	.word	0x08009ad4
 8004508:	20000000 	.word	0x20000000
 800450c:	20000004 	.word	0x20000004

08004510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <HAL_RCC_GetHCLKFreq+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000000 	.word	0x20000000

08004528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800452c:	f7ff fff0 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004530:	4601      	mov	r1, r0
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	0a9b      	lsrs	r3, r3, #10
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4a03      	ldr	r2, [pc, #12]	; (800454c <HAL_RCC_GetPCLK1Freq+0x24>)
 800453e:	5cd3      	ldrb	r3, [r2, r3]
 8004540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800
 800454c:	08009ae4 	.word	0x08009ae4

08004550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004554:	f7ff ffdc 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004558:	4601      	mov	r1, r0
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	0b5b      	lsrs	r3, r3, #13
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4a03      	ldr	r2, [pc, #12]	; (8004574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004566:	5cd3      	ldrb	r3, [r2, r3]
 8004568:	fa21 f303 	lsr.w	r3, r1, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40023800 	.word	0x40023800
 8004574:	08009ae4 	.word	0x08009ae4

08004578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004592:	4bc6      	ldr	r3, [pc, #792]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b0c      	cmp	r3, #12
 800459c:	f200 817e 	bhi.w	800489c <HAL_RCC_GetSysClockFreq+0x324>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_RCC_GetSysClockFreq+0x30>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045dd 	.word	0x080045dd
 80045ac:	0800489d 	.word	0x0800489d
 80045b0:	0800489d 	.word	0x0800489d
 80045b4:	0800489d 	.word	0x0800489d
 80045b8:	080045e3 	.word	0x080045e3
 80045bc:	0800489d 	.word	0x0800489d
 80045c0:	0800489d 	.word	0x0800489d
 80045c4:	0800489d 	.word	0x0800489d
 80045c8:	080045e9 	.word	0x080045e9
 80045cc:	0800489d 	.word	0x0800489d
 80045d0:	0800489d 	.word	0x0800489d
 80045d4:	0800489d 	.word	0x0800489d
 80045d8:	08004745 	.word	0x08004745
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045dc:	4bb4      	ldr	r3, [pc, #720]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x338>)
 80045de:	613b      	str	r3, [r7, #16]
       break;
 80045e0:	e15f      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045e2:	4bb4      	ldr	r3, [pc, #720]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80045e4:	613b      	str	r3, [r7, #16]
      break;
 80045e6:	e15c      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045e8:	4bb0      	ldr	r3, [pc, #704]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045f2:	4bae      	ldr	r3, [pc, #696]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d04a      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045fe:	4bab      	ldr	r3, [pc, #684]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	099b      	lsrs	r3, r3, #6
 8004604:	f04f 0400 	mov.w	r4, #0
 8004608:	f240 11ff 	movw	r1, #511	; 0x1ff
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	ea03 0501 	and.w	r5, r3, r1
 8004614:	ea04 0602 	and.w	r6, r4, r2
 8004618:	4629      	mov	r1, r5
 800461a:	4632      	mov	r2, r6
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	f04f 0400 	mov.w	r4, #0
 8004624:	0154      	lsls	r4, r2, #5
 8004626:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800462a:	014b      	lsls	r3, r1, #5
 800462c:	4619      	mov	r1, r3
 800462e:	4622      	mov	r2, r4
 8004630:	1b49      	subs	r1, r1, r5
 8004632:	eb62 0206 	sbc.w	r2, r2, r6
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	f04f 0400 	mov.w	r4, #0
 800463e:	0194      	lsls	r4, r2, #6
 8004640:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004644:	018b      	lsls	r3, r1, #6
 8004646:	1a5b      	subs	r3, r3, r1
 8004648:	eb64 0402 	sbc.w	r4, r4, r2
 800464c:	f04f 0100 	mov.w	r1, #0
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	00e2      	lsls	r2, r4, #3
 8004656:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800465a:	00d9      	lsls	r1, r3, #3
 800465c:	460b      	mov	r3, r1
 800465e:	4614      	mov	r4, r2
 8004660:	195b      	adds	r3, r3, r5
 8004662:	eb44 0406 	adc.w	r4, r4, r6
 8004666:	f04f 0100 	mov.w	r1, #0
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	0262      	lsls	r2, r4, #9
 8004670:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004674:	0259      	lsls	r1, r3, #9
 8004676:	460b      	mov	r3, r1
 8004678:	4614      	mov	r4, r2
 800467a:	4618      	mov	r0, r3
 800467c:	4621      	mov	r1, r4
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f04f 0400 	mov.w	r4, #0
 8004684:	461a      	mov	r2, r3
 8004686:	4623      	mov	r3, r4
 8004688:	f7fc faae 	bl	8000be8 <__aeabi_uldivmod>
 800468c:	4603      	mov	r3, r0
 800468e:	460c      	mov	r4, r1
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e049      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004694:	4b85      	ldr	r3, [pc, #532]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	099b      	lsrs	r3, r3, #6
 800469a:	f04f 0400 	mov.w	r4, #0
 800469e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	ea03 0501 	and.w	r5, r3, r1
 80046aa:	ea04 0602 	and.w	r6, r4, r2
 80046ae:	4629      	mov	r1, r5
 80046b0:	4632      	mov	r2, r6
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	f04f 0400 	mov.w	r4, #0
 80046ba:	0154      	lsls	r4, r2, #5
 80046bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046c0:	014b      	lsls	r3, r1, #5
 80046c2:	4619      	mov	r1, r3
 80046c4:	4622      	mov	r2, r4
 80046c6:	1b49      	subs	r1, r1, r5
 80046c8:	eb62 0206 	sbc.w	r2, r2, r6
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	f04f 0400 	mov.w	r4, #0
 80046d4:	0194      	lsls	r4, r2, #6
 80046d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046da:	018b      	lsls	r3, r1, #6
 80046dc:	1a5b      	subs	r3, r3, r1
 80046de:	eb64 0402 	sbc.w	r4, r4, r2
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	00e2      	lsls	r2, r4, #3
 80046ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046f0:	00d9      	lsls	r1, r3, #3
 80046f2:	460b      	mov	r3, r1
 80046f4:	4614      	mov	r4, r2
 80046f6:	195b      	adds	r3, r3, r5
 80046f8:	eb44 0406 	adc.w	r4, r4, r6
 80046fc:	f04f 0100 	mov.w	r1, #0
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	02a2      	lsls	r2, r4, #10
 8004706:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800470a:	0299      	lsls	r1, r3, #10
 800470c:	460b      	mov	r3, r1
 800470e:	4614      	mov	r4, r2
 8004710:	4618      	mov	r0, r3
 8004712:	4621      	mov	r1, r4
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f04f 0400 	mov.w	r4, #0
 800471a:	461a      	mov	r2, r3
 800471c:	4623      	mov	r3, r4
 800471e:	f7fc fa63 	bl	8000be8 <__aeabi_uldivmod>
 8004722:	4603      	mov	r3, r0
 8004724:	460c      	mov	r4, r1
 8004726:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004728:	4b60      	ldr	r3, [pc, #384]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	3301      	adds	r3, #1
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	613b      	str	r3, [r7, #16]
      break;
 8004742:	e0ae      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004744:	4b59      	ldr	r3, [pc, #356]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800474e:	4b57      	ldr	r3, [pc, #348]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d04a      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b54      	ldr	r3, [pc, #336]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	f04f 0400 	mov.w	r4, #0
 8004764:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	ea03 0501 	and.w	r5, r3, r1
 8004770:	ea04 0602 	and.w	r6, r4, r2
 8004774:	4629      	mov	r1, r5
 8004776:	4632      	mov	r2, r6
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	f04f 0400 	mov.w	r4, #0
 8004780:	0154      	lsls	r4, r2, #5
 8004782:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004786:	014b      	lsls	r3, r1, #5
 8004788:	4619      	mov	r1, r3
 800478a:	4622      	mov	r2, r4
 800478c:	1b49      	subs	r1, r1, r5
 800478e:	eb62 0206 	sbc.w	r2, r2, r6
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	f04f 0400 	mov.w	r4, #0
 800479a:	0194      	lsls	r4, r2, #6
 800479c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047a0:	018b      	lsls	r3, r1, #6
 80047a2:	1a5b      	subs	r3, r3, r1
 80047a4:	eb64 0402 	sbc.w	r4, r4, r2
 80047a8:	f04f 0100 	mov.w	r1, #0
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	00e2      	lsls	r2, r4, #3
 80047b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047b6:	00d9      	lsls	r1, r3, #3
 80047b8:	460b      	mov	r3, r1
 80047ba:	4614      	mov	r4, r2
 80047bc:	195b      	adds	r3, r3, r5
 80047be:	eb44 0406 	adc.w	r4, r4, r6
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	0262      	lsls	r2, r4, #9
 80047cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047d0:	0259      	lsls	r1, r3, #9
 80047d2:	460b      	mov	r3, r1
 80047d4:	4614      	mov	r4, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	4621      	mov	r1, r4
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f04f 0400 	mov.w	r4, #0
 80047e0:	461a      	mov	r2, r3
 80047e2:	4623      	mov	r3, r4
 80047e4:	f7fc fa00 	bl	8000be8 <__aeabi_uldivmod>
 80047e8:	4603      	mov	r3, r0
 80047ea:	460c      	mov	r4, r1
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e049      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f0:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	f04f 0400 	mov.w	r4, #0
 80047fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	ea03 0501 	and.w	r5, r3, r1
 8004806:	ea04 0602 	and.w	r6, r4, r2
 800480a:	4629      	mov	r1, r5
 800480c:	4632      	mov	r2, r6
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	f04f 0400 	mov.w	r4, #0
 8004816:	0154      	lsls	r4, r2, #5
 8004818:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800481c:	014b      	lsls	r3, r1, #5
 800481e:	4619      	mov	r1, r3
 8004820:	4622      	mov	r2, r4
 8004822:	1b49      	subs	r1, r1, r5
 8004824:	eb62 0206 	sbc.w	r2, r2, r6
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	f04f 0400 	mov.w	r4, #0
 8004830:	0194      	lsls	r4, r2, #6
 8004832:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004836:	018b      	lsls	r3, r1, #6
 8004838:	1a5b      	subs	r3, r3, r1
 800483a:	eb64 0402 	sbc.w	r4, r4, r2
 800483e:	f04f 0100 	mov.w	r1, #0
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	00e2      	lsls	r2, r4, #3
 8004848:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800484c:	00d9      	lsls	r1, r3, #3
 800484e:	460b      	mov	r3, r1
 8004850:	4614      	mov	r4, r2
 8004852:	195b      	adds	r3, r3, r5
 8004854:	eb44 0406 	adc.w	r4, r4, r6
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	02a2      	lsls	r2, r4, #10
 8004862:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004866:	0299      	lsls	r1, r3, #10
 8004868:	460b      	mov	r3, r1
 800486a:	4614      	mov	r4, r2
 800486c:	4618      	mov	r0, r3
 800486e:	4621      	mov	r1, r4
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f04f 0400 	mov.w	r4, #0
 8004876:	461a      	mov	r2, r3
 8004878:	4623      	mov	r3, r4
 800487a:	f7fc f9b5 	bl	8000be8 <__aeabi_uldivmod>
 800487e:	4603      	mov	r3, r0
 8004880:	460c      	mov	r4, r1
 8004882:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004884:	4b09      	ldr	r3, [pc, #36]	; (80048ac <HAL_RCC_GetSysClockFreq+0x334>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	0f1b      	lsrs	r3, r3, #28
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	613b      	str	r3, [r7, #16]
      break;
 800489a:	e002      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x338>)
 800489e:	613b      	str	r3, [r7, #16]
      break;
 80048a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048a2:	693b      	ldr	r3, [r7, #16]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ac:	40023800 	.word	0x40023800
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	007a1200 	.word	0x007a1200

080048b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8083 	beq.w	80049d8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048d2:	4b95      	ldr	r3, [pc, #596]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d019      	beq.n	8004912 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048de:	4b92      	ldr	r3, [pc, #584]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d106      	bne.n	80048f8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048ea:	4b8f      	ldr	r3, [pc, #572]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f6:	d00c      	beq.n	8004912 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f8:	4b8b      	ldr	r3, [pc, #556]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004900:	2b0c      	cmp	r3, #12
 8004902:	d112      	bne.n	800492a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004904:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004910:	d10b      	bne.n	800492a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004912:	4b85      	ldr	r3, [pc, #532]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d05b      	beq.n	80049d6 <HAL_RCC_OscConfig+0x11e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d157      	bne.n	80049d6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e216      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004932:	d106      	bne.n	8004942 <HAL_RCC_OscConfig+0x8a>
 8004934:	4b7c      	ldr	r3, [pc, #496]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a7b      	ldr	r2, [pc, #492]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800493a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e01d      	b.n	800497e <HAL_RCC_OscConfig+0xc6>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800494a:	d10c      	bne.n	8004966 <HAL_RCC_OscConfig+0xae>
 800494c:	4b76      	ldr	r3, [pc, #472]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a75      	ldr	r2, [pc, #468]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004952:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b73      	ldr	r3, [pc, #460]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a72      	ldr	r2, [pc, #456]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800495e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	e00b      	b.n	800497e <HAL_RCC_OscConfig+0xc6>
 8004966:	4b70      	ldr	r3, [pc, #448]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a6f      	ldr	r2, [pc, #444]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800496c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b6d      	ldr	r3, [pc, #436]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a6c      	ldr	r2, [pc, #432]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800497c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d013      	beq.n	80049ae <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004986:	f7fd fe83 	bl	8002690 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800498e:	f7fd fe7f 	bl	8002690 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b64      	cmp	r3, #100	; 0x64
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e1db      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a0:	4b61      	ldr	r3, [pc, #388]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0xd6>
 80049ac:	e014      	b.n	80049d8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fd fe6f 	bl	8002690 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b6:	f7fd fe6b 	bl	8002690 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b64      	cmp	r3, #100	; 0x64
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e1c7      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c8:	4b57      	ldr	r3, [pc, #348]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0xfe>
 80049d4:	e000      	b.n	80049d8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d06f      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049e4:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049f0:	4b4d      	ldr	r3, [pc, #308]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d105      	bne.n	8004a08 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049fc:	4b4a      	ldr	r3, [pc, #296]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00b      	beq.n	8004a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a08:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a10:	2b0c      	cmp	r3, #12
 8004a12:	d11c      	bne.n	8004a4e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a14:	4b44      	ldr	r3, [pc, #272]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d116      	bne.n	8004a4e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a20:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_RCC_OscConfig+0x180>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e18f      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a38:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4938      	ldr	r1, [pc, #224]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4c:	e03a      	b.n	8004ac4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d020      	beq.n	8004a98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a56:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <HAL_RCC_OscConfig+0x274>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fd fe18 	bl	8002690 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a64:	f7fd fe14 	bl	8002690 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e170      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a76:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4925      	ldr	r1, [pc, #148]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
 8004a96:	e015      	b.n	8004ac4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a98:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <HAL_RCC_OscConfig+0x274>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9e:	f7fd fdf7 	bl	8002690 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa6:	f7fd fdf3 	bl	8002690 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e14f      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f0      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d037      	beq.n	8004b40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d016      	beq.n	8004b06 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <HAL_RCC_OscConfig+0x278>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ade:	f7fd fdd7 	bl	8002690 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae6:	f7fd fdd3 	bl	8002690 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e12f      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x22e>
 8004b04:	e01c      	b.n	8004b40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b06:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <HAL_RCC_OscConfig+0x278>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7fd fdc0 	bl	8002690 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b12:	e00f      	b.n	8004b34 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b14:	f7fd fdbc 	bl	8002690 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d908      	bls.n	8004b34 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e118      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
 8004b26:	bf00      	nop
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	42470000 	.word	0x42470000
 8004b30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b34:	4b8a      	ldr	r3, [pc, #552]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e9      	bne.n	8004b14 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8097 	beq.w	8004c7c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b52:	4b83      	ldr	r3, [pc, #524]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10f      	bne.n	8004b7e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	4b7f      	ldr	r3, [pc, #508]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	4a7e      	ldr	r2, [pc, #504]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b6e:	4b7c      	ldr	r3, [pc, #496]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7e:	4b79      	ldr	r3, [pc, #484]	; (8004d64 <HAL_RCC_OscConfig+0x4ac>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d118      	bne.n	8004bbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b8a:	4b76      	ldr	r3, [pc, #472]	; (8004d64 <HAL_RCC_OscConfig+0x4ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a75      	ldr	r2, [pc, #468]	; (8004d64 <HAL_RCC_OscConfig+0x4ac>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b96:	f7fd fd7b 	bl	8002690 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9e:	f7fd fd77 	bl	8002690 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e0d3      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	4b6c      	ldr	r3, [pc, #432]	; (8004d64 <HAL_RCC_OscConfig+0x4ac>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x31a>
 8004bc4:	4b66      	ldr	r3, [pc, #408]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	4a65      	ldr	r2, [pc, #404]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd0:	e01c      	b.n	8004c0c <HAL_RCC_OscConfig+0x354>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x33c>
 8004bda:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	4a60      	ldr	r2, [pc, #384]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004be0:	f043 0304 	orr.w	r3, r3, #4
 8004be4:	6713      	str	r3, [r2, #112]	; 0x70
 8004be6:	4b5e      	ldr	r3, [pc, #376]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	4a5d      	ldr	r2, [pc, #372]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf2:	e00b      	b.n	8004c0c <HAL_RCC_OscConfig+0x354>
 8004bf4:	4b5a      	ldr	r3, [pc, #360]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4a59      	ldr	r2, [pc, #356]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004c00:	4b57      	ldr	r3, [pc, #348]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	4a56      	ldr	r2, [pc, #344]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004c06:	f023 0304 	bic.w	r3, r3, #4
 8004c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d015      	beq.n	8004c40 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c14:	f7fd fd3c 	bl	8002690 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fd fd38 	bl	8002690 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e092      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c32:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0ee      	beq.n	8004c1c <HAL_RCC_OscConfig+0x364>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c40:	f7fd fd26 	bl	8002690 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c48:	f7fd fd22 	bl	8002690 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e07c      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5e:	4b40      	ldr	r3, [pc, #256]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ee      	bne.n	8004c48 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d105      	bne.n	8004c7c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c70:	4b3b      	ldr	r3, [pc, #236]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	4a3a      	ldr	r2, [pc, #232]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d068      	beq.n	8004d56 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c84:	4b36      	ldr	r3, [pc, #216]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d060      	beq.n	8004d52 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d145      	bne.n	8004d24 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c98:	4b33      	ldr	r3, [pc, #204]	; (8004d68 <HAL_RCC_OscConfig+0x4b0>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9e:	f7fd fcf7 	bl	8002690 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca6:	f7fd fcf3 	bl	8002690 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e04f      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb8:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f0      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	019b      	lsls	r3, r3, #6
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	061b      	lsls	r3, r3, #24
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	071b      	lsls	r3, r3, #28
 8004cf0:	491b      	ldr	r1, [pc, #108]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <HAL_RCC_OscConfig+0x4b0>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fd fcc8 	bl	8002690 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fd fcc4 	bl	8002690 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e020      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d16:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x44c>
 8004d22:	e018      	b.n	8004d56 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d24:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <HAL_RCC_OscConfig+0x4b0>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2a:	f7fd fcb1 	bl	8002690 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d32:	f7fd fcad 	bl	8002690 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e009      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_RCC_OscConfig+0x4a8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0x47a>
 8004d50:	e001      	b.n	8004d56 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40007000 	.word	0x40007000
 8004d68:	42470060 	.word	0x42470060

08004d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e03f      	b.n	8004dfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fc fd0c 	bl	80017b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	; 0x24
 8004d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fa69 	bl	8005288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b088      	sub	sp, #32
 8004e0a:	af02      	add	r7, sp, #8
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	f040 8083 	bne.w	8004f2e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <HAL_UART_Transmit+0x2e>
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e07b      	b.n	8004f30 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Transmit+0x40>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e074      	b.n	8004f30 <HAL_UART_Transmit+0x12a>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2221      	movs	r2, #33	; 0x21
 8004e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e5c:	f7fd fc18 	bl	8002690 <HAL_GetTick>
 8004e60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004e76:	e042      	b.n	8004efe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8e:	d122      	bne.n	8004ed6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2200      	movs	r2, #0
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f976 	bl	800518c <UART_WaitOnFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e042      	b.n	8004f30 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ebc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	3302      	adds	r3, #2
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	e017      	b.n	8004efe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	e013      	b.n	8004efe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f953 	bl	800518c <UART_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e01f      	b.n	8004f30 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	60ba      	str	r2, [r7, #8]
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1b7      	bne.n	8004e78 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2140      	movs	r1, #64	; 0x40
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f93a 	bl	800518c <UART_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e006      	b.n	8004f30 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e000      	b.n	8004f30 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004f2e:	2302      	movs	r3, #2
  }
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	4613      	mov	r3, r2
 8004f44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d166      	bne.n	8005020 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_UART_Receive_DMA+0x26>
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e05f      	b.n	8005022 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Receive_DMA+0x38>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e058      	b.n	8005022 <HAL_UART_Receive_DMA+0xea>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2222      	movs	r2, #34	; 0x22
 8004f8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f96:	4a25      	ldr	r2, [pc, #148]	; (800502c <HAL_UART_Receive_DMA+0xf4>)
 8004f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9e:	4a24      	ldr	r2, [pc, #144]	; (8005030 <HAL_UART_Receive_DMA+0xf8>)
 8004fa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	4a23      	ldr	r2, [pc, #140]	; (8005034 <HAL_UART_Receive_DMA+0xfc>)
 8004fa8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	2200      	movs	r2, #0
 8004fb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	f7fd fd4f 	bl	8002a6c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695a      	ldr	r2, [r3, #20]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800501a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	08005075 	.word	0x08005075
 8005030:	080050dd 	.word	0x080050dd
 8005034:	080050f9 	.word	0x080050f9

08005038 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d11e      	bne.n	80050ce <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050a4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7ff ffb2 	bl	8005038 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff ffae 	bl	800504c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b80      	cmp	r3, #128	; 0x80
 8005116:	bf0c      	ite	eq
 8005118:	2301      	moveq	r3, #1
 800511a:	2300      	movne	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b21      	cmp	r3, #33	; 0x21
 800512a:	d108      	bne.n	800513e <UART_DMAError+0x46>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2200      	movs	r2, #0
 8005136:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005138:	68b8      	ldr	r0, [r7, #8]
 800513a:	f000 f871 	bl	8005220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	bf0c      	ite	eq
 800514c:	2301      	moveq	r3, #1
 800514e:	2300      	movne	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b22      	cmp	r3, #34	; 0x22
 800515e:	d108      	bne.n	8005172 <UART_DMAError+0x7a>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2200      	movs	r2, #0
 800516a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800516c:	68b8      	ldr	r0, [r7, #8]
 800516e:	f000 f86d 	bl	800524c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	f043 0210 	orr.w	r2, r3, #16
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800517e:	68b8      	ldr	r0, [r7, #8]
 8005180:	f7ff ff6e 	bl	8005060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519c:	e02c      	b.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d028      	beq.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <UART_WaitOnFlagUntilTimeout+0x30>
 80051ac:	f7fd fa70 	bl	8002690 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d21d      	bcs.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e00f      	b.n	8005218 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4013      	ands	r3, r2
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	429a      	cmp	r2, r3
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	429a      	cmp	r2, r3
 8005214:	d0c3      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005236:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005262:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052ca:	f023 030c 	bic.w	r3, r3, #12
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	68f9      	ldr	r1, [r7, #12]
 80052d4:	430b      	orrs	r3, r1
 80052d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f6:	f040 818b 	bne.w	8005610 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4ac1      	ldr	r2, [pc, #772]	; (8005604 <UART_SetConfig+0x37c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d005      	beq.n	8005310 <UART_SetConfig+0x88>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4abf      	ldr	r2, [pc, #764]	; (8005608 <UART_SetConfig+0x380>)
 800530a:	4293      	cmp	r3, r2
 800530c:	f040 80bd 	bne.w	800548a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005310:	f7ff f91e 	bl	8004550 <HAL_RCC_GetPCLK2Freq>
 8005314:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	461d      	mov	r5, r3
 800531a:	f04f 0600 	mov.w	r6, #0
 800531e:	46a8      	mov	r8, r5
 8005320:	46b1      	mov	r9, r6
 8005322:	eb18 0308 	adds.w	r3, r8, r8
 8005326:	eb49 0409 	adc.w	r4, r9, r9
 800532a:	4698      	mov	r8, r3
 800532c:	46a1      	mov	r9, r4
 800532e:	eb18 0805 	adds.w	r8, r8, r5
 8005332:	eb49 0906 	adc.w	r9, r9, r6
 8005336:	f04f 0100 	mov.w	r1, #0
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005342:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005346:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800534a:	4688      	mov	r8, r1
 800534c:	4691      	mov	r9, r2
 800534e:	eb18 0005 	adds.w	r0, r8, r5
 8005352:	eb49 0106 	adc.w	r1, r9, r6
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	461d      	mov	r5, r3
 800535c:	f04f 0600 	mov.w	r6, #0
 8005360:	196b      	adds	r3, r5, r5
 8005362:	eb46 0406 	adc.w	r4, r6, r6
 8005366:	461a      	mov	r2, r3
 8005368:	4623      	mov	r3, r4
 800536a:	f7fb fc3d 	bl	8000be8 <__aeabi_uldivmod>
 800536e:	4603      	mov	r3, r0
 8005370:	460c      	mov	r4, r1
 8005372:	461a      	mov	r2, r3
 8005374:	4ba5      	ldr	r3, [pc, #660]	; (800560c <UART_SetConfig+0x384>)
 8005376:	fba3 2302 	umull	r2, r3, r3, r2
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	461d      	mov	r5, r3
 8005384:	f04f 0600 	mov.w	r6, #0
 8005388:	46a9      	mov	r9, r5
 800538a:	46b2      	mov	sl, r6
 800538c:	eb19 0309 	adds.w	r3, r9, r9
 8005390:	eb4a 040a 	adc.w	r4, sl, sl
 8005394:	4699      	mov	r9, r3
 8005396:	46a2      	mov	sl, r4
 8005398:	eb19 0905 	adds.w	r9, r9, r5
 800539c:	eb4a 0a06 	adc.w	sl, sl, r6
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053b4:	4689      	mov	r9, r1
 80053b6:	4692      	mov	sl, r2
 80053b8:	eb19 0005 	adds.w	r0, r9, r5
 80053bc:	eb4a 0106 	adc.w	r1, sl, r6
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	461d      	mov	r5, r3
 80053c6:	f04f 0600 	mov.w	r6, #0
 80053ca:	196b      	adds	r3, r5, r5
 80053cc:	eb46 0406 	adc.w	r4, r6, r6
 80053d0:	461a      	mov	r2, r3
 80053d2:	4623      	mov	r3, r4
 80053d4:	f7fb fc08 	bl	8000be8 <__aeabi_uldivmod>
 80053d8:	4603      	mov	r3, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	461a      	mov	r2, r3
 80053de:	4b8b      	ldr	r3, [pc, #556]	; (800560c <UART_SetConfig+0x384>)
 80053e0:	fba3 1302 	umull	r1, r3, r3, r2
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	2164      	movs	r1, #100	; 0x64
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	3332      	adds	r3, #50	; 0x32
 80053f2:	4a86      	ldr	r2, [pc, #536]	; (800560c <UART_SetConfig+0x384>)
 80053f4:	fba2 2303 	umull	r2, r3, r2, r3
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005400:	4498      	add	r8, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	461d      	mov	r5, r3
 8005406:	f04f 0600 	mov.w	r6, #0
 800540a:	46a9      	mov	r9, r5
 800540c:	46b2      	mov	sl, r6
 800540e:	eb19 0309 	adds.w	r3, r9, r9
 8005412:	eb4a 040a 	adc.w	r4, sl, sl
 8005416:	4699      	mov	r9, r3
 8005418:	46a2      	mov	sl, r4
 800541a:	eb19 0905 	adds.w	r9, r9, r5
 800541e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005422:	f04f 0100 	mov.w	r1, #0
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800542e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005432:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005436:	4689      	mov	r9, r1
 8005438:	4692      	mov	sl, r2
 800543a:	eb19 0005 	adds.w	r0, r9, r5
 800543e:	eb4a 0106 	adc.w	r1, sl, r6
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	461d      	mov	r5, r3
 8005448:	f04f 0600 	mov.w	r6, #0
 800544c:	196b      	adds	r3, r5, r5
 800544e:	eb46 0406 	adc.w	r4, r6, r6
 8005452:	461a      	mov	r2, r3
 8005454:	4623      	mov	r3, r4
 8005456:	f7fb fbc7 	bl	8000be8 <__aeabi_uldivmod>
 800545a:	4603      	mov	r3, r0
 800545c:	460c      	mov	r4, r1
 800545e:	461a      	mov	r2, r3
 8005460:	4b6a      	ldr	r3, [pc, #424]	; (800560c <UART_SetConfig+0x384>)
 8005462:	fba3 1302 	umull	r1, r3, r3, r2
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	2164      	movs	r1, #100	; 0x64
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	3332      	adds	r3, #50	; 0x32
 8005474:	4a65      	ldr	r2, [pc, #404]	; (800560c <UART_SetConfig+0x384>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	f003 0207 	and.w	r2, r3, #7
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4442      	add	r2, r8
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	e26f      	b.n	800596a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800548a:	f7ff f84d 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 800548e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	461d      	mov	r5, r3
 8005494:	f04f 0600 	mov.w	r6, #0
 8005498:	46a8      	mov	r8, r5
 800549a:	46b1      	mov	r9, r6
 800549c:	eb18 0308 	adds.w	r3, r8, r8
 80054a0:	eb49 0409 	adc.w	r4, r9, r9
 80054a4:	4698      	mov	r8, r3
 80054a6:	46a1      	mov	r9, r4
 80054a8:	eb18 0805 	adds.w	r8, r8, r5
 80054ac:	eb49 0906 	adc.w	r9, r9, r6
 80054b0:	f04f 0100 	mov.w	r1, #0
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054c4:	4688      	mov	r8, r1
 80054c6:	4691      	mov	r9, r2
 80054c8:	eb18 0005 	adds.w	r0, r8, r5
 80054cc:	eb49 0106 	adc.w	r1, r9, r6
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	461d      	mov	r5, r3
 80054d6:	f04f 0600 	mov.w	r6, #0
 80054da:	196b      	adds	r3, r5, r5
 80054dc:	eb46 0406 	adc.w	r4, r6, r6
 80054e0:	461a      	mov	r2, r3
 80054e2:	4623      	mov	r3, r4
 80054e4:	f7fb fb80 	bl	8000be8 <__aeabi_uldivmod>
 80054e8:	4603      	mov	r3, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	461a      	mov	r2, r3
 80054ee:	4b47      	ldr	r3, [pc, #284]	; (800560c <UART_SetConfig+0x384>)
 80054f0:	fba3 2302 	umull	r2, r3, r3, r2
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	461d      	mov	r5, r3
 80054fe:	f04f 0600 	mov.w	r6, #0
 8005502:	46a9      	mov	r9, r5
 8005504:	46b2      	mov	sl, r6
 8005506:	eb19 0309 	adds.w	r3, r9, r9
 800550a:	eb4a 040a 	adc.w	r4, sl, sl
 800550e:	4699      	mov	r9, r3
 8005510:	46a2      	mov	sl, r4
 8005512:	eb19 0905 	adds.w	r9, r9, r5
 8005516:	eb4a 0a06 	adc.w	sl, sl, r6
 800551a:	f04f 0100 	mov.w	r1, #0
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005526:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800552a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800552e:	4689      	mov	r9, r1
 8005530:	4692      	mov	sl, r2
 8005532:	eb19 0005 	adds.w	r0, r9, r5
 8005536:	eb4a 0106 	adc.w	r1, sl, r6
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	461d      	mov	r5, r3
 8005540:	f04f 0600 	mov.w	r6, #0
 8005544:	196b      	adds	r3, r5, r5
 8005546:	eb46 0406 	adc.w	r4, r6, r6
 800554a:	461a      	mov	r2, r3
 800554c:	4623      	mov	r3, r4
 800554e:	f7fb fb4b 	bl	8000be8 <__aeabi_uldivmod>
 8005552:	4603      	mov	r3, r0
 8005554:	460c      	mov	r4, r1
 8005556:	461a      	mov	r2, r3
 8005558:	4b2c      	ldr	r3, [pc, #176]	; (800560c <UART_SetConfig+0x384>)
 800555a:	fba3 1302 	umull	r1, r3, r3, r2
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	2164      	movs	r1, #100	; 0x64
 8005562:	fb01 f303 	mul.w	r3, r1, r3
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	3332      	adds	r3, #50	; 0x32
 800556c:	4a27      	ldr	r2, [pc, #156]	; (800560c <UART_SetConfig+0x384>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800557a:	4498      	add	r8, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	461d      	mov	r5, r3
 8005580:	f04f 0600 	mov.w	r6, #0
 8005584:	46a9      	mov	r9, r5
 8005586:	46b2      	mov	sl, r6
 8005588:	eb19 0309 	adds.w	r3, r9, r9
 800558c:	eb4a 040a 	adc.w	r4, sl, sl
 8005590:	4699      	mov	r9, r3
 8005592:	46a2      	mov	sl, r4
 8005594:	eb19 0905 	adds.w	r9, r9, r5
 8005598:	eb4a 0a06 	adc.w	sl, sl, r6
 800559c:	f04f 0100 	mov.w	r1, #0
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055b0:	4689      	mov	r9, r1
 80055b2:	4692      	mov	sl, r2
 80055b4:	eb19 0005 	adds.w	r0, r9, r5
 80055b8:	eb4a 0106 	adc.w	r1, sl, r6
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	461d      	mov	r5, r3
 80055c2:	f04f 0600 	mov.w	r6, #0
 80055c6:	196b      	adds	r3, r5, r5
 80055c8:	eb46 0406 	adc.w	r4, r6, r6
 80055cc:	461a      	mov	r2, r3
 80055ce:	4623      	mov	r3, r4
 80055d0:	f7fb fb0a 	bl	8000be8 <__aeabi_uldivmod>
 80055d4:	4603      	mov	r3, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	461a      	mov	r2, r3
 80055da:	4b0c      	ldr	r3, [pc, #48]	; (800560c <UART_SetConfig+0x384>)
 80055dc:	fba3 1302 	umull	r1, r3, r3, r2
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	2164      	movs	r1, #100	; 0x64
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	3332      	adds	r3, #50	; 0x32
 80055ee:	4a07      	ldr	r2, [pc, #28]	; (800560c <UART_SetConfig+0x384>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	f003 0207 	and.w	r2, r3, #7
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4442      	add	r2, r8
 8005600:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005602:	e1b2      	b.n	800596a <UART_SetConfig+0x6e2>
 8005604:	40011000 	.word	0x40011000
 8005608:	40011400 	.word	0x40011400
 800560c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4ad7      	ldr	r2, [pc, #860]	; (8005974 <UART_SetConfig+0x6ec>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d005      	beq.n	8005626 <UART_SetConfig+0x39e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4ad6      	ldr	r2, [pc, #856]	; (8005978 <UART_SetConfig+0x6f0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	f040 80d1 	bne.w	80057c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005626:	f7fe ff93 	bl	8004550 <HAL_RCC_GetPCLK2Freq>
 800562a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	469a      	mov	sl, r3
 8005630:	f04f 0b00 	mov.w	fp, #0
 8005634:	46d0      	mov	r8, sl
 8005636:	46d9      	mov	r9, fp
 8005638:	eb18 0308 	adds.w	r3, r8, r8
 800563c:	eb49 0409 	adc.w	r4, r9, r9
 8005640:	4698      	mov	r8, r3
 8005642:	46a1      	mov	r9, r4
 8005644:	eb18 080a 	adds.w	r8, r8, sl
 8005648:	eb49 090b 	adc.w	r9, r9, fp
 800564c:	f04f 0100 	mov.w	r1, #0
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005658:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800565c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005660:	4688      	mov	r8, r1
 8005662:	4691      	mov	r9, r2
 8005664:	eb1a 0508 	adds.w	r5, sl, r8
 8005668:	eb4b 0609 	adc.w	r6, fp, r9
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4619      	mov	r1, r3
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	f04f 0400 	mov.w	r4, #0
 800567e:	0094      	lsls	r4, r2, #2
 8005680:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005684:	008b      	lsls	r3, r1, #2
 8005686:	461a      	mov	r2, r3
 8005688:	4623      	mov	r3, r4
 800568a:	4628      	mov	r0, r5
 800568c:	4631      	mov	r1, r6
 800568e:	f7fb faab 	bl	8000be8 <__aeabi_uldivmod>
 8005692:	4603      	mov	r3, r0
 8005694:	460c      	mov	r4, r1
 8005696:	461a      	mov	r2, r3
 8005698:	4bb8      	ldr	r3, [pc, #736]	; (800597c <UART_SetConfig+0x6f4>)
 800569a:	fba3 2302 	umull	r2, r3, r3, r2
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	469b      	mov	fp, r3
 80056a8:	f04f 0c00 	mov.w	ip, #0
 80056ac:	46d9      	mov	r9, fp
 80056ae:	46e2      	mov	sl, ip
 80056b0:	eb19 0309 	adds.w	r3, r9, r9
 80056b4:	eb4a 040a 	adc.w	r4, sl, sl
 80056b8:	4699      	mov	r9, r3
 80056ba:	46a2      	mov	sl, r4
 80056bc:	eb19 090b 	adds.w	r9, r9, fp
 80056c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056c4:	f04f 0100 	mov.w	r1, #0
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056d8:	4689      	mov	r9, r1
 80056da:	4692      	mov	sl, r2
 80056dc:	eb1b 0509 	adds.w	r5, fp, r9
 80056e0:	eb4c 060a 	adc.w	r6, ip, sl
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4619      	mov	r1, r3
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	f04f 0400 	mov.w	r4, #0
 80056f6:	0094      	lsls	r4, r2, #2
 80056f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056fc:	008b      	lsls	r3, r1, #2
 80056fe:	461a      	mov	r2, r3
 8005700:	4623      	mov	r3, r4
 8005702:	4628      	mov	r0, r5
 8005704:	4631      	mov	r1, r6
 8005706:	f7fb fa6f 	bl	8000be8 <__aeabi_uldivmod>
 800570a:	4603      	mov	r3, r0
 800570c:	460c      	mov	r4, r1
 800570e:	461a      	mov	r2, r3
 8005710:	4b9a      	ldr	r3, [pc, #616]	; (800597c <UART_SetConfig+0x6f4>)
 8005712:	fba3 1302 	umull	r1, r3, r3, r2
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	2164      	movs	r1, #100	; 0x64
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	3332      	adds	r3, #50	; 0x32
 8005724:	4a95      	ldr	r2, [pc, #596]	; (800597c <UART_SetConfig+0x6f4>)
 8005726:	fba2 2303 	umull	r2, r3, r2, r3
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005730:	4498      	add	r8, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	469b      	mov	fp, r3
 8005736:	f04f 0c00 	mov.w	ip, #0
 800573a:	46d9      	mov	r9, fp
 800573c:	46e2      	mov	sl, ip
 800573e:	eb19 0309 	adds.w	r3, r9, r9
 8005742:	eb4a 040a 	adc.w	r4, sl, sl
 8005746:	4699      	mov	r9, r3
 8005748:	46a2      	mov	sl, r4
 800574a:	eb19 090b 	adds.w	r9, r9, fp
 800574e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005752:	f04f 0100 	mov.w	r1, #0
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800575e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005762:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005766:	4689      	mov	r9, r1
 8005768:	4692      	mov	sl, r2
 800576a:	eb1b 0509 	adds.w	r5, fp, r9
 800576e:	eb4c 060a 	adc.w	r6, ip, sl
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4619      	mov	r1, r3
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	f04f 0400 	mov.w	r4, #0
 8005784:	0094      	lsls	r4, r2, #2
 8005786:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800578a:	008b      	lsls	r3, r1, #2
 800578c:	461a      	mov	r2, r3
 800578e:	4623      	mov	r3, r4
 8005790:	4628      	mov	r0, r5
 8005792:	4631      	mov	r1, r6
 8005794:	f7fb fa28 	bl	8000be8 <__aeabi_uldivmod>
 8005798:	4603      	mov	r3, r0
 800579a:	460c      	mov	r4, r1
 800579c:	461a      	mov	r2, r3
 800579e:	4b77      	ldr	r3, [pc, #476]	; (800597c <UART_SetConfig+0x6f4>)
 80057a0:	fba3 1302 	umull	r1, r3, r3, r2
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	2164      	movs	r1, #100	; 0x64
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	3332      	adds	r3, #50	; 0x32
 80057b2:	4a72      	ldr	r2, [pc, #456]	; (800597c <UART_SetConfig+0x6f4>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	f003 020f 	and.w	r2, r3, #15
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4442      	add	r2, r8
 80057c4:	609a      	str	r2, [r3, #8]
 80057c6:	e0d0      	b.n	800596a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7fe feae 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 80057cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	469a      	mov	sl, r3
 80057d2:	f04f 0b00 	mov.w	fp, #0
 80057d6:	46d0      	mov	r8, sl
 80057d8:	46d9      	mov	r9, fp
 80057da:	eb18 0308 	adds.w	r3, r8, r8
 80057de:	eb49 0409 	adc.w	r4, r9, r9
 80057e2:	4698      	mov	r8, r3
 80057e4:	46a1      	mov	r9, r4
 80057e6:	eb18 080a 	adds.w	r8, r8, sl
 80057ea:	eb49 090b 	adc.w	r9, r9, fp
 80057ee:	f04f 0100 	mov.w	r1, #0
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005802:	4688      	mov	r8, r1
 8005804:	4691      	mov	r9, r2
 8005806:	eb1a 0508 	adds.w	r5, sl, r8
 800580a:	eb4b 0609 	adc.w	r6, fp, r9
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4619      	mov	r1, r3
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	f04f 0400 	mov.w	r4, #0
 8005820:	0094      	lsls	r4, r2, #2
 8005822:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005826:	008b      	lsls	r3, r1, #2
 8005828:	461a      	mov	r2, r3
 800582a:	4623      	mov	r3, r4
 800582c:	4628      	mov	r0, r5
 800582e:	4631      	mov	r1, r6
 8005830:	f7fb f9da 	bl	8000be8 <__aeabi_uldivmod>
 8005834:	4603      	mov	r3, r0
 8005836:	460c      	mov	r4, r1
 8005838:	461a      	mov	r2, r3
 800583a:	4b50      	ldr	r3, [pc, #320]	; (800597c <UART_SetConfig+0x6f4>)
 800583c:	fba3 2302 	umull	r2, r3, r3, r2
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	469b      	mov	fp, r3
 800584a:	f04f 0c00 	mov.w	ip, #0
 800584e:	46d9      	mov	r9, fp
 8005850:	46e2      	mov	sl, ip
 8005852:	eb19 0309 	adds.w	r3, r9, r9
 8005856:	eb4a 040a 	adc.w	r4, sl, sl
 800585a:	4699      	mov	r9, r3
 800585c:	46a2      	mov	sl, r4
 800585e:	eb19 090b 	adds.w	r9, r9, fp
 8005862:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005866:	f04f 0100 	mov.w	r1, #0
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005872:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005876:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800587a:	4689      	mov	r9, r1
 800587c:	4692      	mov	sl, r2
 800587e:	eb1b 0509 	adds.w	r5, fp, r9
 8005882:	eb4c 060a 	adc.w	r6, ip, sl
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4619      	mov	r1, r3
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	f04f 0400 	mov.w	r4, #0
 8005898:	0094      	lsls	r4, r2, #2
 800589a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800589e:	008b      	lsls	r3, r1, #2
 80058a0:	461a      	mov	r2, r3
 80058a2:	4623      	mov	r3, r4
 80058a4:	4628      	mov	r0, r5
 80058a6:	4631      	mov	r1, r6
 80058a8:	f7fb f99e 	bl	8000be8 <__aeabi_uldivmod>
 80058ac:	4603      	mov	r3, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	461a      	mov	r2, r3
 80058b2:	4b32      	ldr	r3, [pc, #200]	; (800597c <UART_SetConfig+0x6f4>)
 80058b4:	fba3 1302 	umull	r1, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	2164      	movs	r1, #100	; 0x64
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	3332      	adds	r3, #50	; 0x32
 80058c6:	4a2d      	ldr	r2, [pc, #180]	; (800597c <UART_SetConfig+0x6f4>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058d2:	4498      	add	r8, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	469b      	mov	fp, r3
 80058d8:	f04f 0c00 	mov.w	ip, #0
 80058dc:	46d9      	mov	r9, fp
 80058de:	46e2      	mov	sl, ip
 80058e0:	eb19 0309 	adds.w	r3, r9, r9
 80058e4:	eb4a 040a 	adc.w	r4, sl, sl
 80058e8:	4699      	mov	r9, r3
 80058ea:	46a2      	mov	sl, r4
 80058ec:	eb19 090b 	adds.w	r9, r9, fp
 80058f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058f4:	f04f 0100 	mov.w	r1, #0
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005900:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005904:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005908:	4689      	mov	r9, r1
 800590a:	4692      	mov	sl, r2
 800590c:	eb1b 0509 	adds.w	r5, fp, r9
 8005910:	eb4c 060a 	adc.w	r6, ip, sl
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	4619      	mov	r1, r3
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	f04f 0400 	mov.w	r4, #0
 8005926:	0094      	lsls	r4, r2, #2
 8005928:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800592c:	008b      	lsls	r3, r1, #2
 800592e:	461a      	mov	r2, r3
 8005930:	4623      	mov	r3, r4
 8005932:	4628      	mov	r0, r5
 8005934:	4631      	mov	r1, r6
 8005936:	f7fb f957 	bl	8000be8 <__aeabi_uldivmod>
 800593a:	4603      	mov	r3, r0
 800593c:	460c      	mov	r4, r1
 800593e:	461a      	mov	r2, r3
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <UART_SetConfig+0x6f4>)
 8005942:	fba3 1302 	umull	r1, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	2164      	movs	r1, #100	; 0x64
 800594a:	fb01 f303 	mul.w	r3, r1, r3
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	3332      	adds	r3, #50	; 0x32
 8005954:	4a09      	ldr	r2, [pc, #36]	; (800597c <UART_SetConfig+0x6f4>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4442      	add	r2, r8
 8005966:	609a      	str	r2, [r3, #8]
}
 8005968:	e7ff      	b.n	800596a <UART_SetConfig+0x6e2>
 800596a:	bf00      	nop
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	40011000 	.word	0x40011000
 8005978:	40011400 	.word	0x40011400
 800597c:	51eb851f 	.word	0x51eb851f

08005980 <delay>:
 *
 * \param t		Number of "nop" cycles
 *
 * \return void
 */		
inline void delay(uint32_t t) {
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	for (; t; t--) __asm("nop");
 8005988:	e003      	b.n	8005992 <delay+0x12>
 800598a:	bf00      	nop
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3b01      	subs	r3, #1
 8005990:	607b      	str	r3, [r7, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f8      	bne.n	800598a <delay+0xa>
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <GPIO_Init>:
 *
 * \param
 *
 * \return void
 */
void GPIO_Init(uint32_t mode) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d003      	beq.n	80059ba <GPIO_Init+0x16>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f040 8081 	bne.w	8005abc <GPIO_Init+0x118>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 80059ba:	2300      	movs	r3, #0
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	4b41      	ldr	r3, [pc, #260]	; (8005ac4 <GPIO_Init+0x120>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	4a40      	ldr	r2, [pc, #256]	; (8005ac4 <GPIO_Init+0x120>)
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	6313      	str	r3, [r2, #48]	; 0x30
 80059ca:	4b3e      	ldr	r3, [pc, #248]	; (8005ac4 <GPIO_Init+0x120>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	4b3a      	ldr	r3, [pc, #232]	; (8005ac4 <GPIO_Init+0x120>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	4a39      	ldr	r2, [pc, #228]	; (8005ac4 <GPIO_Init+0x120>)
 80059e0:	f043 0302 	orr.w	r3, r3, #2
 80059e4:	6313      	str	r3, [r2, #48]	; 0x30
 80059e6:	4b37      	ldr	r3, [pc, #220]	; (8005ac4 <GPIO_Init+0x120>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	4b33      	ldr	r3, [pc, #204]	; (8005ac4 <GPIO_Init+0x120>)
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	4a32      	ldr	r2, [pc, #200]	; (8005ac4 <GPIO_Init+0x120>)
 80059fc:	f043 0304 	orr.w	r3, r3, #4
 8005a00:	6313      	str	r3, [r2, #48]	; 0x30
 8005a02:	4b30      	ldr	r3, [pc, #192]	; (8005ac4 <GPIO_Init+0x120>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	60bb      	str	r3, [r7, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8005a0e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005a12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a20:	f107 0314 	add.w	r3, r7, #20
 8005a24:	4619      	mov	r1, r3
 8005a26:	4828      	ldr	r0, [pc, #160]	; (8005ac8 <GPIO_Init+0x124>)
 8005a28:	f7fd fae0 	bl	8002fec <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 8005a2c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005a30:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a3e:	f107 0314 	add.w	r3, r7, #20
 8005a42:	4619      	mov	r1, r3
 8005a44:	4821      	ldr	r0, [pc, #132]	; (8005acc <GPIO_Init+0x128>)
 8005a46:	f7fd fad1 	bl	8002fec <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a5a:	f107 0314 	add.w	r3, r7, #20
 8005a5e:	4619      	mov	r1, r3
 8005a60:	481b      	ldr	r0, [pc, #108]	; (8005ad0 <GPIO_Init+0x12c>)
 8005a62:	f7fd fac3 	bl	8002fec <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 8005a66:	2313      	movs	r3, #19
 8005a68:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005a72:	2300      	movs	r3, #0
 8005a74:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a76:	f107 0314 	add.w	r3, r7, #20
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4812      	ldr	r0, [pc, #72]	; (8005ac8 <GPIO_Init+0x124>)
 8005a7e:	f7fd fab5 	bl	8002fec <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a82:	2301      	movs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a86:	2301      	movs	r3, #1
 8005a88:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a92:	f107 0314 	add.w	r3, r7, #20
 8005a96:	4619      	mov	r1, r3
 8005a98:	480c      	ldr	r0, [pc, #48]	; (8005acc <GPIO_Init+0x128>)
 8005a9a:	f7fd faa7 	bl	8002fec <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aae:	f107 0314 	add.w	r3, r7, #20
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4806      	ldr	r0, [pc, #24]	; (8005ad0 <GPIO_Init+0x12c>)
 8005ab6:	f7fd fa99 	bl	8002fec <HAL_GPIO_Init>
 8005aba:	e000      	b.n	8005abe <GPIO_Init+0x11a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8005abc:	bf00      	nop
}
 8005abe:	3728      	adds	r7, #40	; 0x28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	40020000 	.word	0x40020000
 8005acc:	40020400 	.word	0x40020400
 8005ad0:	40020800 	.word	0x40020800

08005ad4 <LCD_Write8>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline void LCD_Write8(uint8_t data) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8005ade:	4b26      	ldr	r3, [pc, #152]	; (8005b78 <LCD_Write8+0xa4>)
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	79fa      	ldrb	r2, [r7, #7]
 8005aea:	0252      	lsls	r2, r2, #9
 8005aec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005af0:	431a      	orrs	r2, r3
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afa:	431a      	orrs	r2, r3
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b04:	491c      	ldr	r1, [pc, #112]	; (8005b78 <LCD_Write8+0xa4>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8005b0a:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <LCD_Write8+0xa8>)
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8005b12:	4013      	ands	r3, r2
 8005b14:	79fa      	ldrb	r2, [r7, #7]
 8005b16:	f002 0208 	and.w	r2, r2, #8
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	431a      	orrs	r2, r3
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	105b      	asrs	r3, r3, #1
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b38:	4910      	ldr	r1, [pc, #64]	; (8005b7c <LCD_Write8+0xa8>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <LCD_Write8+0xac>)
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8005b46:	4013      	ands	r3, r2
 8005b48:	79fa      	ldrb	r2, [r7, #7]
 8005b4a:	0192      	lsls	r2, r2, #6
 8005b4c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005b50:	490b      	ldr	r1, [pc, #44]	; (8005b80 <LCD_Write8+0xac>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <LCD_Write8+0xa4>)
 8005b58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b5c:	619a      	str	r2, [r3, #24]
 8005b5e:	2002      	movs	r0, #2
 8005b60:	f7ff ff0e 	bl	8005980 <delay>
 8005b64:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <LCD_Write8+0xa4>)
 8005b66:	2202      	movs	r2, #2
 8005b68:	619a      	str	r2, [r3, #24]
 8005b6a:	2002      	movs	r0, #2
 8005b6c:	f7ff ff08 	bl	8005980 <delay>
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40020000 	.word	0x40020000
 8005b7c:	40020400 	.word	0x40020400
 8005b80:	40020800 	.word	0x40020800

08005b84 <LCD_Write16Register8>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register8(uint8_t a, uint16_t d) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	460a      	mov	r2, r1
 8005b8e:	71fb      	strb	r3, [r7, #7]
 8005b90:	4613      	mov	r3, r2
 8005b92:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 8005b94:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <LCD_Write16Register8+0x48>)
 8005b96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b9a:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff ff98 	bl	8005ad4 <LCD_Write8>
	LCD_CD_DATA();
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <LCD_Write16Register8+0x48>)
 8005ba6:	2210      	movs	r2, #16
 8005ba8:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 8005baa:	88bb      	ldrh	r3, [r7, #4]
 8005bac:	0a1b      	lsrs	r3, r3, #8
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff ff8e 	bl	8005ad4 <LCD_Write8>
	LCD_Write8(d);
 8005bb8:	88bb      	ldrh	r3, [r7, #4]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff ff89 	bl	8005ad4 <LCD_Write8>
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40020000 	.word	0x40020000

08005bd0 <LCD_Write16Register16>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	460a      	mov	r2, r1
 8005bda:	80fb      	strh	r3, [r7, #6]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 8005be0:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <LCD_Write16Register16+0x58>)
 8005be2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005be6:	619a      	str	r2, [r3, #24]
	LCD_Write8(a >> 8);
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff6f 	bl	8005ad4 <LCD_Write8>
	LCD_Write8(a);
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff ff6a 	bl	8005ad4 <LCD_Write8>
	LCD_CD_DATA();
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <LCD_Write16Register16+0x58>)
 8005c02:	2210      	movs	r2, #16
 8005c04:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 8005c06:	88bb      	ldrh	r3, [r7, #4]
 8005c08:	0a1b      	lsrs	r3, r3, #8
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff ff60 	bl	8005ad4 <LCD_Write8>
	LCD_Write8(d);
 8005c14:	88bb      	ldrh	r3, [r7, #4]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff ff5b 	bl	8005ad4 <LCD_Write8>
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40020000 	.word	0x40020000

08005c2c <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8005c32:	4b3b      	ldr	r3, [pc, #236]	; (8005d20 <LCD_Init+0xf4>)
 8005c34:	22f0      	movs	r2, #240	; 0xf0
 8005c36:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8005c38:	4b3a      	ldr	r3, [pc, #232]	; (8005d24 <LCD_Init+0xf8>)
 8005c3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005c3e:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8005c40:	4b39      	ldr	r3, [pc, #228]	; (8005d28 <LCD_Init+0xfc>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8005c46:	4b39      	ldr	r3, [pc, #228]	; (8005d2c <LCD_Init+0x100>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	4b37      	ldr	r3, [pc, #220]	; (8005d2c <LCD_Init+0x100>)
 8005c4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005c52:	4b37      	ldr	r3, [pc, #220]	; (8005d30 <LCD_Init+0x104>)
 8005c54:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 8005c56:	4b37      	ldr	r3, [pc, #220]	; (8005d34 <LCD_Init+0x108>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8005c5c:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <LCD_Init+0x10c>)
 8005c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	4b34      	ldr	r3, [pc, #208]	; (8005d38 <LCD_Init+0x10c>)
 8005c66:	881a      	ldrh	r2, [r3, #0]
 8005c68:	4b34      	ldr	r3, [pc, #208]	; (8005d3c <LCD_Init+0x110>)
 8005c6a:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8005c6c:	4b34      	ldr	r3, [pc, #208]	; (8005d40 <LCD_Init+0x114>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]

	GPIO_Init(GPIO_MODE_OUTPUT_PP);
 8005c72:	2001      	movs	r0, #1
 8005c74:	f7ff fe96 	bl	80059a4 <GPIO_Init>

	LCD_Reset();
 8005c78:	f000 f990 	bl	8005f9c <LCD_Reset>
	HAL_Delay(50);
 8005c7c:	2032      	movs	r0, #50	; 0x32
 8005c7e:	f7fc fd13 	bl	80026a8 <HAL_Delay>

	LCD_CS_ACTIVE();
 8005c82:	4b30      	ldr	r3, [pc, #192]	; (8005d44 <LCD_Init+0x118>)
 8005c84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c88:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined (ILI9328)
	uint8_t i = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8005c8e:	e01d      	b.n	8005ccc <LCD_Init+0xa0>
		a = ILI932x_regValues[i++];
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	71fa      	strb	r2, [r7, #7]
 8005c96:	461a      	mov	r2, r3
 8005c98:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <LCD_Init+0x11c>)
 8005c9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c9e:	80bb      	strh	r3, [r7, #4]
		d = ILI932x_regValues[i++];
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	71fa      	strb	r2, [r7, #7]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4b27      	ldr	r3, [pc, #156]	; (8005d48 <LCD_Init+0x11c>)
 8005caa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005cae:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8005cb0:	88bb      	ldrh	r3, [r7, #4]
 8005cb2:	2bff      	cmp	r3, #255	; 0xff
 8005cb4:	d104      	bne.n	8005cc0 <LCD_Init+0x94>
			HAL_Delay(d);
 8005cb6:	887b      	ldrh	r3, [r7, #2]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fc fcf5 	bl	80026a8 <HAL_Delay>
 8005cbe:	e005      	b.n	8005ccc <LCD_Init+0xa0>
		} else {
			LCD_Write16Register16(a, d);
 8005cc0:	887a      	ldrh	r2, [r7, #2]
 8005cc2:	88bb      	ldrh	r3, [r7, #4]
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff ff82 	bl	8005bd0 <LCD_Write16Register16>
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	2b65      	cmp	r3, #101	; 0x65
 8005cd0:	d9de      	bls.n	8005c90 <LCD_Init+0x64>
		}
	}
	LCD_SetRotation(m_rotation);
 8005cd2:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <LCD_Init+0xfc>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fa3c 	bl	8006154 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8005cdc:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <LCD_Init+0xf4>)
 8005cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <LCD_Init+0xf8>)
 8005cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	f000 f99a 	bl	8006030 <LCD_SetAddrWindow>
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif

	LCD_CS_IDLE();
 8005cfc:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <LCD_Init+0x118>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 8005d02:	2000      	movs	r0, #0
 8005d04:	f000 f908 	bl	8005f18 <LCD_FillScreen>
	LCD_SetTextSize(0);
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f000 fc65 	bl	80065d8 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 8005d0e:	2100      	movs	r1, #0
 8005d10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005d14:	f000 fc7a 	bl	800660c <LCD_SetTextColor>
}
 8005d18:	bf00      	nop
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20000214 	.word	0x20000214
 8005d24:	20000216 	.word	0x20000216
 8005d28:	20000221 	.word	0x20000221
 8005d2c:	20000218 	.word	0x20000218
 8005d30:	2000021a 	.word	0x2000021a
 8005d34:	20000220 	.word	0x20000220
 8005d38:	2000021e 	.word	0x2000021e
 8005d3c:	2000021c 	.word	0x2000021c
 8005d40:	20000222 	.word	0x20000222
 8005d44:	40020400 	.word	0x40020400
 8005d48:	08009f68 	.word	0x08009f68

08005d4c <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	80fb      	strh	r3, [r7, #6]
 8005d56:	460b      	mov	r3, r1
 8005d58:	80bb      	strh	r3, [r7, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8005d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	db51      	blt.n	8005e0a <LCD_DrawPixel+0xbe>
 8005d66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	db4d      	blt.n	8005e0a <LCD_DrawPixel+0xbe>
 8005d6e:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <LCD_DrawPixel+0xc8>)
 8005d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	da46      	bge.n	8005e0a <LCD_DrawPixel+0xbe>
 8005d7c:	4b26      	ldr	r3, [pc, #152]	; (8005e18 <LCD_DrawPixel+0xcc>)
 8005d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d82:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	da3f      	bge.n	8005e0a <LCD_DrawPixel+0xbe>

	LCD_CS_ACTIVE();
 8005d8a:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <LCD_DrawPixel+0xd0>)
 8005d8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d90:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	int16_t t;
	switch (m_rotation) {
 8005d92:	4b23      	ldr	r3, [pc, #140]	; (8005e20 <LCD_DrawPixel+0xd4>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d00d      	beq.n	8005db6 <LCD_DrawPixel+0x6a>
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d017      	beq.n	8005dce <LCD_DrawPixel+0x82>
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d120      	bne.n	8005de4 <LCD_DrawPixel+0x98>
	case 1:
		t = x;
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 8005da6:	88bb      	ldrh	r3, [r7, #4]
 8005da8:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	80fb      	strh	r3, [r7, #6]
		y = t;
 8005db0:	89fb      	ldrh	r3, [r7, #14]
 8005db2:	80bb      	strh	r3, [r7, #4]
		break;
 8005db4:	e016      	b.n	8005de4 <LCD_DrawPixel+0x98>
	case 2:
		x = TFTWIDTH - 1 - x;
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8005dc0:	88bb      	ldrh	r3, [r7, #4]
 8005dc2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	80bb      	strh	r3, [r7, #4]
		break;
 8005dcc:	e00a      	b.n	8005de4 <LCD_DrawPixel+0x98>
	case 3:
		t = x;
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	81fb      	strh	r3, [r7, #14]
		x = y;
 8005dd2:	88bb      	ldrh	r3, [r7, #4]
 8005dd4:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 8005dd6:	89fb      	ldrh	r3, [r7, #14]
 8005dd8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005ddc:	3301      	adds	r3, #1
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	80bb      	strh	r3, [r7, #4]
		break;
 8005de2:	bf00      	nop
	}
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	4619      	mov	r1, r3
 8005de8:	2020      	movs	r0, #32
 8005dea:	f7ff fef1 	bl	8005bd0 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8005dee:	88bb      	ldrh	r3, [r7, #4]
 8005df0:	4619      	mov	r1, r3
 8005df2:	2021      	movs	r0, #33	; 0x21
 8005df4:	f7ff feec 	bl	8005bd0 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8005df8:	887b      	ldrh	r3, [r7, #2]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	2022      	movs	r0, #34	; 0x22
 8005dfe:	f7ff fee7 	bl	8005bd0 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif

	LCD_CS_IDLE();
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <LCD_DrawPixel+0xd0>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	619a      	str	r2, [r3, #24]
 8005e08:	e000      	b.n	8005e0c <LCD_DrawPixel+0xc0>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8005e0a:	bf00      	nop
}
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000214 	.word	0x20000214
 8005e18:	20000216 	.word	0x20000216
 8005e1c:	40020400 	.word	0x40020400
 8005e20:	20000221 	.word	0x20000221

08005e24 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	6039      	str	r1, [r7, #0]
 8005e2e:	80fb      	strh	r3, [r7, #6]
#if defined(SSD1297)
	uint8_t red = LCD_Color565_to_R(color);
 8005e30:	88fb      	ldrh	r3, [r7, #6]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fc02 	bl	800663c <LCD_Color565_to_R>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
	uint8_t green = LCD_Color565_to_G(color);
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fc0d 	bl	800665e <LCD_Color565_to_G>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73bb      	strb	r3, [r7, #14]
	uint8_t blue = LCD_Color565_to_B(color);
 8005e48:	88fb      	ldrh	r3, [r7, #6]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fc18 	bl	8006680 <LCD_Color565_to_B>
 8005e50:	4603      	mov	r3, r0
 8005e52:	737b      	strb	r3, [r7, #13]
#else
	uint8_t hi = color >> 8, lo = color;
#endif

	LCD_CS_ACTIVE();
 8005e54:	4b2e      	ldr	r3, [pc, #184]	; (8005f10 <LCD_Flood+0xec>)
 8005e56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e5a:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8005e5c:	88fb      	ldrh	r3, [r7, #6]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	2022      	movs	r0, #34	; 0x22
 8005e62:	f7ff feb5 	bl	8005bd0 <LCD_Write16Register16>
#elif defined(HX8357D)
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif
	len--;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	603b      	str	r3, [r7, #0]
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
 8005e6c:	7bfa      	ldrb	r2, [r7, #15]
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d141      	bne.n	8005ef8 <LCD_Flood+0xd4>
 8005e74:	7bba      	ldrb	r2, [r7, #14]
 8005e76:	7b7b      	ldrb	r3, [r7, #13]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d13d      	bne.n	8005ef8 <LCD_Flood+0xd4>
 8005e7c:	7bfa      	ldrb	r2, [r7, #15]
 8005e7e:	7b7b      	ldrb	r3, [r7, #13]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d139      	bne.n	8005ef8 <LCD_Flood+0xd4>
#else
	if (hi == lo) {
#endif
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (len--) {
 8005e84:	e026      	b.n	8005ed4 <LCD_Flood+0xb0>
#if defined(SSD1297)
			LCD_WR_STROBE();
 8005e86:	4b23      	ldr	r3, [pc, #140]	; (8005f14 <LCD_Flood+0xf0>)
 8005e88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e8c:	619a      	str	r2, [r3, #24]
 8005e8e:	2002      	movs	r0, #2
 8005e90:	f7ff fd76 	bl	8005980 <delay>
 8005e94:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <LCD_Flood+0xf0>)
 8005e96:	2202      	movs	r2, #2
 8005e98:	619a      	str	r2, [r3, #24]
 8005e9a:	2002      	movs	r0, #2
 8005e9c:	f7ff fd70 	bl	8005980 <delay>
#endif
			LCD_WR_STROBE();
 8005ea0:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <LCD_Flood+0xf0>)
 8005ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ea6:	619a      	str	r2, [r3, #24]
 8005ea8:	2002      	movs	r0, #2
 8005eaa:	f7ff fd69 	bl	8005980 <delay>
 8005eae:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <LCD_Flood+0xf0>)
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	619a      	str	r2, [r3, #24]
 8005eb4:	2002      	movs	r0, #2
 8005eb6:	f7ff fd63 	bl	8005980 <delay>
			LCD_WR_STROBE();
 8005eba:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <LCD_Flood+0xf0>)
 8005ebc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ec0:	619a      	str	r2, [r3, #24]
 8005ec2:	2002      	movs	r0, #2
 8005ec4:	f7ff fd5c 	bl	8005980 <delay>
 8005ec8:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <LCD_Flood+0xf0>)
 8005eca:	2202      	movs	r2, #2
 8005ecc:	619a      	str	r2, [r3, #24]
 8005ece:	2002      	movs	r0, #2
 8005ed0:	f7ff fd56 	bl	8005980 <delay>
		while (len--) {
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	1e5a      	subs	r2, r3, #1
 8005ed8:	603a      	str	r2, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1d3      	bne.n	8005e86 <LCD_Flood+0x62>
	if ((red == green) && (green == blue) && (red == blue)) {
 8005ede:	e010      	b.n	8005f02 <LCD_Flood+0xde>
		}
	} else {
		while (len--) {
#if defined(SSD1297)
			LCD_Write8(red);
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fdf6 	bl	8005ad4 <LCD_Write8>
			LCD_Write8(green);
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fdf2 	bl	8005ad4 <LCD_Write8>
			LCD_Write8(blue);
 8005ef0:	7b7b      	ldrb	r3, [r7, #13]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff fdee 	bl	8005ad4 <LCD_Write8>
		while (len--) {
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	1e5a      	subs	r2, r3, #1
 8005efc:	603a      	str	r2, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1ee      	bne.n	8005ee0 <LCD_Flood+0xbc>
			LCD_Write8(lo);
#endif
		}
	}

	LCD_CS_IDLE();
 8005f02:	4b03      	ldr	r3, [pc, #12]	; (8005f10 <LCD_Flood+0xec>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	619a      	str	r2, [r3, #24]
}
 8005f08:	bf00      	nop
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40020400 	.word	0x40020400
 8005f14:	40020000 	.word	0x40020000

08005f18 <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	80fb      	strh	r3, [r7, #6]
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 8005f22:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <LCD_FillScreen+0x7c>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d00d      	beq.n	8005f46 <LCD_FillScreen+0x2e>
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d011      	beq.n	8005f52 <LCD_FillScreen+0x3a>
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d004      	beq.n	8005f3c <LCD_FillScreen+0x24>
	default:
		x = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	81bb      	strh	r3, [r7, #12]
		break;
 8005f3a:	e010      	b.n	8005f5e <LCD_FillScreen+0x46>
	case 1:
		x = TFTWIDTH - 1;
 8005f3c:	23ef      	movs	r3, #239	; 0xef
 8005f3e:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	81bb      	strh	r3, [r7, #12]
		break;
 8005f44:	e00b      	b.n	8005f5e <LCD_FillScreen+0x46>
	case 2:
		x = TFTWIDTH - 1;
 8005f46:	23ef      	movs	r3, #239	; 0xef
 8005f48:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8005f4a:	f240 133f 	movw	r3, #319	; 0x13f
 8005f4e:	81bb      	strh	r3, [r7, #12]
		break;
 8005f50:	e005      	b.n	8005f5e <LCD_FillScreen+0x46>
	case 3:
		x = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8005f56:	f240 133f 	movw	r3, #319	; 0x13f
 8005f5a:	81bb      	strh	r3, [r7, #12]
		break;
 8005f5c:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8005f5e:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <LCD_FillScreen+0x80>)
 8005f60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f64:	619a      	str	r2, [r3, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
 8005f66:	89fb      	ldrh	r3, [r7, #14]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	204e      	movs	r0, #78	; 0x4e
 8005f6c:	f7ff fe0a 	bl	8005b84 <LCD_Write16Register8>
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
 8005f70:	89bb      	ldrh	r3, [r7, #12]
 8005f72:	4619      	mov	r1, r3
 8005f74:	204f      	movs	r0, #79	; 0x4f
 8005f76:	f7ff fe05 	bl	8005b84 <LCD_Write16Register8>
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
#endif
	LCD_CS_IDLE();
 8005f7a:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <LCD_FillScreen+0x80>)
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	619a      	str	r2, [r3, #24]
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8005f80:	88fb      	ldrh	r3, [r7, #6]
 8005f82:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff ff4c 	bl	8005e24 <LCD_Flood>
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000221 	.word	0x20000221
 8005f98:	40020400 	.word	0x40020400

08005f9c <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 8005fa2:	4b20      	ldr	r3, [pc, #128]	; (8006024 <LCD_Reset+0x88>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 8005fa8:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <LCD_Reset+0x8c>)
 8005faa:	2210      	movs	r2, #16
 8005fac:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 8005fae:	4b1e      	ldr	r3, [pc, #120]	; (8006028 <LCD_Reset+0x8c>)
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 8005fb4:	4b1c      	ldr	r3, [pc, #112]	; (8006028 <LCD_Reset+0x8c>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	619a      	str	r2, [r3, #24]

	LCD_RST_ACTIVE();
 8005fba:	4b1c      	ldr	r3, [pc, #112]	; (800602c <LCD_Reset+0x90>)
 8005fbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005fc0:	619a      	str	r2, [r3, #24]
	HAL_Delay(2);
 8005fc2:	2002      	movs	r0, #2
 8005fc4:	f7fc fb70 	bl	80026a8 <HAL_Delay>
	LCD_RST_IDLE();
 8005fc8:	4b18      	ldr	r3, [pc, #96]	; (800602c <LCD_Reset+0x90>)
 8005fca:	2202      	movs	r2, #2
 8005fcc:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 8005fce:	2078      	movs	r0, #120	; 0x78
 8005fd0:	f7fc fb6a 	bl	80026a8 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 8005fd4:	4b13      	ldr	r3, [pc, #76]	; (8006024 <LCD_Reset+0x88>)
 8005fd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005fda:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 8005fdc:	4b12      	ldr	r3, [pc, #72]	; (8006028 <LCD_Reset+0x8c>)
 8005fde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fe2:	619a      	str	r2, [r3, #24]
	LCD_Write8(0x00);
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f7ff fd75 	bl	8005ad4 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) LCD_WR_STROBE(); // Three extra 0x00s
 8005fea:	2300      	movs	r3, #0
 8005fec:	71fb      	strb	r3, [r7, #7]
 8005fee:	e00f      	b.n	8006010 <LCD_Reset+0x74>
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <LCD_Reset+0x8c>)
 8005ff2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ff6:	619a      	str	r2, [r3, #24]
 8005ff8:	2002      	movs	r0, #2
 8005ffa:	f7ff fcc1 	bl	8005980 <delay>
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <LCD_Reset+0x8c>)
 8006000:	2202      	movs	r2, #2
 8006002:	619a      	str	r2, [r3, #24]
 8006004:	2002      	movs	r0, #2
 8006006:	f7ff fcbb 	bl	8005980 <delay>
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	3301      	adds	r3, #1
 800600e:	71fb      	strb	r3, [r7, #7]
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d9ec      	bls.n	8005ff0 <LCD_Reset+0x54>
	LCD_CS_IDLE();
 8006016:	4b03      	ldr	r3, [pc, #12]	; (8006024 <LCD_Reset+0x88>)
 8006018:	2201      	movs	r2, #1
 800601a:	619a      	str	r2, [r3, #24]
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40020400 	.word	0x40020400
 8006028:	40020000 	.word	0x40020000
 800602c:	40020800 	.word	0x40020800

08006030 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	4611      	mov	r1, r2
 800603c:	461a      	mov	r2, r3
 800603e:	4623      	mov	r3, r4
 8006040:	80fb      	strh	r3, [r7, #6]
 8006042:	4603      	mov	r3, r0
 8006044:	80bb      	strh	r3, [r7, #4]
 8006046:	460b      	mov	r3, r1
 8006048:	807b      	strh	r3, [r7, #2]
 800604a:	4613      	mov	r3, r2
 800604c:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 800604e:	4b3f      	ldr	r3, [pc, #252]	; (800614c <LCD_SetAddrWindow+0x11c>)
 8006050:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006054:	619a      	str	r2, [r3, #24]
		done in any direction, the current screen rotation is applied
		because some users find it disconcerting when a fill does not
		occur top-to-bottom.
	*/
	int x, y, t;
	switch (m_rotation) {
 8006056:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <LCD_SetAddrWindow+0x120>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d01c      	beq.n	8006098 <LCD_SetAddrWindow+0x68>
 800605e:	2b03      	cmp	r3, #3
 8006060:	d037      	beq.n	80060d2 <LCD_SetAddrWindow+0xa2>
 8006062:	2b01      	cmp	r3, #1
 8006064:	d004      	beq.n	8006070 <LCD_SetAddrWindow+0x40>
	default:
		x = x1;
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	617b      	str	r3, [r7, #20]
		y = y1;
 800606a:	88bb      	ldrh	r3, [r7, #4]
 800606c:	613b      	str	r3, [r7, #16]
		break;
 800606e:	e046      	b.n	80060fe <LCD_SetAddrWindow+0xce>
	case 1:
		t = y1;
 8006070:	88bb      	ldrh	r3, [r7, #4]
 8006072:	60fb      	str	r3, [r7, #12]
		y1 = x1;
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	80bb      	strh	r3, [r7, #4]
		x1 = TFTWIDTH - 1 - y2;
 8006078:	883b      	ldrh	r3, [r7, #0]
 800607a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800607e:	80fb      	strh	r3, [r7, #6]
		y2 = x2;
 8006080:	887b      	ldrh	r3, [r7, #2]
 8006082:	803b      	strh	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800608c:	807b      	strh	r3, [r7, #2]
		x = x2;
 800608e:	887b      	ldrh	r3, [r7, #2]
 8006090:	617b      	str	r3, [r7, #20]
		y = y1;
 8006092:	88bb      	ldrh	r3, [r7, #4]
 8006094:	613b      	str	r3, [r7, #16]
		break;
 8006096:	e032      	b.n	80060fe <LCD_SetAddrWindow+0xce>
	case 2:
		t = x1;
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	60fb      	str	r3, [r7, #12]
		x1 = TFTWIDTH - 1 - x2;
 800609c:	887b      	ldrh	r3, [r7, #2]
 800609e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80060a2:	80fb      	strh	r3, [r7, #6]
		x2 = TFTWIDTH - 1 - t;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80060ac:	807b      	strh	r3, [r7, #2]
		t = y1;
 80060ae:	88bb      	ldrh	r3, [r7, #4]
 80060b0:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - y2;
 80060b2:	883b      	ldrh	r3, [r7, #0]
 80060b4:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80060b8:	3301      	adds	r3, #1
 80060ba:	80bb      	strh	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80060c4:	3301      	adds	r3, #1
 80060c6:	803b      	strh	r3, [r7, #0]
		x = x2;
 80060c8:	887b      	ldrh	r3, [r7, #2]
 80060ca:	617b      	str	r3, [r7, #20]
		y = y2;
 80060cc:	883b      	ldrh	r3, [r7, #0]
 80060ce:	613b      	str	r3, [r7, #16]
		break;
 80060d0:	e015      	b.n	80060fe <LCD_SetAddrWindow+0xce>
	case 3:
		t = x1;
 80060d2:	88fb      	ldrh	r3, [r7, #6]
 80060d4:	60fb      	str	r3, [r7, #12]
		x1 = y1;
 80060d6:	88bb      	ldrh	r3, [r7, #4]
 80060d8:	80fb      	strh	r3, [r7, #6]
		y1 = TFTHEIGHT - 1 - x2;
 80060da:	887b      	ldrh	r3, [r7, #2]
 80060dc:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80060e0:	3301      	adds	r3, #1
 80060e2:	80bb      	strh	r3, [r7, #4]
		x2 = y2;
 80060e4:	883b      	ldrh	r3, [r7, #0]
 80060e6:	807b      	strh	r3, [r7, #2]
		y2 = TFTHEIGHT - 1 - t;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80060f0:	3301      	adds	r3, #1
 80060f2:	803b      	strh	r3, [r7, #0]
		x = x1;
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	617b      	str	r3, [r7, #20]
		y = y2;
 80060f8:	883b      	ldrh	r3, [r7, #0]
 80060fa:	613b      	str	r3, [r7, #16]
		break;
 80060fc:	bf00      	nop
	}
#if defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V)
	LCD_Write16Register16(ILI932X_HOR_START_AD, x1); // Set address window
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	4619      	mov	r1, r3
 8006102:	2050      	movs	r0, #80	; 0x50
 8006104:	f7ff fd64 	bl	8005bd0 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_HOR_END_AD, x2);
 8006108:	887b      	ldrh	r3, [r7, #2]
 800610a:	4619      	mov	r1, r3
 800610c:	2051      	movs	r0, #81	; 0x51
 800610e:	f7ff fd5f 	bl	8005bd0 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_START_AD, y1);
 8006112:	88bb      	ldrh	r3, [r7, #4]
 8006114:	4619      	mov	r1, r3
 8006116:	2052      	movs	r0, #82	; 0x52
 8006118:	f7ff fd5a 	bl	8005bd0 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_END_AD, y2);
 800611c:	883b      	ldrh	r3, [r7, #0]
 800611e:	4619      	mov	r1, r3
 8006120:	2053      	movs	r0, #83	; 0x53
 8006122:	f7ff fd55 	bl	8005bd0 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x); // Set address counter to top left
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	b29b      	uxth	r3, r3
 800612a:	4619      	mov	r1, r3
 800612c:	2020      	movs	r0, #32
 800612e:	f7ff fd4f 	bl	8005bd0 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	b29b      	uxth	r3, r3
 8006136:	4619      	mov	r1, r3
 8006138:	2021      	movs	r0, #33	; 0x21
 800613a:	f7ff fd49 	bl	8005bd0 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
	}
#endif
	LCD_CS_IDLE();
 800613e:	4b03      	ldr	r3, [pc, #12]	; (800614c <LCD_SetAddrWindow+0x11c>)
 8006140:	2201      	movs	r2, #1
 8006142:	619a      	str	r2, [r3, #24]
}
 8006144:	bf00      	nop
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	bd90      	pop	{r4, r7, pc}
 800614c:	40020400 	.word	0x40020400
 8006150:	20000221 	.word	0x20000221

08006154 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	b2da      	uxtb	r2, r3
 8006166:	4b28      	ldr	r3, [pc, #160]	; (8006208 <LCD_SetRotation+0xb4>)
 8006168:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 800616a:	4b27      	ldr	r3, [pc, #156]	; (8006208 <LCD_SetRotation+0xb4>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d009      	beq.n	8006186 <LCD_SetRotation+0x32>
 8006172:	2b03      	cmp	r3, #3
 8006174:	d007      	beq.n	8006186 <LCD_SetRotation+0x32>
	default:
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8006176:	4b25      	ldr	r3, [pc, #148]	; (800620c <LCD_SetRotation+0xb8>)
 8006178:	22f0      	movs	r2, #240	; 0xf0
 800617a:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 800617c:	4b24      	ldr	r3, [pc, #144]	; (8006210 <LCD_SetRotation+0xbc>)
 800617e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006182:	801a      	strh	r2, [r3, #0]
		break;
 8006184:	e007      	b.n	8006196 <LCD_SetRotation+0x42>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8006186:	4b21      	ldr	r3, [pc, #132]	; (800620c <LCD_SetRotation+0xb8>)
 8006188:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800618c:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <LCD_SetRotation+0xbc>)
 8006190:	22f0      	movs	r2, #240	; 0xf0
 8006192:	801a      	strh	r2, [r3, #0]
		break;
 8006194:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8006196:	4b1f      	ldr	r3, [pc, #124]	; (8006214 <LCD_SetRotation+0xc0>)
 8006198:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800619c:	619a      	str	r2, [r3, #24]
#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
    uint16_t t;
    switch(m_rotation) {
 800619e:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <LCD_SetRotation+0xb4>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d00b      	beq.n	80061be <LCD_SetRotation+0x6a>
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d00d      	beq.n	80061c6 <LCD_SetRotation+0x72>
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d003      	beq.n	80061b6 <LCD_SetRotation+0x62>
		default: t = 0x1030; break;
 80061ae:	f241 0330 	movw	r3, #4144	; 0x1030
 80061b2:	81fb      	strh	r3, [r7, #14]
 80061b4:	e00b      	b.n	80061ce <LCD_SetRotation+0x7a>
		case 1: t = 0x1028; break;
 80061b6:	f241 0328 	movw	r3, #4136	; 0x1028
 80061ba:	81fb      	strh	r3, [r7, #14]
 80061bc:	e007      	b.n	80061ce <LCD_SetRotation+0x7a>
		case 2: t = 0x1000; break;
 80061be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061c2:	81fb      	strh	r3, [r7, #14]
 80061c4:	e003      	b.n	80061ce <LCD_SetRotation+0x7a>
		case 3: t = 0x1018; break;
 80061c6:	f241 0318 	movw	r3, #4120	; 0x1018
 80061ca:	81fb      	strh	r3, [r7, #14]
 80061cc:	bf00      	nop
    }
    LCD_Write16Register16(ILI932X_ENTRY_MOD, t); // MADCTL
 80061ce:	89fb      	ldrh	r3, [r7, #14]
 80061d0:	4619      	mov	r1, r3
 80061d2:	2003      	movs	r0, #3
 80061d4:	f7ff fcfc 	bl	8005bd0 <LCD_Write16Register16>
    // For 932X, init default full-screen address window:
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80061d8:	4b0c      	ldr	r3, [pc, #48]	; (800620c <LCD_SetRotation+0xb8>)
 80061da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <LCD_SetRotation+0xbc>)
 80061e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2100      	movs	r1, #0
 80061f2:	2000      	movs	r0, #0
 80061f4:	f7ff ff1c 	bl	8006030 <LCD_SetAddrWindow>
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_CS_IDLE();
 80061f8:	4b06      	ldr	r3, [pc, #24]	; (8006214 <LCD_SetRotation+0xc0>)
 80061fa:	2201      	movs	r2, #1
 80061fc:	619a      	str	r2, [r3, #24]
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000221 	.word	0x20000221
 800620c:	20000214 	.word	0x20000214
 8006210:	20000216 	.word	0x20000216
 8006214:	40020400 	.word	0x40020400

08006218 <LCD_DrawChar>:
 * \param bg		Background color
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b08b      	sub	sp, #44	; 0x2c
 800621c:	af00      	add	r7, sp, #0
 800621e:	4604      	mov	r4, r0
 8006220:	4608      	mov	r0, r1
 8006222:	4611      	mov	r1, r2
 8006224:	461a      	mov	r2, r3
 8006226:	4623      	mov	r3, r4
 8006228:	80fb      	strh	r3, [r7, #6]
 800622a:	4603      	mov	r3, r0
 800622c:	80bb      	strh	r3, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	70fb      	strb	r3, [r7, #3]
 8006232:	4613      	mov	r3, r2
 8006234:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
	uint8_t *pchar;
	uint32_t line = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 800623e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006242:	4a65      	ldr	r2, [pc, #404]	; (80063d8 <LCD_DrawChar+0x1c0>)
 8006244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006248:	88db      	ldrh	r3, [r3, #6]
 800624a:	82fb      	strh	r3, [r7, #22]
	width = fonts[fontindex]->Width;
 800624c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006250:	4a61      	ldr	r2, [pc, #388]	; (80063d8 <LCD_DrawChar+0x1c0>)
 8006252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006256:	889b      	ldrh	r3, [r3, #4]
 8006258:	82bb      	strh	r3, [r7, #20]

	if ((x >= m_width) || // Clip right
 800625a:	4b60      	ldr	r3, [pc, #384]	; (80063dc <LCD_DrawChar+0x1c4>)
 800625c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006260:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006264:	429a      	cmp	r2, r3
 8006266:	f280 80b2 	bge.w	80063ce <LCD_DrawChar+0x1b6>
		(y >= m_height) || // Clip bottom
 800626a:	4b5d      	ldr	r3, [pc, #372]	; (80063e0 <LCD_DrawChar+0x1c8>)
 800626c:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8006270:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006274:	429a      	cmp	r2, r3
 8006276:	f280 80aa 	bge.w	80063ce <LCD_DrawChar+0x1b6>
		((x + width - 1) < 0) || // Clip left
 800627a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800627e:	8abb      	ldrh	r3, [r7, #20]
 8006280:	4413      	add	r3, r2
 8006282:	3b01      	subs	r3, #1
		(y >= m_height) || // Clip bottom
 8006284:	2b00      	cmp	r3, #0
 8006286:	f2c0 80a2 	blt.w	80063ce <LCD_DrawChar+0x1b6>
		((y + height - 1) < 0))   // Clip top
 800628a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800628e:	8afb      	ldrh	r3, [r7, #22]
 8006290:	4413      	add	r3, r2
 8006292:	3b01      	subs	r3, #1
		((x + width - 1) < 0) || // Clip left
 8006294:	2b00      	cmp	r3, #0
 8006296:	f2c0 809a 	blt.w	80063ce <LCD_DrawChar+0x1b6>
		return;

	bytes = (width + 7) / 8;
 800629a:	8abb      	ldrh	r3, [r7, #20]
 800629c:	3307      	adds	r3, #7
 800629e:	2b00      	cmp	r3, #0
 80062a0:	da00      	bge.n	80062a4 <LCD_DrawChar+0x8c>
 80062a2:	3307      	adds	r3, #7
 80062a4:	10db      	asrs	r3, r3, #3
 80062a6:	827b      	strh	r3, [r7, #18]
	if (c < ' ') c = ' ';
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	2b1f      	cmp	r3, #31
 80062ac:	d802      	bhi.n	80062b4 <LCD_DrawChar+0x9c>
 80062ae:	2320      	movs	r3, #32
 80062b0:	70fb      	strb	r3, [r7, #3]
 80062b2:	e004      	b.n	80062be <LCD_DrawChar+0xa6>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	2b7e      	cmp	r3, #126	; 0x7e
 80062b8:	d901      	bls.n	80062be <LCD_DrawChar+0xa6>
 80062ba:	2320      	movs	r3, #32
 80062bc:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	3b20      	subs	r3, #32
 80062c2:	8afa      	ldrh	r2, [r7, #22]
 80062c4:	fb02 f303 	mul.w	r3, r2, r3
 80062c8:	8a7a      	ldrh	r2, [r7, #18]
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
 80062ce:	61bb      	str	r3, [r7, #24]
	offset = 8 * bytes - width;
 80062d0:	8a7b      	ldrh	r3, [r7, #18]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	8abb      	ldrh	r3, [r7, #20]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	747b      	strb	r3, [r7, #17]

	for (uint32_t i = 0; i < height; i++) {
 80062e0:	2300      	movs	r3, #0
 80062e2:	623b      	str	r3, [r7, #32]
 80062e4:	e06e      	b.n	80063c4 <LCD_DrawChar+0x1ac>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 80062e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80062ea:	4a3b      	ldr	r2, [pc, #236]	; (80063d8 <LCD_DrawChar+0x1c0>)
 80062ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	441a      	add	r2, r3
 80062f6:	8abb      	ldrh	r3, [r7, #20]
 80062f8:	3307      	adds	r3, #7
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	da00      	bge.n	8006300 <LCD_DrawChar+0xe8>
 80062fe:	3307      	adds	r3, #7
 8006300:	10db      	asrs	r3, r3, #3
 8006302:	4619      	mov	r1, r3
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	fb03 f301 	mul.w	r3, r3, r1
 800630a:	4413      	add	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
		switch (bytes) {
 800630e:	8a7b      	ldrh	r3, [r7, #18]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d002      	beq.n	800631a <LCD_DrawChar+0x102>
 8006314:	2b02      	cmp	r3, #2
 8006316:	d004      	beq.n	8006322 <LCD_DrawChar+0x10a>
 8006318:	e00c      	b.n	8006334 <LCD_DrawChar+0x11c>
		case 1:
			line = pchar[0];
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8006320:	e016      	b.n	8006350 <LCD_DrawChar+0x138>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	3201      	adds	r2, #1
 800632c:	7812      	ldrb	r2, [r2, #0]
 800632e:	4313      	orrs	r3, r2
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8006332:	e00d      	b.n	8006350 <LCD_DrawChar+0x138>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	041a      	lsls	r2, r3, #16
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3301      	adds	r3, #1
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	4313      	orrs	r3, r2
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	3202      	adds	r2, #2
 8006348:	7812      	ldrb	r2, [r2, #0]
 800634a:	4313      	orrs	r3, r2
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800634e:	bf00      	nop
		}
		for (uint32_t j = 0; j < width; j++) {
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	e029      	b.n	80063aa <LCD_DrawChar+0x192>
			if (line & (1 << (width - j + offset - 1))) {
 8006356:	8aba      	ldrh	r2, [r7, #20]
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	1ad2      	subs	r2, r2, r3
 800635c:	7c7b      	ldrb	r3, [r7, #17]
 800635e:	4413      	add	r3, r2
 8006360:	3b01      	subs	r3, #1
 8006362:	2201      	movs	r2, #1
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	461a      	mov	r2, r3
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	4013      	ands	r3, r2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00c      	beq.n	800638c <LCD_DrawChar+0x174>
				LCD_DrawPixel((x + j), y, color);
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	b29a      	uxth	r2, r3
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	4413      	add	r3, r2
 800637a:	b29b      	uxth	r3, r3
 800637c:	b21b      	sxth	r3, r3
 800637e:	883a      	ldrh	r2, [r7, #0]
 8006380:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fce1 	bl	8005d4c <LCD_DrawPixel>
 800638a:	e00b      	b.n	80063a4 <LCD_DrawChar+0x18c>
			} else {
				LCD_DrawPixel((x + j), y, bg);
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	b29a      	uxth	r2, r3
 8006390:	88fb      	ldrh	r3, [r7, #6]
 8006392:	4413      	add	r3, r2
 8006394:	b29b      	uxth	r3, r3
 8006396:	b21b      	sxth	r3, r3
 8006398:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800639a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff fcd4 	bl	8005d4c <LCD_DrawPixel>
		for (uint32_t j = 0; j < width; j++) {
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	3301      	adds	r3, #1
 80063a8:	61fb      	str	r3, [r7, #28]
 80063aa:	8abb      	ldrh	r3, [r7, #20]
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d3d1      	bcc.n	8006356 <LCD_DrawChar+0x13e>
			}
		}
		y++;
 80063b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3301      	adds	r3, #1
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	3301      	adds	r3, #1
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	8afb      	ldrh	r3, [r7, #22]
 80063c6:	6a3a      	ldr	r2, [r7, #32]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d38c      	bcc.n	80062e6 <LCD_DrawChar+0xce>
 80063cc:	e000      	b.n	80063d0 <LCD_DrawChar+0x1b8>
		return;
 80063ce:	bf00      	nop
	}
}
 80063d0:	372c      	adds	r7, #44	; 0x2c
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd90      	pop	{r4, r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000014 	.word	0x20000014
 80063dc:	20000214 	.word	0x20000214
 80063e0:	20000216 	.word	0x20000216

080063e4 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 80063e4:	b40f      	push	{r0, r1, r2, r3}
 80063e6:	b5b0      	push	{r4, r5, r7, lr}
 80063e8:	b086      	sub	sp, #24
 80063ea:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 80063ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f0:	60bb      	str	r3, [r7, #8]
	vsprintf(buf, fmt, lst);
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	6a39      	ldr	r1, [r7, #32]
 80063f6:	486e      	ldr	r0, [pc, #440]	; (80065b0 <LCD_Printf+0x1cc>)
 80063f8:	f000 fe8c 	bl	8007114 <vsiprintf>
	va_end(lst);
	
	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 80063fc:	4b6d      	ldr	r3, [pc, #436]	; (80065b4 <LCD_Printf+0x1d0>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	4b6d      	ldr	r3, [pc, #436]	; (80065b8 <LCD_Printf+0x1d4>)
 8006404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006408:	88db      	ldrh	r3, [r3, #6]
 800640a:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 800640c:	4b69      	ldr	r3, [pc, #420]	; (80065b4 <LCD_Printf+0x1d0>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	4b69      	ldr	r3, [pc, #420]	; (80065b8 <LCD_Printf+0x1d4>)
 8006414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006418:	889b      	ldrh	r3, [r3, #4]
 800641a:	80bb      	strh	r3, [r7, #4]

	p = buf;
 800641c:	4b64      	ldr	r3, [pc, #400]	; (80065b0 <LCD_Printf+0x1cc>)
 800641e:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8006420:	e0ba      	b.n	8006598 <LCD_Printf+0x1b4>
		if (*p == '\n') {
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b0a      	cmp	r3, #10
 8006428:	d10e      	bne.n	8006448 <LCD_Printf+0x64>
			m_cursor_y += height;
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	b29a      	uxth	r2, r3
 800642e:	4b63      	ldr	r3, [pc, #396]	; (80065bc <LCD_Printf+0x1d8>)
 8006430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006434:	b29b      	uxth	r3, r3
 8006436:	4413      	add	r3, r2
 8006438:	b29b      	uxth	r3, r3
 800643a:	b21a      	sxth	r2, r3
 800643c:	4b5f      	ldr	r3, [pc, #380]	; (80065bc <LCD_Printf+0x1d8>)
 800643e:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8006440:	4b5f      	ldr	r3, [pc, #380]	; (80065c0 <LCD_Printf+0x1dc>)
 8006442:	2200      	movs	r2, #0
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e0a4      	b.n	8006592 <LCD_Printf+0x1ae>
		} else if (*p == '\r') {
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b0d      	cmp	r3, #13
 800644e:	d103      	bne.n	8006458 <LCD_Printf+0x74>
			m_cursor_x = 0;
 8006450:	4b5b      	ldr	r3, [pc, #364]	; (80065c0 <LCD_Printf+0x1dc>)
 8006452:	2200      	movs	r2, #0
 8006454:	801a      	strh	r2, [r3, #0]
 8006456:	e09c      	b.n	8006592 <LCD_Printf+0x1ae>
		} else if (*p == '\t') {
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b09      	cmp	r3, #9
 800645e:	d10d      	bne.n	800647c <LCD_Printf+0x98>
			m_cursor_x += width * 4;
 8006460:	88bb      	ldrh	r3, [r7, #4]
 8006462:	b29b      	uxth	r3, r3
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	b29a      	uxth	r2, r3
 8006468:	4b55      	ldr	r3, [pc, #340]	; (80065c0 <LCD_Printf+0x1dc>)
 800646a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800646e:	b29b      	uxth	r3, r3
 8006470:	4413      	add	r3, r2
 8006472:	b29b      	uxth	r3, r3
 8006474:	b21a      	sxth	r2, r3
 8006476:	4b52      	ldr	r3, [pc, #328]	; (80065c0 <LCD_Printf+0x1dc>)
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	e08a      	b.n	8006592 <LCD_Printf+0x1ae>
		} else {
#ifdef WIPE_LINES
			if (m_cursor_x == 0) {
 800647c:	4b50      	ldr	r3, [pc, #320]	; (80065c0 <LCD_Printf+0x1dc>)
 800647e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d132      	bne.n	80064ec <LCD_Printf+0x108>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
 8006486:	4b4d      	ldr	r3, [pc, #308]	; (80065bc <LCD_Printf+0x1d8>)
 8006488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800648c:	b299      	uxth	r1, r3
 800648e:	4b4d      	ldr	r3, [pc, #308]	; (80065c4 <LCD_Printf+0x1e0>)
 8006490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006494:	b29b      	uxth	r3, r3
 8006496:	3b01      	subs	r3, #1
 8006498:	b298      	uxth	r0, r3
 800649a:	4b48      	ldr	r3, [pc, #288]	; (80065bc <LCD_Printf+0x1d8>)
 800649c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	4413      	add	r3, r2
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	4602      	mov	r2, r0
 80064ac:	2000      	movs	r0, #0
 80064ae:	f7ff fdbf 	bl	8006030 <LCD_SetAddrWindow>
				LCD_Flood(m_textbgcolor, (long) m_width * height);
 80064b2:	4b45      	ldr	r3, [pc, #276]	; (80065c8 <LCD_Printf+0x1e4>)
 80064b4:	881a      	ldrh	r2, [r3, #0]
 80064b6:	4b43      	ldr	r3, [pc, #268]	; (80065c4 <LCD_Printf+0x1e0>)
 80064b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064bc:	88f9      	ldrh	r1, [r7, #6]
 80064be:	b289      	uxth	r1, r1
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f7ff fcac 	bl	8005e24 <LCD_Flood>
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80064cc:	4b3d      	ldr	r3, [pc, #244]	; (80065c4 <LCD_Printf+0x1e0>)
 80064ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	4b3c      	ldr	r3, [pc, #240]	; (80065cc <LCD_Printf+0x1e8>)
 80064da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2100      	movs	r1, #0
 80064e6:	2000      	movs	r0, #0
 80064e8:	f7ff fda2 	bl	8006030 <LCD_SetAddrWindow>
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 80064ec:	4b33      	ldr	r3, [pc, #204]	; (80065bc <LCD_Printf+0x1d8>)
 80064ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064f2:	461a      	mov	r2, r3
 80064f4:	4b35      	ldr	r3, [pc, #212]	; (80065cc <LCD_Printf+0x1e8>)
 80064f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064fa:	4619      	mov	r1, r3
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	1acb      	subs	r3, r1, r3
 8006502:	429a      	cmp	r2, r3
 8006504:	db07      	blt.n	8006516 <LCD_Printf+0x132>
				m_cursor_y = 0;
 8006506:	4b2d      	ldr	r3, [pc, #180]	; (80065bc <LCD_Printf+0x1d8>)
 8006508:	2200      	movs	r2, #0
 800650a:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
 800650c:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <LCD_Printf+0x1e4>)
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff fd01 	bl	8005f18 <LCD_FillScreen>
#endif
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 8006516:	4b2a      	ldr	r3, [pc, #168]	; (80065c0 <LCD_Printf+0x1dc>)
 8006518:	f9b3 0000 	ldrsh.w	r0, [r3]
 800651c:	4b27      	ldr	r3, [pc, #156]	; (80065bc <LCD_Printf+0x1d8>)
 800651e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	781c      	ldrb	r4, [r3, #0]
 8006526:	4b2a      	ldr	r3, [pc, #168]	; (80065d0 <LCD_Printf+0x1ec>)
 8006528:	881d      	ldrh	r5, [r3, #0]
 800652a:	4b27      	ldr	r3, [pc, #156]	; (80065c8 <LCD_Printf+0x1e4>)
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <LCD_Printf+0x1d0>)
 8006530:	7812      	ldrb	r2, [r2, #0]
 8006532:	9201      	str	r2, [sp, #4]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	462b      	mov	r3, r5
 8006538:	4622      	mov	r2, r4
 800653a:	f7ff fe6d 	bl	8006218 <LCD_DrawChar>
			m_cursor_x += width;
 800653e:	88bb      	ldrh	r3, [r7, #4]
 8006540:	b29a      	uxth	r2, r3
 8006542:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <LCD_Printf+0x1dc>)
 8006544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006548:	b29b      	uxth	r3, r3
 800654a:	4413      	add	r3, r2
 800654c:	b29b      	uxth	r3, r3
 800654e:	b21a      	sxth	r2, r3
 8006550:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <LCD_Printf+0x1dc>)
 8006552:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8006554:	4b1f      	ldr	r3, [pc, #124]	; (80065d4 <LCD_Printf+0x1f0>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01a      	beq.n	8006592 <LCD_Printf+0x1ae>
 800655c:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <LCD_Printf+0x1dc>)
 800655e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006562:	461a      	mov	r2, r3
 8006564:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <LCD_Printf+0x1e0>)
 8006566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800656a:	4619      	mov	r1, r3
 800656c:	88bb      	ldrh	r3, [r7, #4]
 800656e:	b29b      	uxth	r3, r3
 8006570:	1acb      	subs	r3, r1, r3
 8006572:	429a      	cmp	r2, r3
 8006574:	dd0d      	ble.n	8006592 <LCD_Printf+0x1ae>
				m_cursor_y += height;
 8006576:	88fb      	ldrh	r3, [r7, #6]
 8006578:	b29a      	uxth	r2, r3
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <LCD_Printf+0x1d8>)
 800657c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006580:	b29b      	uxth	r3, r3
 8006582:	4413      	add	r3, r2
 8006584:	b29b      	uxth	r3, r3
 8006586:	b21a      	sxth	r2, r3
 8006588:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <LCD_Printf+0x1d8>)
 800658a:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 800658c:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <LCD_Printf+0x1dc>)
 800658e:	2200      	movs	r2, #0
 8006590:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3301      	adds	r3, #1
 8006596:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f47f af40 	bne.w	8006422 <LCD_Printf+0x3e>
	}
}
 80065a2:	bf00      	nop
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80065ac:	b004      	add	sp, #16
 80065ae:	4770      	bx	lr
 80065b0:	20000224 	.word	0x20000224
 80065b4:	20000220 	.word	0x20000220
 80065b8:	20000014 	.word	0x20000014
 80065bc:	2000021a 	.word	0x2000021a
 80065c0:	20000218 	.word	0x20000218
 80065c4:	20000214 	.word	0x20000214
 80065c8:	2000021e 	.word	0x2000021e
 80065cc:	20000216 	.word	0x20000216
 80065d0:	2000021c 	.word	0x2000021c
 80065d4:	20000222 	.word	0x20000222

080065d8 <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 80065e2:	2201      	movs	r2, #1
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d305      	bcc.n	80065f6 <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 80065ea:	2301      	movs	r3, #1
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	4b05      	ldr	r3, [pc, #20]	; (8006608 <LCD_SetTextSize+0x30>)
 80065f2:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 80065f4:	e002      	b.n	80065fc <LCD_SetTextSize+0x24>
		m_font = s;
 80065f6:	4a04      	ldr	r2, [pc, #16]	; (8006608 <LCD_SetTextSize+0x30>)
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	7013      	strb	r3, [r2, #0]
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	20000220 	.word	0x20000220

0800660c <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	460a      	mov	r2, r1
 8006616:	80fb      	strh	r3, [r7, #6]
 8006618:	4613      	mov	r3, r2
 800661a:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 800661c:	4a05      	ldr	r2, [pc, #20]	; (8006634 <LCD_SetTextColor+0x28>)
 800661e:	88fb      	ldrh	r3, [r7, #6]
 8006620:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 8006622:	4a05      	ldr	r2, [pc, #20]	; (8006638 <LCD_SetTextColor+0x2c>)
 8006624:	88bb      	ldrh	r3, [r7, #4]
 8006626:	8013      	strh	r3, [r2, #0]
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	2000021c 	.word	0x2000021c
 8006638:	2000021e 	.word	0x2000021e

0800663c <LCD_Color565_to_R>:

inline uint32_t LCD_Color565_to_888(uint16_t color) {
    return (((color & 0xF800) << 8) | ((color & 0x7E0) << 5) | ((color & 0x1F) << 3));  // transform to rrrrrrxx ggggggxx bbbbbbxx
}

inline uint8_t LCD_Color565_to_R(uint16_t color) {
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrrxx
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	121b      	asrs	r3, r3, #8
 800664a:	b2db      	uxtb	r3, r3
 800664c:	f023 0307 	bic.w	r3, r3, #7
 8006650:	b2db      	uxtb	r3, r3
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <LCD_Color565_to_G>:
inline uint8_t LCD_Color565_to_G(uint16_t color) {
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	4603      	mov	r3, r0
 8006666:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	10db      	asrs	r3, r3, #3
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	b2db      	uxtb	r3, r3
}
 8006674:	4618      	mov	r0, r3
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <LCD_Color565_to_B>:
inline uint8_t LCD_Color565_to_B(uint16_t color) {
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbbxx
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	b2db      	uxtb	r3, r3
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <RingBuffer_DMA_Count>:
#include "ringbuffer_dma.h"

uint32_t RingBuffer_DMA_Count(RingBuffer_DMA * buffer) {
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
	// get counter returns the number of remaining data units in the current DMA Stream transfer (total size - received count)
	// current head = start + (size - received count)
	uint8_t const * head = buffer->data + buffer->size - __HAL_DMA_GET_COUNTER(buffer->hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6859      	ldr	r1, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	1acb      	subs	r3, r1, r3
 80066b6:	4413      	add	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
	uint8_t const * tail = buffer->tail_ptr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	60bb      	str	r3, [r7, #8]
	if (head >= tail)
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d303      	bcc.n	80066d0 <RingBuffer_DMA_Count+0x34>
		return head - tail;
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	e006      	b.n	80066de <RingBuffer_DMA_Count+0x42>
	else
		return head - tail + buffer->size;
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4413      	add	r3, r2
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <RingBuffer_DMA_GetByte>:

uint8_t RingBuffer_DMA_GetByte(RingBuffer_DMA * buffer) {
 80066ea:	b480      	push	{r7}
 80066ec:	b087      	sub	sp, #28
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
	// get counter returns the number of remaining data units in the current DMA Stream transfer (total size - received count)
	// current head = start + (size - received count)
	uint8_t const * head = buffer->data + buffer->size - __HAL_DMA_GET_COUNTER(buffer->hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	1acb      	subs	r3, r1, r3
 8006704:	4413      	add	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
	uint8_t const * tail = buffer->tail_ptr;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	613b      	str	r3, [r7, #16]

	if (head != tail) {
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	429a      	cmp	r2, r3
 8006714:	d019      	beq.n	800674a <RingBuffer_DMA_GetByte+0x60>
		uint8_t c = *buffer->tail_ptr++;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	1c59      	adds	r1, r3, #1
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	60d1      	str	r1, [r2, #12]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	73fb      	strb	r3, [r7, #15]
		if (buffer->tail_ptr >= buffer->data + buffer->size) {
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6819      	ldr	r1, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	440b      	add	r3, r1
 8006732:	429a      	cmp	r2, r3
 8006734:	d307      	bcc.n	8006746 <RingBuffer_DMA_GetByte+0x5c>
			buffer->tail_ptr -= buffer->size;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	425b      	negs	r3, r3
 8006740:	441a      	add	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60da      	str	r2, [r3, #12]
		}
		return c;
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	e000      	b.n	800674c <RingBuffer_DMA_GetByte+0x62>
	}

	return 0;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <RingBuffer_DMA_Init>:

void RingBuffer_DMA_Init(RingBuffer_DMA * buffer, DMA_HandleTypeDef * hdma, uint8_t * data, uint32_t size){
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
	buffer->data = data; // set array
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]
	buffer->size = size; // and its size
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	605a      	str	r2, [r3, #4]
	buffer->hdma = hdma; // initialized DMA
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	609a      	str	r2, [r3, #8]
	buffer->tail_ptr = data; // tail == head == start of array
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	60da      	str	r2, [r3, #12]
}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <__errno>:
 800678c:	4b01      	ldr	r3, [pc, #4]	; (8006794 <__errno+0x8>)
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000018 	.word	0x20000018

08006798 <__libc_init_array>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	4e0d      	ldr	r6, [pc, #52]	; (80067d0 <__libc_init_array+0x38>)
 800679c:	4c0d      	ldr	r4, [pc, #52]	; (80067d4 <__libc_init_array+0x3c>)
 800679e:	1ba4      	subs	r4, r4, r6
 80067a0:	10a4      	asrs	r4, r4, #2
 80067a2:	2500      	movs	r5, #0
 80067a4:	42a5      	cmp	r5, r4
 80067a6:	d109      	bne.n	80067bc <__libc_init_array+0x24>
 80067a8:	4e0b      	ldr	r6, [pc, #44]	; (80067d8 <__libc_init_array+0x40>)
 80067aa:	4c0c      	ldr	r4, [pc, #48]	; (80067dc <__libc_init_array+0x44>)
 80067ac:	f003 f8d2 	bl	8009954 <_init>
 80067b0:	1ba4      	subs	r4, r4, r6
 80067b2:	10a4      	asrs	r4, r4, #2
 80067b4:	2500      	movs	r5, #0
 80067b6:	42a5      	cmp	r5, r4
 80067b8:	d105      	bne.n	80067c6 <__libc_init_array+0x2e>
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067c0:	4798      	blx	r3
 80067c2:	3501      	adds	r5, #1
 80067c4:	e7ee      	b.n	80067a4 <__libc_init_array+0xc>
 80067c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067ca:	4798      	blx	r3
 80067cc:	3501      	adds	r5, #1
 80067ce:	e7f2      	b.n	80067b6 <__libc_init_array+0x1e>
 80067d0:	0800a2e0 	.word	0x0800a2e0
 80067d4:	0800a2e0 	.word	0x0800a2e0
 80067d8:	0800a2e0 	.word	0x0800a2e0
 80067dc:	0800a2e4 	.word	0x0800a2e4

080067e0 <memset>:
 80067e0:	4402      	add	r2, r0
 80067e2:	4603      	mov	r3, r0
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d100      	bne.n	80067ea <memset+0xa>
 80067e8:	4770      	bx	lr
 80067ea:	f803 1b01 	strb.w	r1, [r3], #1
 80067ee:	e7f9      	b.n	80067e4 <memset+0x4>

080067f0 <__cvt>:
 80067f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	ec55 4b10 	vmov	r4, r5, d0
 80067f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80067fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067fe:	2d00      	cmp	r5, #0
 8006800:	460e      	mov	r6, r1
 8006802:	4691      	mov	r9, r2
 8006804:	4619      	mov	r1, r3
 8006806:	bfb8      	it	lt
 8006808:	4622      	movlt	r2, r4
 800680a:	462b      	mov	r3, r5
 800680c:	f027 0720 	bic.w	r7, r7, #32
 8006810:	bfbb      	ittet	lt
 8006812:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006816:	461d      	movlt	r5, r3
 8006818:	2300      	movge	r3, #0
 800681a:	232d      	movlt	r3, #45	; 0x2d
 800681c:	bfb8      	it	lt
 800681e:	4614      	movlt	r4, r2
 8006820:	2f46      	cmp	r7, #70	; 0x46
 8006822:	700b      	strb	r3, [r1, #0]
 8006824:	d004      	beq.n	8006830 <__cvt+0x40>
 8006826:	2f45      	cmp	r7, #69	; 0x45
 8006828:	d100      	bne.n	800682c <__cvt+0x3c>
 800682a:	3601      	adds	r6, #1
 800682c:	2102      	movs	r1, #2
 800682e:	e000      	b.n	8006832 <__cvt+0x42>
 8006830:	2103      	movs	r1, #3
 8006832:	ab03      	add	r3, sp, #12
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	ab02      	add	r3, sp, #8
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	4632      	mov	r2, r6
 800683c:	4653      	mov	r3, sl
 800683e:	ec45 4b10 	vmov	d0, r4, r5
 8006842:	f000 fcfd 	bl	8007240 <_dtoa_r>
 8006846:	2f47      	cmp	r7, #71	; 0x47
 8006848:	4680      	mov	r8, r0
 800684a:	d102      	bne.n	8006852 <__cvt+0x62>
 800684c:	f019 0f01 	tst.w	r9, #1
 8006850:	d026      	beq.n	80068a0 <__cvt+0xb0>
 8006852:	2f46      	cmp	r7, #70	; 0x46
 8006854:	eb08 0906 	add.w	r9, r8, r6
 8006858:	d111      	bne.n	800687e <__cvt+0x8e>
 800685a:	f898 3000 	ldrb.w	r3, [r8]
 800685e:	2b30      	cmp	r3, #48	; 0x30
 8006860:	d10a      	bne.n	8006878 <__cvt+0x88>
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7fa f94d 	bl	8000b08 <__aeabi_dcmpeq>
 800686e:	b918      	cbnz	r0, 8006878 <__cvt+0x88>
 8006870:	f1c6 0601 	rsb	r6, r6, #1
 8006874:	f8ca 6000 	str.w	r6, [sl]
 8006878:	f8da 3000 	ldr.w	r3, [sl]
 800687c:	4499      	add	r9, r3
 800687e:	2200      	movs	r2, #0
 8006880:	2300      	movs	r3, #0
 8006882:	4620      	mov	r0, r4
 8006884:	4629      	mov	r1, r5
 8006886:	f7fa f93f 	bl	8000b08 <__aeabi_dcmpeq>
 800688a:	b938      	cbnz	r0, 800689c <__cvt+0xac>
 800688c:	2230      	movs	r2, #48	; 0x30
 800688e:	9b03      	ldr	r3, [sp, #12]
 8006890:	454b      	cmp	r3, r9
 8006892:	d205      	bcs.n	80068a0 <__cvt+0xb0>
 8006894:	1c59      	adds	r1, r3, #1
 8006896:	9103      	str	r1, [sp, #12]
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	e7f8      	b.n	800688e <__cvt+0x9e>
 800689c:	f8cd 900c 	str.w	r9, [sp, #12]
 80068a0:	9b03      	ldr	r3, [sp, #12]
 80068a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068a4:	eba3 0308 	sub.w	r3, r3, r8
 80068a8:	4640      	mov	r0, r8
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	b004      	add	sp, #16
 80068ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080068b2 <__exponent>:
 80068b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068b4:	2900      	cmp	r1, #0
 80068b6:	4604      	mov	r4, r0
 80068b8:	bfba      	itte	lt
 80068ba:	4249      	neglt	r1, r1
 80068bc:	232d      	movlt	r3, #45	; 0x2d
 80068be:	232b      	movge	r3, #43	; 0x2b
 80068c0:	2909      	cmp	r1, #9
 80068c2:	f804 2b02 	strb.w	r2, [r4], #2
 80068c6:	7043      	strb	r3, [r0, #1]
 80068c8:	dd20      	ble.n	800690c <__exponent+0x5a>
 80068ca:	f10d 0307 	add.w	r3, sp, #7
 80068ce:	461f      	mov	r7, r3
 80068d0:	260a      	movs	r6, #10
 80068d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80068d6:	fb06 1115 	mls	r1, r6, r5, r1
 80068da:	3130      	adds	r1, #48	; 0x30
 80068dc:	2d09      	cmp	r5, #9
 80068de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068e2:	f103 32ff 	add.w	r2, r3, #4294967295
 80068e6:	4629      	mov	r1, r5
 80068e8:	dc09      	bgt.n	80068fe <__exponent+0x4c>
 80068ea:	3130      	adds	r1, #48	; 0x30
 80068ec:	3b02      	subs	r3, #2
 80068ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 80068f2:	42bb      	cmp	r3, r7
 80068f4:	4622      	mov	r2, r4
 80068f6:	d304      	bcc.n	8006902 <__exponent+0x50>
 80068f8:	1a10      	subs	r0, r2, r0
 80068fa:	b003      	add	sp, #12
 80068fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fe:	4613      	mov	r3, r2
 8006900:	e7e7      	b.n	80068d2 <__exponent+0x20>
 8006902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006906:	f804 2b01 	strb.w	r2, [r4], #1
 800690a:	e7f2      	b.n	80068f2 <__exponent+0x40>
 800690c:	2330      	movs	r3, #48	; 0x30
 800690e:	4419      	add	r1, r3
 8006910:	7083      	strb	r3, [r0, #2]
 8006912:	1d02      	adds	r2, r0, #4
 8006914:	70c1      	strb	r1, [r0, #3]
 8006916:	e7ef      	b.n	80068f8 <__exponent+0x46>

08006918 <_printf_float>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	b08d      	sub	sp, #52	; 0x34
 800691e:	460c      	mov	r4, r1
 8006920:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006924:	4616      	mov	r6, r2
 8006926:	461f      	mov	r7, r3
 8006928:	4605      	mov	r5, r0
 800692a:	f001 fa41 	bl	8007db0 <_localeconv_r>
 800692e:	6803      	ldr	r3, [r0, #0]
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	4618      	mov	r0, r3
 8006934:	f7f9 fc6c 	bl	8000210 <strlen>
 8006938:	2300      	movs	r3, #0
 800693a:	930a      	str	r3, [sp, #40]	; 0x28
 800693c:	f8d8 3000 	ldr.w	r3, [r8]
 8006940:	9005      	str	r0, [sp, #20]
 8006942:	3307      	adds	r3, #7
 8006944:	f023 0307 	bic.w	r3, r3, #7
 8006948:	f103 0208 	add.w	r2, r3, #8
 800694c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006950:	f8d4 b000 	ldr.w	fp, [r4]
 8006954:	f8c8 2000 	str.w	r2, [r8]
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006960:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006964:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006968:	9307      	str	r3, [sp, #28]
 800696a:	f8cd 8018 	str.w	r8, [sp, #24]
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	4ba7      	ldr	r3, [pc, #668]	; (8006c10 <_printf_float+0x2f8>)
 8006974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006978:	f7fa f8f8 	bl	8000b6c <__aeabi_dcmpun>
 800697c:	bb70      	cbnz	r0, 80069dc <_printf_float+0xc4>
 800697e:	f04f 32ff 	mov.w	r2, #4294967295
 8006982:	4ba3      	ldr	r3, [pc, #652]	; (8006c10 <_printf_float+0x2f8>)
 8006984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006988:	f7fa f8d2 	bl	8000b30 <__aeabi_dcmple>
 800698c:	bb30      	cbnz	r0, 80069dc <_printf_float+0xc4>
 800698e:	2200      	movs	r2, #0
 8006990:	2300      	movs	r3, #0
 8006992:	4640      	mov	r0, r8
 8006994:	4649      	mov	r1, r9
 8006996:	f7fa f8c1 	bl	8000b1c <__aeabi_dcmplt>
 800699a:	b110      	cbz	r0, 80069a2 <_printf_float+0x8a>
 800699c:	232d      	movs	r3, #45	; 0x2d
 800699e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a2:	4a9c      	ldr	r2, [pc, #624]	; (8006c14 <_printf_float+0x2fc>)
 80069a4:	4b9c      	ldr	r3, [pc, #624]	; (8006c18 <_printf_float+0x300>)
 80069a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80069aa:	bf8c      	ite	hi
 80069ac:	4690      	movhi	r8, r2
 80069ae:	4698      	movls	r8, r3
 80069b0:	2303      	movs	r3, #3
 80069b2:	f02b 0204 	bic.w	r2, fp, #4
 80069b6:	6123      	str	r3, [r4, #16]
 80069b8:	6022      	str	r2, [r4, #0]
 80069ba:	f04f 0900 	mov.w	r9, #0
 80069be:	9700      	str	r7, [sp, #0]
 80069c0:	4633      	mov	r3, r6
 80069c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80069c4:	4621      	mov	r1, r4
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 f9e6 	bl	8006d98 <_printf_common>
 80069cc:	3001      	adds	r0, #1
 80069ce:	f040 808d 	bne.w	8006aec <_printf_float+0x1d4>
 80069d2:	f04f 30ff 	mov.w	r0, #4294967295
 80069d6:	b00d      	add	sp, #52	; 0x34
 80069d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	4649      	mov	r1, r9
 80069e4:	f7fa f8c2 	bl	8000b6c <__aeabi_dcmpun>
 80069e8:	b110      	cbz	r0, 80069f0 <_printf_float+0xd8>
 80069ea:	4a8c      	ldr	r2, [pc, #560]	; (8006c1c <_printf_float+0x304>)
 80069ec:	4b8c      	ldr	r3, [pc, #560]	; (8006c20 <_printf_float+0x308>)
 80069ee:	e7da      	b.n	80069a6 <_printf_float+0x8e>
 80069f0:	6861      	ldr	r1, [r4, #4]
 80069f2:	1c4b      	adds	r3, r1, #1
 80069f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80069f8:	a80a      	add	r0, sp, #40	; 0x28
 80069fa:	d13e      	bne.n	8006a7a <_printf_float+0x162>
 80069fc:	2306      	movs	r3, #6
 80069fe:	6063      	str	r3, [r4, #4]
 8006a00:	2300      	movs	r3, #0
 8006a02:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006a06:	ab09      	add	r3, sp, #36	; 0x24
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	ec49 8b10 	vmov	d0, r8, r9
 8006a0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a12:	6022      	str	r2, [r4, #0]
 8006a14:	f8cd a004 	str.w	sl, [sp, #4]
 8006a18:	6861      	ldr	r1, [r4, #4]
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f7ff fee8 	bl	80067f0 <__cvt>
 8006a20:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006a24:	2b47      	cmp	r3, #71	; 0x47
 8006a26:	4680      	mov	r8, r0
 8006a28:	d109      	bne.n	8006a3e <_printf_float+0x126>
 8006a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2c:	1cd8      	adds	r0, r3, #3
 8006a2e:	db02      	blt.n	8006a36 <_printf_float+0x11e>
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	4293      	cmp	r3, r2
 8006a34:	dd47      	ble.n	8006ac6 <_printf_float+0x1ae>
 8006a36:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a3a:	fa5f fa8a 	uxtb.w	sl, sl
 8006a3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006a42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a44:	d824      	bhi.n	8006a90 <_printf_float+0x178>
 8006a46:	3901      	subs	r1, #1
 8006a48:	4652      	mov	r2, sl
 8006a4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a4e:	9109      	str	r1, [sp, #36]	; 0x24
 8006a50:	f7ff ff2f 	bl	80068b2 <__exponent>
 8006a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a56:	1813      	adds	r3, r2, r0
 8006a58:	2a01      	cmp	r2, #1
 8006a5a:	4681      	mov	r9, r0
 8006a5c:	6123      	str	r3, [r4, #16]
 8006a5e:	dc02      	bgt.n	8006a66 <_printf_float+0x14e>
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	07d1      	lsls	r1, r2, #31
 8006a64:	d501      	bpl.n	8006a6a <_printf_float+0x152>
 8006a66:	3301      	adds	r3, #1
 8006a68:	6123      	str	r3, [r4, #16]
 8006a6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0a5      	beq.n	80069be <_printf_float+0xa6>
 8006a72:	232d      	movs	r3, #45	; 0x2d
 8006a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a78:	e7a1      	b.n	80069be <_printf_float+0xa6>
 8006a7a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006a7e:	f000 8177 	beq.w	8006d70 <_printf_float+0x458>
 8006a82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006a86:	d1bb      	bne.n	8006a00 <_printf_float+0xe8>
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	d1b9      	bne.n	8006a00 <_printf_float+0xe8>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e7b6      	b.n	80069fe <_printf_float+0xe6>
 8006a90:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006a94:	d119      	bne.n	8006aca <_printf_float+0x1b2>
 8006a96:	2900      	cmp	r1, #0
 8006a98:	6863      	ldr	r3, [r4, #4]
 8006a9a:	dd0c      	ble.n	8006ab6 <_printf_float+0x19e>
 8006a9c:	6121      	str	r1, [r4, #16]
 8006a9e:	b913      	cbnz	r3, 8006aa6 <_printf_float+0x18e>
 8006aa0:	6822      	ldr	r2, [r4, #0]
 8006aa2:	07d2      	lsls	r2, r2, #31
 8006aa4:	d502      	bpl.n	8006aac <_printf_float+0x194>
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	440b      	add	r3, r1
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aae:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ab0:	f04f 0900 	mov.w	r9, #0
 8006ab4:	e7d9      	b.n	8006a6a <_printf_float+0x152>
 8006ab6:	b913      	cbnz	r3, 8006abe <_printf_float+0x1a6>
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	07d0      	lsls	r0, r2, #31
 8006abc:	d501      	bpl.n	8006ac2 <_printf_float+0x1aa>
 8006abe:	3302      	adds	r3, #2
 8006ac0:	e7f3      	b.n	8006aaa <_printf_float+0x192>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e7f1      	b.n	8006aaa <_printf_float+0x192>
 8006ac6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006aca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	db05      	blt.n	8006ade <_printf_float+0x1c6>
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	6123      	str	r3, [r4, #16]
 8006ad6:	07d1      	lsls	r1, r2, #31
 8006ad8:	d5e8      	bpl.n	8006aac <_printf_float+0x194>
 8006ada:	3301      	adds	r3, #1
 8006adc:	e7e5      	b.n	8006aaa <_printf_float+0x192>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bfd4      	ite	le
 8006ae2:	f1c3 0302 	rsble	r3, r3, #2
 8006ae6:	2301      	movgt	r3, #1
 8006ae8:	4413      	add	r3, r2
 8006aea:	e7de      	b.n	8006aaa <_printf_float+0x192>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	055a      	lsls	r2, r3, #21
 8006af0:	d407      	bmi.n	8006b02 <_printf_float+0x1ea>
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	4642      	mov	r2, r8
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	d12b      	bne.n	8006b58 <_printf_float+0x240>
 8006b00:	e767      	b.n	80069d2 <_printf_float+0xba>
 8006b02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006b06:	f240 80dc 	bls.w	8006cc2 <_printf_float+0x3aa>
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b12:	f7f9 fff9 	bl	8000b08 <__aeabi_dcmpeq>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d033      	beq.n	8006b82 <_printf_float+0x26a>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4a41      	ldr	r2, [pc, #260]	; (8006c24 <_printf_float+0x30c>)
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f af54 	beq.w	80069d2 <_printf_float+0xba>
 8006b2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	db02      	blt.n	8006b38 <_printf_float+0x220>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	07d8      	lsls	r0, r3, #31
 8006b36:	d50f      	bpl.n	8006b58 <_printf_float+0x240>
 8006b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	f43f af45 	beq.w	80069d2 <_printf_float+0xba>
 8006b48:	f04f 0800 	mov.w	r8, #0
 8006b4c:	f104 091a 	add.w	r9, r4, #26
 8006b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b52:	3b01      	subs	r3, #1
 8006b54:	4543      	cmp	r3, r8
 8006b56:	dc09      	bgt.n	8006b6c <_printf_float+0x254>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	079b      	lsls	r3, r3, #30
 8006b5c:	f100 8103 	bmi.w	8006d66 <_printf_float+0x44e>
 8006b60:	68e0      	ldr	r0, [r4, #12]
 8006b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b64:	4298      	cmp	r0, r3
 8006b66:	bfb8      	it	lt
 8006b68:	4618      	movlt	r0, r3
 8006b6a:	e734      	b.n	80069d6 <_printf_float+0xbe>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	464a      	mov	r2, r9
 8006b70:	4631      	mov	r1, r6
 8006b72:	4628      	mov	r0, r5
 8006b74:	47b8      	blx	r7
 8006b76:	3001      	adds	r0, #1
 8006b78:	f43f af2b 	beq.w	80069d2 <_printf_float+0xba>
 8006b7c:	f108 0801 	add.w	r8, r8, #1
 8006b80:	e7e6      	b.n	8006b50 <_printf_float+0x238>
 8006b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dc2b      	bgt.n	8006be0 <_printf_float+0x2c8>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4a26      	ldr	r2, [pc, #152]	; (8006c24 <_printf_float+0x30c>)
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f af1d 	beq.w	80069d2 <_printf_float+0xba>
 8006b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b9a:	b923      	cbnz	r3, 8006ba6 <_printf_float+0x28e>
 8006b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b9e:	b913      	cbnz	r3, 8006ba6 <_printf_float+0x28e>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	07d9      	lsls	r1, r3, #31
 8006ba4:	d5d8      	bpl.n	8006b58 <_printf_float+0x240>
 8006ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006baa:	4631      	mov	r1, r6
 8006bac:	4628      	mov	r0, r5
 8006bae:	47b8      	blx	r7
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	f43f af0e 	beq.w	80069d2 <_printf_float+0xba>
 8006bb6:	f04f 0900 	mov.w	r9, #0
 8006bba:	f104 0a1a 	add.w	sl, r4, #26
 8006bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc0:	425b      	negs	r3, r3
 8006bc2:	454b      	cmp	r3, r9
 8006bc4:	dc01      	bgt.n	8006bca <_printf_float+0x2b2>
 8006bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc8:	e794      	b.n	8006af4 <_printf_float+0x1dc>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4652      	mov	r2, sl
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	f43f aefc 	beq.w	80069d2 <_printf_float+0xba>
 8006bda:	f109 0901 	add.w	r9, r9, #1
 8006bde:	e7ee      	b.n	8006bbe <_printf_float+0x2a6>
 8006be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006be2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006be4:	429a      	cmp	r2, r3
 8006be6:	bfa8      	it	ge
 8006be8:	461a      	movge	r2, r3
 8006bea:	2a00      	cmp	r2, #0
 8006bec:	4691      	mov	r9, r2
 8006bee:	dd07      	ble.n	8006c00 <_printf_float+0x2e8>
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	47b8      	blx	r7
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	f43f aee9 	beq.w	80069d2 <_printf_float+0xba>
 8006c00:	f104 031a 	add.w	r3, r4, #26
 8006c04:	f04f 0b00 	mov.w	fp, #0
 8006c08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c0c:	9306      	str	r3, [sp, #24]
 8006c0e:	e015      	b.n	8006c3c <_printf_float+0x324>
 8006c10:	7fefffff 	.word	0x7fefffff
 8006c14:	0800a038 	.word	0x0800a038
 8006c18:	0800a034 	.word	0x0800a034
 8006c1c:	0800a040 	.word	0x0800a040
 8006c20:	0800a03c 	.word	0x0800a03c
 8006c24:	0800a044 	.word	0x0800a044
 8006c28:	2301      	movs	r3, #1
 8006c2a:	9a06      	ldr	r2, [sp, #24]
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4628      	mov	r0, r5
 8006c30:	47b8      	blx	r7
 8006c32:	3001      	adds	r0, #1
 8006c34:	f43f aecd 	beq.w	80069d2 <_printf_float+0xba>
 8006c38:	f10b 0b01 	add.w	fp, fp, #1
 8006c3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006c40:	ebaa 0309 	sub.w	r3, sl, r9
 8006c44:	455b      	cmp	r3, fp
 8006c46:	dcef      	bgt.n	8006c28 <_printf_float+0x310>
 8006c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	44d0      	add	r8, sl
 8006c50:	db15      	blt.n	8006c7e <_printf_float+0x366>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	07da      	lsls	r2, r3, #31
 8006c56:	d412      	bmi.n	8006c7e <_printf_float+0x366>
 8006c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c5c:	eba3 020a 	sub.w	r2, r3, sl
 8006c60:	eba3 0a01 	sub.w	sl, r3, r1
 8006c64:	4592      	cmp	sl, r2
 8006c66:	bfa8      	it	ge
 8006c68:	4692      	movge	sl, r2
 8006c6a:	f1ba 0f00 	cmp.w	sl, #0
 8006c6e:	dc0e      	bgt.n	8006c8e <_printf_float+0x376>
 8006c70:	f04f 0800 	mov.w	r8, #0
 8006c74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c78:	f104 091a 	add.w	r9, r4, #26
 8006c7c:	e019      	b.n	8006cb2 <_printf_float+0x39a>
 8006c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b8      	blx	r7
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d1e5      	bne.n	8006c58 <_printf_float+0x340>
 8006c8c:	e6a1      	b.n	80069d2 <_printf_float+0xba>
 8006c8e:	4653      	mov	r3, sl
 8006c90:	4642      	mov	r2, r8
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d1e9      	bne.n	8006c70 <_printf_float+0x358>
 8006c9c:	e699      	b.n	80069d2 <_printf_float+0xba>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	464a      	mov	r2, r9
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f43f ae92 	beq.w	80069d2 <_printf_float+0xba>
 8006cae:	f108 0801 	add.w	r8, r8, #1
 8006cb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	eba3 030a 	sub.w	r3, r3, sl
 8006cbc:	4543      	cmp	r3, r8
 8006cbe:	dcee      	bgt.n	8006c9e <_printf_float+0x386>
 8006cc0:	e74a      	b.n	8006b58 <_printf_float+0x240>
 8006cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cc4:	2a01      	cmp	r2, #1
 8006cc6:	dc01      	bgt.n	8006ccc <_printf_float+0x3b4>
 8006cc8:	07db      	lsls	r3, r3, #31
 8006cca:	d53a      	bpl.n	8006d42 <_printf_float+0x42a>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4642      	mov	r2, r8
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	47b8      	blx	r7
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f43f ae7b 	beq.w	80069d2 <_printf_float+0xba>
 8006cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	47b8      	blx	r7
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	f108 0801 	add.w	r8, r8, #1
 8006cec:	f43f ae71 	beq.w	80069d2 <_printf_float+0xba>
 8006cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f103 3aff 	add.w	sl, r3, #4294967295
 8006cf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f7f9 ff03 	bl	8000b08 <__aeabi_dcmpeq>
 8006d02:	b9c8      	cbnz	r0, 8006d38 <_printf_float+0x420>
 8006d04:	4653      	mov	r3, sl
 8006d06:	4642      	mov	r2, r8
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	47b8      	blx	r7
 8006d0e:	3001      	adds	r0, #1
 8006d10:	d10e      	bne.n	8006d30 <_printf_float+0x418>
 8006d12:	e65e      	b.n	80069d2 <_printf_float+0xba>
 8006d14:	2301      	movs	r3, #1
 8006d16:	4652      	mov	r2, sl
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	f43f ae57 	beq.w	80069d2 <_printf_float+0xba>
 8006d24:	f108 0801 	add.w	r8, r8, #1
 8006d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	4543      	cmp	r3, r8
 8006d2e:	dcf1      	bgt.n	8006d14 <_printf_float+0x3fc>
 8006d30:	464b      	mov	r3, r9
 8006d32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d36:	e6de      	b.n	8006af6 <_printf_float+0x1de>
 8006d38:	f04f 0800 	mov.w	r8, #0
 8006d3c:	f104 0a1a 	add.w	sl, r4, #26
 8006d40:	e7f2      	b.n	8006d28 <_printf_float+0x410>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e7df      	b.n	8006d06 <_printf_float+0x3ee>
 8006d46:	2301      	movs	r3, #1
 8006d48:	464a      	mov	r2, r9
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	f43f ae3e 	beq.w	80069d2 <_printf_float+0xba>
 8006d56:	f108 0801 	add.w	r8, r8, #1
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	4543      	cmp	r3, r8
 8006d62:	dcf0      	bgt.n	8006d46 <_printf_float+0x42e>
 8006d64:	e6fc      	b.n	8006b60 <_printf_float+0x248>
 8006d66:	f04f 0800 	mov.w	r8, #0
 8006d6a:	f104 0919 	add.w	r9, r4, #25
 8006d6e:	e7f4      	b.n	8006d5a <_printf_float+0x442>
 8006d70:	2900      	cmp	r1, #0
 8006d72:	f43f ae8b 	beq.w	8006a8c <_printf_float+0x174>
 8006d76:	2300      	movs	r3, #0
 8006d78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006d7c:	ab09      	add	r3, sp, #36	; 0x24
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	ec49 8b10 	vmov	d0, r8, r9
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	f8cd a004 	str.w	sl, [sp, #4]
 8006d8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f7ff fd2e 	bl	80067f0 <__cvt>
 8006d94:	4680      	mov	r8, r0
 8006d96:	e648      	b.n	8006a2a <_printf_float+0x112>

08006d98 <_printf_common>:
 8006d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d9c:	4691      	mov	r9, r2
 8006d9e:	461f      	mov	r7, r3
 8006da0:	688a      	ldr	r2, [r1, #8]
 8006da2:	690b      	ldr	r3, [r1, #16]
 8006da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006da8:	4293      	cmp	r3, r2
 8006daa:	bfb8      	it	lt
 8006dac:	4613      	movlt	r3, r2
 8006dae:	f8c9 3000 	str.w	r3, [r9]
 8006db2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006db6:	4606      	mov	r6, r0
 8006db8:	460c      	mov	r4, r1
 8006dba:	b112      	cbz	r2, 8006dc2 <_printf_common+0x2a>
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	f8c9 3000 	str.w	r3, [r9]
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	0699      	lsls	r1, r3, #26
 8006dc6:	bf42      	ittt	mi
 8006dc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006dcc:	3302      	addmi	r3, #2
 8006dce:	f8c9 3000 	strmi.w	r3, [r9]
 8006dd2:	6825      	ldr	r5, [r4, #0]
 8006dd4:	f015 0506 	ands.w	r5, r5, #6
 8006dd8:	d107      	bne.n	8006dea <_printf_common+0x52>
 8006dda:	f104 0a19 	add.w	sl, r4, #25
 8006dde:	68e3      	ldr	r3, [r4, #12]
 8006de0:	f8d9 2000 	ldr.w	r2, [r9]
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	42ab      	cmp	r3, r5
 8006de8:	dc28      	bgt.n	8006e3c <_printf_common+0xa4>
 8006dea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	3300      	adds	r3, #0
 8006df2:	bf18      	it	ne
 8006df4:	2301      	movne	r3, #1
 8006df6:	0692      	lsls	r2, r2, #26
 8006df8:	d42d      	bmi.n	8006e56 <_printf_common+0xbe>
 8006dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dfe:	4639      	mov	r1, r7
 8006e00:	4630      	mov	r0, r6
 8006e02:	47c0      	blx	r8
 8006e04:	3001      	adds	r0, #1
 8006e06:	d020      	beq.n	8006e4a <_printf_common+0xb2>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	68e5      	ldr	r5, [r4, #12]
 8006e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e10:	f003 0306 	and.w	r3, r3, #6
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	bf08      	it	eq
 8006e18:	1aad      	subeq	r5, r5, r2
 8006e1a:	68a3      	ldr	r3, [r4, #8]
 8006e1c:	6922      	ldr	r2, [r4, #16]
 8006e1e:	bf0c      	ite	eq
 8006e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e24:	2500      	movne	r5, #0
 8006e26:	4293      	cmp	r3, r2
 8006e28:	bfc4      	itt	gt
 8006e2a:	1a9b      	subgt	r3, r3, r2
 8006e2c:	18ed      	addgt	r5, r5, r3
 8006e2e:	f04f 0900 	mov.w	r9, #0
 8006e32:	341a      	adds	r4, #26
 8006e34:	454d      	cmp	r5, r9
 8006e36:	d11a      	bne.n	8006e6e <_printf_common+0xd6>
 8006e38:	2000      	movs	r0, #0
 8006e3a:	e008      	b.n	8006e4e <_printf_common+0xb6>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	4652      	mov	r2, sl
 8006e40:	4639      	mov	r1, r7
 8006e42:	4630      	mov	r0, r6
 8006e44:	47c0      	blx	r8
 8006e46:	3001      	adds	r0, #1
 8006e48:	d103      	bne.n	8006e52 <_printf_common+0xba>
 8006e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e52:	3501      	adds	r5, #1
 8006e54:	e7c3      	b.n	8006dde <_printf_common+0x46>
 8006e56:	18e1      	adds	r1, r4, r3
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	2030      	movs	r0, #48	; 0x30
 8006e5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e60:	4422      	add	r2, r4
 8006e62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e6a:	3302      	adds	r3, #2
 8006e6c:	e7c5      	b.n	8006dfa <_printf_common+0x62>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	4622      	mov	r2, r4
 8006e72:	4639      	mov	r1, r7
 8006e74:	4630      	mov	r0, r6
 8006e76:	47c0      	blx	r8
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d0e6      	beq.n	8006e4a <_printf_common+0xb2>
 8006e7c:	f109 0901 	add.w	r9, r9, #1
 8006e80:	e7d8      	b.n	8006e34 <_printf_common+0x9c>
	...

08006e84 <_printf_i>:
 8006e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	7e09      	ldrb	r1, [r1, #24]
 8006e90:	b085      	sub	sp, #20
 8006e92:	296e      	cmp	r1, #110	; 0x6e
 8006e94:	4617      	mov	r7, r2
 8006e96:	4606      	mov	r6, r0
 8006e98:	4698      	mov	r8, r3
 8006e9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e9c:	f000 80b3 	beq.w	8007006 <_printf_i+0x182>
 8006ea0:	d822      	bhi.n	8006ee8 <_printf_i+0x64>
 8006ea2:	2963      	cmp	r1, #99	; 0x63
 8006ea4:	d036      	beq.n	8006f14 <_printf_i+0x90>
 8006ea6:	d80a      	bhi.n	8006ebe <_printf_i+0x3a>
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	f000 80b9 	beq.w	8007020 <_printf_i+0x19c>
 8006eae:	2958      	cmp	r1, #88	; 0x58
 8006eb0:	f000 8083 	beq.w	8006fba <_printf_i+0x136>
 8006eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006ebc:	e032      	b.n	8006f24 <_printf_i+0xa0>
 8006ebe:	2964      	cmp	r1, #100	; 0x64
 8006ec0:	d001      	beq.n	8006ec6 <_printf_i+0x42>
 8006ec2:	2969      	cmp	r1, #105	; 0x69
 8006ec4:	d1f6      	bne.n	8006eb4 <_printf_i+0x30>
 8006ec6:	6820      	ldr	r0, [r4, #0]
 8006ec8:	6813      	ldr	r3, [r2, #0]
 8006eca:	0605      	lsls	r5, r0, #24
 8006ecc:	f103 0104 	add.w	r1, r3, #4
 8006ed0:	d52a      	bpl.n	8006f28 <_printf_i+0xa4>
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6011      	str	r1, [r2, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da03      	bge.n	8006ee2 <_printf_i+0x5e>
 8006eda:	222d      	movs	r2, #45	; 0x2d
 8006edc:	425b      	negs	r3, r3
 8006ede:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ee2:	486f      	ldr	r0, [pc, #444]	; (80070a0 <_printf_i+0x21c>)
 8006ee4:	220a      	movs	r2, #10
 8006ee6:	e039      	b.n	8006f5c <_printf_i+0xd8>
 8006ee8:	2973      	cmp	r1, #115	; 0x73
 8006eea:	f000 809d 	beq.w	8007028 <_printf_i+0x1a4>
 8006eee:	d808      	bhi.n	8006f02 <_printf_i+0x7e>
 8006ef0:	296f      	cmp	r1, #111	; 0x6f
 8006ef2:	d020      	beq.n	8006f36 <_printf_i+0xb2>
 8006ef4:	2970      	cmp	r1, #112	; 0x70
 8006ef6:	d1dd      	bne.n	8006eb4 <_printf_i+0x30>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	f043 0320 	orr.w	r3, r3, #32
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	e003      	b.n	8006f0a <_printf_i+0x86>
 8006f02:	2975      	cmp	r1, #117	; 0x75
 8006f04:	d017      	beq.n	8006f36 <_printf_i+0xb2>
 8006f06:	2978      	cmp	r1, #120	; 0x78
 8006f08:	d1d4      	bne.n	8006eb4 <_printf_i+0x30>
 8006f0a:	2378      	movs	r3, #120	; 0x78
 8006f0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f10:	4864      	ldr	r0, [pc, #400]	; (80070a4 <_printf_i+0x220>)
 8006f12:	e055      	b.n	8006fc0 <_printf_i+0x13c>
 8006f14:	6813      	ldr	r3, [r2, #0]
 8006f16:	1d19      	adds	r1, r3, #4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6011      	str	r1, [r2, #0]
 8006f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f24:	2301      	movs	r3, #1
 8006f26:	e08c      	b.n	8007042 <_printf_i+0x1be>
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6011      	str	r1, [r2, #0]
 8006f2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f30:	bf18      	it	ne
 8006f32:	b21b      	sxthne	r3, r3
 8006f34:	e7cf      	b.n	8006ed6 <_printf_i+0x52>
 8006f36:	6813      	ldr	r3, [r2, #0]
 8006f38:	6825      	ldr	r5, [r4, #0]
 8006f3a:	1d18      	adds	r0, r3, #4
 8006f3c:	6010      	str	r0, [r2, #0]
 8006f3e:	0628      	lsls	r0, r5, #24
 8006f40:	d501      	bpl.n	8006f46 <_printf_i+0xc2>
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	e002      	b.n	8006f4c <_printf_i+0xc8>
 8006f46:	0668      	lsls	r0, r5, #25
 8006f48:	d5fb      	bpl.n	8006f42 <_printf_i+0xbe>
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	4854      	ldr	r0, [pc, #336]	; (80070a0 <_printf_i+0x21c>)
 8006f4e:	296f      	cmp	r1, #111	; 0x6f
 8006f50:	bf14      	ite	ne
 8006f52:	220a      	movne	r2, #10
 8006f54:	2208      	moveq	r2, #8
 8006f56:	2100      	movs	r1, #0
 8006f58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f5c:	6865      	ldr	r5, [r4, #4]
 8006f5e:	60a5      	str	r5, [r4, #8]
 8006f60:	2d00      	cmp	r5, #0
 8006f62:	f2c0 8095 	blt.w	8007090 <_printf_i+0x20c>
 8006f66:	6821      	ldr	r1, [r4, #0]
 8006f68:	f021 0104 	bic.w	r1, r1, #4
 8006f6c:	6021      	str	r1, [r4, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d13d      	bne.n	8006fee <_printf_i+0x16a>
 8006f72:	2d00      	cmp	r5, #0
 8006f74:	f040 808e 	bne.w	8007094 <_printf_i+0x210>
 8006f78:	4665      	mov	r5, ip
 8006f7a:	2a08      	cmp	r2, #8
 8006f7c:	d10b      	bne.n	8006f96 <_printf_i+0x112>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	07db      	lsls	r3, r3, #31
 8006f82:	d508      	bpl.n	8006f96 <_printf_i+0x112>
 8006f84:	6923      	ldr	r3, [r4, #16]
 8006f86:	6862      	ldr	r2, [r4, #4]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	bfde      	ittt	le
 8006f8c:	2330      	movle	r3, #48	; 0x30
 8006f8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f96:	ebac 0305 	sub.w	r3, ip, r5
 8006f9a:	6123      	str	r3, [r4, #16]
 8006f9c:	f8cd 8000 	str.w	r8, [sp]
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	aa03      	add	r2, sp, #12
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f7ff fef6 	bl	8006d98 <_printf_common>
 8006fac:	3001      	adds	r0, #1
 8006fae:	d14d      	bne.n	800704c <_printf_i+0x1c8>
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	b005      	add	sp, #20
 8006fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fba:	4839      	ldr	r0, [pc, #228]	; (80070a0 <_printf_i+0x21c>)
 8006fbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006fc0:	6813      	ldr	r3, [r2, #0]
 8006fc2:	6821      	ldr	r1, [r4, #0]
 8006fc4:	1d1d      	adds	r5, r3, #4
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6015      	str	r5, [r2, #0]
 8006fca:	060a      	lsls	r2, r1, #24
 8006fcc:	d50b      	bpl.n	8006fe6 <_printf_i+0x162>
 8006fce:	07ca      	lsls	r2, r1, #31
 8006fd0:	bf44      	itt	mi
 8006fd2:	f041 0120 	orrmi.w	r1, r1, #32
 8006fd6:	6021      	strmi	r1, [r4, #0]
 8006fd8:	b91b      	cbnz	r3, 8006fe2 <_printf_i+0x15e>
 8006fda:	6822      	ldr	r2, [r4, #0]
 8006fdc:	f022 0220 	bic.w	r2, r2, #32
 8006fe0:	6022      	str	r2, [r4, #0]
 8006fe2:	2210      	movs	r2, #16
 8006fe4:	e7b7      	b.n	8006f56 <_printf_i+0xd2>
 8006fe6:	064d      	lsls	r5, r1, #25
 8006fe8:	bf48      	it	mi
 8006fea:	b29b      	uxthmi	r3, r3
 8006fec:	e7ef      	b.n	8006fce <_printf_i+0x14a>
 8006fee:	4665      	mov	r5, ip
 8006ff0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ff4:	fb02 3311 	mls	r3, r2, r1, r3
 8006ff8:	5cc3      	ldrb	r3, [r0, r3]
 8006ffa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ffe:	460b      	mov	r3, r1
 8007000:	2900      	cmp	r1, #0
 8007002:	d1f5      	bne.n	8006ff0 <_printf_i+0x16c>
 8007004:	e7b9      	b.n	8006f7a <_printf_i+0xf6>
 8007006:	6813      	ldr	r3, [r2, #0]
 8007008:	6825      	ldr	r5, [r4, #0]
 800700a:	6961      	ldr	r1, [r4, #20]
 800700c:	1d18      	adds	r0, r3, #4
 800700e:	6010      	str	r0, [r2, #0]
 8007010:	0628      	lsls	r0, r5, #24
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	d501      	bpl.n	800701a <_printf_i+0x196>
 8007016:	6019      	str	r1, [r3, #0]
 8007018:	e002      	b.n	8007020 <_printf_i+0x19c>
 800701a:	066a      	lsls	r2, r5, #25
 800701c:	d5fb      	bpl.n	8007016 <_printf_i+0x192>
 800701e:	8019      	strh	r1, [r3, #0]
 8007020:	2300      	movs	r3, #0
 8007022:	6123      	str	r3, [r4, #16]
 8007024:	4665      	mov	r5, ip
 8007026:	e7b9      	b.n	8006f9c <_printf_i+0x118>
 8007028:	6813      	ldr	r3, [r2, #0]
 800702a:	1d19      	adds	r1, r3, #4
 800702c:	6011      	str	r1, [r2, #0]
 800702e:	681d      	ldr	r5, [r3, #0]
 8007030:	6862      	ldr	r2, [r4, #4]
 8007032:	2100      	movs	r1, #0
 8007034:	4628      	mov	r0, r5
 8007036:	f7f9 f8f3 	bl	8000220 <memchr>
 800703a:	b108      	cbz	r0, 8007040 <_printf_i+0x1bc>
 800703c:	1b40      	subs	r0, r0, r5
 800703e:	6060      	str	r0, [r4, #4]
 8007040:	6863      	ldr	r3, [r4, #4]
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	2300      	movs	r3, #0
 8007046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800704a:	e7a7      	b.n	8006f9c <_printf_i+0x118>
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	462a      	mov	r2, r5
 8007050:	4639      	mov	r1, r7
 8007052:	4630      	mov	r0, r6
 8007054:	47c0      	blx	r8
 8007056:	3001      	adds	r0, #1
 8007058:	d0aa      	beq.n	8006fb0 <_printf_i+0x12c>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	079b      	lsls	r3, r3, #30
 800705e:	d413      	bmi.n	8007088 <_printf_i+0x204>
 8007060:	68e0      	ldr	r0, [r4, #12]
 8007062:	9b03      	ldr	r3, [sp, #12]
 8007064:	4298      	cmp	r0, r3
 8007066:	bfb8      	it	lt
 8007068:	4618      	movlt	r0, r3
 800706a:	e7a3      	b.n	8006fb4 <_printf_i+0x130>
 800706c:	2301      	movs	r3, #1
 800706e:	464a      	mov	r2, r9
 8007070:	4639      	mov	r1, r7
 8007072:	4630      	mov	r0, r6
 8007074:	47c0      	blx	r8
 8007076:	3001      	adds	r0, #1
 8007078:	d09a      	beq.n	8006fb0 <_printf_i+0x12c>
 800707a:	3501      	adds	r5, #1
 800707c:	68e3      	ldr	r3, [r4, #12]
 800707e:	9a03      	ldr	r2, [sp, #12]
 8007080:	1a9b      	subs	r3, r3, r2
 8007082:	42ab      	cmp	r3, r5
 8007084:	dcf2      	bgt.n	800706c <_printf_i+0x1e8>
 8007086:	e7eb      	b.n	8007060 <_printf_i+0x1dc>
 8007088:	2500      	movs	r5, #0
 800708a:	f104 0919 	add.w	r9, r4, #25
 800708e:	e7f5      	b.n	800707c <_printf_i+0x1f8>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1ac      	bne.n	8006fee <_printf_i+0x16a>
 8007094:	7803      	ldrb	r3, [r0, #0]
 8007096:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800709a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800709e:	e76c      	b.n	8006f7a <_printf_i+0xf6>
 80070a0:	0800a046 	.word	0x0800a046
 80070a4:	0800a057 	.word	0x0800a057

080070a8 <siprintf>:
 80070a8:	b40e      	push	{r1, r2, r3}
 80070aa:	b500      	push	{lr}
 80070ac:	b09c      	sub	sp, #112	; 0x70
 80070ae:	ab1d      	add	r3, sp, #116	; 0x74
 80070b0:	9002      	str	r0, [sp, #8]
 80070b2:	9006      	str	r0, [sp, #24]
 80070b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070b8:	4809      	ldr	r0, [pc, #36]	; (80070e0 <siprintf+0x38>)
 80070ba:	9107      	str	r1, [sp, #28]
 80070bc:	9104      	str	r1, [sp, #16]
 80070be:	4909      	ldr	r1, [pc, #36]	; (80070e4 <siprintf+0x3c>)
 80070c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c4:	9105      	str	r1, [sp, #20]
 80070c6:	6800      	ldr	r0, [r0, #0]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	a902      	add	r1, sp, #8
 80070cc:	f001 fa7c 	bl	80085c8 <_svfiprintf_r>
 80070d0:	9b02      	ldr	r3, [sp, #8]
 80070d2:	2200      	movs	r2, #0
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	b01c      	add	sp, #112	; 0x70
 80070d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070dc:	b003      	add	sp, #12
 80070de:	4770      	bx	lr
 80070e0:	20000018 	.word	0x20000018
 80070e4:	ffff0208 	.word	0xffff0208

080070e8 <_vsiprintf_r>:
 80070e8:	b500      	push	{lr}
 80070ea:	b09b      	sub	sp, #108	; 0x6c
 80070ec:	9100      	str	r1, [sp, #0]
 80070ee:	9104      	str	r1, [sp, #16]
 80070f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070f4:	9105      	str	r1, [sp, #20]
 80070f6:	9102      	str	r1, [sp, #8]
 80070f8:	4905      	ldr	r1, [pc, #20]	; (8007110 <_vsiprintf_r+0x28>)
 80070fa:	9103      	str	r1, [sp, #12]
 80070fc:	4669      	mov	r1, sp
 80070fe:	f001 fa63 	bl	80085c8 <_svfiprintf_r>
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	b01b      	add	sp, #108	; 0x6c
 800710a:	f85d fb04 	ldr.w	pc, [sp], #4
 800710e:	bf00      	nop
 8007110:	ffff0208 	.word	0xffff0208

08007114 <vsiprintf>:
 8007114:	4613      	mov	r3, r2
 8007116:	460a      	mov	r2, r1
 8007118:	4601      	mov	r1, r0
 800711a:	4802      	ldr	r0, [pc, #8]	; (8007124 <vsiprintf+0x10>)
 800711c:	6800      	ldr	r0, [r0, #0]
 800711e:	f7ff bfe3 	b.w	80070e8 <_vsiprintf_r>
 8007122:	bf00      	nop
 8007124:	20000018 	.word	0x20000018

08007128 <quorem>:
 8007128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	6903      	ldr	r3, [r0, #16]
 800712e:	690c      	ldr	r4, [r1, #16]
 8007130:	42a3      	cmp	r3, r4
 8007132:	4680      	mov	r8, r0
 8007134:	f2c0 8082 	blt.w	800723c <quorem+0x114>
 8007138:	3c01      	subs	r4, #1
 800713a:	f101 0714 	add.w	r7, r1, #20
 800713e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007142:	f100 0614 	add.w	r6, r0, #20
 8007146:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800714a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800714e:	eb06 030c 	add.w	r3, r6, ip
 8007152:	3501      	adds	r5, #1
 8007154:	eb07 090c 	add.w	r9, r7, ip
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	fbb0 f5f5 	udiv	r5, r0, r5
 800715e:	b395      	cbz	r5, 80071c6 <quorem+0x9e>
 8007160:	f04f 0a00 	mov.w	sl, #0
 8007164:	4638      	mov	r0, r7
 8007166:	46b6      	mov	lr, r6
 8007168:	46d3      	mov	fp, sl
 800716a:	f850 2b04 	ldr.w	r2, [r0], #4
 800716e:	b293      	uxth	r3, r2
 8007170:	fb05 a303 	mla	r3, r5, r3, sl
 8007174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007178:	b29b      	uxth	r3, r3
 800717a:	ebab 0303 	sub.w	r3, fp, r3
 800717e:	0c12      	lsrs	r2, r2, #16
 8007180:	f8de b000 	ldr.w	fp, [lr]
 8007184:	fb05 a202 	mla	r2, r5, r2, sl
 8007188:	fa13 f38b 	uxtah	r3, r3, fp
 800718c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007190:	fa1f fb82 	uxth.w	fp, r2
 8007194:	f8de 2000 	ldr.w	r2, [lr]
 8007198:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800719c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071a6:	4581      	cmp	r9, r0
 80071a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80071ac:	f84e 3b04 	str.w	r3, [lr], #4
 80071b0:	d2db      	bcs.n	800716a <quorem+0x42>
 80071b2:	f856 300c 	ldr.w	r3, [r6, ip]
 80071b6:	b933      	cbnz	r3, 80071c6 <quorem+0x9e>
 80071b8:	9b01      	ldr	r3, [sp, #4]
 80071ba:	3b04      	subs	r3, #4
 80071bc:	429e      	cmp	r6, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	d330      	bcc.n	8007224 <quorem+0xfc>
 80071c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80071c6:	4640      	mov	r0, r8
 80071c8:	f001 f828 	bl	800821c <__mcmp>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	db25      	blt.n	800721c <quorem+0xf4>
 80071d0:	3501      	adds	r5, #1
 80071d2:	4630      	mov	r0, r6
 80071d4:	f04f 0c00 	mov.w	ip, #0
 80071d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80071dc:	f8d0 e000 	ldr.w	lr, [r0]
 80071e0:	b293      	uxth	r3, r2
 80071e2:	ebac 0303 	sub.w	r3, ip, r3
 80071e6:	0c12      	lsrs	r2, r2, #16
 80071e8:	fa13 f38e 	uxtah	r3, r3, lr
 80071ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071fa:	45b9      	cmp	r9, r7
 80071fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007200:	f840 3b04 	str.w	r3, [r0], #4
 8007204:	d2e8      	bcs.n	80071d8 <quorem+0xb0>
 8007206:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800720a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800720e:	b92a      	cbnz	r2, 800721c <quorem+0xf4>
 8007210:	3b04      	subs	r3, #4
 8007212:	429e      	cmp	r6, r3
 8007214:	461a      	mov	r2, r3
 8007216:	d30b      	bcc.n	8007230 <quorem+0x108>
 8007218:	f8c8 4010 	str.w	r4, [r8, #16]
 800721c:	4628      	mov	r0, r5
 800721e:	b003      	add	sp, #12
 8007220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	3b04      	subs	r3, #4
 8007228:	2a00      	cmp	r2, #0
 800722a:	d1ca      	bne.n	80071c2 <quorem+0x9a>
 800722c:	3c01      	subs	r4, #1
 800722e:	e7c5      	b.n	80071bc <quorem+0x94>
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	3b04      	subs	r3, #4
 8007234:	2a00      	cmp	r2, #0
 8007236:	d1ef      	bne.n	8007218 <quorem+0xf0>
 8007238:	3c01      	subs	r4, #1
 800723a:	e7ea      	b.n	8007212 <quorem+0xea>
 800723c:	2000      	movs	r0, #0
 800723e:	e7ee      	b.n	800721e <quorem+0xf6>

08007240 <_dtoa_r>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	ec57 6b10 	vmov	r6, r7, d0
 8007248:	b097      	sub	sp, #92	; 0x5c
 800724a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800724c:	9106      	str	r1, [sp, #24]
 800724e:	4604      	mov	r4, r0
 8007250:	920b      	str	r2, [sp, #44]	; 0x2c
 8007252:	9312      	str	r3, [sp, #72]	; 0x48
 8007254:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007258:	e9cd 6700 	strd	r6, r7, [sp]
 800725c:	b93d      	cbnz	r5, 800726e <_dtoa_r+0x2e>
 800725e:	2010      	movs	r0, #16
 8007260:	f000 fdb4 	bl	8007dcc <malloc>
 8007264:	6260      	str	r0, [r4, #36]	; 0x24
 8007266:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800726a:	6005      	str	r5, [r0, #0]
 800726c:	60c5      	str	r5, [r0, #12]
 800726e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007270:	6819      	ldr	r1, [r3, #0]
 8007272:	b151      	cbz	r1, 800728a <_dtoa_r+0x4a>
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	604a      	str	r2, [r1, #4]
 8007278:	2301      	movs	r3, #1
 800727a:	4093      	lsls	r3, r2
 800727c:	608b      	str	r3, [r1, #8]
 800727e:	4620      	mov	r0, r4
 8007280:	f000 fdeb 	bl	8007e5a <_Bfree>
 8007284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	1e3b      	subs	r3, r7, #0
 800728c:	bfbb      	ittet	lt
 800728e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007292:	9301      	strlt	r3, [sp, #4]
 8007294:	2300      	movge	r3, #0
 8007296:	2201      	movlt	r2, #1
 8007298:	bfac      	ite	ge
 800729a:	f8c8 3000 	strge.w	r3, [r8]
 800729e:	f8c8 2000 	strlt.w	r2, [r8]
 80072a2:	4baf      	ldr	r3, [pc, #700]	; (8007560 <_dtoa_r+0x320>)
 80072a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80072a8:	ea33 0308 	bics.w	r3, r3, r8
 80072ac:	d114      	bne.n	80072d8 <_dtoa_r+0x98>
 80072ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	9b00      	ldr	r3, [sp, #0]
 80072b8:	b923      	cbnz	r3, 80072c4 <_dtoa_r+0x84>
 80072ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80072be:	2800      	cmp	r0, #0
 80072c0:	f000 8542 	beq.w	8007d48 <_dtoa_r+0xb08>
 80072c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007574 <_dtoa_r+0x334>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 8544 	beq.w	8007d58 <_dtoa_r+0xb18>
 80072d0:	f10b 0303 	add.w	r3, fp, #3
 80072d4:	f000 bd3e 	b.w	8007d54 <_dtoa_r+0xb14>
 80072d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072dc:	2200      	movs	r2, #0
 80072de:	2300      	movs	r3, #0
 80072e0:	4630      	mov	r0, r6
 80072e2:	4639      	mov	r1, r7
 80072e4:	f7f9 fc10 	bl	8000b08 <__aeabi_dcmpeq>
 80072e8:	4681      	mov	r9, r0
 80072ea:	b168      	cbz	r0, 8007308 <_dtoa_r+0xc8>
 80072ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072ee:	2301      	movs	r3, #1
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 8524 	beq.w	8007d42 <_dtoa_r+0xb02>
 80072fa:	4b9a      	ldr	r3, [pc, #616]	; (8007564 <_dtoa_r+0x324>)
 80072fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	f000 bd28 	b.w	8007d58 <_dtoa_r+0xb18>
 8007308:	aa14      	add	r2, sp, #80	; 0x50
 800730a:	a915      	add	r1, sp, #84	; 0x54
 800730c:	ec47 6b10 	vmov	d0, r6, r7
 8007310:	4620      	mov	r0, r4
 8007312:	f000 fffa 	bl	800830a <__d2b>
 8007316:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800731a:	9004      	str	r0, [sp, #16]
 800731c:	2d00      	cmp	r5, #0
 800731e:	d07c      	beq.n	800741a <_dtoa_r+0x1da>
 8007320:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007324:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007328:	46b2      	mov	sl, r6
 800732a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800732e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007332:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007336:	2200      	movs	r2, #0
 8007338:	4b8b      	ldr	r3, [pc, #556]	; (8007568 <_dtoa_r+0x328>)
 800733a:	4650      	mov	r0, sl
 800733c:	4659      	mov	r1, fp
 800733e:	f7f8 ffc3 	bl	80002c8 <__aeabi_dsub>
 8007342:	a381      	add	r3, pc, #516	; (adr r3, 8007548 <_dtoa_r+0x308>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f7f9 f976 	bl	8000638 <__aeabi_dmul>
 800734c:	a380      	add	r3, pc, #512	; (adr r3, 8007550 <_dtoa_r+0x310>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f7f8 ffbb 	bl	80002cc <__adddf3>
 8007356:	4606      	mov	r6, r0
 8007358:	4628      	mov	r0, r5
 800735a:	460f      	mov	r7, r1
 800735c:	f7f9 f902 	bl	8000564 <__aeabi_i2d>
 8007360:	a37d      	add	r3, pc, #500	; (adr r3, 8007558 <_dtoa_r+0x318>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f7f9 f967 	bl	8000638 <__aeabi_dmul>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f8 ffab 	bl	80002cc <__adddf3>
 8007376:	4606      	mov	r6, r0
 8007378:	460f      	mov	r7, r1
 800737a:	f7f9 fc0d 	bl	8000b98 <__aeabi_d2iz>
 800737e:	2200      	movs	r2, #0
 8007380:	4682      	mov	sl, r0
 8007382:	2300      	movs	r3, #0
 8007384:	4630      	mov	r0, r6
 8007386:	4639      	mov	r1, r7
 8007388:	f7f9 fbc8 	bl	8000b1c <__aeabi_dcmplt>
 800738c:	b148      	cbz	r0, 80073a2 <_dtoa_r+0x162>
 800738e:	4650      	mov	r0, sl
 8007390:	f7f9 f8e8 	bl	8000564 <__aeabi_i2d>
 8007394:	4632      	mov	r2, r6
 8007396:	463b      	mov	r3, r7
 8007398:	f7f9 fbb6 	bl	8000b08 <__aeabi_dcmpeq>
 800739c:	b908      	cbnz	r0, 80073a2 <_dtoa_r+0x162>
 800739e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073a2:	f1ba 0f16 	cmp.w	sl, #22
 80073a6:	d859      	bhi.n	800745c <_dtoa_r+0x21c>
 80073a8:	4970      	ldr	r1, [pc, #448]	; (800756c <_dtoa_r+0x32c>)
 80073aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80073ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073b6:	f7f9 fbcf 	bl	8000b58 <__aeabi_dcmpgt>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d050      	beq.n	8007460 <_dtoa_r+0x220>
 80073be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073c2:	2300      	movs	r3, #0
 80073c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073c8:	1b5d      	subs	r5, r3, r5
 80073ca:	f1b5 0801 	subs.w	r8, r5, #1
 80073ce:	bf49      	itett	mi
 80073d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80073d4:	2300      	movpl	r3, #0
 80073d6:	9305      	strmi	r3, [sp, #20]
 80073d8:	f04f 0800 	movmi.w	r8, #0
 80073dc:	bf58      	it	pl
 80073de:	9305      	strpl	r3, [sp, #20]
 80073e0:	f1ba 0f00 	cmp.w	sl, #0
 80073e4:	db3e      	blt.n	8007464 <_dtoa_r+0x224>
 80073e6:	2300      	movs	r3, #0
 80073e8:	44d0      	add	r8, sl
 80073ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80073ee:	9307      	str	r3, [sp, #28]
 80073f0:	9b06      	ldr	r3, [sp, #24]
 80073f2:	2b09      	cmp	r3, #9
 80073f4:	f200 8090 	bhi.w	8007518 <_dtoa_r+0x2d8>
 80073f8:	2b05      	cmp	r3, #5
 80073fa:	bfc4      	itt	gt
 80073fc:	3b04      	subgt	r3, #4
 80073fe:	9306      	strgt	r3, [sp, #24]
 8007400:	9b06      	ldr	r3, [sp, #24]
 8007402:	f1a3 0302 	sub.w	r3, r3, #2
 8007406:	bfcc      	ite	gt
 8007408:	2500      	movgt	r5, #0
 800740a:	2501      	movle	r5, #1
 800740c:	2b03      	cmp	r3, #3
 800740e:	f200 808f 	bhi.w	8007530 <_dtoa_r+0x2f0>
 8007412:	e8df f003 	tbb	[pc, r3]
 8007416:	7f7d      	.short	0x7f7d
 8007418:	7131      	.short	0x7131
 800741a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800741e:	441d      	add	r5, r3
 8007420:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007424:	2820      	cmp	r0, #32
 8007426:	dd13      	ble.n	8007450 <_dtoa_r+0x210>
 8007428:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800742c:	9b00      	ldr	r3, [sp, #0]
 800742e:	fa08 f800 	lsl.w	r8, r8, r0
 8007432:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007436:	fa23 f000 	lsr.w	r0, r3, r0
 800743a:	ea48 0000 	orr.w	r0, r8, r0
 800743e:	f7f9 f881 	bl	8000544 <__aeabi_ui2d>
 8007442:	2301      	movs	r3, #1
 8007444:	4682      	mov	sl, r0
 8007446:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800744a:	3d01      	subs	r5, #1
 800744c:	9313      	str	r3, [sp, #76]	; 0x4c
 800744e:	e772      	b.n	8007336 <_dtoa_r+0xf6>
 8007450:	9b00      	ldr	r3, [sp, #0]
 8007452:	f1c0 0020 	rsb	r0, r0, #32
 8007456:	fa03 f000 	lsl.w	r0, r3, r0
 800745a:	e7f0      	b.n	800743e <_dtoa_r+0x1fe>
 800745c:	2301      	movs	r3, #1
 800745e:	e7b1      	b.n	80073c4 <_dtoa_r+0x184>
 8007460:	900f      	str	r0, [sp, #60]	; 0x3c
 8007462:	e7b0      	b.n	80073c6 <_dtoa_r+0x186>
 8007464:	9b05      	ldr	r3, [sp, #20]
 8007466:	eba3 030a 	sub.w	r3, r3, sl
 800746a:	9305      	str	r3, [sp, #20]
 800746c:	f1ca 0300 	rsb	r3, sl, #0
 8007470:	9307      	str	r3, [sp, #28]
 8007472:	2300      	movs	r3, #0
 8007474:	930e      	str	r3, [sp, #56]	; 0x38
 8007476:	e7bb      	b.n	80073f0 <_dtoa_r+0x1b0>
 8007478:	2301      	movs	r3, #1
 800747a:	930a      	str	r3, [sp, #40]	; 0x28
 800747c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800747e:	2b00      	cmp	r3, #0
 8007480:	dd59      	ble.n	8007536 <_dtoa_r+0x2f6>
 8007482:	9302      	str	r3, [sp, #8]
 8007484:	4699      	mov	r9, r3
 8007486:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007488:	2200      	movs	r2, #0
 800748a:	6072      	str	r2, [r6, #4]
 800748c:	2204      	movs	r2, #4
 800748e:	f102 0014 	add.w	r0, r2, #20
 8007492:	4298      	cmp	r0, r3
 8007494:	6871      	ldr	r1, [r6, #4]
 8007496:	d953      	bls.n	8007540 <_dtoa_r+0x300>
 8007498:	4620      	mov	r0, r4
 800749a:	f000 fcaa 	bl	8007df2 <_Balloc>
 800749e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074a0:	6030      	str	r0, [r6, #0]
 80074a2:	f1b9 0f0e 	cmp.w	r9, #14
 80074a6:	f8d3 b000 	ldr.w	fp, [r3]
 80074aa:	f200 80e6 	bhi.w	800767a <_dtoa_r+0x43a>
 80074ae:	2d00      	cmp	r5, #0
 80074b0:	f000 80e3 	beq.w	800767a <_dtoa_r+0x43a>
 80074b4:	ed9d 7b00 	vldr	d7, [sp]
 80074b8:	f1ba 0f00 	cmp.w	sl, #0
 80074bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80074c0:	dd74      	ble.n	80075ac <_dtoa_r+0x36c>
 80074c2:	4a2a      	ldr	r2, [pc, #168]	; (800756c <_dtoa_r+0x32c>)
 80074c4:	f00a 030f 	and.w	r3, sl, #15
 80074c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074cc:	ed93 7b00 	vldr	d7, [r3]
 80074d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80074d4:	06f0      	lsls	r0, r6, #27
 80074d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80074da:	d565      	bpl.n	80075a8 <_dtoa_r+0x368>
 80074dc:	4b24      	ldr	r3, [pc, #144]	; (8007570 <_dtoa_r+0x330>)
 80074de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074e6:	f7f9 f9d1 	bl	800088c <__aeabi_ddiv>
 80074ea:	e9cd 0100 	strd	r0, r1, [sp]
 80074ee:	f006 060f 	and.w	r6, r6, #15
 80074f2:	2503      	movs	r5, #3
 80074f4:	4f1e      	ldr	r7, [pc, #120]	; (8007570 <_dtoa_r+0x330>)
 80074f6:	e04c      	b.n	8007592 <_dtoa_r+0x352>
 80074f8:	2301      	movs	r3, #1
 80074fa:	930a      	str	r3, [sp, #40]	; 0x28
 80074fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074fe:	4453      	add	r3, sl
 8007500:	f103 0901 	add.w	r9, r3, #1
 8007504:	9302      	str	r3, [sp, #8]
 8007506:	464b      	mov	r3, r9
 8007508:	2b01      	cmp	r3, #1
 800750a:	bfb8      	it	lt
 800750c:	2301      	movlt	r3, #1
 800750e:	e7ba      	b.n	8007486 <_dtoa_r+0x246>
 8007510:	2300      	movs	r3, #0
 8007512:	e7b2      	b.n	800747a <_dtoa_r+0x23a>
 8007514:	2300      	movs	r3, #0
 8007516:	e7f0      	b.n	80074fa <_dtoa_r+0x2ba>
 8007518:	2501      	movs	r5, #1
 800751a:	2300      	movs	r3, #0
 800751c:	9306      	str	r3, [sp, #24]
 800751e:	950a      	str	r5, [sp, #40]	; 0x28
 8007520:	f04f 33ff 	mov.w	r3, #4294967295
 8007524:	9302      	str	r3, [sp, #8]
 8007526:	4699      	mov	r9, r3
 8007528:	2200      	movs	r2, #0
 800752a:	2312      	movs	r3, #18
 800752c:	920b      	str	r2, [sp, #44]	; 0x2c
 800752e:	e7aa      	b.n	8007486 <_dtoa_r+0x246>
 8007530:	2301      	movs	r3, #1
 8007532:	930a      	str	r3, [sp, #40]	; 0x28
 8007534:	e7f4      	b.n	8007520 <_dtoa_r+0x2e0>
 8007536:	2301      	movs	r3, #1
 8007538:	9302      	str	r3, [sp, #8]
 800753a:	4699      	mov	r9, r3
 800753c:	461a      	mov	r2, r3
 800753e:	e7f5      	b.n	800752c <_dtoa_r+0x2ec>
 8007540:	3101      	adds	r1, #1
 8007542:	6071      	str	r1, [r6, #4]
 8007544:	0052      	lsls	r2, r2, #1
 8007546:	e7a2      	b.n	800748e <_dtoa_r+0x24e>
 8007548:	636f4361 	.word	0x636f4361
 800754c:	3fd287a7 	.word	0x3fd287a7
 8007550:	8b60c8b3 	.word	0x8b60c8b3
 8007554:	3fc68a28 	.word	0x3fc68a28
 8007558:	509f79fb 	.word	0x509f79fb
 800755c:	3fd34413 	.word	0x3fd34413
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	0800a045 	.word	0x0800a045
 8007568:	3ff80000 	.word	0x3ff80000
 800756c:	0800a0a0 	.word	0x0800a0a0
 8007570:	0800a078 	.word	0x0800a078
 8007574:	0800a071 	.word	0x0800a071
 8007578:	07f1      	lsls	r1, r6, #31
 800757a:	d508      	bpl.n	800758e <_dtoa_r+0x34e>
 800757c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007584:	f7f9 f858 	bl	8000638 <__aeabi_dmul>
 8007588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800758c:	3501      	adds	r5, #1
 800758e:	1076      	asrs	r6, r6, #1
 8007590:	3708      	adds	r7, #8
 8007592:	2e00      	cmp	r6, #0
 8007594:	d1f0      	bne.n	8007578 <_dtoa_r+0x338>
 8007596:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800759a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800759e:	f7f9 f975 	bl	800088c <__aeabi_ddiv>
 80075a2:	e9cd 0100 	strd	r0, r1, [sp]
 80075a6:	e01a      	b.n	80075de <_dtoa_r+0x39e>
 80075a8:	2502      	movs	r5, #2
 80075aa:	e7a3      	b.n	80074f4 <_dtoa_r+0x2b4>
 80075ac:	f000 80a0 	beq.w	80076f0 <_dtoa_r+0x4b0>
 80075b0:	f1ca 0600 	rsb	r6, sl, #0
 80075b4:	4b9f      	ldr	r3, [pc, #636]	; (8007834 <_dtoa_r+0x5f4>)
 80075b6:	4fa0      	ldr	r7, [pc, #640]	; (8007838 <_dtoa_r+0x5f8>)
 80075b8:	f006 020f 	and.w	r2, r6, #15
 80075bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075c8:	f7f9 f836 	bl	8000638 <__aeabi_dmul>
 80075cc:	e9cd 0100 	strd	r0, r1, [sp]
 80075d0:	1136      	asrs	r6, r6, #4
 80075d2:	2300      	movs	r3, #0
 80075d4:	2502      	movs	r5, #2
 80075d6:	2e00      	cmp	r6, #0
 80075d8:	d17f      	bne.n	80076da <_dtoa_r+0x49a>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e1      	bne.n	80075a2 <_dtoa_r+0x362>
 80075de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 8087 	beq.w	80076f4 <_dtoa_r+0x4b4>
 80075e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075ea:	2200      	movs	r2, #0
 80075ec:	4b93      	ldr	r3, [pc, #588]	; (800783c <_dtoa_r+0x5fc>)
 80075ee:	4630      	mov	r0, r6
 80075f0:	4639      	mov	r1, r7
 80075f2:	f7f9 fa93 	bl	8000b1c <__aeabi_dcmplt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d07c      	beq.n	80076f4 <_dtoa_r+0x4b4>
 80075fa:	f1b9 0f00 	cmp.w	r9, #0
 80075fe:	d079      	beq.n	80076f4 <_dtoa_r+0x4b4>
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	dd35      	ble.n	8007672 <_dtoa_r+0x432>
 8007606:	f10a 33ff 	add.w	r3, sl, #4294967295
 800760a:	9308      	str	r3, [sp, #32]
 800760c:	4639      	mov	r1, r7
 800760e:	2200      	movs	r2, #0
 8007610:	4b8b      	ldr	r3, [pc, #556]	; (8007840 <_dtoa_r+0x600>)
 8007612:	4630      	mov	r0, r6
 8007614:	f7f9 f810 	bl	8000638 <__aeabi_dmul>
 8007618:	e9cd 0100 	strd	r0, r1, [sp]
 800761c:	9f02      	ldr	r7, [sp, #8]
 800761e:	3501      	adds	r5, #1
 8007620:	4628      	mov	r0, r5
 8007622:	f7f8 ff9f 	bl	8000564 <__aeabi_i2d>
 8007626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800762a:	f7f9 f805 	bl	8000638 <__aeabi_dmul>
 800762e:	2200      	movs	r2, #0
 8007630:	4b84      	ldr	r3, [pc, #528]	; (8007844 <_dtoa_r+0x604>)
 8007632:	f7f8 fe4b 	bl	80002cc <__adddf3>
 8007636:	4605      	mov	r5, r0
 8007638:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800763c:	2f00      	cmp	r7, #0
 800763e:	d15d      	bne.n	80076fc <_dtoa_r+0x4bc>
 8007640:	2200      	movs	r2, #0
 8007642:	4b81      	ldr	r3, [pc, #516]	; (8007848 <_dtoa_r+0x608>)
 8007644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007648:	f7f8 fe3e 	bl	80002c8 <__aeabi_dsub>
 800764c:	462a      	mov	r2, r5
 800764e:	4633      	mov	r3, r6
 8007650:	e9cd 0100 	strd	r0, r1, [sp]
 8007654:	f7f9 fa80 	bl	8000b58 <__aeabi_dcmpgt>
 8007658:	2800      	cmp	r0, #0
 800765a:	f040 8288 	bne.w	8007b6e <_dtoa_r+0x92e>
 800765e:	462a      	mov	r2, r5
 8007660:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007664:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007668:	f7f9 fa58 	bl	8000b1c <__aeabi_dcmplt>
 800766c:	2800      	cmp	r0, #0
 800766e:	f040 827c 	bne.w	8007b6a <_dtoa_r+0x92a>
 8007672:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007676:	e9cd 2300 	strd	r2, r3, [sp]
 800767a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800767c:	2b00      	cmp	r3, #0
 800767e:	f2c0 8150 	blt.w	8007922 <_dtoa_r+0x6e2>
 8007682:	f1ba 0f0e 	cmp.w	sl, #14
 8007686:	f300 814c 	bgt.w	8007922 <_dtoa_r+0x6e2>
 800768a:	4b6a      	ldr	r3, [pc, #424]	; (8007834 <_dtoa_r+0x5f4>)
 800768c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007690:	ed93 7b00 	vldr	d7, [r3]
 8007694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007696:	2b00      	cmp	r3, #0
 8007698:	ed8d 7b02 	vstr	d7, [sp, #8]
 800769c:	f280 80d8 	bge.w	8007850 <_dtoa_r+0x610>
 80076a0:	f1b9 0f00 	cmp.w	r9, #0
 80076a4:	f300 80d4 	bgt.w	8007850 <_dtoa_r+0x610>
 80076a8:	f040 825e 	bne.w	8007b68 <_dtoa_r+0x928>
 80076ac:	2200      	movs	r2, #0
 80076ae:	4b66      	ldr	r3, [pc, #408]	; (8007848 <_dtoa_r+0x608>)
 80076b0:	ec51 0b17 	vmov	r0, r1, d7
 80076b4:	f7f8 ffc0 	bl	8000638 <__aeabi_dmul>
 80076b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076bc:	f7f9 fa42 	bl	8000b44 <__aeabi_dcmpge>
 80076c0:	464f      	mov	r7, r9
 80076c2:	464e      	mov	r6, r9
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f040 8234 	bne.w	8007b32 <_dtoa_r+0x8f2>
 80076ca:	2331      	movs	r3, #49	; 0x31
 80076cc:	f10b 0501 	add.w	r5, fp, #1
 80076d0:	f88b 3000 	strb.w	r3, [fp]
 80076d4:	f10a 0a01 	add.w	sl, sl, #1
 80076d8:	e22f      	b.n	8007b3a <_dtoa_r+0x8fa>
 80076da:	07f2      	lsls	r2, r6, #31
 80076dc:	d505      	bpl.n	80076ea <_dtoa_r+0x4aa>
 80076de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e2:	f7f8 ffa9 	bl	8000638 <__aeabi_dmul>
 80076e6:	3501      	adds	r5, #1
 80076e8:	2301      	movs	r3, #1
 80076ea:	1076      	asrs	r6, r6, #1
 80076ec:	3708      	adds	r7, #8
 80076ee:	e772      	b.n	80075d6 <_dtoa_r+0x396>
 80076f0:	2502      	movs	r5, #2
 80076f2:	e774      	b.n	80075de <_dtoa_r+0x39e>
 80076f4:	f8cd a020 	str.w	sl, [sp, #32]
 80076f8:	464f      	mov	r7, r9
 80076fa:	e791      	b.n	8007620 <_dtoa_r+0x3e0>
 80076fc:	4b4d      	ldr	r3, [pc, #308]	; (8007834 <_dtoa_r+0x5f4>)
 80076fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007702:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007708:	2b00      	cmp	r3, #0
 800770a:	d047      	beq.n	800779c <_dtoa_r+0x55c>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	2000      	movs	r0, #0
 8007712:	494e      	ldr	r1, [pc, #312]	; (800784c <_dtoa_r+0x60c>)
 8007714:	f7f9 f8ba 	bl	800088c <__aeabi_ddiv>
 8007718:	462a      	mov	r2, r5
 800771a:	4633      	mov	r3, r6
 800771c:	f7f8 fdd4 	bl	80002c8 <__aeabi_dsub>
 8007720:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007724:	465d      	mov	r5, fp
 8007726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800772a:	f7f9 fa35 	bl	8000b98 <__aeabi_d2iz>
 800772e:	4606      	mov	r6, r0
 8007730:	f7f8 ff18 	bl	8000564 <__aeabi_i2d>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	e9dd 0100 	ldrd	r0, r1, [sp]
 800773c:	f7f8 fdc4 	bl	80002c8 <__aeabi_dsub>
 8007740:	3630      	adds	r6, #48	; 0x30
 8007742:	f805 6b01 	strb.w	r6, [r5], #1
 8007746:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800774a:	e9cd 0100 	strd	r0, r1, [sp]
 800774e:	f7f9 f9e5 	bl	8000b1c <__aeabi_dcmplt>
 8007752:	2800      	cmp	r0, #0
 8007754:	d163      	bne.n	800781e <_dtoa_r+0x5de>
 8007756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800775a:	2000      	movs	r0, #0
 800775c:	4937      	ldr	r1, [pc, #220]	; (800783c <_dtoa_r+0x5fc>)
 800775e:	f7f8 fdb3 	bl	80002c8 <__aeabi_dsub>
 8007762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007766:	f7f9 f9d9 	bl	8000b1c <__aeabi_dcmplt>
 800776a:	2800      	cmp	r0, #0
 800776c:	f040 80b7 	bne.w	80078de <_dtoa_r+0x69e>
 8007770:	eba5 030b 	sub.w	r3, r5, fp
 8007774:	429f      	cmp	r7, r3
 8007776:	f77f af7c 	ble.w	8007672 <_dtoa_r+0x432>
 800777a:	2200      	movs	r2, #0
 800777c:	4b30      	ldr	r3, [pc, #192]	; (8007840 <_dtoa_r+0x600>)
 800777e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007782:	f7f8 ff59 	bl	8000638 <__aeabi_dmul>
 8007786:	2200      	movs	r2, #0
 8007788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800778c:	4b2c      	ldr	r3, [pc, #176]	; (8007840 <_dtoa_r+0x600>)
 800778e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007792:	f7f8 ff51 	bl	8000638 <__aeabi_dmul>
 8007796:	e9cd 0100 	strd	r0, r1, [sp]
 800779a:	e7c4      	b.n	8007726 <_dtoa_r+0x4e6>
 800779c:	462a      	mov	r2, r5
 800779e:	4633      	mov	r3, r6
 80077a0:	f7f8 ff4a 	bl	8000638 <__aeabi_dmul>
 80077a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80077a8:	eb0b 0507 	add.w	r5, fp, r7
 80077ac:	465e      	mov	r6, fp
 80077ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077b2:	f7f9 f9f1 	bl	8000b98 <__aeabi_d2iz>
 80077b6:	4607      	mov	r7, r0
 80077b8:	f7f8 fed4 	bl	8000564 <__aeabi_i2d>
 80077bc:	3730      	adds	r7, #48	; 0x30
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077c6:	f7f8 fd7f 	bl	80002c8 <__aeabi_dsub>
 80077ca:	f806 7b01 	strb.w	r7, [r6], #1
 80077ce:	42ae      	cmp	r6, r5
 80077d0:	e9cd 0100 	strd	r0, r1, [sp]
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	d126      	bne.n	8007828 <_dtoa_r+0x5e8>
 80077da:	4b1c      	ldr	r3, [pc, #112]	; (800784c <_dtoa_r+0x60c>)
 80077dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077e0:	f7f8 fd74 	bl	80002cc <__adddf3>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077ec:	f7f9 f9b4 	bl	8000b58 <__aeabi_dcmpgt>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d174      	bne.n	80078de <_dtoa_r+0x69e>
 80077f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077f8:	2000      	movs	r0, #0
 80077fa:	4914      	ldr	r1, [pc, #80]	; (800784c <_dtoa_r+0x60c>)
 80077fc:	f7f8 fd64 	bl	80002c8 <__aeabi_dsub>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007808:	f7f9 f988 	bl	8000b1c <__aeabi_dcmplt>
 800780c:	2800      	cmp	r0, #0
 800780e:	f43f af30 	beq.w	8007672 <_dtoa_r+0x432>
 8007812:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007816:	2b30      	cmp	r3, #48	; 0x30
 8007818:	f105 32ff 	add.w	r2, r5, #4294967295
 800781c:	d002      	beq.n	8007824 <_dtoa_r+0x5e4>
 800781e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007822:	e04a      	b.n	80078ba <_dtoa_r+0x67a>
 8007824:	4615      	mov	r5, r2
 8007826:	e7f4      	b.n	8007812 <_dtoa_r+0x5d2>
 8007828:	4b05      	ldr	r3, [pc, #20]	; (8007840 <_dtoa_r+0x600>)
 800782a:	f7f8 ff05 	bl	8000638 <__aeabi_dmul>
 800782e:	e9cd 0100 	strd	r0, r1, [sp]
 8007832:	e7bc      	b.n	80077ae <_dtoa_r+0x56e>
 8007834:	0800a0a0 	.word	0x0800a0a0
 8007838:	0800a078 	.word	0x0800a078
 800783c:	3ff00000 	.word	0x3ff00000
 8007840:	40240000 	.word	0x40240000
 8007844:	401c0000 	.word	0x401c0000
 8007848:	40140000 	.word	0x40140000
 800784c:	3fe00000 	.word	0x3fe00000
 8007850:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007854:	465d      	mov	r5, fp
 8007856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800785a:	4630      	mov	r0, r6
 800785c:	4639      	mov	r1, r7
 800785e:	f7f9 f815 	bl	800088c <__aeabi_ddiv>
 8007862:	f7f9 f999 	bl	8000b98 <__aeabi_d2iz>
 8007866:	4680      	mov	r8, r0
 8007868:	f7f8 fe7c 	bl	8000564 <__aeabi_i2d>
 800786c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007870:	f7f8 fee2 	bl	8000638 <__aeabi_dmul>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007880:	f7f8 fd22 	bl	80002c8 <__aeabi_dsub>
 8007884:	f805 6b01 	strb.w	r6, [r5], #1
 8007888:	eba5 060b 	sub.w	r6, r5, fp
 800788c:	45b1      	cmp	r9, r6
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	d139      	bne.n	8007908 <_dtoa_r+0x6c8>
 8007894:	f7f8 fd1a 	bl	80002cc <__adddf3>
 8007898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800789c:	4606      	mov	r6, r0
 800789e:	460f      	mov	r7, r1
 80078a0:	f7f9 f95a 	bl	8000b58 <__aeabi_dcmpgt>
 80078a4:	b9c8      	cbnz	r0, 80078da <_dtoa_r+0x69a>
 80078a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078aa:	4630      	mov	r0, r6
 80078ac:	4639      	mov	r1, r7
 80078ae:	f7f9 f92b 	bl	8000b08 <__aeabi_dcmpeq>
 80078b2:	b110      	cbz	r0, 80078ba <_dtoa_r+0x67a>
 80078b4:	f018 0f01 	tst.w	r8, #1
 80078b8:	d10f      	bne.n	80078da <_dtoa_r+0x69a>
 80078ba:	9904      	ldr	r1, [sp, #16]
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 facc 	bl	8007e5a <_Bfree>
 80078c2:	2300      	movs	r3, #0
 80078c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078c6:	702b      	strb	r3, [r5, #0]
 80078c8:	f10a 0301 	add.w	r3, sl, #1
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8241 	beq.w	8007d58 <_dtoa_r+0xb18>
 80078d6:	601d      	str	r5, [r3, #0]
 80078d8:	e23e      	b.n	8007d58 <_dtoa_r+0xb18>
 80078da:	f8cd a020 	str.w	sl, [sp, #32]
 80078de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078e2:	2a39      	cmp	r2, #57	; 0x39
 80078e4:	f105 33ff 	add.w	r3, r5, #4294967295
 80078e8:	d108      	bne.n	80078fc <_dtoa_r+0x6bc>
 80078ea:	459b      	cmp	fp, r3
 80078ec:	d10a      	bne.n	8007904 <_dtoa_r+0x6c4>
 80078ee:	9b08      	ldr	r3, [sp, #32]
 80078f0:	3301      	adds	r3, #1
 80078f2:	9308      	str	r3, [sp, #32]
 80078f4:	2330      	movs	r3, #48	; 0x30
 80078f6:	f88b 3000 	strb.w	r3, [fp]
 80078fa:	465b      	mov	r3, fp
 80078fc:	781a      	ldrb	r2, [r3, #0]
 80078fe:	3201      	adds	r2, #1
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	e78c      	b.n	800781e <_dtoa_r+0x5de>
 8007904:	461d      	mov	r5, r3
 8007906:	e7ea      	b.n	80078de <_dtoa_r+0x69e>
 8007908:	2200      	movs	r2, #0
 800790a:	4b9b      	ldr	r3, [pc, #620]	; (8007b78 <_dtoa_r+0x938>)
 800790c:	f7f8 fe94 	bl	8000638 <__aeabi_dmul>
 8007910:	2200      	movs	r2, #0
 8007912:	2300      	movs	r3, #0
 8007914:	4606      	mov	r6, r0
 8007916:	460f      	mov	r7, r1
 8007918:	f7f9 f8f6 	bl	8000b08 <__aeabi_dcmpeq>
 800791c:	2800      	cmp	r0, #0
 800791e:	d09a      	beq.n	8007856 <_dtoa_r+0x616>
 8007920:	e7cb      	b.n	80078ba <_dtoa_r+0x67a>
 8007922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007924:	2a00      	cmp	r2, #0
 8007926:	f000 808b 	beq.w	8007a40 <_dtoa_r+0x800>
 800792a:	9a06      	ldr	r2, [sp, #24]
 800792c:	2a01      	cmp	r2, #1
 800792e:	dc6e      	bgt.n	8007a0e <_dtoa_r+0x7ce>
 8007930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007932:	2a00      	cmp	r2, #0
 8007934:	d067      	beq.n	8007a06 <_dtoa_r+0x7c6>
 8007936:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800793a:	9f07      	ldr	r7, [sp, #28]
 800793c:	9d05      	ldr	r5, [sp, #20]
 800793e:	9a05      	ldr	r2, [sp, #20]
 8007940:	2101      	movs	r1, #1
 8007942:	441a      	add	r2, r3
 8007944:	4620      	mov	r0, r4
 8007946:	9205      	str	r2, [sp, #20]
 8007948:	4498      	add	r8, r3
 800794a:	f000 fb26 	bl	8007f9a <__i2b>
 800794e:	4606      	mov	r6, r0
 8007950:	2d00      	cmp	r5, #0
 8007952:	dd0c      	ble.n	800796e <_dtoa_r+0x72e>
 8007954:	f1b8 0f00 	cmp.w	r8, #0
 8007958:	dd09      	ble.n	800796e <_dtoa_r+0x72e>
 800795a:	4545      	cmp	r5, r8
 800795c:	9a05      	ldr	r2, [sp, #20]
 800795e:	462b      	mov	r3, r5
 8007960:	bfa8      	it	ge
 8007962:	4643      	movge	r3, r8
 8007964:	1ad2      	subs	r2, r2, r3
 8007966:	9205      	str	r2, [sp, #20]
 8007968:	1aed      	subs	r5, r5, r3
 800796a:	eba8 0803 	sub.w	r8, r8, r3
 800796e:	9b07      	ldr	r3, [sp, #28]
 8007970:	b1eb      	cbz	r3, 80079ae <_dtoa_r+0x76e>
 8007972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007974:	2b00      	cmp	r3, #0
 8007976:	d067      	beq.n	8007a48 <_dtoa_r+0x808>
 8007978:	b18f      	cbz	r7, 800799e <_dtoa_r+0x75e>
 800797a:	4631      	mov	r1, r6
 800797c:	463a      	mov	r2, r7
 800797e:	4620      	mov	r0, r4
 8007980:	f000 fbaa 	bl	80080d8 <__pow5mult>
 8007984:	9a04      	ldr	r2, [sp, #16]
 8007986:	4601      	mov	r1, r0
 8007988:	4606      	mov	r6, r0
 800798a:	4620      	mov	r0, r4
 800798c:	f000 fb0e 	bl	8007fac <__multiply>
 8007990:	9904      	ldr	r1, [sp, #16]
 8007992:	9008      	str	r0, [sp, #32]
 8007994:	4620      	mov	r0, r4
 8007996:	f000 fa60 	bl	8007e5a <_Bfree>
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	9304      	str	r3, [sp, #16]
 800799e:	9b07      	ldr	r3, [sp, #28]
 80079a0:	1bda      	subs	r2, r3, r7
 80079a2:	d004      	beq.n	80079ae <_dtoa_r+0x76e>
 80079a4:	9904      	ldr	r1, [sp, #16]
 80079a6:	4620      	mov	r0, r4
 80079a8:	f000 fb96 	bl	80080d8 <__pow5mult>
 80079ac:	9004      	str	r0, [sp, #16]
 80079ae:	2101      	movs	r1, #1
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 faf2 	bl	8007f9a <__i2b>
 80079b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079b8:	4607      	mov	r7, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 81d0 	beq.w	8007d60 <_dtoa_r+0xb20>
 80079c0:	461a      	mov	r2, r3
 80079c2:	4601      	mov	r1, r0
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fb87 	bl	80080d8 <__pow5mult>
 80079ca:	9b06      	ldr	r3, [sp, #24]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	4607      	mov	r7, r0
 80079d0:	dc40      	bgt.n	8007a54 <_dtoa_r+0x814>
 80079d2:	9b00      	ldr	r3, [sp, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d139      	bne.n	8007a4c <_dtoa_r+0x80c>
 80079d8:	9b01      	ldr	r3, [sp, #4]
 80079da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d136      	bne.n	8007a50 <_dtoa_r+0x810>
 80079e2:	9b01      	ldr	r3, [sp, #4]
 80079e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079e8:	0d1b      	lsrs	r3, r3, #20
 80079ea:	051b      	lsls	r3, r3, #20
 80079ec:	b12b      	cbz	r3, 80079fa <_dtoa_r+0x7ba>
 80079ee:	9b05      	ldr	r3, [sp, #20]
 80079f0:	3301      	adds	r3, #1
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	f108 0801 	add.w	r8, r8, #1
 80079f8:	2301      	movs	r3, #1
 80079fa:	9307      	str	r3, [sp, #28]
 80079fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d12a      	bne.n	8007a58 <_dtoa_r+0x818>
 8007a02:	2001      	movs	r0, #1
 8007a04:	e030      	b.n	8007a68 <_dtoa_r+0x828>
 8007a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a0c:	e795      	b.n	800793a <_dtoa_r+0x6fa>
 8007a0e:	9b07      	ldr	r3, [sp, #28]
 8007a10:	f109 37ff 	add.w	r7, r9, #4294967295
 8007a14:	42bb      	cmp	r3, r7
 8007a16:	bfbf      	itttt	lt
 8007a18:	9b07      	ldrlt	r3, [sp, #28]
 8007a1a:	9707      	strlt	r7, [sp, #28]
 8007a1c:	1afa      	sublt	r2, r7, r3
 8007a1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007a20:	bfbb      	ittet	lt
 8007a22:	189b      	addlt	r3, r3, r2
 8007a24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007a26:	1bdf      	subge	r7, r3, r7
 8007a28:	2700      	movlt	r7, #0
 8007a2a:	f1b9 0f00 	cmp.w	r9, #0
 8007a2e:	bfb5      	itete	lt
 8007a30:	9b05      	ldrlt	r3, [sp, #20]
 8007a32:	9d05      	ldrge	r5, [sp, #20]
 8007a34:	eba3 0509 	sublt.w	r5, r3, r9
 8007a38:	464b      	movge	r3, r9
 8007a3a:	bfb8      	it	lt
 8007a3c:	2300      	movlt	r3, #0
 8007a3e:	e77e      	b.n	800793e <_dtoa_r+0x6fe>
 8007a40:	9f07      	ldr	r7, [sp, #28]
 8007a42:	9d05      	ldr	r5, [sp, #20]
 8007a44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007a46:	e783      	b.n	8007950 <_dtoa_r+0x710>
 8007a48:	9a07      	ldr	r2, [sp, #28]
 8007a4a:	e7ab      	b.n	80079a4 <_dtoa_r+0x764>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e7d4      	b.n	80079fa <_dtoa_r+0x7ba>
 8007a50:	9b00      	ldr	r3, [sp, #0]
 8007a52:	e7d2      	b.n	80079fa <_dtoa_r+0x7ba>
 8007a54:	2300      	movs	r3, #0
 8007a56:	9307      	str	r3, [sp, #28]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007a5e:	6918      	ldr	r0, [r3, #16]
 8007a60:	f000 fa4d 	bl	8007efe <__hi0bits>
 8007a64:	f1c0 0020 	rsb	r0, r0, #32
 8007a68:	4440      	add	r0, r8
 8007a6a:	f010 001f 	ands.w	r0, r0, #31
 8007a6e:	d047      	beq.n	8007b00 <_dtoa_r+0x8c0>
 8007a70:	f1c0 0320 	rsb	r3, r0, #32
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	dd3b      	ble.n	8007af0 <_dtoa_r+0x8b0>
 8007a78:	9b05      	ldr	r3, [sp, #20]
 8007a7a:	f1c0 001c 	rsb	r0, r0, #28
 8007a7e:	4403      	add	r3, r0
 8007a80:	9305      	str	r3, [sp, #20]
 8007a82:	4405      	add	r5, r0
 8007a84:	4480      	add	r8, r0
 8007a86:	9b05      	ldr	r3, [sp, #20]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dd05      	ble.n	8007a98 <_dtoa_r+0x858>
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	9904      	ldr	r1, [sp, #16]
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 fb6f 	bl	8008174 <__lshift>
 8007a96:	9004      	str	r0, [sp, #16]
 8007a98:	f1b8 0f00 	cmp.w	r8, #0
 8007a9c:	dd05      	ble.n	8007aaa <_dtoa_r+0x86a>
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 fb66 	bl	8008174 <__lshift>
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aac:	b353      	cbz	r3, 8007b04 <_dtoa_r+0x8c4>
 8007aae:	4639      	mov	r1, r7
 8007ab0:	9804      	ldr	r0, [sp, #16]
 8007ab2:	f000 fbb3 	bl	800821c <__mcmp>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	da24      	bge.n	8007b04 <_dtoa_r+0x8c4>
 8007aba:	2300      	movs	r3, #0
 8007abc:	220a      	movs	r2, #10
 8007abe:	9904      	ldr	r1, [sp, #16]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 f9e1 	bl	8007e88 <__multadd>
 8007ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac8:	9004      	str	r0, [sp, #16]
 8007aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 814d 	beq.w	8007d6e <_dtoa_r+0xb2e>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	220a      	movs	r2, #10
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 f9d4 	bl	8007e88 <__multadd>
 8007ae0:	9b02      	ldr	r3, [sp, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	dc4f      	bgt.n	8007b88 <_dtoa_r+0x948>
 8007ae8:	9b06      	ldr	r3, [sp, #24]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	dd4c      	ble.n	8007b88 <_dtoa_r+0x948>
 8007aee:	e011      	b.n	8007b14 <_dtoa_r+0x8d4>
 8007af0:	d0c9      	beq.n	8007a86 <_dtoa_r+0x846>
 8007af2:	9a05      	ldr	r2, [sp, #20]
 8007af4:	331c      	adds	r3, #28
 8007af6:	441a      	add	r2, r3
 8007af8:	9205      	str	r2, [sp, #20]
 8007afa:	441d      	add	r5, r3
 8007afc:	4498      	add	r8, r3
 8007afe:	e7c2      	b.n	8007a86 <_dtoa_r+0x846>
 8007b00:	4603      	mov	r3, r0
 8007b02:	e7f6      	b.n	8007af2 <_dtoa_r+0x8b2>
 8007b04:	f1b9 0f00 	cmp.w	r9, #0
 8007b08:	dc38      	bgt.n	8007b7c <_dtoa_r+0x93c>
 8007b0a:	9b06      	ldr	r3, [sp, #24]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	dd35      	ble.n	8007b7c <_dtoa_r+0x93c>
 8007b10:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b14:	9b02      	ldr	r3, [sp, #8]
 8007b16:	b963      	cbnz	r3, 8007b32 <_dtoa_r+0x8f2>
 8007b18:	4639      	mov	r1, r7
 8007b1a:	2205      	movs	r2, #5
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 f9b3 	bl	8007e88 <__multadd>
 8007b22:	4601      	mov	r1, r0
 8007b24:	4607      	mov	r7, r0
 8007b26:	9804      	ldr	r0, [sp, #16]
 8007b28:	f000 fb78 	bl	800821c <__mcmp>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	f73f adcc 	bgt.w	80076ca <_dtoa_r+0x48a>
 8007b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b34:	465d      	mov	r5, fp
 8007b36:	ea6f 0a03 	mvn.w	sl, r3
 8007b3a:	f04f 0900 	mov.w	r9, #0
 8007b3e:	4639      	mov	r1, r7
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 f98a 	bl	8007e5a <_Bfree>
 8007b46:	2e00      	cmp	r6, #0
 8007b48:	f43f aeb7 	beq.w	80078ba <_dtoa_r+0x67a>
 8007b4c:	f1b9 0f00 	cmp.w	r9, #0
 8007b50:	d005      	beq.n	8007b5e <_dtoa_r+0x91e>
 8007b52:	45b1      	cmp	r9, r6
 8007b54:	d003      	beq.n	8007b5e <_dtoa_r+0x91e>
 8007b56:	4649      	mov	r1, r9
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 f97e 	bl	8007e5a <_Bfree>
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 f97a 	bl	8007e5a <_Bfree>
 8007b66:	e6a8      	b.n	80078ba <_dtoa_r+0x67a>
 8007b68:	2700      	movs	r7, #0
 8007b6a:	463e      	mov	r6, r7
 8007b6c:	e7e1      	b.n	8007b32 <_dtoa_r+0x8f2>
 8007b6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007b72:	463e      	mov	r6, r7
 8007b74:	e5a9      	b.n	80076ca <_dtoa_r+0x48a>
 8007b76:	bf00      	nop
 8007b78:	40240000 	.word	0x40240000
 8007b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80fa 	beq.w	8007d7c <_dtoa_r+0xb3c>
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	dd05      	ble.n	8007b98 <_dtoa_r+0x958>
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	462a      	mov	r2, r5
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 faef 	bl	8008174 <__lshift>
 8007b96:	4606      	mov	r6, r0
 8007b98:	9b07      	ldr	r3, [sp, #28]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d04c      	beq.n	8007c38 <_dtoa_r+0x9f8>
 8007b9e:	6871      	ldr	r1, [r6, #4]
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 f926 	bl	8007df2 <_Balloc>
 8007ba6:	6932      	ldr	r2, [r6, #16]
 8007ba8:	3202      	adds	r2, #2
 8007baa:	4605      	mov	r5, r0
 8007bac:	0092      	lsls	r2, r2, #2
 8007bae:	f106 010c 	add.w	r1, r6, #12
 8007bb2:	300c      	adds	r0, #12
 8007bb4:	f000 f912 	bl	8007ddc <memcpy>
 8007bb8:	2201      	movs	r2, #1
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 fad9 	bl	8008174 <__lshift>
 8007bc2:	9b00      	ldr	r3, [sp, #0]
 8007bc4:	f8cd b014 	str.w	fp, [sp, #20]
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	46b1      	mov	r9, r6
 8007bce:	9307      	str	r3, [sp, #28]
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	9804      	ldr	r0, [sp, #16]
 8007bd6:	f7ff faa7 	bl	8007128 <quorem>
 8007bda:	4649      	mov	r1, r9
 8007bdc:	4605      	mov	r5, r0
 8007bde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007be2:	9804      	ldr	r0, [sp, #16]
 8007be4:	f000 fb1a 	bl	800821c <__mcmp>
 8007be8:	4632      	mov	r2, r6
 8007bea:	9000      	str	r0, [sp, #0]
 8007bec:	4639      	mov	r1, r7
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 fb2e 	bl	8008250 <__mdiff>
 8007bf4:	68c3      	ldr	r3, [r0, #12]
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	bb03      	cbnz	r3, 8007c3c <_dtoa_r+0x9fc>
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	9008      	str	r0, [sp, #32]
 8007bfe:	9804      	ldr	r0, [sp, #16]
 8007c00:	f000 fb0c 	bl	800821c <__mcmp>
 8007c04:	9a08      	ldr	r2, [sp, #32]
 8007c06:	4603      	mov	r3, r0
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	9308      	str	r3, [sp, #32]
 8007c0e:	f000 f924 	bl	8007e5a <_Bfree>
 8007c12:	9b08      	ldr	r3, [sp, #32]
 8007c14:	b9a3      	cbnz	r3, 8007c40 <_dtoa_r+0xa00>
 8007c16:	9a06      	ldr	r2, [sp, #24]
 8007c18:	b992      	cbnz	r2, 8007c40 <_dtoa_r+0xa00>
 8007c1a:	9a07      	ldr	r2, [sp, #28]
 8007c1c:	b982      	cbnz	r2, 8007c40 <_dtoa_r+0xa00>
 8007c1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c22:	d029      	beq.n	8007c78 <_dtoa_r+0xa38>
 8007c24:	9b00      	ldr	r3, [sp, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	dd01      	ble.n	8007c2e <_dtoa_r+0x9ee>
 8007c2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007c2e:	9b05      	ldr	r3, [sp, #20]
 8007c30:	1c5d      	adds	r5, r3, #1
 8007c32:	f883 8000 	strb.w	r8, [r3]
 8007c36:	e782      	b.n	8007b3e <_dtoa_r+0x8fe>
 8007c38:	4630      	mov	r0, r6
 8007c3a:	e7c2      	b.n	8007bc2 <_dtoa_r+0x982>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e7e3      	b.n	8007c08 <_dtoa_r+0x9c8>
 8007c40:	9a00      	ldr	r2, [sp, #0]
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	db04      	blt.n	8007c50 <_dtoa_r+0xa10>
 8007c46:	d125      	bne.n	8007c94 <_dtoa_r+0xa54>
 8007c48:	9a06      	ldr	r2, [sp, #24]
 8007c4a:	bb1a      	cbnz	r2, 8007c94 <_dtoa_r+0xa54>
 8007c4c:	9a07      	ldr	r2, [sp, #28]
 8007c4e:	bb0a      	cbnz	r2, 8007c94 <_dtoa_r+0xa54>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	ddec      	ble.n	8007c2e <_dtoa_r+0x9ee>
 8007c54:	2201      	movs	r2, #1
 8007c56:	9904      	ldr	r1, [sp, #16]
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f000 fa8b 	bl	8008174 <__lshift>
 8007c5e:	4639      	mov	r1, r7
 8007c60:	9004      	str	r0, [sp, #16]
 8007c62:	f000 fadb 	bl	800821c <__mcmp>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	dc03      	bgt.n	8007c72 <_dtoa_r+0xa32>
 8007c6a:	d1e0      	bne.n	8007c2e <_dtoa_r+0x9ee>
 8007c6c:	f018 0f01 	tst.w	r8, #1
 8007c70:	d0dd      	beq.n	8007c2e <_dtoa_r+0x9ee>
 8007c72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c76:	d1d8      	bne.n	8007c2a <_dtoa_r+0x9ea>
 8007c78:	9b05      	ldr	r3, [sp, #20]
 8007c7a:	9a05      	ldr	r2, [sp, #20]
 8007c7c:	1c5d      	adds	r5, r3, #1
 8007c7e:	2339      	movs	r3, #57	; 0x39
 8007c80:	7013      	strb	r3, [r2, #0]
 8007c82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c86:	2b39      	cmp	r3, #57	; 0x39
 8007c88:	f105 32ff 	add.w	r2, r5, #4294967295
 8007c8c:	d04f      	beq.n	8007d2e <_dtoa_r+0xaee>
 8007c8e:	3301      	adds	r3, #1
 8007c90:	7013      	strb	r3, [r2, #0]
 8007c92:	e754      	b.n	8007b3e <_dtoa_r+0x8fe>
 8007c94:	9a05      	ldr	r2, [sp, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f102 0501 	add.w	r5, r2, #1
 8007c9c:	dd06      	ble.n	8007cac <_dtoa_r+0xa6c>
 8007c9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007ca2:	d0e9      	beq.n	8007c78 <_dtoa_r+0xa38>
 8007ca4:	f108 0801 	add.w	r8, r8, #1
 8007ca8:	9b05      	ldr	r3, [sp, #20]
 8007caa:	e7c2      	b.n	8007c32 <_dtoa_r+0x9f2>
 8007cac:	9a02      	ldr	r2, [sp, #8]
 8007cae:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007cb2:	eba5 030b 	sub.w	r3, r5, fp
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d021      	beq.n	8007cfe <_dtoa_r+0xabe>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	220a      	movs	r2, #10
 8007cbe:	9904      	ldr	r1, [sp, #16]
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 f8e1 	bl	8007e88 <__multadd>
 8007cc6:	45b1      	cmp	r9, r6
 8007cc8:	9004      	str	r0, [sp, #16]
 8007cca:	f04f 0300 	mov.w	r3, #0
 8007cce:	f04f 020a 	mov.w	r2, #10
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	d105      	bne.n	8007ce4 <_dtoa_r+0xaa4>
 8007cd8:	f000 f8d6 	bl	8007e88 <__multadd>
 8007cdc:	4681      	mov	r9, r0
 8007cde:	4606      	mov	r6, r0
 8007ce0:	9505      	str	r5, [sp, #20]
 8007ce2:	e776      	b.n	8007bd2 <_dtoa_r+0x992>
 8007ce4:	f000 f8d0 	bl	8007e88 <__multadd>
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4681      	mov	r9, r0
 8007cec:	2300      	movs	r3, #0
 8007cee:	220a      	movs	r2, #10
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 f8c9 	bl	8007e88 <__multadd>
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	e7f2      	b.n	8007ce0 <_dtoa_r+0xaa0>
 8007cfa:	f04f 0900 	mov.w	r9, #0
 8007cfe:	2201      	movs	r2, #1
 8007d00:	9904      	ldr	r1, [sp, #16]
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 fa36 	bl	8008174 <__lshift>
 8007d08:	4639      	mov	r1, r7
 8007d0a:	9004      	str	r0, [sp, #16]
 8007d0c:	f000 fa86 	bl	800821c <__mcmp>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	dcb6      	bgt.n	8007c82 <_dtoa_r+0xa42>
 8007d14:	d102      	bne.n	8007d1c <_dtoa_r+0xadc>
 8007d16:	f018 0f01 	tst.w	r8, #1
 8007d1a:	d1b2      	bne.n	8007c82 <_dtoa_r+0xa42>
 8007d1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d20:	2b30      	cmp	r3, #48	; 0x30
 8007d22:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d26:	f47f af0a 	bne.w	8007b3e <_dtoa_r+0x8fe>
 8007d2a:	4615      	mov	r5, r2
 8007d2c:	e7f6      	b.n	8007d1c <_dtoa_r+0xadc>
 8007d2e:	4593      	cmp	fp, r2
 8007d30:	d105      	bne.n	8007d3e <_dtoa_r+0xafe>
 8007d32:	2331      	movs	r3, #49	; 0x31
 8007d34:	f10a 0a01 	add.w	sl, sl, #1
 8007d38:	f88b 3000 	strb.w	r3, [fp]
 8007d3c:	e6ff      	b.n	8007b3e <_dtoa_r+0x8fe>
 8007d3e:	4615      	mov	r5, r2
 8007d40:	e79f      	b.n	8007c82 <_dtoa_r+0xa42>
 8007d42:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007da8 <_dtoa_r+0xb68>
 8007d46:	e007      	b.n	8007d58 <_dtoa_r+0xb18>
 8007d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007dac <_dtoa_r+0xb6c>
 8007d4e:	b11b      	cbz	r3, 8007d58 <_dtoa_r+0xb18>
 8007d50:	f10b 0308 	add.w	r3, fp, #8
 8007d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	4658      	mov	r0, fp
 8007d5a:	b017      	add	sp, #92	; 0x5c
 8007d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d60:	9b06      	ldr	r3, [sp, #24]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	f77f ae35 	ble.w	80079d2 <_dtoa_r+0x792>
 8007d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d6a:	9307      	str	r3, [sp, #28]
 8007d6c:	e649      	b.n	8007a02 <_dtoa_r+0x7c2>
 8007d6e:	9b02      	ldr	r3, [sp, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	dc03      	bgt.n	8007d7c <_dtoa_r+0xb3c>
 8007d74:	9b06      	ldr	r3, [sp, #24]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	f73f aecc 	bgt.w	8007b14 <_dtoa_r+0x8d4>
 8007d7c:	465d      	mov	r5, fp
 8007d7e:	4639      	mov	r1, r7
 8007d80:	9804      	ldr	r0, [sp, #16]
 8007d82:	f7ff f9d1 	bl	8007128 <quorem>
 8007d86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d8a:	f805 8b01 	strb.w	r8, [r5], #1
 8007d8e:	9a02      	ldr	r2, [sp, #8]
 8007d90:	eba5 030b 	sub.w	r3, r5, fp
 8007d94:	429a      	cmp	r2, r3
 8007d96:	ddb0      	ble.n	8007cfa <_dtoa_r+0xaba>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	220a      	movs	r2, #10
 8007d9c:	9904      	ldr	r1, [sp, #16]
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 f872 	bl	8007e88 <__multadd>
 8007da4:	9004      	str	r0, [sp, #16]
 8007da6:	e7ea      	b.n	8007d7e <_dtoa_r+0xb3e>
 8007da8:	0800a044 	.word	0x0800a044
 8007dac:	0800a068 	.word	0x0800a068

08007db0 <_localeconv_r>:
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <_localeconv_r+0x14>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6a18      	ldr	r0, [r3, #32]
 8007db6:	4b04      	ldr	r3, [pc, #16]	; (8007dc8 <_localeconv_r+0x18>)
 8007db8:	2800      	cmp	r0, #0
 8007dba:	bf08      	it	eq
 8007dbc:	4618      	moveq	r0, r3
 8007dbe:	30f0      	adds	r0, #240	; 0xf0
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000018 	.word	0x20000018
 8007dc8:	2000007c 	.word	0x2000007c

08007dcc <malloc>:
 8007dcc:	4b02      	ldr	r3, [pc, #8]	; (8007dd8 <malloc+0xc>)
 8007dce:	4601      	mov	r1, r0
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	f000 bb45 	b.w	8008460 <_malloc_r>
 8007dd6:	bf00      	nop
 8007dd8:	20000018 	.word	0x20000018

08007ddc <memcpy>:
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	1e43      	subs	r3, r0, #1
 8007de0:	440a      	add	r2, r1
 8007de2:	4291      	cmp	r1, r2
 8007de4:	d100      	bne.n	8007de8 <memcpy+0xc>
 8007de6:	bd10      	pop	{r4, pc}
 8007de8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007df0:	e7f7      	b.n	8007de2 <memcpy+0x6>

08007df2 <_Balloc>:
 8007df2:	b570      	push	{r4, r5, r6, lr}
 8007df4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007df6:	4604      	mov	r4, r0
 8007df8:	460e      	mov	r6, r1
 8007dfa:	b93d      	cbnz	r5, 8007e0c <_Balloc+0x1a>
 8007dfc:	2010      	movs	r0, #16
 8007dfe:	f7ff ffe5 	bl	8007dcc <malloc>
 8007e02:	6260      	str	r0, [r4, #36]	; 0x24
 8007e04:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e08:	6005      	str	r5, [r0, #0]
 8007e0a:	60c5      	str	r5, [r0, #12]
 8007e0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007e0e:	68eb      	ldr	r3, [r5, #12]
 8007e10:	b183      	cbz	r3, 8007e34 <_Balloc+0x42>
 8007e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007e1a:	b9b8      	cbnz	r0, 8007e4c <_Balloc+0x5a>
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	fa01 f506 	lsl.w	r5, r1, r6
 8007e22:	1d6a      	adds	r2, r5, #5
 8007e24:	0092      	lsls	r2, r2, #2
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 fabe 	bl	80083a8 <_calloc_r>
 8007e2c:	b160      	cbz	r0, 8007e48 <_Balloc+0x56>
 8007e2e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007e32:	e00e      	b.n	8007e52 <_Balloc+0x60>
 8007e34:	2221      	movs	r2, #33	; 0x21
 8007e36:	2104      	movs	r1, #4
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 fab5 	bl	80083a8 <_calloc_r>
 8007e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e40:	60e8      	str	r0, [r5, #12]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e4      	bne.n	8007e12 <_Balloc+0x20>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	6802      	ldr	r2, [r0, #0]
 8007e4e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007e52:	2300      	movs	r3, #0
 8007e54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e58:	e7f7      	b.n	8007e4a <_Balloc+0x58>

08007e5a <_Bfree>:
 8007e5a:	b570      	push	{r4, r5, r6, lr}
 8007e5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e5e:	4606      	mov	r6, r0
 8007e60:	460d      	mov	r5, r1
 8007e62:	b93c      	cbnz	r4, 8007e74 <_Bfree+0x1a>
 8007e64:	2010      	movs	r0, #16
 8007e66:	f7ff ffb1 	bl	8007dcc <malloc>
 8007e6a:	6270      	str	r0, [r6, #36]	; 0x24
 8007e6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e70:	6004      	str	r4, [r0, #0]
 8007e72:	60c4      	str	r4, [r0, #12]
 8007e74:	b13d      	cbz	r5, 8007e86 <_Bfree+0x2c>
 8007e76:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e78:	686a      	ldr	r2, [r5, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e80:	6029      	str	r1, [r5, #0]
 8007e82:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007e86:	bd70      	pop	{r4, r5, r6, pc}

08007e88 <__multadd>:
 8007e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8c:	690d      	ldr	r5, [r1, #16]
 8007e8e:	461f      	mov	r7, r3
 8007e90:	4606      	mov	r6, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	f101 0c14 	add.w	ip, r1, #20
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f8dc 0000 	ldr.w	r0, [ip]
 8007e9e:	b281      	uxth	r1, r0
 8007ea0:	fb02 7101 	mla	r1, r2, r1, r7
 8007ea4:	0c0f      	lsrs	r7, r1, #16
 8007ea6:	0c00      	lsrs	r0, r0, #16
 8007ea8:	fb02 7000 	mla	r0, r2, r0, r7
 8007eac:	b289      	uxth	r1, r1
 8007eae:	3301      	adds	r3, #1
 8007eb0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007eb4:	429d      	cmp	r5, r3
 8007eb6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007eba:	f84c 1b04 	str.w	r1, [ip], #4
 8007ebe:	dcec      	bgt.n	8007e9a <__multadd+0x12>
 8007ec0:	b1d7      	cbz	r7, 8007ef8 <__multadd+0x70>
 8007ec2:	68a3      	ldr	r3, [r4, #8]
 8007ec4:	42ab      	cmp	r3, r5
 8007ec6:	dc12      	bgt.n	8007eee <__multadd+0x66>
 8007ec8:	6861      	ldr	r1, [r4, #4]
 8007eca:	4630      	mov	r0, r6
 8007ecc:	3101      	adds	r1, #1
 8007ece:	f7ff ff90 	bl	8007df2 <_Balloc>
 8007ed2:	6922      	ldr	r2, [r4, #16]
 8007ed4:	3202      	adds	r2, #2
 8007ed6:	f104 010c 	add.w	r1, r4, #12
 8007eda:	4680      	mov	r8, r0
 8007edc:	0092      	lsls	r2, r2, #2
 8007ede:	300c      	adds	r0, #12
 8007ee0:	f7ff ff7c 	bl	8007ddc <memcpy>
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f7ff ffb7 	bl	8007e5a <_Bfree>
 8007eec:	4644      	mov	r4, r8
 8007eee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ef2:	3501      	adds	r5, #1
 8007ef4:	615f      	str	r7, [r3, #20]
 8007ef6:	6125      	str	r5, [r4, #16]
 8007ef8:	4620      	mov	r0, r4
 8007efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007efe <__hi0bits>:
 8007efe:	0c02      	lsrs	r2, r0, #16
 8007f00:	0412      	lsls	r2, r2, #16
 8007f02:	4603      	mov	r3, r0
 8007f04:	b9b2      	cbnz	r2, 8007f34 <__hi0bits+0x36>
 8007f06:	0403      	lsls	r3, r0, #16
 8007f08:	2010      	movs	r0, #16
 8007f0a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007f0e:	bf04      	itt	eq
 8007f10:	021b      	lsleq	r3, r3, #8
 8007f12:	3008      	addeq	r0, #8
 8007f14:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007f18:	bf04      	itt	eq
 8007f1a:	011b      	lsleq	r3, r3, #4
 8007f1c:	3004      	addeq	r0, #4
 8007f1e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007f22:	bf04      	itt	eq
 8007f24:	009b      	lsleq	r3, r3, #2
 8007f26:	3002      	addeq	r0, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	db06      	blt.n	8007f3a <__hi0bits+0x3c>
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	d503      	bpl.n	8007f38 <__hi0bits+0x3a>
 8007f30:	3001      	adds	r0, #1
 8007f32:	4770      	bx	lr
 8007f34:	2000      	movs	r0, #0
 8007f36:	e7e8      	b.n	8007f0a <__hi0bits+0xc>
 8007f38:	2020      	movs	r0, #32
 8007f3a:	4770      	bx	lr

08007f3c <__lo0bits>:
 8007f3c:	6803      	ldr	r3, [r0, #0]
 8007f3e:	f013 0207 	ands.w	r2, r3, #7
 8007f42:	4601      	mov	r1, r0
 8007f44:	d00b      	beq.n	8007f5e <__lo0bits+0x22>
 8007f46:	07da      	lsls	r2, r3, #31
 8007f48:	d423      	bmi.n	8007f92 <__lo0bits+0x56>
 8007f4a:	0798      	lsls	r0, r3, #30
 8007f4c:	bf49      	itett	mi
 8007f4e:	085b      	lsrmi	r3, r3, #1
 8007f50:	089b      	lsrpl	r3, r3, #2
 8007f52:	2001      	movmi	r0, #1
 8007f54:	600b      	strmi	r3, [r1, #0]
 8007f56:	bf5c      	itt	pl
 8007f58:	600b      	strpl	r3, [r1, #0]
 8007f5a:	2002      	movpl	r0, #2
 8007f5c:	4770      	bx	lr
 8007f5e:	b298      	uxth	r0, r3
 8007f60:	b9a8      	cbnz	r0, 8007f8e <__lo0bits+0x52>
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	2010      	movs	r0, #16
 8007f66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007f6a:	bf04      	itt	eq
 8007f6c:	0a1b      	lsreq	r3, r3, #8
 8007f6e:	3008      	addeq	r0, #8
 8007f70:	071a      	lsls	r2, r3, #28
 8007f72:	bf04      	itt	eq
 8007f74:	091b      	lsreq	r3, r3, #4
 8007f76:	3004      	addeq	r0, #4
 8007f78:	079a      	lsls	r2, r3, #30
 8007f7a:	bf04      	itt	eq
 8007f7c:	089b      	lsreq	r3, r3, #2
 8007f7e:	3002      	addeq	r0, #2
 8007f80:	07da      	lsls	r2, r3, #31
 8007f82:	d402      	bmi.n	8007f8a <__lo0bits+0x4e>
 8007f84:	085b      	lsrs	r3, r3, #1
 8007f86:	d006      	beq.n	8007f96 <__lo0bits+0x5a>
 8007f88:	3001      	adds	r0, #1
 8007f8a:	600b      	str	r3, [r1, #0]
 8007f8c:	4770      	bx	lr
 8007f8e:	4610      	mov	r0, r2
 8007f90:	e7e9      	b.n	8007f66 <__lo0bits+0x2a>
 8007f92:	2000      	movs	r0, #0
 8007f94:	4770      	bx	lr
 8007f96:	2020      	movs	r0, #32
 8007f98:	4770      	bx	lr

08007f9a <__i2b>:
 8007f9a:	b510      	push	{r4, lr}
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	f7ff ff27 	bl	8007df2 <_Balloc>
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	6144      	str	r4, [r0, #20]
 8007fa8:	6102      	str	r2, [r0, #16]
 8007faa:	bd10      	pop	{r4, pc}

08007fac <__multiply>:
 8007fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	690a      	ldr	r2, [r1, #16]
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	bfb8      	it	lt
 8007fba:	460b      	movlt	r3, r1
 8007fbc:	4688      	mov	r8, r1
 8007fbe:	bfbc      	itt	lt
 8007fc0:	46a0      	movlt	r8, r4
 8007fc2:	461c      	movlt	r4, r3
 8007fc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fc8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007fcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fd4:	eb07 0609 	add.w	r6, r7, r9
 8007fd8:	42b3      	cmp	r3, r6
 8007fda:	bfb8      	it	lt
 8007fdc:	3101      	addlt	r1, #1
 8007fde:	f7ff ff08 	bl	8007df2 <_Balloc>
 8007fe2:	f100 0514 	add.w	r5, r0, #20
 8007fe6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007fea:	462b      	mov	r3, r5
 8007fec:	2200      	movs	r2, #0
 8007fee:	4573      	cmp	r3, lr
 8007ff0:	d316      	bcc.n	8008020 <__multiply+0x74>
 8007ff2:	f104 0214 	add.w	r2, r4, #20
 8007ff6:	f108 0114 	add.w	r1, r8, #20
 8007ffa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007ffe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	9b00      	ldr	r3, [sp, #0]
 8008006:	9201      	str	r2, [sp, #4]
 8008008:	4293      	cmp	r3, r2
 800800a:	d80c      	bhi.n	8008026 <__multiply+0x7a>
 800800c:	2e00      	cmp	r6, #0
 800800e:	dd03      	ble.n	8008018 <__multiply+0x6c>
 8008010:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008014:	2b00      	cmp	r3, #0
 8008016:	d05d      	beq.n	80080d4 <__multiply+0x128>
 8008018:	6106      	str	r6, [r0, #16]
 800801a:	b003      	add	sp, #12
 800801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008020:	f843 2b04 	str.w	r2, [r3], #4
 8008024:	e7e3      	b.n	8007fee <__multiply+0x42>
 8008026:	f8b2 b000 	ldrh.w	fp, [r2]
 800802a:	f1bb 0f00 	cmp.w	fp, #0
 800802e:	d023      	beq.n	8008078 <__multiply+0xcc>
 8008030:	4689      	mov	r9, r1
 8008032:	46ac      	mov	ip, r5
 8008034:	f04f 0800 	mov.w	r8, #0
 8008038:	f859 4b04 	ldr.w	r4, [r9], #4
 800803c:	f8dc a000 	ldr.w	sl, [ip]
 8008040:	b2a3      	uxth	r3, r4
 8008042:	fa1f fa8a 	uxth.w	sl, sl
 8008046:	fb0b a303 	mla	r3, fp, r3, sl
 800804a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800804e:	f8dc 4000 	ldr.w	r4, [ip]
 8008052:	4443      	add	r3, r8
 8008054:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008058:	fb0b 840a 	mla	r4, fp, sl, r8
 800805c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008060:	46e2      	mov	sl, ip
 8008062:	b29b      	uxth	r3, r3
 8008064:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008068:	454f      	cmp	r7, r9
 800806a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800806e:	f84a 3b04 	str.w	r3, [sl], #4
 8008072:	d82b      	bhi.n	80080cc <__multiply+0x120>
 8008074:	f8cc 8004 	str.w	r8, [ip, #4]
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800807e:	3204      	adds	r2, #4
 8008080:	f1ba 0f00 	cmp.w	sl, #0
 8008084:	d020      	beq.n	80080c8 <__multiply+0x11c>
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	4689      	mov	r9, r1
 800808a:	46a8      	mov	r8, r5
 800808c:	f04f 0b00 	mov.w	fp, #0
 8008090:	f8b9 c000 	ldrh.w	ip, [r9]
 8008094:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008098:	fb0a 440c 	mla	r4, sl, ip, r4
 800809c:	445c      	add	r4, fp
 800809e:	46c4      	mov	ip, r8
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80080a6:	f84c 3b04 	str.w	r3, [ip], #4
 80080aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80080ae:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	fb0a b303 	mla	r3, sl, r3, fp
 80080b8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80080bc:	454f      	cmp	r7, r9
 80080be:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80080c2:	d805      	bhi.n	80080d0 <__multiply+0x124>
 80080c4:	f8c8 3004 	str.w	r3, [r8, #4]
 80080c8:	3504      	adds	r5, #4
 80080ca:	e79b      	b.n	8008004 <__multiply+0x58>
 80080cc:	46d4      	mov	ip, sl
 80080ce:	e7b3      	b.n	8008038 <__multiply+0x8c>
 80080d0:	46e0      	mov	r8, ip
 80080d2:	e7dd      	b.n	8008090 <__multiply+0xe4>
 80080d4:	3e01      	subs	r6, #1
 80080d6:	e799      	b.n	800800c <__multiply+0x60>

080080d8 <__pow5mult>:
 80080d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080dc:	4615      	mov	r5, r2
 80080de:	f012 0203 	ands.w	r2, r2, #3
 80080e2:	4606      	mov	r6, r0
 80080e4:	460f      	mov	r7, r1
 80080e6:	d007      	beq.n	80080f8 <__pow5mult+0x20>
 80080e8:	3a01      	subs	r2, #1
 80080ea:	4c21      	ldr	r4, [pc, #132]	; (8008170 <__pow5mult+0x98>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080f2:	f7ff fec9 	bl	8007e88 <__multadd>
 80080f6:	4607      	mov	r7, r0
 80080f8:	10ad      	asrs	r5, r5, #2
 80080fa:	d035      	beq.n	8008168 <__pow5mult+0x90>
 80080fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080fe:	b93c      	cbnz	r4, 8008110 <__pow5mult+0x38>
 8008100:	2010      	movs	r0, #16
 8008102:	f7ff fe63 	bl	8007dcc <malloc>
 8008106:	6270      	str	r0, [r6, #36]	; 0x24
 8008108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800810c:	6004      	str	r4, [r0, #0]
 800810e:	60c4      	str	r4, [r0, #12]
 8008110:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008118:	b94c      	cbnz	r4, 800812e <__pow5mult+0x56>
 800811a:	f240 2171 	movw	r1, #625	; 0x271
 800811e:	4630      	mov	r0, r6
 8008120:	f7ff ff3b 	bl	8007f9a <__i2b>
 8008124:	2300      	movs	r3, #0
 8008126:	f8c8 0008 	str.w	r0, [r8, #8]
 800812a:	4604      	mov	r4, r0
 800812c:	6003      	str	r3, [r0, #0]
 800812e:	f04f 0800 	mov.w	r8, #0
 8008132:	07eb      	lsls	r3, r5, #31
 8008134:	d50a      	bpl.n	800814c <__pow5mult+0x74>
 8008136:	4639      	mov	r1, r7
 8008138:	4622      	mov	r2, r4
 800813a:	4630      	mov	r0, r6
 800813c:	f7ff ff36 	bl	8007fac <__multiply>
 8008140:	4639      	mov	r1, r7
 8008142:	4681      	mov	r9, r0
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff fe88 	bl	8007e5a <_Bfree>
 800814a:	464f      	mov	r7, r9
 800814c:	106d      	asrs	r5, r5, #1
 800814e:	d00b      	beq.n	8008168 <__pow5mult+0x90>
 8008150:	6820      	ldr	r0, [r4, #0]
 8008152:	b938      	cbnz	r0, 8008164 <__pow5mult+0x8c>
 8008154:	4622      	mov	r2, r4
 8008156:	4621      	mov	r1, r4
 8008158:	4630      	mov	r0, r6
 800815a:	f7ff ff27 	bl	8007fac <__multiply>
 800815e:	6020      	str	r0, [r4, #0]
 8008160:	f8c0 8000 	str.w	r8, [r0]
 8008164:	4604      	mov	r4, r0
 8008166:	e7e4      	b.n	8008132 <__pow5mult+0x5a>
 8008168:	4638      	mov	r0, r7
 800816a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816e:	bf00      	nop
 8008170:	0800a168 	.word	0x0800a168

08008174 <__lshift>:
 8008174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	460c      	mov	r4, r1
 800817a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	6849      	ldr	r1, [r1, #4]
 8008182:	eb0a 0903 	add.w	r9, sl, r3
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	4607      	mov	r7, r0
 800818a:	4616      	mov	r6, r2
 800818c:	f109 0501 	add.w	r5, r9, #1
 8008190:	42ab      	cmp	r3, r5
 8008192:	db32      	blt.n	80081fa <__lshift+0x86>
 8008194:	4638      	mov	r0, r7
 8008196:	f7ff fe2c 	bl	8007df2 <_Balloc>
 800819a:	2300      	movs	r3, #0
 800819c:	4680      	mov	r8, r0
 800819e:	f100 0114 	add.w	r1, r0, #20
 80081a2:	461a      	mov	r2, r3
 80081a4:	4553      	cmp	r3, sl
 80081a6:	db2b      	blt.n	8008200 <__lshift+0x8c>
 80081a8:	6920      	ldr	r0, [r4, #16]
 80081aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081ae:	f104 0314 	add.w	r3, r4, #20
 80081b2:	f016 021f 	ands.w	r2, r6, #31
 80081b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081be:	d025      	beq.n	800820c <__lshift+0x98>
 80081c0:	f1c2 0e20 	rsb	lr, r2, #32
 80081c4:	2000      	movs	r0, #0
 80081c6:	681e      	ldr	r6, [r3, #0]
 80081c8:	468a      	mov	sl, r1
 80081ca:	4096      	lsls	r6, r2
 80081cc:	4330      	orrs	r0, r6
 80081ce:	f84a 0b04 	str.w	r0, [sl], #4
 80081d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80081d6:	459c      	cmp	ip, r3
 80081d8:	fa20 f00e 	lsr.w	r0, r0, lr
 80081dc:	d814      	bhi.n	8008208 <__lshift+0x94>
 80081de:	6048      	str	r0, [r1, #4]
 80081e0:	b108      	cbz	r0, 80081e6 <__lshift+0x72>
 80081e2:	f109 0502 	add.w	r5, r9, #2
 80081e6:	3d01      	subs	r5, #1
 80081e8:	4638      	mov	r0, r7
 80081ea:	f8c8 5010 	str.w	r5, [r8, #16]
 80081ee:	4621      	mov	r1, r4
 80081f0:	f7ff fe33 	bl	8007e5a <_Bfree>
 80081f4:	4640      	mov	r0, r8
 80081f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fa:	3101      	adds	r1, #1
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	e7c7      	b.n	8008190 <__lshift+0x1c>
 8008200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008204:	3301      	adds	r3, #1
 8008206:	e7cd      	b.n	80081a4 <__lshift+0x30>
 8008208:	4651      	mov	r1, sl
 800820a:	e7dc      	b.n	80081c6 <__lshift+0x52>
 800820c:	3904      	subs	r1, #4
 800820e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008212:	f841 2f04 	str.w	r2, [r1, #4]!
 8008216:	459c      	cmp	ip, r3
 8008218:	d8f9      	bhi.n	800820e <__lshift+0x9a>
 800821a:	e7e4      	b.n	80081e6 <__lshift+0x72>

0800821c <__mcmp>:
 800821c:	6903      	ldr	r3, [r0, #16]
 800821e:	690a      	ldr	r2, [r1, #16]
 8008220:	1a9b      	subs	r3, r3, r2
 8008222:	b530      	push	{r4, r5, lr}
 8008224:	d10c      	bne.n	8008240 <__mcmp+0x24>
 8008226:	0092      	lsls	r2, r2, #2
 8008228:	3014      	adds	r0, #20
 800822a:	3114      	adds	r1, #20
 800822c:	1884      	adds	r4, r0, r2
 800822e:	4411      	add	r1, r2
 8008230:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008238:	4295      	cmp	r5, r2
 800823a:	d003      	beq.n	8008244 <__mcmp+0x28>
 800823c:	d305      	bcc.n	800824a <__mcmp+0x2e>
 800823e:	2301      	movs	r3, #1
 8008240:	4618      	mov	r0, r3
 8008242:	bd30      	pop	{r4, r5, pc}
 8008244:	42a0      	cmp	r0, r4
 8008246:	d3f3      	bcc.n	8008230 <__mcmp+0x14>
 8008248:	e7fa      	b.n	8008240 <__mcmp+0x24>
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	e7f7      	b.n	8008240 <__mcmp+0x24>

08008250 <__mdiff>:
 8008250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008254:	460d      	mov	r5, r1
 8008256:	4607      	mov	r7, r0
 8008258:	4611      	mov	r1, r2
 800825a:	4628      	mov	r0, r5
 800825c:	4614      	mov	r4, r2
 800825e:	f7ff ffdd 	bl	800821c <__mcmp>
 8008262:	1e06      	subs	r6, r0, #0
 8008264:	d108      	bne.n	8008278 <__mdiff+0x28>
 8008266:	4631      	mov	r1, r6
 8008268:	4638      	mov	r0, r7
 800826a:	f7ff fdc2 	bl	8007df2 <_Balloc>
 800826e:	2301      	movs	r3, #1
 8008270:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008278:	bfa4      	itt	ge
 800827a:	4623      	movge	r3, r4
 800827c:	462c      	movge	r4, r5
 800827e:	4638      	mov	r0, r7
 8008280:	6861      	ldr	r1, [r4, #4]
 8008282:	bfa6      	itte	ge
 8008284:	461d      	movge	r5, r3
 8008286:	2600      	movge	r6, #0
 8008288:	2601      	movlt	r6, #1
 800828a:	f7ff fdb2 	bl	8007df2 <_Balloc>
 800828e:	692b      	ldr	r3, [r5, #16]
 8008290:	60c6      	str	r6, [r0, #12]
 8008292:	6926      	ldr	r6, [r4, #16]
 8008294:	f105 0914 	add.w	r9, r5, #20
 8008298:	f104 0214 	add.w	r2, r4, #20
 800829c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80082a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80082a4:	f100 0514 	add.w	r5, r0, #20
 80082a8:	f04f 0e00 	mov.w	lr, #0
 80082ac:	f852 ab04 	ldr.w	sl, [r2], #4
 80082b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80082b4:	fa1e f18a 	uxtah	r1, lr, sl
 80082b8:	b2a3      	uxth	r3, r4
 80082ba:	1ac9      	subs	r1, r1, r3
 80082bc:	0c23      	lsrs	r3, r4, #16
 80082be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80082c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80082c6:	b289      	uxth	r1, r1
 80082c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80082cc:	45c8      	cmp	r8, r9
 80082ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082d2:	4694      	mov	ip, r2
 80082d4:	f845 3b04 	str.w	r3, [r5], #4
 80082d8:	d8e8      	bhi.n	80082ac <__mdiff+0x5c>
 80082da:	45bc      	cmp	ip, r7
 80082dc:	d304      	bcc.n	80082e8 <__mdiff+0x98>
 80082de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80082e2:	b183      	cbz	r3, 8008306 <__mdiff+0xb6>
 80082e4:	6106      	str	r6, [r0, #16]
 80082e6:	e7c5      	b.n	8008274 <__mdiff+0x24>
 80082e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80082ec:	fa1e f381 	uxtah	r3, lr, r1
 80082f0:	141a      	asrs	r2, r3, #16
 80082f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008300:	f845 3b04 	str.w	r3, [r5], #4
 8008304:	e7e9      	b.n	80082da <__mdiff+0x8a>
 8008306:	3e01      	subs	r6, #1
 8008308:	e7e9      	b.n	80082de <__mdiff+0x8e>

0800830a <__d2b>:
 800830a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800830e:	460e      	mov	r6, r1
 8008310:	2101      	movs	r1, #1
 8008312:	ec59 8b10 	vmov	r8, r9, d0
 8008316:	4615      	mov	r5, r2
 8008318:	f7ff fd6b 	bl	8007df2 <_Balloc>
 800831c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008320:	4607      	mov	r7, r0
 8008322:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008326:	bb34      	cbnz	r4, 8008376 <__d2b+0x6c>
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	f1b8 0300 	subs.w	r3, r8, #0
 800832e:	d027      	beq.n	8008380 <__d2b+0x76>
 8008330:	a802      	add	r0, sp, #8
 8008332:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008336:	f7ff fe01 	bl	8007f3c <__lo0bits>
 800833a:	9900      	ldr	r1, [sp, #0]
 800833c:	b1f0      	cbz	r0, 800837c <__d2b+0x72>
 800833e:	9a01      	ldr	r2, [sp, #4]
 8008340:	f1c0 0320 	rsb	r3, r0, #32
 8008344:	fa02 f303 	lsl.w	r3, r2, r3
 8008348:	430b      	orrs	r3, r1
 800834a:	40c2      	lsrs	r2, r0
 800834c:	617b      	str	r3, [r7, #20]
 800834e:	9201      	str	r2, [sp, #4]
 8008350:	9b01      	ldr	r3, [sp, #4]
 8008352:	61bb      	str	r3, [r7, #24]
 8008354:	2b00      	cmp	r3, #0
 8008356:	bf14      	ite	ne
 8008358:	2102      	movne	r1, #2
 800835a:	2101      	moveq	r1, #1
 800835c:	6139      	str	r1, [r7, #16]
 800835e:	b1c4      	cbz	r4, 8008392 <__d2b+0x88>
 8008360:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008364:	4404      	add	r4, r0
 8008366:	6034      	str	r4, [r6, #0]
 8008368:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800836c:	6028      	str	r0, [r5, #0]
 800836e:	4638      	mov	r0, r7
 8008370:	b003      	add	sp, #12
 8008372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800837a:	e7d5      	b.n	8008328 <__d2b+0x1e>
 800837c:	6179      	str	r1, [r7, #20]
 800837e:	e7e7      	b.n	8008350 <__d2b+0x46>
 8008380:	a801      	add	r0, sp, #4
 8008382:	f7ff fddb 	bl	8007f3c <__lo0bits>
 8008386:	9b01      	ldr	r3, [sp, #4]
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	2101      	movs	r1, #1
 800838c:	6139      	str	r1, [r7, #16]
 800838e:	3020      	adds	r0, #32
 8008390:	e7e5      	b.n	800835e <__d2b+0x54>
 8008392:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008396:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800839a:	6030      	str	r0, [r6, #0]
 800839c:	6918      	ldr	r0, [r3, #16]
 800839e:	f7ff fdae 	bl	8007efe <__hi0bits>
 80083a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80083a6:	e7e1      	b.n	800836c <__d2b+0x62>

080083a8 <_calloc_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	fb02 f401 	mul.w	r4, r2, r1
 80083ae:	4621      	mov	r1, r4
 80083b0:	f000 f856 	bl	8008460 <_malloc_r>
 80083b4:	4605      	mov	r5, r0
 80083b6:	b118      	cbz	r0, 80083c0 <_calloc_r+0x18>
 80083b8:	4622      	mov	r2, r4
 80083ba:	2100      	movs	r1, #0
 80083bc:	f7fe fa10 	bl	80067e0 <memset>
 80083c0:	4628      	mov	r0, r5
 80083c2:	bd38      	pop	{r3, r4, r5, pc}

080083c4 <_free_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4605      	mov	r5, r0
 80083c8:	2900      	cmp	r1, #0
 80083ca:	d045      	beq.n	8008458 <_free_r+0x94>
 80083cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d0:	1f0c      	subs	r4, r1, #4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	bfb8      	it	lt
 80083d6:	18e4      	addlt	r4, r4, r3
 80083d8:	f000 fa29 	bl	800882e <__malloc_lock>
 80083dc:	4a1f      	ldr	r2, [pc, #124]	; (800845c <_free_r+0x98>)
 80083de:	6813      	ldr	r3, [r2, #0]
 80083e0:	4610      	mov	r0, r2
 80083e2:	b933      	cbnz	r3, 80083f2 <_free_r+0x2e>
 80083e4:	6063      	str	r3, [r4, #4]
 80083e6:	6014      	str	r4, [r2, #0]
 80083e8:	4628      	mov	r0, r5
 80083ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ee:	f000 ba1f 	b.w	8008830 <__malloc_unlock>
 80083f2:	42a3      	cmp	r3, r4
 80083f4:	d90c      	bls.n	8008410 <_free_r+0x4c>
 80083f6:	6821      	ldr	r1, [r4, #0]
 80083f8:	1862      	adds	r2, r4, r1
 80083fa:	4293      	cmp	r3, r2
 80083fc:	bf04      	itt	eq
 80083fe:	681a      	ldreq	r2, [r3, #0]
 8008400:	685b      	ldreq	r3, [r3, #4]
 8008402:	6063      	str	r3, [r4, #4]
 8008404:	bf04      	itt	eq
 8008406:	1852      	addeq	r2, r2, r1
 8008408:	6022      	streq	r2, [r4, #0]
 800840a:	6004      	str	r4, [r0, #0]
 800840c:	e7ec      	b.n	80083e8 <_free_r+0x24>
 800840e:	4613      	mov	r3, r2
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	b10a      	cbz	r2, 8008418 <_free_r+0x54>
 8008414:	42a2      	cmp	r2, r4
 8008416:	d9fa      	bls.n	800840e <_free_r+0x4a>
 8008418:	6819      	ldr	r1, [r3, #0]
 800841a:	1858      	adds	r0, r3, r1
 800841c:	42a0      	cmp	r0, r4
 800841e:	d10b      	bne.n	8008438 <_free_r+0x74>
 8008420:	6820      	ldr	r0, [r4, #0]
 8008422:	4401      	add	r1, r0
 8008424:	1858      	adds	r0, r3, r1
 8008426:	4282      	cmp	r2, r0
 8008428:	6019      	str	r1, [r3, #0]
 800842a:	d1dd      	bne.n	80083e8 <_free_r+0x24>
 800842c:	6810      	ldr	r0, [r2, #0]
 800842e:	6852      	ldr	r2, [r2, #4]
 8008430:	605a      	str	r2, [r3, #4]
 8008432:	4401      	add	r1, r0
 8008434:	6019      	str	r1, [r3, #0]
 8008436:	e7d7      	b.n	80083e8 <_free_r+0x24>
 8008438:	d902      	bls.n	8008440 <_free_r+0x7c>
 800843a:	230c      	movs	r3, #12
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	e7d3      	b.n	80083e8 <_free_r+0x24>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	1821      	adds	r1, r4, r0
 8008444:	428a      	cmp	r2, r1
 8008446:	bf04      	itt	eq
 8008448:	6811      	ldreq	r1, [r2, #0]
 800844a:	6852      	ldreq	r2, [r2, #4]
 800844c:	6062      	str	r2, [r4, #4]
 800844e:	bf04      	itt	eq
 8008450:	1809      	addeq	r1, r1, r0
 8008452:	6021      	streq	r1, [r4, #0]
 8008454:	605c      	str	r4, [r3, #4]
 8008456:	e7c7      	b.n	80083e8 <_free_r+0x24>
 8008458:	bd38      	pop	{r3, r4, r5, pc}
 800845a:	bf00      	nop
 800845c:	20000324 	.word	0x20000324

08008460 <_malloc_r>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	1ccd      	adds	r5, r1, #3
 8008464:	f025 0503 	bic.w	r5, r5, #3
 8008468:	3508      	adds	r5, #8
 800846a:	2d0c      	cmp	r5, #12
 800846c:	bf38      	it	cc
 800846e:	250c      	movcc	r5, #12
 8008470:	2d00      	cmp	r5, #0
 8008472:	4606      	mov	r6, r0
 8008474:	db01      	blt.n	800847a <_malloc_r+0x1a>
 8008476:	42a9      	cmp	r1, r5
 8008478:	d903      	bls.n	8008482 <_malloc_r+0x22>
 800847a:	230c      	movs	r3, #12
 800847c:	6033      	str	r3, [r6, #0]
 800847e:	2000      	movs	r0, #0
 8008480:	bd70      	pop	{r4, r5, r6, pc}
 8008482:	f000 f9d4 	bl	800882e <__malloc_lock>
 8008486:	4a21      	ldr	r2, [pc, #132]	; (800850c <_malloc_r+0xac>)
 8008488:	6814      	ldr	r4, [r2, #0]
 800848a:	4621      	mov	r1, r4
 800848c:	b991      	cbnz	r1, 80084b4 <_malloc_r+0x54>
 800848e:	4c20      	ldr	r4, [pc, #128]	; (8008510 <_malloc_r+0xb0>)
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	b91b      	cbnz	r3, 800849c <_malloc_r+0x3c>
 8008494:	4630      	mov	r0, r6
 8008496:	f000 f98f 	bl	80087b8 <_sbrk_r>
 800849a:	6020      	str	r0, [r4, #0]
 800849c:	4629      	mov	r1, r5
 800849e:	4630      	mov	r0, r6
 80084a0:	f000 f98a 	bl	80087b8 <_sbrk_r>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d124      	bne.n	80084f2 <_malloc_r+0x92>
 80084a8:	230c      	movs	r3, #12
 80084aa:	6033      	str	r3, [r6, #0]
 80084ac:	4630      	mov	r0, r6
 80084ae:	f000 f9bf 	bl	8008830 <__malloc_unlock>
 80084b2:	e7e4      	b.n	800847e <_malloc_r+0x1e>
 80084b4:	680b      	ldr	r3, [r1, #0]
 80084b6:	1b5b      	subs	r3, r3, r5
 80084b8:	d418      	bmi.n	80084ec <_malloc_r+0x8c>
 80084ba:	2b0b      	cmp	r3, #11
 80084bc:	d90f      	bls.n	80084de <_malloc_r+0x7e>
 80084be:	600b      	str	r3, [r1, #0]
 80084c0:	50cd      	str	r5, [r1, r3]
 80084c2:	18cc      	adds	r4, r1, r3
 80084c4:	4630      	mov	r0, r6
 80084c6:	f000 f9b3 	bl	8008830 <__malloc_unlock>
 80084ca:	f104 000b 	add.w	r0, r4, #11
 80084ce:	1d23      	adds	r3, r4, #4
 80084d0:	f020 0007 	bic.w	r0, r0, #7
 80084d4:	1ac3      	subs	r3, r0, r3
 80084d6:	d0d3      	beq.n	8008480 <_malloc_r+0x20>
 80084d8:	425a      	negs	r2, r3
 80084da:	50e2      	str	r2, [r4, r3]
 80084dc:	e7d0      	b.n	8008480 <_malloc_r+0x20>
 80084de:	428c      	cmp	r4, r1
 80084e0:	684b      	ldr	r3, [r1, #4]
 80084e2:	bf16      	itet	ne
 80084e4:	6063      	strne	r3, [r4, #4]
 80084e6:	6013      	streq	r3, [r2, #0]
 80084e8:	460c      	movne	r4, r1
 80084ea:	e7eb      	b.n	80084c4 <_malloc_r+0x64>
 80084ec:	460c      	mov	r4, r1
 80084ee:	6849      	ldr	r1, [r1, #4]
 80084f0:	e7cc      	b.n	800848c <_malloc_r+0x2c>
 80084f2:	1cc4      	adds	r4, r0, #3
 80084f4:	f024 0403 	bic.w	r4, r4, #3
 80084f8:	42a0      	cmp	r0, r4
 80084fa:	d005      	beq.n	8008508 <_malloc_r+0xa8>
 80084fc:	1a21      	subs	r1, r4, r0
 80084fe:	4630      	mov	r0, r6
 8008500:	f000 f95a 	bl	80087b8 <_sbrk_r>
 8008504:	3001      	adds	r0, #1
 8008506:	d0cf      	beq.n	80084a8 <_malloc_r+0x48>
 8008508:	6025      	str	r5, [r4, #0]
 800850a:	e7db      	b.n	80084c4 <_malloc_r+0x64>
 800850c:	20000324 	.word	0x20000324
 8008510:	20000328 	.word	0x20000328

08008514 <__ssputs_r>:
 8008514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008518:	688e      	ldr	r6, [r1, #8]
 800851a:	429e      	cmp	r6, r3
 800851c:	4682      	mov	sl, r0
 800851e:	460c      	mov	r4, r1
 8008520:	4690      	mov	r8, r2
 8008522:	4699      	mov	r9, r3
 8008524:	d837      	bhi.n	8008596 <__ssputs_r+0x82>
 8008526:	898a      	ldrh	r2, [r1, #12]
 8008528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800852c:	d031      	beq.n	8008592 <__ssputs_r+0x7e>
 800852e:	6825      	ldr	r5, [r4, #0]
 8008530:	6909      	ldr	r1, [r1, #16]
 8008532:	1a6f      	subs	r7, r5, r1
 8008534:	6965      	ldr	r5, [r4, #20]
 8008536:	2302      	movs	r3, #2
 8008538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800853c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008540:	f109 0301 	add.w	r3, r9, #1
 8008544:	443b      	add	r3, r7
 8008546:	429d      	cmp	r5, r3
 8008548:	bf38      	it	cc
 800854a:	461d      	movcc	r5, r3
 800854c:	0553      	lsls	r3, r2, #21
 800854e:	d530      	bpl.n	80085b2 <__ssputs_r+0x9e>
 8008550:	4629      	mov	r1, r5
 8008552:	f7ff ff85 	bl	8008460 <_malloc_r>
 8008556:	4606      	mov	r6, r0
 8008558:	b950      	cbnz	r0, 8008570 <__ssputs_r+0x5c>
 800855a:	230c      	movs	r3, #12
 800855c:	f8ca 3000 	str.w	r3, [sl]
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	f04f 30ff 	mov.w	r0, #4294967295
 800856c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008570:	463a      	mov	r2, r7
 8008572:	6921      	ldr	r1, [r4, #16]
 8008574:	f7ff fc32 	bl	8007ddc <memcpy>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800857e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008582:	81a3      	strh	r3, [r4, #12]
 8008584:	6126      	str	r6, [r4, #16]
 8008586:	6165      	str	r5, [r4, #20]
 8008588:	443e      	add	r6, r7
 800858a:	1bed      	subs	r5, r5, r7
 800858c:	6026      	str	r6, [r4, #0]
 800858e:	60a5      	str	r5, [r4, #8]
 8008590:	464e      	mov	r6, r9
 8008592:	454e      	cmp	r6, r9
 8008594:	d900      	bls.n	8008598 <__ssputs_r+0x84>
 8008596:	464e      	mov	r6, r9
 8008598:	4632      	mov	r2, r6
 800859a:	4641      	mov	r1, r8
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	f000 f92d 	bl	80087fc <memmove>
 80085a2:	68a3      	ldr	r3, [r4, #8]
 80085a4:	1b9b      	subs	r3, r3, r6
 80085a6:	60a3      	str	r3, [r4, #8]
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	441e      	add	r6, r3
 80085ac:	6026      	str	r6, [r4, #0]
 80085ae:	2000      	movs	r0, #0
 80085b0:	e7dc      	b.n	800856c <__ssputs_r+0x58>
 80085b2:	462a      	mov	r2, r5
 80085b4:	f000 f93d 	bl	8008832 <_realloc_r>
 80085b8:	4606      	mov	r6, r0
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d1e2      	bne.n	8008584 <__ssputs_r+0x70>
 80085be:	6921      	ldr	r1, [r4, #16]
 80085c0:	4650      	mov	r0, sl
 80085c2:	f7ff feff 	bl	80083c4 <_free_r>
 80085c6:	e7c8      	b.n	800855a <__ssputs_r+0x46>

080085c8 <_svfiprintf_r>:
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	461d      	mov	r5, r3
 80085ce:	898b      	ldrh	r3, [r1, #12]
 80085d0:	061f      	lsls	r7, r3, #24
 80085d2:	b09d      	sub	sp, #116	; 0x74
 80085d4:	4680      	mov	r8, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	4616      	mov	r6, r2
 80085da:	d50f      	bpl.n	80085fc <_svfiprintf_r+0x34>
 80085dc:	690b      	ldr	r3, [r1, #16]
 80085de:	b96b      	cbnz	r3, 80085fc <_svfiprintf_r+0x34>
 80085e0:	2140      	movs	r1, #64	; 0x40
 80085e2:	f7ff ff3d 	bl	8008460 <_malloc_r>
 80085e6:	6020      	str	r0, [r4, #0]
 80085e8:	6120      	str	r0, [r4, #16]
 80085ea:	b928      	cbnz	r0, 80085f8 <_svfiprintf_r+0x30>
 80085ec:	230c      	movs	r3, #12
 80085ee:	f8c8 3000 	str.w	r3, [r8]
 80085f2:	f04f 30ff 	mov.w	r0, #4294967295
 80085f6:	e0c8      	b.n	800878a <_svfiprintf_r+0x1c2>
 80085f8:	2340      	movs	r3, #64	; 0x40
 80085fa:	6163      	str	r3, [r4, #20]
 80085fc:	2300      	movs	r3, #0
 80085fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008600:	2320      	movs	r3, #32
 8008602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008606:	2330      	movs	r3, #48	; 0x30
 8008608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800860c:	9503      	str	r5, [sp, #12]
 800860e:	f04f 0b01 	mov.w	fp, #1
 8008612:	4637      	mov	r7, r6
 8008614:	463d      	mov	r5, r7
 8008616:	f815 3b01 	ldrb.w	r3, [r5], #1
 800861a:	b10b      	cbz	r3, 8008620 <_svfiprintf_r+0x58>
 800861c:	2b25      	cmp	r3, #37	; 0x25
 800861e:	d13e      	bne.n	800869e <_svfiprintf_r+0xd6>
 8008620:	ebb7 0a06 	subs.w	sl, r7, r6
 8008624:	d00b      	beq.n	800863e <_svfiprintf_r+0x76>
 8008626:	4653      	mov	r3, sl
 8008628:	4632      	mov	r2, r6
 800862a:	4621      	mov	r1, r4
 800862c:	4640      	mov	r0, r8
 800862e:	f7ff ff71 	bl	8008514 <__ssputs_r>
 8008632:	3001      	adds	r0, #1
 8008634:	f000 80a4 	beq.w	8008780 <_svfiprintf_r+0x1b8>
 8008638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863a:	4453      	add	r3, sl
 800863c:	9309      	str	r3, [sp, #36]	; 0x24
 800863e:	783b      	ldrb	r3, [r7, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 809d 	beq.w	8008780 <_svfiprintf_r+0x1b8>
 8008646:	2300      	movs	r3, #0
 8008648:	f04f 32ff 	mov.w	r2, #4294967295
 800864c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008650:	9304      	str	r3, [sp, #16]
 8008652:	9307      	str	r3, [sp, #28]
 8008654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008658:	931a      	str	r3, [sp, #104]	; 0x68
 800865a:	462f      	mov	r7, r5
 800865c:	2205      	movs	r2, #5
 800865e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008662:	4850      	ldr	r0, [pc, #320]	; (80087a4 <_svfiprintf_r+0x1dc>)
 8008664:	f7f7 fddc 	bl	8000220 <memchr>
 8008668:	9b04      	ldr	r3, [sp, #16]
 800866a:	b9d0      	cbnz	r0, 80086a2 <_svfiprintf_r+0xda>
 800866c:	06d9      	lsls	r1, r3, #27
 800866e:	bf44      	itt	mi
 8008670:	2220      	movmi	r2, #32
 8008672:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008676:	071a      	lsls	r2, r3, #28
 8008678:	bf44      	itt	mi
 800867a:	222b      	movmi	r2, #43	; 0x2b
 800867c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008680:	782a      	ldrb	r2, [r5, #0]
 8008682:	2a2a      	cmp	r2, #42	; 0x2a
 8008684:	d015      	beq.n	80086b2 <_svfiprintf_r+0xea>
 8008686:	9a07      	ldr	r2, [sp, #28]
 8008688:	462f      	mov	r7, r5
 800868a:	2000      	movs	r0, #0
 800868c:	250a      	movs	r5, #10
 800868e:	4639      	mov	r1, r7
 8008690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008694:	3b30      	subs	r3, #48	; 0x30
 8008696:	2b09      	cmp	r3, #9
 8008698:	d94d      	bls.n	8008736 <_svfiprintf_r+0x16e>
 800869a:	b1b8      	cbz	r0, 80086cc <_svfiprintf_r+0x104>
 800869c:	e00f      	b.n	80086be <_svfiprintf_r+0xf6>
 800869e:	462f      	mov	r7, r5
 80086a0:	e7b8      	b.n	8008614 <_svfiprintf_r+0x4c>
 80086a2:	4a40      	ldr	r2, [pc, #256]	; (80087a4 <_svfiprintf_r+0x1dc>)
 80086a4:	1a80      	subs	r0, r0, r2
 80086a6:	fa0b f000 	lsl.w	r0, fp, r0
 80086aa:	4318      	orrs	r0, r3
 80086ac:	9004      	str	r0, [sp, #16]
 80086ae:	463d      	mov	r5, r7
 80086b0:	e7d3      	b.n	800865a <_svfiprintf_r+0x92>
 80086b2:	9a03      	ldr	r2, [sp, #12]
 80086b4:	1d11      	adds	r1, r2, #4
 80086b6:	6812      	ldr	r2, [r2, #0]
 80086b8:	9103      	str	r1, [sp, #12]
 80086ba:	2a00      	cmp	r2, #0
 80086bc:	db01      	blt.n	80086c2 <_svfiprintf_r+0xfa>
 80086be:	9207      	str	r2, [sp, #28]
 80086c0:	e004      	b.n	80086cc <_svfiprintf_r+0x104>
 80086c2:	4252      	negs	r2, r2
 80086c4:	f043 0302 	orr.w	r3, r3, #2
 80086c8:	9207      	str	r2, [sp, #28]
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	783b      	ldrb	r3, [r7, #0]
 80086ce:	2b2e      	cmp	r3, #46	; 0x2e
 80086d0:	d10c      	bne.n	80086ec <_svfiprintf_r+0x124>
 80086d2:	787b      	ldrb	r3, [r7, #1]
 80086d4:	2b2a      	cmp	r3, #42	; 0x2a
 80086d6:	d133      	bne.n	8008740 <_svfiprintf_r+0x178>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	1d1a      	adds	r2, r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	9203      	str	r2, [sp, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bfb8      	it	lt
 80086e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80086e8:	3702      	adds	r7, #2
 80086ea:	9305      	str	r3, [sp, #20]
 80086ec:	4d2e      	ldr	r5, [pc, #184]	; (80087a8 <_svfiprintf_r+0x1e0>)
 80086ee:	7839      	ldrb	r1, [r7, #0]
 80086f0:	2203      	movs	r2, #3
 80086f2:	4628      	mov	r0, r5
 80086f4:	f7f7 fd94 	bl	8000220 <memchr>
 80086f8:	b138      	cbz	r0, 800870a <_svfiprintf_r+0x142>
 80086fa:	2340      	movs	r3, #64	; 0x40
 80086fc:	1b40      	subs	r0, r0, r5
 80086fe:	fa03 f000 	lsl.w	r0, r3, r0
 8008702:	9b04      	ldr	r3, [sp, #16]
 8008704:	4303      	orrs	r3, r0
 8008706:	3701      	adds	r7, #1
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	7839      	ldrb	r1, [r7, #0]
 800870c:	4827      	ldr	r0, [pc, #156]	; (80087ac <_svfiprintf_r+0x1e4>)
 800870e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008712:	2206      	movs	r2, #6
 8008714:	1c7e      	adds	r6, r7, #1
 8008716:	f7f7 fd83 	bl	8000220 <memchr>
 800871a:	2800      	cmp	r0, #0
 800871c:	d038      	beq.n	8008790 <_svfiprintf_r+0x1c8>
 800871e:	4b24      	ldr	r3, [pc, #144]	; (80087b0 <_svfiprintf_r+0x1e8>)
 8008720:	bb13      	cbnz	r3, 8008768 <_svfiprintf_r+0x1a0>
 8008722:	9b03      	ldr	r3, [sp, #12]
 8008724:	3307      	adds	r3, #7
 8008726:	f023 0307 	bic.w	r3, r3, #7
 800872a:	3308      	adds	r3, #8
 800872c:	9303      	str	r3, [sp, #12]
 800872e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008730:	444b      	add	r3, r9
 8008732:	9309      	str	r3, [sp, #36]	; 0x24
 8008734:	e76d      	b.n	8008612 <_svfiprintf_r+0x4a>
 8008736:	fb05 3202 	mla	r2, r5, r2, r3
 800873a:	2001      	movs	r0, #1
 800873c:	460f      	mov	r7, r1
 800873e:	e7a6      	b.n	800868e <_svfiprintf_r+0xc6>
 8008740:	2300      	movs	r3, #0
 8008742:	3701      	adds	r7, #1
 8008744:	9305      	str	r3, [sp, #20]
 8008746:	4619      	mov	r1, r3
 8008748:	250a      	movs	r5, #10
 800874a:	4638      	mov	r0, r7
 800874c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008750:	3a30      	subs	r2, #48	; 0x30
 8008752:	2a09      	cmp	r2, #9
 8008754:	d903      	bls.n	800875e <_svfiprintf_r+0x196>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0c8      	beq.n	80086ec <_svfiprintf_r+0x124>
 800875a:	9105      	str	r1, [sp, #20]
 800875c:	e7c6      	b.n	80086ec <_svfiprintf_r+0x124>
 800875e:	fb05 2101 	mla	r1, r5, r1, r2
 8008762:	2301      	movs	r3, #1
 8008764:	4607      	mov	r7, r0
 8008766:	e7f0      	b.n	800874a <_svfiprintf_r+0x182>
 8008768:	ab03      	add	r3, sp, #12
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	4622      	mov	r2, r4
 800876e:	4b11      	ldr	r3, [pc, #68]	; (80087b4 <_svfiprintf_r+0x1ec>)
 8008770:	a904      	add	r1, sp, #16
 8008772:	4640      	mov	r0, r8
 8008774:	f7fe f8d0 	bl	8006918 <_printf_float>
 8008778:	f1b0 3fff 	cmp.w	r0, #4294967295
 800877c:	4681      	mov	r9, r0
 800877e:	d1d6      	bne.n	800872e <_svfiprintf_r+0x166>
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	065b      	lsls	r3, r3, #25
 8008784:	f53f af35 	bmi.w	80085f2 <_svfiprintf_r+0x2a>
 8008788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800878a:	b01d      	add	sp, #116	; 0x74
 800878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008790:	ab03      	add	r3, sp, #12
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	4622      	mov	r2, r4
 8008796:	4b07      	ldr	r3, [pc, #28]	; (80087b4 <_svfiprintf_r+0x1ec>)
 8008798:	a904      	add	r1, sp, #16
 800879a:	4640      	mov	r0, r8
 800879c:	f7fe fb72 	bl	8006e84 <_printf_i>
 80087a0:	e7ea      	b.n	8008778 <_svfiprintf_r+0x1b0>
 80087a2:	bf00      	nop
 80087a4:	0800a174 	.word	0x0800a174
 80087a8:	0800a17a 	.word	0x0800a17a
 80087ac:	0800a17e 	.word	0x0800a17e
 80087b0:	08006919 	.word	0x08006919
 80087b4:	08008515 	.word	0x08008515

080087b8 <_sbrk_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4c06      	ldr	r4, [pc, #24]	; (80087d4 <_sbrk_r+0x1c>)
 80087bc:	2300      	movs	r3, #0
 80087be:	4605      	mov	r5, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	f7f8 ff88 	bl	80016d8 <_sbrk>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_sbrk_r+0x1a>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_sbrk_r+0x1a>
 80087d0:	602b      	str	r3, [r5, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	20002558 	.word	0x20002558

080087d8 <__ascii_mbtowc>:
 80087d8:	b082      	sub	sp, #8
 80087da:	b901      	cbnz	r1, 80087de <__ascii_mbtowc+0x6>
 80087dc:	a901      	add	r1, sp, #4
 80087de:	b142      	cbz	r2, 80087f2 <__ascii_mbtowc+0x1a>
 80087e0:	b14b      	cbz	r3, 80087f6 <__ascii_mbtowc+0x1e>
 80087e2:	7813      	ldrb	r3, [r2, #0]
 80087e4:	600b      	str	r3, [r1, #0]
 80087e6:	7812      	ldrb	r2, [r2, #0]
 80087e8:	1c10      	adds	r0, r2, #0
 80087ea:	bf18      	it	ne
 80087ec:	2001      	movne	r0, #1
 80087ee:	b002      	add	sp, #8
 80087f0:	4770      	bx	lr
 80087f2:	4610      	mov	r0, r2
 80087f4:	e7fb      	b.n	80087ee <__ascii_mbtowc+0x16>
 80087f6:	f06f 0001 	mvn.w	r0, #1
 80087fa:	e7f8      	b.n	80087ee <__ascii_mbtowc+0x16>

080087fc <memmove>:
 80087fc:	4288      	cmp	r0, r1
 80087fe:	b510      	push	{r4, lr}
 8008800:	eb01 0302 	add.w	r3, r1, r2
 8008804:	d807      	bhi.n	8008816 <memmove+0x1a>
 8008806:	1e42      	subs	r2, r0, #1
 8008808:	4299      	cmp	r1, r3
 800880a:	d00a      	beq.n	8008822 <memmove+0x26>
 800880c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008810:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008814:	e7f8      	b.n	8008808 <memmove+0xc>
 8008816:	4283      	cmp	r3, r0
 8008818:	d9f5      	bls.n	8008806 <memmove+0xa>
 800881a:	1881      	adds	r1, r0, r2
 800881c:	1ad2      	subs	r2, r2, r3
 800881e:	42d3      	cmn	r3, r2
 8008820:	d100      	bne.n	8008824 <memmove+0x28>
 8008822:	bd10      	pop	{r4, pc}
 8008824:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008828:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800882c:	e7f7      	b.n	800881e <memmove+0x22>

0800882e <__malloc_lock>:
 800882e:	4770      	bx	lr

08008830 <__malloc_unlock>:
 8008830:	4770      	bx	lr

08008832 <_realloc_r>:
 8008832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008834:	4607      	mov	r7, r0
 8008836:	4614      	mov	r4, r2
 8008838:	460e      	mov	r6, r1
 800883a:	b921      	cbnz	r1, 8008846 <_realloc_r+0x14>
 800883c:	4611      	mov	r1, r2
 800883e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008842:	f7ff be0d 	b.w	8008460 <_malloc_r>
 8008846:	b922      	cbnz	r2, 8008852 <_realloc_r+0x20>
 8008848:	f7ff fdbc 	bl	80083c4 <_free_r>
 800884c:	4625      	mov	r5, r4
 800884e:	4628      	mov	r0, r5
 8008850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008852:	f000 f821 	bl	8008898 <_malloc_usable_size_r>
 8008856:	42a0      	cmp	r0, r4
 8008858:	d20f      	bcs.n	800887a <_realloc_r+0x48>
 800885a:	4621      	mov	r1, r4
 800885c:	4638      	mov	r0, r7
 800885e:	f7ff fdff 	bl	8008460 <_malloc_r>
 8008862:	4605      	mov	r5, r0
 8008864:	2800      	cmp	r0, #0
 8008866:	d0f2      	beq.n	800884e <_realloc_r+0x1c>
 8008868:	4631      	mov	r1, r6
 800886a:	4622      	mov	r2, r4
 800886c:	f7ff fab6 	bl	8007ddc <memcpy>
 8008870:	4631      	mov	r1, r6
 8008872:	4638      	mov	r0, r7
 8008874:	f7ff fda6 	bl	80083c4 <_free_r>
 8008878:	e7e9      	b.n	800884e <_realloc_r+0x1c>
 800887a:	4635      	mov	r5, r6
 800887c:	e7e7      	b.n	800884e <_realloc_r+0x1c>

0800887e <__ascii_wctomb>:
 800887e:	b149      	cbz	r1, 8008894 <__ascii_wctomb+0x16>
 8008880:	2aff      	cmp	r2, #255	; 0xff
 8008882:	bf85      	ittet	hi
 8008884:	238a      	movhi	r3, #138	; 0x8a
 8008886:	6003      	strhi	r3, [r0, #0]
 8008888:	700a      	strbls	r2, [r1, #0]
 800888a:	f04f 30ff 	movhi.w	r0, #4294967295
 800888e:	bf98      	it	ls
 8008890:	2001      	movls	r0, #1
 8008892:	4770      	bx	lr
 8008894:	4608      	mov	r0, r1
 8008896:	4770      	bx	lr

08008898 <_malloc_usable_size_r>:
 8008898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800889c:	1f18      	subs	r0, r3, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	bfbc      	itt	lt
 80088a2:	580b      	ldrlt	r3, [r1, r0]
 80088a4:	18c0      	addlt	r0, r0, r3
 80088a6:	4770      	bx	lr

080088a8 <pow>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	ed2d 8b04 	vpush	{d8-d9}
 80088b0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008b84 <pow+0x2dc>
 80088b4:	b08d      	sub	sp, #52	; 0x34
 80088b6:	ec57 6b10 	vmov	r6, r7, d0
 80088ba:	ec55 4b11 	vmov	r4, r5, d1
 80088be:	f000 f963 	bl	8008b88 <__ieee754_pow>
 80088c2:	f999 3000 	ldrsb.w	r3, [r9]
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	3301      	adds	r3, #1
 80088ca:	eeb0 8a40 	vmov.f32	s16, s0
 80088ce:	eef0 8a60 	vmov.f32	s17, s1
 80088d2:	46c8      	mov	r8, r9
 80088d4:	d05f      	beq.n	8008996 <pow+0xee>
 80088d6:	4622      	mov	r2, r4
 80088d8:	462b      	mov	r3, r5
 80088da:	4620      	mov	r0, r4
 80088dc:	4629      	mov	r1, r5
 80088de:	f7f8 f945 	bl	8000b6c <__aeabi_dcmpun>
 80088e2:	4683      	mov	fp, r0
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d156      	bne.n	8008996 <pow+0xee>
 80088e8:	4632      	mov	r2, r6
 80088ea:	463b      	mov	r3, r7
 80088ec:	4630      	mov	r0, r6
 80088ee:	4639      	mov	r1, r7
 80088f0:	f7f8 f93c 	bl	8000b6c <__aeabi_dcmpun>
 80088f4:	9001      	str	r0, [sp, #4]
 80088f6:	b1e8      	cbz	r0, 8008934 <pow+0x8c>
 80088f8:	2200      	movs	r2, #0
 80088fa:	2300      	movs	r3, #0
 80088fc:	4620      	mov	r0, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	f7f8 f902 	bl	8000b08 <__aeabi_dcmpeq>
 8008904:	2800      	cmp	r0, #0
 8008906:	d046      	beq.n	8008996 <pow+0xee>
 8008908:	2301      	movs	r3, #1
 800890a:	9302      	str	r3, [sp, #8]
 800890c:	4b96      	ldr	r3, [pc, #600]	; (8008b68 <pow+0x2c0>)
 800890e:	9303      	str	r3, [sp, #12]
 8008910:	4b96      	ldr	r3, [pc, #600]	; (8008b6c <pow+0x2c4>)
 8008912:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008916:	2200      	movs	r2, #0
 8008918:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800891c:	9b00      	ldr	r3, [sp, #0]
 800891e:	2b02      	cmp	r3, #2
 8008920:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008924:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008928:	d033      	beq.n	8008992 <pow+0xea>
 800892a:	a802      	add	r0, sp, #8
 800892c:	f000 fefb 	bl	8009726 <matherr>
 8008930:	bb48      	cbnz	r0, 8008986 <pow+0xde>
 8008932:	e05d      	b.n	80089f0 <pow+0x148>
 8008934:	f04f 0a00 	mov.w	sl, #0
 8008938:	f04f 0b00 	mov.w	fp, #0
 800893c:	4652      	mov	r2, sl
 800893e:	465b      	mov	r3, fp
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f8 f8e0 	bl	8000b08 <__aeabi_dcmpeq>
 8008948:	ec4b ab19 	vmov	d9, sl, fp
 800894c:	2800      	cmp	r0, #0
 800894e:	d054      	beq.n	80089fa <pow+0x152>
 8008950:	4652      	mov	r2, sl
 8008952:	465b      	mov	r3, fp
 8008954:	4620      	mov	r0, r4
 8008956:	4629      	mov	r1, r5
 8008958:	f7f8 f8d6 	bl	8000b08 <__aeabi_dcmpeq>
 800895c:	4680      	mov	r8, r0
 800895e:	b318      	cbz	r0, 80089a8 <pow+0x100>
 8008960:	2301      	movs	r3, #1
 8008962:	9302      	str	r3, [sp, #8]
 8008964:	4b80      	ldr	r3, [pc, #512]	; (8008b68 <pow+0x2c0>)
 8008966:	9303      	str	r3, [sp, #12]
 8008968:	9b01      	ldr	r3, [sp, #4]
 800896a:	930a      	str	r3, [sp, #40]	; 0x28
 800896c:	9b00      	ldr	r3, [sp, #0]
 800896e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008972:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008976:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0d5      	beq.n	800892a <pow+0x82>
 800897e:	4b7b      	ldr	r3, [pc, #492]	; (8008b6c <pow+0x2c4>)
 8008980:	2200      	movs	r2, #0
 8008982:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008988:	b11b      	cbz	r3, 8008992 <pow+0xea>
 800898a:	f7fd feff 	bl	800678c <__errno>
 800898e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008990:	6003      	str	r3, [r0, #0]
 8008992:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008996:	eeb0 0a48 	vmov.f32	s0, s16
 800899a:	eef0 0a68 	vmov.f32	s1, s17
 800899e:	b00d      	add	sp, #52	; 0x34
 80089a0:	ecbd 8b04 	vpop	{d8-d9}
 80089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a8:	ec45 4b10 	vmov	d0, r4, r5
 80089ac:	f000 feb3 	bl	8009716 <finite>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0f0      	beq.n	8008996 <pow+0xee>
 80089b4:	4652      	mov	r2, sl
 80089b6:	465b      	mov	r3, fp
 80089b8:	4620      	mov	r0, r4
 80089ba:	4629      	mov	r1, r5
 80089bc:	f7f8 f8ae 	bl	8000b1c <__aeabi_dcmplt>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d0e8      	beq.n	8008996 <pow+0xee>
 80089c4:	2301      	movs	r3, #1
 80089c6:	9302      	str	r3, [sp, #8]
 80089c8:	4b67      	ldr	r3, [pc, #412]	; (8008b68 <pow+0x2c0>)
 80089ca:	9303      	str	r3, [sp, #12]
 80089cc:	f999 3000 	ldrsb.w	r3, [r9]
 80089d0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80089d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80089d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80089dc:	b913      	cbnz	r3, 80089e4 <pow+0x13c>
 80089de:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80089e2:	e7a2      	b.n	800892a <pow+0x82>
 80089e4:	4962      	ldr	r1, [pc, #392]	; (8008b70 <pow+0x2c8>)
 80089e6:	2000      	movs	r0, #0
 80089e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d19c      	bne.n	800892a <pow+0x82>
 80089f0:	f7fd fecc 	bl	800678c <__errno>
 80089f4:	2321      	movs	r3, #33	; 0x21
 80089f6:	6003      	str	r3, [r0, #0]
 80089f8:	e7c5      	b.n	8008986 <pow+0xde>
 80089fa:	eeb0 0a48 	vmov.f32	s0, s16
 80089fe:	eef0 0a68 	vmov.f32	s1, s17
 8008a02:	f000 fe88 	bl	8009716 <finite>
 8008a06:	9000      	str	r0, [sp, #0]
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	f040 8081 	bne.w	8008b10 <pow+0x268>
 8008a0e:	ec47 6b10 	vmov	d0, r6, r7
 8008a12:	f000 fe80 	bl	8009716 <finite>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d07a      	beq.n	8008b10 <pow+0x268>
 8008a1a:	ec45 4b10 	vmov	d0, r4, r5
 8008a1e:	f000 fe7a 	bl	8009716 <finite>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d074      	beq.n	8008b10 <pow+0x268>
 8008a26:	ec53 2b18 	vmov	r2, r3, d8
 8008a2a:	ee18 0a10 	vmov	r0, s16
 8008a2e:	4619      	mov	r1, r3
 8008a30:	f7f8 f89c 	bl	8000b6c <__aeabi_dcmpun>
 8008a34:	f999 9000 	ldrsb.w	r9, [r9]
 8008a38:	4b4b      	ldr	r3, [pc, #300]	; (8008b68 <pow+0x2c0>)
 8008a3a:	b1b0      	cbz	r0, 8008a6a <pow+0x1c2>
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a42:	9b00      	ldr	r3, [sp, #0]
 8008a44:	930a      	str	r3, [sp, #40]	; 0x28
 8008a46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008a4a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008a4e:	f1b9 0f00 	cmp.w	r9, #0
 8008a52:	d0c4      	beq.n	80089de <pow+0x136>
 8008a54:	4652      	mov	r2, sl
 8008a56:	465b      	mov	r3, fp
 8008a58:	4650      	mov	r0, sl
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	f7f7 ff16 	bl	800088c <__aeabi_ddiv>
 8008a60:	f1b9 0f02 	cmp.w	r9, #2
 8008a64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a68:	e7c1      	b.n	80089ee <pow+0x146>
 8008a6a:	2203      	movs	r2, #3
 8008a6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a70:	900a      	str	r0, [sp, #40]	; 0x28
 8008a72:	4629      	mov	r1, r5
 8008a74:	4620      	mov	r0, r4
 8008a76:	2200      	movs	r2, #0
 8008a78:	4b3e      	ldr	r3, [pc, #248]	; (8008b74 <pow+0x2cc>)
 8008a7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008a7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008a82:	f7f7 fdd9 	bl	8000638 <__aeabi_dmul>
 8008a86:	4604      	mov	r4, r0
 8008a88:	460d      	mov	r5, r1
 8008a8a:	f1b9 0f00 	cmp.w	r9, #0
 8008a8e:	d124      	bne.n	8008ada <pow+0x232>
 8008a90:	4b39      	ldr	r3, [pc, #228]	; (8008b78 <pow+0x2d0>)
 8008a92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4652      	mov	r2, sl
 8008a9e:	465b      	mov	r3, fp
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	f7f8 f83b 	bl	8000b1c <__aeabi_dcmplt>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d056      	beq.n	8008b58 <pow+0x2b0>
 8008aaa:	ec45 4b10 	vmov	d0, r4, r5
 8008aae:	f000 fe47 	bl	8009740 <rint>
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	462b      	mov	r3, r5
 8008ab6:	ec51 0b10 	vmov	r0, r1, d0
 8008aba:	f7f8 f825 	bl	8000b08 <__aeabi_dcmpeq>
 8008abe:	b920      	cbnz	r0, 8008aca <pow+0x222>
 8008ac0:	4b2e      	ldr	r3, [pc, #184]	; (8008b7c <pow+0x2d4>)
 8008ac2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008ac6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008aca:	f998 3000 	ldrsb.w	r3, [r8]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d142      	bne.n	8008b58 <pow+0x2b0>
 8008ad2:	f7fd fe5b 	bl	800678c <__errno>
 8008ad6:	2322      	movs	r3, #34	; 0x22
 8008ad8:	e78d      	b.n	80089f6 <pow+0x14e>
 8008ada:	4b29      	ldr	r3, [pc, #164]	; (8008b80 <pow+0x2d8>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	4652      	mov	r2, sl
 8008ae6:	465b      	mov	r3, fp
 8008ae8:	4639      	mov	r1, r7
 8008aea:	f7f8 f817 	bl	8000b1c <__aeabi_dcmplt>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d0eb      	beq.n	8008aca <pow+0x222>
 8008af2:	ec45 4b10 	vmov	d0, r4, r5
 8008af6:	f000 fe23 	bl	8009740 <rint>
 8008afa:	4622      	mov	r2, r4
 8008afc:	462b      	mov	r3, r5
 8008afe:	ec51 0b10 	vmov	r0, r1, d0
 8008b02:	f7f8 f801 	bl	8000b08 <__aeabi_dcmpeq>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d1df      	bne.n	8008aca <pow+0x222>
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	4b18      	ldr	r3, [pc, #96]	; (8008b70 <pow+0x2c8>)
 8008b0e:	e7da      	b.n	8008ac6 <pow+0x21e>
 8008b10:	2200      	movs	r2, #0
 8008b12:	2300      	movs	r3, #0
 8008b14:	ec51 0b18 	vmov	r0, r1, d8
 8008b18:	f7f7 fff6 	bl	8000b08 <__aeabi_dcmpeq>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	f43f af3a 	beq.w	8008996 <pow+0xee>
 8008b22:	ec47 6b10 	vmov	d0, r6, r7
 8008b26:	f000 fdf6 	bl	8009716 <finite>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	f43f af33 	beq.w	8008996 <pow+0xee>
 8008b30:	ec45 4b10 	vmov	d0, r4, r5
 8008b34:	f000 fdef 	bl	8009716 <finite>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	f43f af2c 	beq.w	8008996 <pow+0xee>
 8008b3e:	2304      	movs	r3, #4
 8008b40:	9302      	str	r3, [sp, #8]
 8008b42:	4b09      	ldr	r3, [pc, #36]	; (8008b68 <pow+0x2c0>)
 8008b44:	9303      	str	r3, [sp, #12]
 8008b46:	2300      	movs	r3, #0
 8008b48:	930a      	str	r3, [sp, #40]	; 0x28
 8008b4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008b4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008b52:	ed8d 9b08 	vstr	d9, [sp, #32]
 8008b56:	e7b8      	b.n	8008aca <pow+0x222>
 8008b58:	a802      	add	r0, sp, #8
 8008b5a:	f000 fde4 	bl	8009726 <matherr>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f47f af11 	bne.w	8008986 <pow+0xde>
 8008b64:	e7b5      	b.n	8008ad2 <pow+0x22a>
 8008b66:	bf00      	nop
 8008b68:	0800a290 	.word	0x0800a290
 8008b6c:	3ff00000 	.word	0x3ff00000
 8008b70:	fff00000 	.word	0xfff00000
 8008b74:	3fe00000 	.word	0x3fe00000
 8008b78:	47efffff 	.word	0x47efffff
 8008b7c:	c7efffff 	.word	0xc7efffff
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	200001e8 	.word	0x200001e8

08008b88 <__ieee754_pow>:
 8008b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8c:	b091      	sub	sp, #68	; 0x44
 8008b8e:	ed8d 1b00 	vstr	d1, [sp]
 8008b92:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008b96:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008b9a:	ea58 0302 	orrs.w	r3, r8, r2
 8008b9e:	ec57 6b10 	vmov	r6, r7, d0
 8008ba2:	f000 84be 	beq.w	8009522 <__ieee754_pow+0x99a>
 8008ba6:	4b7a      	ldr	r3, [pc, #488]	; (8008d90 <__ieee754_pow+0x208>)
 8008ba8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008bac:	429c      	cmp	r4, r3
 8008bae:	463d      	mov	r5, r7
 8008bb0:	ee10 aa10 	vmov	sl, s0
 8008bb4:	dc09      	bgt.n	8008bca <__ieee754_pow+0x42>
 8008bb6:	d103      	bne.n	8008bc0 <__ieee754_pow+0x38>
 8008bb8:	b93e      	cbnz	r6, 8008bca <__ieee754_pow+0x42>
 8008bba:	45a0      	cmp	r8, r4
 8008bbc:	dc0d      	bgt.n	8008bda <__ieee754_pow+0x52>
 8008bbe:	e001      	b.n	8008bc4 <__ieee754_pow+0x3c>
 8008bc0:	4598      	cmp	r8, r3
 8008bc2:	dc02      	bgt.n	8008bca <__ieee754_pow+0x42>
 8008bc4:	4598      	cmp	r8, r3
 8008bc6:	d10e      	bne.n	8008be6 <__ieee754_pow+0x5e>
 8008bc8:	b16a      	cbz	r2, 8008be6 <__ieee754_pow+0x5e>
 8008bca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008bce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008bd2:	ea54 030a 	orrs.w	r3, r4, sl
 8008bd6:	f000 84a4 	beq.w	8009522 <__ieee754_pow+0x99a>
 8008bda:	486e      	ldr	r0, [pc, #440]	; (8008d94 <__ieee754_pow+0x20c>)
 8008bdc:	b011      	add	sp, #68	; 0x44
 8008bde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be2:	f000 bda5 	b.w	8009730 <nan>
 8008be6:	2d00      	cmp	r5, #0
 8008be8:	da53      	bge.n	8008c92 <__ieee754_pow+0x10a>
 8008bea:	4b6b      	ldr	r3, [pc, #428]	; (8008d98 <__ieee754_pow+0x210>)
 8008bec:	4598      	cmp	r8, r3
 8008bee:	dc4d      	bgt.n	8008c8c <__ieee754_pow+0x104>
 8008bf0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008bf4:	4598      	cmp	r8, r3
 8008bf6:	dd4c      	ble.n	8008c92 <__ieee754_pow+0x10a>
 8008bf8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008bfc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c00:	2b14      	cmp	r3, #20
 8008c02:	dd26      	ble.n	8008c52 <__ieee754_pow+0xca>
 8008c04:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c08:	fa22 f103 	lsr.w	r1, r2, r3
 8008c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d13e      	bne.n	8008c92 <__ieee754_pow+0x10a>
 8008c14:	f001 0101 	and.w	r1, r1, #1
 8008c18:	f1c1 0b02 	rsb	fp, r1, #2
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	d15b      	bne.n	8008cd8 <__ieee754_pow+0x150>
 8008c20:	4b5b      	ldr	r3, [pc, #364]	; (8008d90 <__ieee754_pow+0x208>)
 8008c22:	4598      	cmp	r8, r3
 8008c24:	d124      	bne.n	8008c70 <__ieee754_pow+0xe8>
 8008c26:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008c2a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008c2e:	ea53 030a 	orrs.w	r3, r3, sl
 8008c32:	f000 8476 	beq.w	8009522 <__ieee754_pow+0x99a>
 8008c36:	4b59      	ldr	r3, [pc, #356]	; (8008d9c <__ieee754_pow+0x214>)
 8008c38:	429c      	cmp	r4, r3
 8008c3a:	dd2d      	ble.n	8008c98 <__ieee754_pow+0x110>
 8008c3c:	f1b9 0f00 	cmp.w	r9, #0
 8008c40:	f280 8473 	bge.w	800952a <__ieee754_pow+0x9a2>
 8008c44:	2000      	movs	r0, #0
 8008c46:	2100      	movs	r1, #0
 8008c48:	ec41 0b10 	vmov	d0, r0, r1
 8008c4c:	b011      	add	sp, #68	; 0x44
 8008c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	d13e      	bne.n	8008cd4 <__ieee754_pow+0x14c>
 8008c56:	f1c3 0314 	rsb	r3, r3, #20
 8008c5a:	fa48 f103 	asr.w	r1, r8, r3
 8008c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c62:	4543      	cmp	r3, r8
 8008c64:	f040 8469 	bne.w	800953a <__ieee754_pow+0x9b2>
 8008c68:	f001 0101 	and.w	r1, r1, #1
 8008c6c:	f1c1 0b02 	rsb	fp, r1, #2
 8008c70:	4b4b      	ldr	r3, [pc, #300]	; (8008da0 <__ieee754_pow+0x218>)
 8008c72:	4598      	cmp	r8, r3
 8008c74:	d118      	bne.n	8008ca8 <__ieee754_pow+0x120>
 8008c76:	f1b9 0f00 	cmp.w	r9, #0
 8008c7a:	f280 845a 	bge.w	8009532 <__ieee754_pow+0x9aa>
 8008c7e:	4948      	ldr	r1, [pc, #288]	; (8008da0 <__ieee754_pow+0x218>)
 8008c80:	4632      	mov	r2, r6
 8008c82:	463b      	mov	r3, r7
 8008c84:	2000      	movs	r0, #0
 8008c86:	f7f7 fe01 	bl	800088c <__aeabi_ddiv>
 8008c8a:	e7dd      	b.n	8008c48 <__ieee754_pow+0xc0>
 8008c8c:	f04f 0b02 	mov.w	fp, #2
 8008c90:	e7c4      	b.n	8008c1c <__ieee754_pow+0x94>
 8008c92:	f04f 0b00 	mov.w	fp, #0
 8008c96:	e7c1      	b.n	8008c1c <__ieee754_pow+0x94>
 8008c98:	f1b9 0f00 	cmp.w	r9, #0
 8008c9c:	dad2      	bge.n	8008c44 <__ieee754_pow+0xbc>
 8008c9e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008ca2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008ca6:	e7cf      	b.n	8008c48 <__ieee754_pow+0xc0>
 8008ca8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008cac:	d106      	bne.n	8008cbc <__ieee754_pow+0x134>
 8008cae:	4632      	mov	r2, r6
 8008cb0:	463b      	mov	r3, r7
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f7f7 fcbf 	bl	8000638 <__aeabi_dmul>
 8008cba:	e7c5      	b.n	8008c48 <__ieee754_pow+0xc0>
 8008cbc:	4b39      	ldr	r3, [pc, #228]	; (8008da4 <__ieee754_pow+0x21c>)
 8008cbe:	4599      	cmp	r9, r3
 8008cc0:	d10a      	bne.n	8008cd8 <__ieee754_pow+0x150>
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	db08      	blt.n	8008cd8 <__ieee754_pow+0x150>
 8008cc6:	ec47 6b10 	vmov	d0, r6, r7
 8008cca:	b011      	add	sp, #68	; 0x44
 8008ccc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	f000 bc68 	b.w	80095a4 <__ieee754_sqrt>
 8008cd4:	f04f 0b00 	mov.w	fp, #0
 8008cd8:	ec47 6b10 	vmov	d0, r6, r7
 8008cdc:	f000 fd12 	bl	8009704 <fabs>
 8008ce0:	ec51 0b10 	vmov	r0, r1, d0
 8008ce4:	f1ba 0f00 	cmp.w	sl, #0
 8008ce8:	d127      	bne.n	8008d3a <__ieee754_pow+0x1b2>
 8008cea:	b124      	cbz	r4, 8008cf6 <__ieee754_pow+0x16e>
 8008cec:	4b2c      	ldr	r3, [pc, #176]	; (8008da0 <__ieee754_pow+0x218>)
 8008cee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d121      	bne.n	8008d3a <__ieee754_pow+0x1b2>
 8008cf6:	f1b9 0f00 	cmp.w	r9, #0
 8008cfa:	da05      	bge.n	8008d08 <__ieee754_pow+0x180>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	2000      	movs	r0, #0
 8008d02:	4927      	ldr	r1, [pc, #156]	; (8008da0 <__ieee754_pow+0x218>)
 8008d04:	f7f7 fdc2 	bl	800088c <__aeabi_ddiv>
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	da9d      	bge.n	8008c48 <__ieee754_pow+0xc0>
 8008d0c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d10:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d14:	ea54 030b 	orrs.w	r3, r4, fp
 8008d18:	d108      	bne.n	8008d2c <__ieee754_pow+0x1a4>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4610      	mov	r0, r2
 8008d20:	4619      	mov	r1, r3
 8008d22:	f7f7 fad1 	bl	80002c8 <__aeabi_dsub>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	e7ac      	b.n	8008c86 <__ieee754_pow+0xfe>
 8008d2c:	f1bb 0f01 	cmp.w	fp, #1
 8008d30:	d18a      	bne.n	8008c48 <__ieee754_pow+0xc0>
 8008d32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d36:	4619      	mov	r1, r3
 8008d38:	e786      	b.n	8008c48 <__ieee754_pow+0xc0>
 8008d3a:	0fed      	lsrs	r5, r5, #31
 8008d3c:	1e6b      	subs	r3, r5, #1
 8008d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8008d40:	ea5b 0303 	orrs.w	r3, fp, r3
 8008d44:	d102      	bne.n	8008d4c <__ieee754_pow+0x1c4>
 8008d46:	4632      	mov	r2, r6
 8008d48:	463b      	mov	r3, r7
 8008d4a:	e7e8      	b.n	8008d1e <__ieee754_pow+0x196>
 8008d4c:	4b16      	ldr	r3, [pc, #88]	; (8008da8 <__ieee754_pow+0x220>)
 8008d4e:	4598      	cmp	r8, r3
 8008d50:	f340 80fe 	ble.w	8008f50 <__ieee754_pow+0x3c8>
 8008d54:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008d58:	4598      	cmp	r8, r3
 8008d5a:	dd0a      	ble.n	8008d72 <__ieee754_pow+0x1ea>
 8008d5c:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <__ieee754_pow+0x214>)
 8008d5e:	429c      	cmp	r4, r3
 8008d60:	dc0d      	bgt.n	8008d7e <__ieee754_pow+0x1f6>
 8008d62:	f1b9 0f00 	cmp.w	r9, #0
 8008d66:	f6bf af6d 	bge.w	8008c44 <__ieee754_pow+0xbc>
 8008d6a:	a307      	add	r3, pc, #28	; (adr r3, 8008d88 <__ieee754_pow+0x200>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	e79f      	b.n	8008cb2 <__ieee754_pow+0x12a>
 8008d72:	4b0e      	ldr	r3, [pc, #56]	; (8008dac <__ieee754_pow+0x224>)
 8008d74:	429c      	cmp	r4, r3
 8008d76:	ddf4      	ble.n	8008d62 <__ieee754_pow+0x1da>
 8008d78:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <__ieee754_pow+0x218>)
 8008d7a:	429c      	cmp	r4, r3
 8008d7c:	dd18      	ble.n	8008db0 <__ieee754_pow+0x228>
 8008d7e:	f1b9 0f00 	cmp.w	r9, #0
 8008d82:	dcf2      	bgt.n	8008d6a <__ieee754_pow+0x1e2>
 8008d84:	e75e      	b.n	8008c44 <__ieee754_pow+0xbc>
 8008d86:	bf00      	nop
 8008d88:	8800759c 	.word	0x8800759c
 8008d8c:	7e37e43c 	.word	0x7e37e43c
 8008d90:	7ff00000 	.word	0x7ff00000
 8008d94:	0800a179 	.word	0x0800a179
 8008d98:	433fffff 	.word	0x433fffff
 8008d9c:	3fefffff 	.word	0x3fefffff
 8008da0:	3ff00000 	.word	0x3ff00000
 8008da4:	3fe00000 	.word	0x3fe00000
 8008da8:	41e00000 	.word	0x41e00000
 8008dac:	3feffffe 	.word	0x3feffffe
 8008db0:	2200      	movs	r2, #0
 8008db2:	4b63      	ldr	r3, [pc, #396]	; (8008f40 <__ieee754_pow+0x3b8>)
 8008db4:	f7f7 fa88 	bl	80002c8 <__aeabi_dsub>
 8008db8:	a355      	add	r3, pc, #340	; (adr r3, 8008f10 <__ieee754_pow+0x388>)
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	f7f7 fc39 	bl	8000638 <__aeabi_dmul>
 8008dc6:	a354      	add	r3, pc, #336	; (adr r3, 8008f18 <__ieee754_pow+0x390>)
 8008dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dcc:	4606      	mov	r6, r0
 8008dce:	460f      	mov	r7, r1
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	f7f7 fc30 	bl	8000638 <__aeabi_dmul>
 8008dd8:	2200      	movs	r2, #0
 8008dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dde:	4b59      	ldr	r3, [pc, #356]	; (8008f44 <__ieee754_pow+0x3bc>)
 8008de0:	4620      	mov	r0, r4
 8008de2:	4629      	mov	r1, r5
 8008de4:	f7f7 fc28 	bl	8000638 <__aeabi_dmul>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	a14c      	add	r1, pc, #304	; (adr r1, 8008f20 <__ieee754_pow+0x398>)
 8008dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df2:	f7f7 fa69 	bl	80002c8 <__aeabi_dsub>
 8008df6:	4622      	mov	r2, r4
 8008df8:	462b      	mov	r3, r5
 8008dfa:	f7f7 fc1d 	bl	8000638 <__aeabi_dmul>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	2000      	movs	r0, #0
 8008e04:	4950      	ldr	r1, [pc, #320]	; (8008f48 <__ieee754_pow+0x3c0>)
 8008e06:	f7f7 fa5f 	bl	80002c8 <__aeabi_dsub>
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	4680      	mov	r8, r0
 8008e10:	4689      	mov	r9, r1
 8008e12:	4620      	mov	r0, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 fc0f 	bl	8000638 <__aeabi_dmul>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fc09 	bl	8000638 <__aeabi_dmul>
 8008e26:	a340      	add	r3, pc, #256	; (adr r3, 8008f28 <__ieee754_pow+0x3a0>)
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	f7f7 fc04 	bl	8000638 <__aeabi_dmul>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e38:	f7f7 fa46 	bl	80002c8 <__aeabi_dsub>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4604      	mov	r4, r0
 8008e42:	460d      	mov	r5, r1
 8008e44:	4630      	mov	r0, r6
 8008e46:	4639      	mov	r1, r7
 8008e48:	f7f7 fa40 	bl	80002cc <__adddf3>
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e52:	4632      	mov	r2, r6
 8008e54:	463b      	mov	r3, r7
 8008e56:	f7f7 fa37 	bl	80002c8 <__aeabi_dsub>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4620      	mov	r0, r4
 8008e60:	4629      	mov	r1, r5
 8008e62:	f7f7 fa31 	bl	80002c8 <__aeabi_dsub>
 8008e66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e68:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	f040 81eb 	bne.w	800924c <__ieee754_pow+0x6c4>
 8008e76:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008f30 <__ieee754_pow+0x3a8>
 8008e7a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008e7e:	2400      	movs	r4, #0
 8008e80:	4622      	mov	r2, r4
 8008e82:	462b      	mov	r3, r5
 8008e84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e8c:	f7f7 fa1c 	bl	80002c8 <__aeabi_dsub>
 8008e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e94:	f7f7 fbd0 	bl	8000638 <__aeabi_dmul>
 8008e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e9c:	4680      	mov	r8, r0
 8008e9e:	4689      	mov	r9, r1
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	f7f7 fbc8 	bl	8000638 <__aeabi_dmul>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4640      	mov	r0, r8
 8008eae:	4649      	mov	r1, r9
 8008eb0:	f7f7 fa0c 	bl	80002cc <__adddf3>
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	462b      	mov	r3, r5
 8008eb8:	4680      	mov	r8, r0
 8008eba:	4689      	mov	r9, r1
 8008ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ec0:	f7f7 fbba 	bl	8000638 <__aeabi_dmul>
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	460d      	mov	r5, r1
 8008eca:	4602      	mov	r2, r0
 8008ecc:	4649      	mov	r1, r9
 8008ece:	4640      	mov	r0, r8
 8008ed0:	e9cd 4500 	strd	r4, r5, [sp]
 8008ed4:	f7f7 f9fa 	bl	80002cc <__adddf3>
 8008ed8:	4b1c      	ldr	r3, [pc, #112]	; (8008f4c <__ieee754_pow+0x3c4>)
 8008eda:	4299      	cmp	r1, r3
 8008edc:	4606      	mov	r6, r0
 8008ede:	460f      	mov	r7, r1
 8008ee0:	468b      	mov	fp, r1
 8008ee2:	f340 82f7 	ble.w	80094d4 <__ieee754_pow+0x94c>
 8008ee6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008eea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008eee:	4303      	orrs	r3, r0
 8008ef0:	f000 81ea 	beq.w	80092c8 <__ieee754_pow+0x740>
 8008ef4:	a310      	add	r3, pc, #64	; (adr r3, 8008f38 <__ieee754_pow+0x3b0>)
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008efe:	f7f7 fb9b 	bl	8000638 <__aeabi_dmul>
 8008f02:	a30d      	add	r3, pc, #52	; (adr r3, 8008f38 <__ieee754_pow+0x3b0>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	e6d5      	b.n	8008cb6 <__ieee754_pow+0x12e>
 8008f0a:	bf00      	nop
 8008f0c:	f3af 8000 	nop.w
 8008f10:	60000000 	.word	0x60000000
 8008f14:	3ff71547 	.word	0x3ff71547
 8008f18:	f85ddf44 	.word	0xf85ddf44
 8008f1c:	3e54ae0b 	.word	0x3e54ae0b
 8008f20:	55555555 	.word	0x55555555
 8008f24:	3fd55555 	.word	0x3fd55555
 8008f28:	652b82fe 	.word	0x652b82fe
 8008f2c:	3ff71547 	.word	0x3ff71547
 8008f30:	00000000 	.word	0x00000000
 8008f34:	bff00000 	.word	0xbff00000
 8008f38:	8800759c 	.word	0x8800759c
 8008f3c:	7e37e43c 	.word	0x7e37e43c
 8008f40:	3ff00000 	.word	0x3ff00000
 8008f44:	3fd00000 	.word	0x3fd00000
 8008f48:	3fe00000 	.word	0x3fe00000
 8008f4c:	408fffff 	.word	0x408fffff
 8008f50:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	da05      	bge.n	8008f66 <__ieee754_pow+0x3de>
 8008f5a:	4bd3      	ldr	r3, [pc, #844]	; (80092a8 <__ieee754_pow+0x720>)
 8008f5c:	f7f7 fb6c 	bl	8000638 <__aeabi_dmul>
 8008f60:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008f64:	460c      	mov	r4, r1
 8008f66:	1523      	asrs	r3, r4, #20
 8008f68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f6c:	4413      	add	r3, r2
 8008f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f70:	4bce      	ldr	r3, [pc, #824]	; (80092ac <__ieee754_pow+0x724>)
 8008f72:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f76:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f80:	dd08      	ble.n	8008f94 <__ieee754_pow+0x40c>
 8008f82:	4bcb      	ldr	r3, [pc, #812]	; (80092b0 <__ieee754_pow+0x728>)
 8008f84:	429c      	cmp	r4, r3
 8008f86:	f340 815e 	ble.w	8009246 <__ieee754_pow+0x6be>
 8008f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f90:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008f94:	f04f 0a00 	mov.w	sl, #0
 8008f98:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008f9c:	930c      	str	r3, [sp, #48]	; 0x30
 8008f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fa0:	4bc4      	ldr	r3, [pc, #784]	; (80092b4 <__ieee754_pow+0x72c>)
 8008fa2:	4413      	add	r3, r2
 8008fa4:	ed93 7b00 	vldr	d7, [r3]
 8008fa8:	4629      	mov	r1, r5
 8008faa:	ec53 2b17 	vmov	r2, r3, d7
 8008fae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008fb6:	f7f7 f987 	bl	80002c8 <__aeabi_dsub>
 8008fba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	460f      	mov	r7, r1
 8008fc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fc6:	f7f7 f981 	bl	80002cc <__adddf3>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	2000      	movs	r0, #0
 8008fd0:	49b9      	ldr	r1, [pc, #740]	; (80092b8 <__ieee754_pow+0x730>)
 8008fd2:	f7f7 fc5b 	bl	800088c <__aeabi_ddiv>
 8008fd6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4630      	mov	r0, r6
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	f7f7 fb29 	bl	8000638 <__aeabi_dmul>
 8008fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fea:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008fee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9302      	str	r3, [sp, #8]
 8008ff6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ffa:	106d      	asrs	r5, r5, #1
 8008ffc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009000:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009004:	2200      	movs	r2, #0
 8009006:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800900a:	4640      	mov	r0, r8
 800900c:	4649      	mov	r1, r9
 800900e:	4614      	mov	r4, r2
 8009010:	461d      	mov	r5, r3
 8009012:	f7f7 fb11 	bl	8000638 <__aeabi_dmul>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4630      	mov	r0, r6
 800901c:	4639      	mov	r1, r7
 800901e:	f7f7 f953 	bl	80002c8 <__aeabi_dsub>
 8009022:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009026:	4606      	mov	r6, r0
 8009028:	460f      	mov	r7, r1
 800902a:	4620      	mov	r0, r4
 800902c:	4629      	mov	r1, r5
 800902e:	f7f7 f94b 	bl	80002c8 <__aeabi_dsub>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800903a:	f7f7 f945 	bl	80002c8 <__aeabi_dsub>
 800903e:	4642      	mov	r2, r8
 8009040:	464b      	mov	r3, r9
 8009042:	f7f7 faf9 	bl	8000638 <__aeabi_dmul>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4630      	mov	r0, r6
 800904c:	4639      	mov	r1, r7
 800904e:	f7f7 f93b 	bl	80002c8 <__aeabi_dsub>
 8009052:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009056:	f7f7 faef 	bl	8000638 <__aeabi_dmul>
 800905a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800905e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009062:	4610      	mov	r0, r2
 8009064:	4619      	mov	r1, r3
 8009066:	f7f7 fae7 	bl	8000638 <__aeabi_dmul>
 800906a:	a37b      	add	r3, pc, #492	; (adr r3, 8009258 <__ieee754_pow+0x6d0>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	4604      	mov	r4, r0
 8009072:	460d      	mov	r5, r1
 8009074:	f7f7 fae0 	bl	8000638 <__aeabi_dmul>
 8009078:	a379      	add	r3, pc, #484	; (adr r3, 8009260 <__ieee754_pow+0x6d8>)
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	f7f7 f925 	bl	80002cc <__adddf3>
 8009082:	4622      	mov	r2, r4
 8009084:	462b      	mov	r3, r5
 8009086:	f7f7 fad7 	bl	8000638 <__aeabi_dmul>
 800908a:	a377      	add	r3, pc, #476	; (adr r3, 8009268 <__ieee754_pow+0x6e0>)
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f7f7 f91c 	bl	80002cc <__adddf3>
 8009094:	4622      	mov	r2, r4
 8009096:	462b      	mov	r3, r5
 8009098:	f7f7 face 	bl	8000638 <__aeabi_dmul>
 800909c:	a374      	add	r3, pc, #464	; (adr r3, 8009270 <__ieee754_pow+0x6e8>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f7f7 f913 	bl	80002cc <__adddf3>
 80090a6:	4622      	mov	r2, r4
 80090a8:	462b      	mov	r3, r5
 80090aa:	f7f7 fac5 	bl	8000638 <__aeabi_dmul>
 80090ae:	a372      	add	r3, pc, #456	; (adr r3, 8009278 <__ieee754_pow+0x6f0>)
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	f7f7 f90a 	bl	80002cc <__adddf3>
 80090b8:	4622      	mov	r2, r4
 80090ba:	462b      	mov	r3, r5
 80090bc:	f7f7 fabc 	bl	8000638 <__aeabi_dmul>
 80090c0:	a36f      	add	r3, pc, #444	; (adr r3, 8009280 <__ieee754_pow+0x6f8>)
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	f7f7 f901 	bl	80002cc <__adddf3>
 80090ca:	4622      	mov	r2, r4
 80090cc:	4606      	mov	r6, r0
 80090ce:	460f      	mov	r7, r1
 80090d0:	462b      	mov	r3, r5
 80090d2:	4620      	mov	r0, r4
 80090d4:	4629      	mov	r1, r5
 80090d6:	f7f7 faaf 	bl	8000638 <__aeabi_dmul>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4630      	mov	r0, r6
 80090e0:	4639      	mov	r1, r7
 80090e2:	f7f7 faa9 	bl	8000638 <__aeabi_dmul>
 80090e6:	4642      	mov	r2, r8
 80090e8:	4604      	mov	r4, r0
 80090ea:	460d      	mov	r5, r1
 80090ec:	464b      	mov	r3, r9
 80090ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090f2:	f7f7 f8eb 	bl	80002cc <__adddf3>
 80090f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090fa:	f7f7 fa9d 	bl	8000638 <__aeabi_dmul>
 80090fe:	4622      	mov	r2, r4
 8009100:	462b      	mov	r3, r5
 8009102:	f7f7 f8e3 	bl	80002cc <__adddf3>
 8009106:	4642      	mov	r2, r8
 8009108:	4606      	mov	r6, r0
 800910a:	460f      	mov	r7, r1
 800910c:	464b      	mov	r3, r9
 800910e:	4640      	mov	r0, r8
 8009110:	4649      	mov	r1, r9
 8009112:	f7f7 fa91 	bl	8000638 <__aeabi_dmul>
 8009116:	2200      	movs	r2, #0
 8009118:	4b68      	ldr	r3, [pc, #416]	; (80092bc <__ieee754_pow+0x734>)
 800911a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800911e:	f7f7 f8d5 	bl	80002cc <__adddf3>
 8009122:	4632      	mov	r2, r6
 8009124:	463b      	mov	r3, r7
 8009126:	f7f7 f8d1 	bl	80002cc <__adddf3>
 800912a:	9802      	ldr	r0, [sp, #8]
 800912c:	460d      	mov	r5, r1
 800912e:	4604      	mov	r4, r0
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4640      	mov	r0, r8
 8009136:	4649      	mov	r1, r9
 8009138:	f7f7 fa7e 	bl	8000638 <__aeabi_dmul>
 800913c:	2200      	movs	r2, #0
 800913e:	4680      	mov	r8, r0
 8009140:	4689      	mov	r9, r1
 8009142:	4b5e      	ldr	r3, [pc, #376]	; (80092bc <__ieee754_pow+0x734>)
 8009144:	4620      	mov	r0, r4
 8009146:	4629      	mov	r1, r5
 8009148:	f7f7 f8be 	bl	80002c8 <__aeabi_dsub>
 800914c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009150:	f7f7 f8ba 	bl	80002c8 <__aeabi_dsub>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	4630      	mov	r0, r6
 800915a:	4639      	mov	r1, r7
 800915c:	f7f7 f8b4 	bl	80002c8 <__aeabi_dsub>
 8009160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009164:	f7f7 fa68 	bl	8000638 <__aeabi_dmul>
 8009168:	4622      	mov	r2, r4
 800916a:	4606      	mov	r6, r0
 800916c:	460f      	mov	r7, r1
 800916e:	462b      	mov	r3, r5
 8009170:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009174:	f7f7 fa60 	bl	8000638 <__aeabi_dmul>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4630      	mov	r0, r6
 800917e:	4639      	mov	r1, r7
 8009180:	f7f7 f8a4 	bl	80002cc <__adddf3>
 8009184:	4606      	mov	r6, r0
 8009186:	460f      	mov	r7, r1
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4640      	mov	r0, r8
 800918e:	4649      	mov	r1, r9
 8009190:	f7f7 f89c 	bl	80002cc <__adddf3>
 8009194:	9802      	ldr	r0, [sp, #8]
 8009196:	a33c      	add	r3, pc, #240	; (adr r3, 8009288 <__ieee754_pow+0x700>)
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	4604      	mov	r4, r0
 800919e:	460d      	mov	r5, r1
 80091a0:	f7f7 fa4a 	bl	8000638 <__aeabi_dmul>
 80091a4:	4642      	mov	r2, r8
 80091a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091aa:	464b      	mov	r3, r9
 80091ac:	4620      	mov	r0, r4
 80091ae:	4629      	mov	r1, r5
 80091b0:	f7f7 f88a 	bl	80002c8 <__aeabi_dsub>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4630      	mov	r0, r6
 80091ba:	4639      	mov	r1, r7
 80091bc:	f7f7 f884 	bl	80002c8 <__aeabi_dsub>
 80091c0:	a333      	add	r3, pc, #204	; (adr r3, 8009290 <__ieee754_pow+0x708>)
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f7f7 fa37 	bl	8000638 <__aeabi_dmul>
 80091ca:	a333      	add	r3, pc, #204	; (adr r3, 8009298 <__ieee754_pow+0x710>)
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	4606      	mov	r6, r0
 80091d2:	460f      	mov	r7, r1
 80091d4:	4620      	mov	r0, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	f7f7 fa2e 	bl	8000638 <__aeabi_dmul>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	4630      	mov	r0, r6
 80091e2:	4639      	mov	r1, r7
 80091e4:	f7f7 f872 	bl	80002cc <__adddf3>
 80091e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091ea:	4b35      	ldr	r3, [pc, #212]	; (80092c0 <__ieee754_pow+0x738>)
 80091ec:	4413      	add	r3, r2
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 f86b 	bl	80002cc <__adddf3>
 80091f6:	4604      	mov	r4, r0
 80091f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091fa:	460d      	mov	r5, r1
 80091fc:	f7f7 f9b2 	bl	8000564 <__aeabi_i2d>
 8009200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009202:	4b30      	ldr	r3, [pc, #192]	; (80092c4 <__ieee754_pow+0x73c>)
 8009204:	4413      	add	r3, r2
 8009206:	e9d3 8900 	ldrd	r8, r9, [r3]
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	4622      	mov	r2, r4
 8009210:	462b      	mov	r3, r5
 8009212:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009216:	f7f7 f859 	bl	80002cc <__adddf3>
 800921a:	4642      	mov	r2, r8
 800921c:	464b      	mov	r3, r9
 800921e:	f7f7 f855 	bl	80002cc <__adddf3>
 8009222:	4632      	mov	r2, r6
 8009224:	463b      	mov	r3, r7
 8009226:	f7f7 f851 	bl	80002cc <__adddf3>
 800922a:	9802      	ldr	r0, [sp, #8]
 800922c:	4632      	mov	r2, r6
 800922e:	463b      	mov	r3, r7
 8009230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009234:	f7f7 f848 	bl	80002c8 <__aeabi_dsub>
 8009238:	4642      	mov	r2, r8
 800923a:	464b      	mov	r3, r9
 800923c:	f7f7 f844 	bl	80002c8 <__aeabi_dsub>
 8009240:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009244:	e607      	b.n	8008e56 <__ieee754_pow+0x2ce>
 8009246:	f04f 0a01 	mov.w	sl, #1
 800924a:	e6a5      	b.n	8008f98 <__ieee754_pow+0x410>
 800924c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80092a0 <__ieee754_pow+0x718>
 8009250:	e613      	b.n	8008e7a <__ieee754_pow+0x2f2>
 8009252:	bf00      	nop
 8009254:	f3af 8000 	nop.w
 8009258:	4a454eef 	.word	0x4a454eef
 800925c:	3fca7e28 	.word	0x3fca7e28
 8009260:	93c9db65 	.word	0x93c9db65
 8009264:	3fcd864a 	.word	0x3fcd864a
 8009268:	a91d4101 	.word	0xa91d4101
 800926c:	3fd17460 	.word	0x3fd17460
 8009270:	518f264d 	.word	0x518f264d
 8009274:	3fd55555 	.word	0x3fd55555
 8009278:	db6fabff 	.word	0xdb6fabff
 800927c:	3fdb6db6 	.word	0x3fdb6db6
 8009280:	33333303 	.word	0x33333303
 8009284:	3fe33333 	.word	0x3fe33333
 8009288:	e0000000 	.word	0xe0000000
 800928c:	3feec709 	.word	0x3feec709
 8009290:	dc3a03fd 	.word	0xdc3a03fd
 8009294:	3feec709 	.word	0x3feec709
 8009298:	145b01f5 	.word	0x145b01f5
 800929c:	be3e2fe0 	.word	0xbe3e2fe0
 80092a0:	00000000 	.word	0x00000000
 80092a4:	3ff00000 	.word	0x3ff00000
 80092a8:	43400000 	.word	0x43400000
 80092ac:	0003988e 	.word	0x0003988e
 80092b0:	000bb679 	.word	0x000bb679
 80092b4:	0800a298 	.word	0x0800a298
 80092b8:	3ff00000 	.word	0x3ff00000
 80092bc:	40080000 	.word	0x40080000
 80092c0:	0800a2b8 	.word	0x0800a2b8
 80092c4:	0800a2a8 	.word	0x0800a2a8
 80092c8:	a3b4      	add	r3, pc, #720	; (adr r3, 800959c <__ieee754_pow+0xa14>)
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f6 fffb 	bl	80002cc <__adddf3>
 80092d6:	4622      	mov	r2, r4
 80092d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092dc:	462b      	mov	r3, r5
 80092de:	4630      	mov	r0, r6
 80092e0:	4639      	mov	r1, r7
 80092e2:	f7f6 fff1 	bl	80002c8 <__aeabi_dsub>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ee:	f7f7 fc33 	bl	8000b58 <__aeabi_dcmpgt>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f47f adfe 	bne.w	8008ef4 <__ieee754_pow+0x36c>
 80092f8:	4aa3      	ldr	r2, [pc, #652]	; (8009588 <__ieee754_pow+0xa00>)
 80092fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092fe:	4293      	cmp	r3, r2
 8009300:	f340 810a 	ble.w	8009518 <__ieee754_pow+0x990>
 8009304:	151b      	asrs	r3, r3, #20
 8009306:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800930a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800930e:	fa4a f303 	asr.w	r3, sl, r3
 8009312:	445b      	add	r3, fp
 8009314:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009318:	4e9c      	ldr	r6, [pc, #624]	; (800958c <__ieee754_pow+0xa04>)
 800931a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800931e:	4116      	asrs	r6, r2
 8009320:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009324:	2000      	movs	r0, #0
 8009326:	ea23 0106 	bic.w	r1, r3, r6
 800932a:	f1c2 0214 	rsb	r2, r2, #20
 800932e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009332:	fa4a fa02 	asr.w	sl, sl, r2
 8009336:	f1bb 0f00 	cmp.w	fp, #0
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4620      	mov	r0, r4
 8009340:	4629      	mov	r1, r5
 8009342:	bfb8      	it	lt
 8009344:	f1ca 0a00 	rsblt	sl, sl, #0
 8009348:	f7f6 ffbe 	bl	80002c8 <__aeabi_dsub>
 800934c:	e9cd 0100 	strd	r0, r1, [sp]
 8009350:	4642      	mov	r2, r8
 8009352:	464b      	mov	r3, r9
 8009354:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009358:	f7f6 ffb8 	bl	80002cc <__adddf3>
 800935c:	2000      	movs	r0, #0
 800935e:	a378      	add	r3, pc, #480	; (adr r3, 8009540 <__ieee754_pow+0x9b8>)
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	4604      	mov	r4, r0
 8009366:	460d      	mov	r5, r1
 8009368:	f7f7 f966 	bl	8000638 <__aeabi_dmul>
 800936c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009370:	4606      	mov	r6, r0
 8009372:	460f      	mov	r7, r1
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7f6 ffa6 	bl	80002c8 <__aeabi_dsub>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4640      	mov	r0, r8
 8009382:	4649      	mov	r1, r9
 8009384:	f7f6 ffa0 	bl	80002c8 <__aeabi_dsub>
 8009388:	a36f      	add	r3, pc, #444	; (adr r3, 8009548 <__ieee754_pow+0x9c0>)
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	f7f7 f953 	bl	8000638 <__aeabi_dmul>
 8009392:	a36f      	add	r3, pc, #444	; (adr r3, 8009550 <__ieee754_pow+0x9c8>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	4680      	mov	r8, r0
 800939a:	4689      	mov	r9, r1
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f7 f94a 	bl	8000638 <__aeabi_dmul>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	4640      	mov	r0, r8
 80093aa:	4649      	mov	r1, r9
 80093ac:	f7f6 ff8e 	bl	80002cc <__adddf3>
 80093b0:	4604      	mov	r4, r0
 80093b2:	460d      	mov	r5, r1
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f6 ff86 	bl	80002cc <__adddf3>
 80093c0:	4632      	mov	r2, r6
 80093c2:	463b      	mov	r3, r7
 80093c4:	4680      	mov	r8, r0
 80093c6:	4689      	mov	r9, r1
 80093c8:	f7f6 ff7e 	bl	80002c8 <__aeabi_dsub>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4620      	mov	r0, r4
 80093d2:	4629      	mov	r1, r5
 80093d4:	f7f6 ff78 	bl	80002c8 <__aeabi_dsub>
 80093d8:	4642      	mov	r2, r8
 80093da:	4606      	mov	r6, r0
 80093dc:	460f      	mov	r7, r1
 80093de:	464b      	mov	r3, r9
 80093e0:	4640      	mov	r0, r8
 80093e2:	4649      	mov	r1, r9
 80093e4:	f7f7 f928 	bl	8000638 <__aeabi_dmul>
 80093e8:	a35b      	add	r3, pc, #364	; (adr r3, 8009558 <__ieee754_pow+0x9d0>)
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	4604      	mov	r4, r0
 80093f0:	460d      	mov	r5, r1
 80093f2:	f7f7 f921 	bl	8000638 <__aeabi_dmul>
 80093f6:	a35a      	add	r3, pc, #360	; (adr r3, 8009560 <__ieee754_pow+0x9d8>)
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f7f6 ff64 	bl	80002c8 <__aeabi_dsub>
 8009400:	4622      	mov	r2, r4
 8009402:	462b      	mov	r3, r5
 8009404:	f7f7 f918 	bl	8000638 <__aeabi_dmul>
 8009408:	a357      	add	r3, pc, #348	; (adr r3, 8009568 <__ieee754_pow+0x9e0>)
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	f7f6 ff5d 	bl	80002cc <__adddf3>
 8009412:	4622      	mov	r2, r4
 8009414:	462b      	mov	r3, r5
 8009416:	f7f7 f90f 	bl	8000638 <__aeabi_dmul>
 800941a:	a355      	add	r3, pc, #340	; (adr r3, 8009570 <__ieee754_pow+0x9e8>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f6 ff52 	bl	80002c8 <__aeabi_dsub>
 8009424:	4622      	mov	r2, r4
 8009426:	462b      	mov	r3, r5
 8009428:	f7f7 f906 	bl	8000638 <__aeabi_dmul>
 800942c:	a352      	add	r3, pc, #328	; (adr r3, 8009578 <__ieee754_pow+0x9f0>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f7f6 ff4b 	bl	80002cc <__adddf3>
 8009436:	4622      	mov	r2, r4
 8009438:	462b      	mov	r3, r5
 800943a:	f7f7 f8fd 	bl	8000638 <__aeabi_dmul>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	f7f6 ff3f 	bl	80002c8 <__aeabi_dsub>
 800944a:	4604      	mov	r4, r0
 800944c:	460d      	mov	r5, r1
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4640      	mov	r0, r8
 8009454:	4649      	mov	r1, r9
 8009456:	f7f7 f8ef 	bl	8000638 <__aeabi_dmul>
 800945a:	2200      	movs	r2, #0
 800945c:	e9cd 0100 	strd	r0, r1, [sp]
 8009460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009464:	4620      	mov	r0, r4
 8009466:	4629      	mov	r1, r5
 8009468:	f7f6 ff2e 	bl	80002c8 <__aeabi_dsub>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009474:	f7f7 fa0a 	bl	800088c <__aeabi_ddiv>
 8009478:	4632      	mov	r2, r6
 800947a:	4604      	mov	r4, r0
 800947c:	460d      	mov	r5, r1
 800947e:	463b      	mov	r3, r7
 8009480:	4640      	mov	r0, r8
 8009482:	4649      	mov	r1, r9
 8009484:	f7f7 f8d8 	bl	8000638 <__aeabi_dmul>
 8009488:	4632      	mov	r2, r6
 800948a:	463b      	mov	r3, r7
 800948c:	f7f6 ff1e 	bl	80002cc <__adddf3>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4620      	mov	r0, r4
 8009496:	4629      	mov	r1, r5
 8009498:	f7f6 ff16 	bl	80002c8 <__aeabi_dsub>
 800949c:	4642      	mov	r2, r8
 800949e:	464b      	mov	r3, r9
 80094a0:	f7f6 ff12 	bl	80002c8 <__aeabi_dsub>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	2000      	movs	r0, #0
 80094aa:	4939      	ldr	r1, [pc, #228]	; (8009590 <__ieee754_pow+0xa08>)
 80094ac:	f7f6 ff0c 	bl	80002c8 <__aeabi_dsub>
 80094b0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80094b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	da2f      	bge.n	800951e <__ieee754_pow+0x996>
 80094be:	4650      	mov	r0, sl
 80094c0:	ec43 2b10 	vmov	d0, r2, r3
 80094c4:	f000 f9c0 	bl	8009848 <scalbn>
 80094c8:	ec51 0b10 	vmov	r0, r1, d0
 80094cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094d0:	f7ff bbf1 	b.w	8008cb6 <__ieee754_pow+0x12e>
 80094d4:	4b2f      	ldr	r3, [pc, #188]	; (8009594 <__ieee754_pow+0xa0c>)
 80094d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80094da:	429e      	cmp	r6, r3
 80094dc:	f77f af0c 	ble.w	80092f8 <__ieee754_pow+0x770>
 80094e0:	4b2d      	ldr	r3, [pc, #180]	; (8009598 <__ieee754_pow+0xa10>)
 80094e2:	440b      	add	r3, r1
 80094e4:	4303      	orrs	r3, r0
 80094e6:	d00b      	beq.n	8009500 <__ieee754_pow+0x978>
 80094e8:	a325      	add	r3, pc, #148	; (adr r3, 8009580 <__ieee754_pow+0x9f8>)
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f2:	f7f7 f8a1 	bl	8000638 <__aeabi_dmul>
 80094f6:	a322      	add	r3, pc, #136	; (adr r3, 8009580 <__ieee754_pow+0x9f8>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f7ff bbdb 	b.w	8008cb6 <__ieee754_pow+0x12e>
 8009500:	4622      	mov	r2, r4
 8009502:	462b      	mov	r3, r5
 8009504:	f7f6 fee0 	bl	80002c8 <__aeabi_dsub>
 8009508:	4642      	mov	r2, r8
 800950a:	464b      	mov	r3, r9
 800950c:	f7f7 fb1a 	bl	8000b44 <__aeabi_dcmpge>
 8009510:	2800      	cmp	r0, #0
 8009512:	f43f aef1 	beq.w	80092f8 <__ieee754_pow+0x770>
 8009516:	e7e7      	b.n	80094e8 <__ieee754_pow+0x960>
 8009518:	f04f 0a00 	mov.w	sl, #0
 800951c:	e718      	b.n	8009350 <__ieee754_pow+0x7c8>
 800951e:	4621      	mov	r1, r4
 8009520:	e7d4      	b.n	80094cc <__ieee754_pow+0x944>
 8009522:	2000      	movs	r0, #0
 8009524:	491a      	ldr	r1, [pc, #104]	; (8009590 <__ieee754_pow+0xa08>)
 8009526:	f7ff bb8f 	b.w	8008c48 <__ieee754_pow+0xc0>
 800952a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800952e:	f7ff bb8b 	b.w	8008c48 <__ieee754_pow+0xc0>
 8009532:	4630      	mov	r0, r6
 8009534:	4639      	mov	r1, r7
 8009536:	f7ff bb87 	b.w	8008c48 <__ieee754_pow+0xc0>
 800953a:	4693      	mov	fp, r2
 800953c:	f7ff bb98 	b.w	8008c70 <__ieee754_pow+0xe8>
 8009540:	00000000 	.word	0x00000000
 8009544:	3fe62e43 	.word	0x3fe62e43
 8009548:	fefa39ef 	.word	0xfefa39ef
 800954c:	3fe62e42 	.word	0x3fe62e42
 8009550:	0ca86c39 	.word	0x0ca86c39
 8009554:	be205c61 	.word	0xbe205c61
 8009558:	72bea4d0 	.word	0x72bea4d0
 800955c:	3e663769 	.word	0x3e663769
 8009560:	c5d26bf1 	.word	0xc5d26bf1
 8009564:	3ebbbd41 	.word	0x3ebbbd41
 8009568:	af25de2c 	.word	0xaf25de2c
 800956c:	3f11566a 	.word	0x3f11566a
 8009570:	16bebd93 	.word	0x16bebd93
 8009574:	3f66c16c 	.word	0x3f66c16c
 8009578:	5555553e 	.word	0x5555553e
 800957c:	3fc55555 	.word	0x3fc55555
 8009580:	c2f8f359 	.word	0xc2f8f359
 8009584:	01a56e1f 	.word	0x01a56e1f
 8009588:	3fe00000 	.word	0x3fe00000
 800958c:	000fffff 	.word	0x000fffff
 8009590:	3ff00000 	.word	0x3ff00000
 8009594:	4090cbff 	.word	0x4090cbff
 8009598:	3f6f3400 	.word	0x3f6f3400
 800959c:	652b82fe 	.word	0x652b82fe
 80095a0:	3c971547 	.word	0x3c971547

080095a4 <__ieee754_sqrt>:
 80095a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a8:	4955      	ldr	r1, [pc, #340]	; (8009700 <__ieee754_sqrt+0x15c>)
 80095aa:	ec55 4b10 	vmov	r4, r5, d0
 80095ae:	43a9      	bics	r1, r5
 80095b0:	462b      	mov	r3, r5
 80095b2:	462a      	mov	r2, r5
 80095b4:	d112      	bne.n	80095dc <__ieee754_sqrt+0x38>
 80095b6:	ee10 2a10 	vmov	r2, s0
 80095ba:	ee10 0a10 	vmov	r0, s0
 80095be:	4629      	mov	r1, r5
 80095c0:	f7f7 f83a 	bl	8000638 <__aeabi_dmul>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	4620      	mov	r0, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	f7f6 fe7e 	bl	80002cc <__adddf3>
 80095d0:	4604      	mov	r4, r0
 80095d2:	460d      	mov	r5, r1
 80095d4:	ec45 4b10 	vmov	d0, r4, r5
 80095d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095dc:	2d00      	cmp	r5, #0
 80095de:	ee10 0a10 	vmov	r0, s0
 80095e2:	4621      	mov	r1, r4
 80095e4:	dc0f      	bgt.n	8009606 <__ieee754_sqrt+0x62>
 80095e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80095ea:	4330      	orrs	r0, r6
 80095ec:	d0f2      	beq.n	80095d4 <__ieee754_sqrt+0x30>
 80095ee:	b155      	cbz	r5, 8009606 <__ieee754_sqrt+0x62>
 80095f0:	ee10 2a10 	vmov	r2, s0
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f6 fe66 	bl	80002c8 <__aeabi_dsub>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	f7f7 f944 	bl	800088c <__aeabi_ddiv>
 8009604:	e7e4      	b.n	80095d0 <__ieee754_sqrt+0x2c>
 8009606:	151b      	asrs	r3, r3, #20
 8009608:	d073      	beq.n	80096f2 <__ieee754_sqrt+0x14e>
 800960a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800960e:	07dd      	lsls	r5, r3, #31
 8009610:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009614:	bf48      	it	mi
 8009616:	0fc8      	lsrmi	r0, r1, #31
 8009618:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800961c:	bf44      	itt	mi
 800961e:	0049      	lslmi	r1, r1, #1
 8009620:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009624:	2500      	movs	r5, #0
 8009626:	1058      	asrs	r0, r3, #1
 8009628:	0fcb      	lsrs	r3, r1, #31
 800962a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800962e:	0049      	lsls	r1, r1, #1
 8009630:	2316      	movs	r3, #22
 8009632:	462c      	mov	r4, r5
 8009634:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009638:	19a7      	adds	r7, r4, r6
 800963a:	4297      	cmp	r7, r2
 800963c:	bfde      	ittt	le
 800963e:	19bc      	addle	r4, r7, r6
 8009640:	1bd2      	suble	r2, r2, r7
 8009642:	19ad      	addle	r5, r5, r6
 8009644:	0fcf      	lsrs	r7, r1, #31
 8009646:	3b01      	subs	r3, #1
 8009648:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800964c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009650:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009654:	d1f0      	bne.n	8009638 <__ieee754_sqrt+0x94>
 8009656:	f04f 0c20 	mov.w	ip, #32
 800965a:	469e      	mov	lr, r3
 800965c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009660:	42a2      	cmp	r2, r4
 8009662:	eb06 070e 	add.w	r7, r6, lr
 8009666:	dc02      	bgt.n	800966e <__ieee754_sqrt+0xca>
 8009668:	d112      	bne.n	8009690 <__ieee754_sqrt+0xec>
 800966a:	428f      	cmp	r7, r1
 800966c:	d810      	bhi.n	8009690 <__ieee754_sqrt+0xec>
 800966e:	2f00      	cmp	r7, #0
 8009670:	eb07 0e06 	add.w	lr, r7, r6
 8009674:	da42      	bge.n	80096fc <__ieee754_sqrt+0x158>
 8009676:	f1be 0f00 	cmp.w	lr, #0
 800967a:	db3f      	blt.n	80096fc <__ieee754_sqrt+0x158>
 800967c:	f104 0801 	add.w	r8, r4, #1
 8009680:	1b12      	subs	r2, r2, r4
 8009682:	428f      	cmp	r7, r1
 8009684:	bf88      	it	hi
 8009686:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800968a:	1bc9      	subs	r1, r1, r7
 800968c:	4433      	add	r3, r6
 800968e:	4644      	mov	r4, r8
 8009690:	0052      	lsls	r2, r2, #1
 8009692:	f1bc 0c01 	subs.w	ip, ip, #1
 8009696:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800969a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800969e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096a2:	d1dd      	bne.n	8009660 <__ieee754_sqrt+0xbc>
 80096a4:	430a      	orrs	r2, r1
 80096a6:	d006      	beq.n	80096b6 <__ieee754_sqrt+0x112>
 80096a8:	1c5c      	adds	r4, r3, #1
 80096aa:	bf13      	iteet	ne
 80096ac:	3301      	addne	r3, #1
 80096ae:	3501      	addeq	r5, #1
 80096b0:	4663      	moveq	r3, ip
 80096b2:	f023 0301 	bicne.w	r3, r3, #1
 80096b6:	106a      	asrs	r2, r5, #1
 80096b8:	085b      	lsrs	r3, r3, #1
 80096ba:	07e9      	lsls	r1, r5, #31
 80096bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80096c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80096c4:	bf48      	it	mi
 80096c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80096ca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80096ce:	461c      	mov	r4, r3
 80096d0:	e780      	b.n	80095d4 <__ieee754_sqrt+0x30>
 80096d2:	0aca      	lsrs	r2, r1, #11
 80096d4:	3815      	subs	r0, #21
 80096d6:	0549      	lsls	r1, r1, #21
 80096d8:	2a00      	cmp	r2, #0
 80096da:	d0fa      	beq.n	80096d2 <__ieee754_sqrt+0x12e>
 80096dc:	02d6      	lsls	r6, r2, #11
 80096de:	d50a      	bpl.n	80096f6 <__ieee754_sqrt+0x152>
 80096e0:	f1c3 0420 	rsb	r4, r3, #32
 80096e4:	fa21 f404 	lsr.w	r4, r1, r4
 80096e8:	1e5d      	subs	r5, r3, #1
 80096ea:	4099      	lsls	r1, r3
 80096ec:	4322      	orrs	r2, r4
 80096ee:	1b43      	subs	r3, r0, r5
 80096f0:	e78b      	b.n	800960a <__ieee754_sqrt+0x66>
 80096f2:	4618      	mov	r0, r3
 80096f4:	e7f0      	b.n	80096d8 <__ieee754_sqrt+0x134>
 80096f6:	0052      	lsls	r2, r2, #1
 80096f8:	3301      	adds	r3, #1
 80096fa:	e7ef      	b.n	80096dc <__ieee754_sqrt+0x138>
 80096fc:	46a0      	mov	r8, r4
 80096fe:	e7bf      	b.n	8009680 <__ieee754_sqrt+0xdc>
 8009700:	7ff00000 	.word	0x7ff00000

08009704 <fabs>:
 8009704:	ec51 0b10 	vmov	r0, r1, d0
 8009708:	ee10 2a10 	vmov	r2, s0
 800970c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009710:	ec43 2b10 	vmov	d0, r2, r3
 8009714:	4770      	bx	lr

08009716 <finite>:
 8009716:	ee10 3a90 	vmov	r3, s1
 800971a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800971e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009722:	0fc0      	lsrs	r0, r0, #31
 8009724:	4770      	bx	lr

08009726 <matherr>:
 8009726:	2000      	movs	r0, #0
 8009728:	4770      	bx	lr
 800972a:	0000      	movs	r0, r0
 800972c:	0000      	movs	r0, r0
	...

08009730 <nan>:
 8009730:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009738 <nan+0x8>
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	00000000 	.word	0x00000000
 800973c:	7ff80000 	.word	0x7ff80000

08009740 <rint>:
 8009740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009742:	ec51 0b10 	vmov	r0, r1, d0
 8009746:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800974a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800974e:	2e13      	cmp	r6, #19
 8009750:	460b      	mov	r3, r1
 8009752:	ee10 4a10 	vmov	r4, s0
 8009756:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800975a:	dc56      	bgt.n	800980a <rint+0xca>
 800975c:	2e00      	cmp	r6, #0
 800975e:	da2b      	bge.n	80097b8 <rint+0x78>
 8009760:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009764:	4302      	orrs	r2, r0
 8009766:	d023      	beq.n	80097b0 <rint+0x70>
 8009768:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800976c:	4302      	orrs	r2, r0
 800976e:	4254      	negs	r4, r2
 8009770:	4314      	orrs	r4, r2
 8009772:	0c4b      	lsrs	r3, r1, #17
 8009774:	0b24      	lsrs	r4, r4, #12
 8009776:	045b      	lsls	r3, r3, #17
 8009778:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800977c:	ea44 0103 	orr.w	r1, r4, r3
 8009780:	460b      	mov	r3, r1
 8009782:	492f      	ldr	r1, [pc, #188]	; (8009840 <rint+0x100>)
 8009784:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009788:	e9d1 6700 	ldrd	r6, r7, [r1]
 800978c:	4602      	mov	r2, r0
 800978e:	4639      	mov	r1, r7
 8009790:	4630      	mov	r0, r6
 8009792:	f7f6 fd9b 	bl	80002cc <__adddf3>
 8009796:	e9cd 0100 	strd	r0, r1, [sp]
 800979a:	463b      	mov	r3, r7
 800979c:	4632      	mov	r2, r6
 800979e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097a2:	f7f6 fd91 	bl	80002c8 <__aeabi_dsub>
 80097a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80097ae:	4639      	mov	r1, r7
 80097b0:	ec41 0b10 	vmov	d0, r0, r1
 80097b4:	b003      	add	sp, #12
 80097b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097b8:	4a22      	ldr	r2, [pc, #136]	; (8009844 <rint+0x104>)
 80097ba:	4132      	asrs	r2, r6
 80097bc:	ea01 0702 	and.w	r7, r1, r2
 80097c0:	4307      	orrs	r7, r0
 80097c2:	d0f5      	beq.n	80097b0 <rint+0x70>
 80097c4:	0852      	lsrs	r2, r2, #1
 80097c6:	4011      	ands	r1, r2
 80097c8:	430c      	orrs	r4, r1
 80097ca:	d00b      	beq.n	80097e4 <rint+0xa4>
 80097cc:	ea23 0202 	bic.w	r2, r3, r2
 80097d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80097d4:	2e13      	cmp	r6, #19
 80097d6:	fa43 f306 	asr.w	r3, r3, r6
 80097da:	bf0c      	ite	eq
 80097dc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80097e0:	2400      	movne	r4, #0
 80097e2:	4313      	orrs	r3, r2
 80097e4:	4916      	ldr	r1, [pc, #88]	; (8009840 <rint+0x100>)
 80097e6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80097ea:	4622      	mov	r2, r4
 80097ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80097f0:	4620      	mov	r0, r4
 80097f2:	4629      	mov	r1, r5
 80097f4:	f7f6 fd6a 	bl	80002cc <__adddf3>
 80097f8:	e9cd 0100 	strd	r0, r1, [sp]
 80097fc:	4622      	mov	r2, r4
 80097fe:	462b      	mov	r3, r5
 8009800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009804:	f7f6 fd60 	bl	80002c8 <__aeabi_dsub>
 8009808:	e7d2      	b.n	80097b0 <rint+0x70>
 800980a:	2e33      	cmp	r6, #51	; 0x33
 800980c:	dd07      	ble.n	800981e <rint+0xde>
 800980e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009812:	d1cd      	bne.n	80097b0 <rint+0x70>
 8009814:	ee10 2a10 	vmov	r2, s0
 8009818:	f7f6 fd58 	bl	80002cc <__adddf3>
 800981c:	e7c8      	b.n	80097b0 <rint+0x70>
 800981e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009822:	f04f 32ff 	mov.w	r2, #4294967295
 8009826:	40f2      	lsrs	r2, r6
 8009828:	4210      	tst	r0, r2
 800982a:	d0c1      	beq.n	80097b0 <rint+0x70>
 800982c:	0852      	lsrs	r2, r2, #1
 800982e:	4210      	tst	r0, r2
 8009830:	bf1f      	itttt	ne
 8009832:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009836:	ea20 0202 	bicne.w	r2, r0, r2
 800983a:	4134      	asrne	r4, r6
 800983c:	4314      	orrne	r4, r2
 800983e:	e7d1      	b.n	80097e4 <rint+0xa4>
 8009840:	0800a2c8 	.word	0x0800a2c8
 8009844:	000fffff 	.word	0x000fffff

08009848 <scalbn>:
 8009848:	b570      	push	{r4, r5, r6, lr}
 800984a:	ec55 4b10 	vmov	r4, r5, d0
 800984e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009852:	4606      	mov	r6, r0
 8009854:	462b      	mov	r3, r5
 8009856:	b9aa      	cbnz	r2, 8009884 <scalbn+0x3c>
 8009858:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800985c:	4323      	orrs	r3, r4
 800985e:	d03b      	beq.n	80098d8 <scalbn+0x90>
 8009860:	4b31      	ldr	r3, [pc, #196]	; (8009928 <scalbn+0xe0>)
 8009862:	4629      	mov	r1, r5
 8009864:	2200      	movs	r2, #0
 8009866:	ee10 0a10 	vmov	r0, s0
 800986a:	f7f6 fee5 	bl	8000638 <__aeabi_dmul>
 800986e:	4b2f      	ldr	r3, [pc, #188]	; (800992c <scalbn+0xe4>)
 8009870:	429e      	cmp	r6, r3
 8009872:	4604      	mov	r4, r0
 8009874:	460d      	mov	r5, r1
 8009876:	da12      	bge.n	800989e <scalbn+0x56>
 8009878:	a327      	add	r3, pc, #156	; (adr r3, 8009918 <scalbn+0xd0>)
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	f7f6 fedb 	bl	8000638 <__aeabi_dmul>
 8009882:	e009      	b.n	8009898 <scalbn+0x50>
 8009884:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009888:	428a      	cmp	r2, r1
 800988a:	d10c      	bne.n	80098a6 <scalbn+0x5e>
 800988c:	ee10 2a10 	vmov	r2, s0
 8009890:	4620      	mov	r0, r4
 8009892:	4629      	mov	r1, r5
 8009894:	f7f6 fd1a 	bl	80002cc <__adddf3>
 8009898:	4604      	mov	r4, r0
 800989a:	460d      	mov	r5, r1
 800989c:	e01c      	b.n	80098d8 <scalbn+0x90>
 800989e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098a2:	460b      	mov	r3, r1
 80098a4:	3a36      	subs	r2, #54	; 0x36
 80098a6:	4432      	add	r2, r6
 80098a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80098ac:	428a      	cmp	r2, r1
 80098ae:	dd0b      	ble.n	80098c8 <scalbn+0x80>
 80098b0:	ec45 4b11 	vmov	d1, r4, r5
 80098b4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009920 <scalbn+0xd8>
 80098b8:	f000 f83c 	bl	8009934 <copysign>
 80098bc:	a318      	add	r3, pc, #96	; (adr r3, 8009920 <scalbn+0xd8>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	ec51 0b10 	vmov	r0, r1, d0
 80098c6:	e7da      	b.n	800987e <scalbn+0x36>
 80098c8:	2a00      	cmp	r2, #0
 80098ca:	dd08      	ble.n	80098de <scalbn+0x96>
 80098cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098d8:	ec45 4b10 	vmov	d0, r4, r5
 80098dc:	bd70      	pop	{r4, r5, r6, pc}
 80098de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098e2:	da0d      	bge.n	8009900 <scalbn+0xb8>
 80098e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098e8:	429e      	cmp	r6, r3
 80098ea:	ec45 4b11 	vmov	d1, r4, r5
 80098ee:	dce1      	bgt.n	80098b4 <scalbn+0x6c>
 80098f0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009918 <scalbn+0xd0>
 80098f4:	f000 f81e 	bl	8009934 <copysign>
 80098f8:	a307      	add	r3, pc, #28	; (adr r3, 8009918 <scalbn+0xd0>)
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	e7e0      	b.n	80098c2 <scalbn+0x7a>
 8009900:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009904:	3236      	adds	r2, #54	; 0x36
 8009906:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800990a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800990e:	4620      	mov	r0, r4
 8009910:	4629      	mov	r1, r5
 8009912:	2200      	movs	r2, #0
 8009914:	4b06      	ldr	r3, [pc, #24]	; (8009930 <scalbn+0xe8>)
 8009916:	e7b2      	b.n	800987e <scalbn+0x36>
 8009918:	c2f8f359 	.word	0xc2f8f359
 800991c:	01a56e1f 	.word	0x01a56e1f
 8009920:	8800759c 	.word	0x8800759c
 8009924:	7e37e43c 	.word	0x7e37e43c
 8009928:	43500000 	.word	0x43500000
 800992c:	ffff3cb0 	.word	0xffff3cb0
 8009930:	3c900000 	.word	0x3c900000

08009934 <copysign>:
 8009934:	ec51 0b10 	vmov	r0, r1, d0
 8009938:	ee11 0a90 	vmov	r0, s3
 800993c:	ee10 2a10 	vmov	r2, s0
 8009940:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009948:	ea41 0300 	orr.w	r3, r1, r0
 800994c:	ec43 2b10 	vmov	d0, r2, r3
 8009950:	4770      	bx	lr
	...

08009954 <_init>:
 8009954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009956:	bf00      	nop
 8009958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995a:	bc08      	pop	{r3}
 800995c:	469e      	mov	lr, r3
 800995e:	4770      	bx	lr

08009960 <_fini>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	bf00      	nop
 8009964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009966:	bc08      	pop	{r3}
 8009968:	469e      	mov	lr, r3
 800996a:	4770      	bx	lr
