
USB_COM_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b74  08005b74  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  08005b74  08005b74  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b74  08005b74  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b78  08005b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08005b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c40  20000204  08005d80  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e44  08005d80  00020e44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fc3  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000315e  00000000  00000000  000351f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  00038350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  00039340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017215  00000000  00000000  0003a198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef9f  00000000  00000000  000513ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000748a7  00000000  00000000  0006034c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4bf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004010  00000000  00000000  000d4c70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000204 	.word	0x20000204
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ae8 	.word	0x08005ae8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000208 	.word	0x20000208
 8000148:	08005ae8 	.word	0x08005ae8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b1e      	ldr	r3, [pc, #120]	; (80001ec <MX_GPIO_Init+0x90>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a1d      	ldr	r2, [pc, #116]	; (80001ec <MX_GPIO_Init+0x90>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b1b      	ldr	r3, [pc, #108]	; (80001ec <MX_GPIO_Init+0x90>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b18      	ldr	r3, [pc, #96]	; (80001ec <MX_GPIO_Init+0x90>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a17      	ldr	r2, [pc, #92]	; (80001ec <MX_GPIO_Init+0x90>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b15      	ldr	r3, [pc, #84]	; (80001ec <MX_GPIO_Init+0x90>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b12      	ldr	r3, [pc, #72]	; (80001ec <MX_GPIO_Init+0x90>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a11      	ldr	r2, [pc, #68]	; (80001ec <MX_GPIO_Init+0x90>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <MX_GPIO_Init+0x90>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001be:	480c      	ldr	r0, [pc, #48]	; (80001f0 <MX_GPIO_Init+0x94>)
 80001c0:	f000 fc5a 	bl	8000a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ca:	2301      	movs	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ce:	2300      	movs	r3, #0
 80001d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d2:	2302      	movs	r3, #2
 80001d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001d6:	f107 0310 	add.w	r3, r7, #16
 80001da:	4619      	mov	r1, r3
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <MX_GPIO_Init+0x94>)
 80001de:	f000 faf1 	bl	80007c4 <HAL_GPIO_Init>

}
 80001e2:	bf00      	nop
 80001e4:	3720      	adds	r7, #32
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40021000 	.word	0x40021000
 80001f0:	40011000 	.word	0x40011000

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f8:	f000 f9b0 	bl	800055c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fc:	f000 f81a 	bl	8000234 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* RingBuffer Init */
  	RingBuffer_Init(&rx_buf, rx_buf_array, RX_BUF_SIZE);
 8000200:	2280      	movs	r2, #128	; 0x80
 8000202:	4909      	ldr	r1, [pc, #36]	; (8000228 <main+0x34>)
 8000204:	4809      	ldr	r0, [pc, #36]	; (800022c <main+0x38>)
 8000206:	f003 fb71 	bl	80038ec <RingBuffer_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f7ff ffa7 	bl	800015c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800020e:	f004 ff0b 	bl	8005028 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CDC_Transmit_FS((uint8_t *) tx_buf, strlen(tx_buf));
 8000212:	4807      	ldr	r0, [pc, #28]	; (8000230 <main+0x3c>)
 8000214:	f7ff ff9a 	bl	800014c <strlen>
 8000218:	4603      	mov	r3, r0
 800021a:	b29b      	uxth	r3, r3
 800021c:	4619      	mov	r1, r3
 800021e:	4804      	ldr	r0, [pc, #16]	; (8000230 <main+0x3c>)
 8000220:	f005 f85e 	bl	80052e0 <CDC_Transmit_FS>
 8000224:	e7f5      	b.n	8000212 <main+0x1e>
 8000226:	bf00      	nop
 8000228:	20000450 	.word	0x20000450
 800022c:	20000444 	.word	0x20000444
 8000230:	20000000 	.word	0x20000000

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b094      	sub	sp, #80	; 0x50
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f005 fc48 	bl	8005ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000264:	2301      	movs	r3, #1
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000280:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000284:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028a:	4618      	mov	r0, r3
 800028c:	f001 faee 	bl	800186c <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000296:	f000 f839 	bl	800030c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fd58 	bl	8001d6c <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002c2:	f000 f823 	bl	800030c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002c6:	2310      	movs	r3, #16
 80002c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 ff03 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002dc:	f000 f816 	bl	800030c <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3750      	adds	r7, #80	; 0x50
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d101      	bne.n	80002fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002fa:	f000 f945 	bl	8000588 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40000800 	.word	0x40000800

0800030c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr

08000318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <HAL_MspInit+0x5c>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	4a14      	ldr	r2, [pc, #80]	; (8000374 <HAL_MspInit+0x5c>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6193      	str	r3, [r2, #24]
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <HAL_MspInit+0x5c>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000336:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <HAL_MspInit+0x5c>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <HAL_MspInit+0x5c>)
 800033c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000340:	61d3      	str	r3, [r2, #28]
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <HAL_MspInit+0x5c>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800034e:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <HAL_MspInit+0x60>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	4a04      	ldr	r2, [pc, #16]	; (8000378 <HAL_MspInit+0x60>)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	40021000 	.word	0x40021000
 8000378:	40010000 	.word	0x40010000

0800037c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08c      	sub	sp, #48	; 0x30
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800038c:	2200      	movs	r2, #0
 800038e:	6879      	ldr	r1, [r7, #4]
 8000390:	201e      	movs	r0, #30
 8000392:	f000 f9ec 	bl	800076e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000396:	201e      	movs	r0, #30
 8000398:	f000 fa05 	bl	80007a6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <HAL_InitTick+0xa0>)
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	4a1e      	ldr	r2, [pc, #120]	; (800041c <HAL_InitTick+0xa0>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	61d3      	str	r3, [r2, #28]
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <HAL_InitTick+0xa0>)
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003b4:	f107 0210 	add.w	r2, r7, #16
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	4611      	mov	r1, r2
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fe3e 	bl	8002040 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80003c4:	f001 fe28 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 80003c8:	4603      	mov	r3, r0
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80003ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003d0:	4a13      	ldr	r2, [pc, #76]	; (8000420 <HAL_InitTick+0xa4>)
 80003d2:	fba2 2303 	umull	r2, r3, r2, r3
 80003d6:	0c9b      	lsrs	r3, r3, #18
 80003d8:	3b01      	subs	r3, #1
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <HAL_InitTick+0xa8>)
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <HAL_InitTick+0xac>)
 80003e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <HAL_InitTick+0xa8>)
 80003e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003e8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_InitTick+0xa8>)
 80003ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ee:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_InitTick+0xa8>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <HAL_InitTick+0xa8>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80003fc:	4809      	ldr	r0, [pc, #36]	; (8000424 <HAL_InitTick+0xa8>)
 80003fe:	f001 ff23 	bl	8002248 <HAL_TIM_Base_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d104      	bne.n	8000412 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <HAL_InitTick+0xa8>)
 800040a:	f001 ff51 	bl	80022b0 <HAL_TIM_Base_Start_IT>
 800040e:	4603      	mov	r3, r0
 8000410:	e000      	b.n	8000414 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000412:	2301      	movs	r3, #1
}
 8000414:	4618      	mov	r0, r3
 8000416:	3730      	adds	r7, #48	; 0x30
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	431bde83 	.word	0x431bde83
 8000424:	200004d0 	.word	0x200004d0
 8000428:	40000800 	.word	0x40000800

0800042c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043c:	e7fe      	b.n	800043c <HardFault_Handler+0x4>

0800043e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000442:	e7fe      	b.n	8000442 <MemManage_Handler+0x4>

08000444 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <BusFault_Handler+0x4>

0800044a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <UsageFault_Handler+0x4>

08000450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000486:	f000 fc16 	bl	8000cb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000bd8 	.word	0x20000bd8

08000494 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <TIM4_IRQHandler+0x10>)
 800049a:	f001 ff2c 	bl	80022f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200004d0 	.word	0x200004d0

080004a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <SystemInit+0x5c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a14      	ldr	r2, [pc, #80]	; (8000504 <SystemInit+0x5c>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <SystemInit+0x5c>)
 80004ba:	685a      	ldr	r2, [r3, #4]
 80004bc:	4911      	ldr	r1, [pc, #68]	; (8000504 <SystemInit+0x5c>)
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <SystemInit+0x60>)
 80004c0:	4013      	ands	r3, r2
 80004c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <SystemInit+0x5c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <SystemInit+0x5c>)
 80004ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <SystemInit+0x5c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <SystemInit+0x5c>)
 80004da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <SystemInit+0x5c>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <SystemInit+0x5c>)
 80004e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <SystemInit+0x5c>)
 80004ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <SystemInit+0x64>)
 80004f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000
 8000508:	f8ff0000 	.word	0xf8ff0000
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000510:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000512:	e003      	b.n	800051c <LoopCopyDataInit>

08000514 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000516:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000518:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800051a:	3104      	adds	r1, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000520:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000522:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000524:	d3f6      	bcc.n	8000514 <CopyDataInit>
  ldr r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000528:	e002      	b.n	8000530 <LoopFillZerobss>

0800052a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800052c:	f842 3b04 	str.w	r3, [r2], #4

08000530 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000532:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000534:	d3f9      	bcc.n	800052a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000536:	f7ff ffb7 	bl	80004a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053a:	f005 faa9 	bl	8005a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053e:	f7ff fe59 	bl	80001f4 <main>
  bx lr
 8000542:	4770      	bx	lr
  ldr r3, =_sidata
 8000544:	08005b7c 	.word	0x08005b7c
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800054c:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 8000550:	20000204 	.word	0x20000204
  ldr r3, = _ebss
 8000554:	20000e44 	.word	0x20000e44

08000558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC1_2_IRQHandler>
	...

0800055c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_Init+0x28>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_Init+0x28>)
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800056c:	2003      	movs	r0, #3
 800056e:	f000 f8f3 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ff02 	bl	800037c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000578:	f7ff fece 	bl	8000318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40022000 	.word	0x40022000

08000588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <HAL_IncTick+0x1c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_IncTick+0x20>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x20>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	20000088 	.word	0x20000088
 80005a8:	20000510 	.word	0x20000510

080005ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b02      	ldr	r3, [pc, #8]	; (80005bc <HAL_GetTick+0x10>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	20000510 	.word	0x20000510

080005c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c8:	f7ff fff0 	bl	80005ac <HAL_GetTick>
 80005cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d8:	d005      	beq.n	80005e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_Delay+0x40>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e6:	bf00      	nop
 80005e8:	f7ff ffe0 	bl	80005ac <HAL_GetTick>
 80005ec:	4602      	mov	r2, r0
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d8f7      	bhi.n	80005e8 <HAL_Delay+0x28>
  {
  }
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000088 	.word	0x20000088

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db0b      	blt.n	8000692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 021f 	and.w	r2, r3, #31
 8000680:	4906      	ldr	r1, [pc, #24]	; (800069c <__NVIC_EnableIRQ+0x34>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	095b      	lsrs	r3, r3, #5
 8000688:	2001      	movs	r0, #1
 800068a:	fa00 f202 	lsl.w	r2, r0, r2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff4f 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff64 	bl	800064c <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ffb2 	bl	80006f4 <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff81 	bl	80006a0 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff57 	bl	8000668 <__NVIC_EnableIRQ>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b08b      	sub	sp, #44	; 0x2c
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007d6:	e127      	b.n	8000a28 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007d8:	2201      	movs	r2, #1
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	4013      	ands	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	f040 8116 	bne.w	8000a22 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b12      	cmp	r3, #18
 80007fc:	d034      	beq.n	8000868 <HAL_GPIO_Init+0xa4>
 80007fe:	2b12      	cmp	r3, #18
 8000800:	d80d      	bhi.n	800081e <HAL_GPIO_Init+0x5a>
 8000802:	2b02      	cmp	r3, #2
 8000804:	d02b      	beq.n	800085e <HAL_GPIO_Init+0x9a>
 8000806:	2b02      	cmp	r3, #2
 8000808:	d804      	bhi.n	8000814 <HAL_GPIO_Init+0x50>
 800080a:	2b00      	cmp	r3, #0
 800080c:	d031      	beq.n	8000872 <HAL_GPIO_Init+0xae>
 800080e:	2b01      	cmp	r3, #1
 8000810:	d01c      	beq.n	800084c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000812:	e048      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000814:	2b03      	cmp	r3, #3
 8000816:	d043      	beq.n	80008a0 <HAL_GPIO_Init+0xdc>
 8000818:	2b11      	cmp	r3, #17
 800081a:	d01b      	beq.n	8000854 <HAL_GPIO_Init+0x90>
          break;
 800081c:	e043      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800081e:	4a89      	ldr	r2, [pc, #548]	; (8000a44 <HAL_GPIO_Init+0x280>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d026      	beq.n	8000872 <HAL_GPIO_Init+0xae>
 8000824:	4a87      	ldr	r2, [pc, #540]	; (8000a44 <HAL_GPIO_Init+0x280>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d806      	bhi.n	8000838 <HAL_GPIO_Init+0x74>
 800082a:	4a87      	ldr	r2, [pc, #540]	; (8000a48 <HAL_GPIO_Init+0x284>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d020      	beq.n	8000872 <HAL_GPIO_Init+0xae>
 8000830:	4a86      	ldr	r2, [pc, #536]	; (8000a4c <HAL_GPIO_Init+0x288>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d01d      	beq.n	8000872 <HAL_GPIO_Init+0xae>
          break;
 8000836:	e036      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000838:	4a85      	ldr	r2, [pc, #532]	; (8000a50 <HAL_GPIO_Init+0x28c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d019      	beq.n	8000872 <HAL_GPIO_Init+0xae>
 800083e:	4a85      	ldr	r2, [pc, #532]	; (8000a54 <HAL_GPIO_Init+0x290>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d016      	beq.n	8000872 <HAL_GPIO_Init+0xae>
 8000844:	4a84      	ldr	r2, [pc, #528]	; (8000a58 <HAL_GPIO_Init+0x294>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d013      	beq.n	8000872 <HAL_GPIO_Init+0xae>
          break;
 800084a:	e02c      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	623b      	str	r3, [r7, #32]
          break;
 8000852:	e028      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	3304      	adds	r3, #4
 800085a:	623b      	str	r3, [r7, #32]
          break;
 800085c:	e023      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	3308      	adds	r3, #8
 8000864:	623b      	str	r3, [r7, #32]
          break;
 8000866:	e01e      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	330c      	adds	r3, #12
 800086e:	623b      	str	r3, [r7, #32]
          break;
 8000870:	e019      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d102      	bne.n	8000880 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800087a:	2304      	movs	r3, #4
 800087c:	623b      	str	r3, [r7, #32]
          break;
 800087e:	e012      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d105      	bne.n	8000894 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000888:	2308      	movs	r3, #8
 800088a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	69fa      	ldr	r2, [r7, #28]
 8000890:	611a      	str	r2, [r3, #16]
          break;
 8000892:	e008      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000894:	2308      	movs	r3, #8
 8000896:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69fa      	ldr	r2, [r7, #28]
 800089c:	615a      	str	r2, [r3, #20]
          break;
 800089e:	e002      	b.n	80008a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
          break;
 80008a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	2bff      	cmp	r3, #255	; 0xff
 80008aa:	d801      	bhi.n	80008b0 <HAL_GPIO_Init+0xec>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	e001      	b.n	80008b4 <HAL_GPIO_Init+0xf0>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3304      	adds	r3, #4
 80008b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	2bff      	cmp	r3, #255	; 0xff
 80008ba:	d802      	bhi.n	80008c2 <HAL_GPIO_Init+0xfe>
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	e002      	b.n	80008c8 <HAL_GPIO_Init+0x104>
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	3b08      	subs	r3, #8
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	210f      	movs	r1, #15
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	401a      	ands	r2, r3
 80008da:	6a39      	ldr	r1, [r7, #32]
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	431a      	orrs	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	f000 8096 	beq.w	8000a22 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008f6:	4b59      	ldr	r3, [pc, #356]	; (8000a5c <HAL_GPIO_Init+0x298>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	4a58      	ldr	r2, [pc, #352]	; (8000a5c <HAL_GPIO_Init+0x298>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6193      	str	r3, [r2, #24]
 8000902:	4b56      	ldr	r3, [pc, #344]	; (8000a5c <HAL_GPIO_Init+0x298>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800090e:	4a54      	ldr	r2, [pc, #336]	; (8000a60 <HAL_GPIO_Init+0x29c>)
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	3302      	adds	r3, #2
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	f003 0303 	and.w	r3, r3, #3
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	220f      	movs	r2, #15
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	4013      	ands	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a4b      	ldr	r2, [pc, #300]	; (8000a64 <HAL_GPIO_Init+0x2a0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d013      	beq.n	8000962 <HAL_GPIO_Init+0x19e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a4a      	ldr	r2, [pc, #296]	; (8000a68 <HAL_GPIO_Init+0x2a4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d00d      	beq.n	800095e <HAL_GPIO_Init+0x19a>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a49      	ldr	r2, [pc, #292]	; (8000a6c <HAL_GPIO_Init+0x2a8>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d007      	beq.n	800095a <HAL_GPIO_Init+0x196>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a48      	ldr	r2, [pc, #288]	; (8000a70 <HAL_GPIO_Init+0x2ac>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_GPIO_Init+0x192>
 8000952:	2303      	movs	r3, #3
 8000954:	e006      	b.n	8000964 <HAL_GPIO_Init+0x1a0>
 8000956:	2304      	movs	r3, #4
 8000958:	e004      	b.n	8000964 <HAL_GPIO_Init+0x1a0>
 800095a:	2302      	movs	r3, #2
 800095c:	e002      	b.n	8000964 <HAL_GPIO_Init+0x1a0>
 800095e:	2301      	movs	r3, #1
 8000960:	e000      	b.n	8000964 <HAL_GPIO_Init+0x1a0>
 8000962:	2300      	movs	r3, #0
 8000964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000966:	f002 0203 	and.w	r2, r2, #3
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	4093      	lsls	r3, r2
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4313      	orrs	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000974:	493a      	ldr	r1, [pc, #232]	; (8000a60 <HAL_GPIO_Init+0x29c>)
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	3302      	adds	r3, #2
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d006      	beq.n	800099c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800098e:	4b39      	ldr	r3, [pc, #228]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4938      	ldr	r1, [pc, #224]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	4313      	orrs	r3, r2
 8000998:	600b      	str	r3, [r1, #0]
 800099a:	e006      	b.n	80009aa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800099c:	4b35      	ldr	r3, [pc, #212]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	43db      	mvns	r3, r3
 80009a4:	4933      	ldr	r1, [pc, #204]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 80009a6:	4013      	ands	r3, r2
 80009a8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d006      	beq.n	80009c4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	492e      	ldr	r1, [pc, #184]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	4313      	orrs	r3, r2
 80009c0:	604b      	str	r3, [r1, #4]
 80009c2:	e006      	b.n	80009d2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	43db      	mvns	r3, r3
 80009cc:	4929      	ldr	r1, [pc, #164]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 80009ce:	4013      	ands	r3, r2
 80009d0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d006      	beq.n	80009ec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	4924      	ldr	r1, [pc, #144]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	608b      	str	r3, [r1, #8]
 80009ea:	e006      	b.n	80009fa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	43db      	mvns	r3, r3
 80009f4:	491f      	ldr	r1, [pc, #124]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 80009f6:	4013      	ands	r3, r2
 80009f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	491a      	ldr	r1, [pc, #104]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	60cb      	str	r3, [r1, #12]
 8000a12:	e006      	b.n	8000a22 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 8000a16:	68da      	ldr	r2, [r3, #12]
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	4915      	ldr	r1, [pc, #84]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	3301      	adds	r3, #1
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f47f aed0 	bne.w	80007d8 <HAL_GPIO_Init+0x14>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	372c      	adds	r7, #44	; 0x2c
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	10210000 	.word	0x10210000
 8000a48:	10110000 	.word	0x10110000
 8000a4c:	10120000 	.word	0x10120000
 8000a50:	10310000 	.word	0x10310000
 8000a54:	10320000 	.word	0x10320000
 8000a58:	10220000 	.word	0x10220000
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010000 	.word	0x40010000
 8000a64:	40010800 	.word	0x40010800
 8000a68:	40010c00 	.word	0x40010c00
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	40011400 	.word	0x40011400
 8000a74:	40010400 	.word	0x40010400

08000a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	807b      	strh	r3, [r7, #2]
 8000a84:	4613      	mov	r3, r2
 8000a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a88:	787b      	ldrb	r3, [r7, #1]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a8e:	887a      	ldrh	r2, [r7, #2]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a94:	e003      	b.n	8000a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	041a      	lsls	r2, r3, #16
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	611a      	str	r2, [r3, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	b08b      	sub	sp, #44	; 0x2c
 8000aac:	af06      	add	r7, sp, #24
 8000aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e0d3      	b.n	8000c62 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d106      	bne.n	8000ad4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f004 fd40 	bl	8005554 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fdd0 	bl	8002686 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	687e      	ldr	r6, [r7, #4]
 8000aee:	466d      	mov	r5, sp
 8000af0:	f106 0410 	add.w	r4, r6, #16
 8000af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af8:	6823      	ldr	r3, [r4, #0]
 8000afa:	602b      	str	r3, [r5, #0]
 8000afc:	1d33      	adds	r3, r6, #4
 8000afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f001 fd99 	bl	8002638 <USB_CoreInit>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2202      	movs	r2, #2
 8000b10:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e0a4      	b.n	8000c62 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fdcd 	bl	80026be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e035      	b.n	8000b96 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	015b      	lsls	r3, r3, #5
 8000b30:	4413      	add	r3, r2
 8000b32:	3329      	adds	r3, #41	; 0x29
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	015b      	lsls	r3, r3, #5
 8000b3e:	4413      	add	r3, r2
 8000b40:	3328      	adds	r3, #40	; 0x28
 8000b42:	7bfa      	ldrb	r2, [r7, #15]
 8000b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	7bfa      	ldrb	r2, [r7, #15]
 8000b4a:	b291      	uxth	r1, r2
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	015b      	lsls	r3, r3, #5
 8000b50:	4413      	add	r3, r2
 8000b52:	3336      	adds	r3, #54	; 0x36
 8000b54:	460a      	mov	r2, r1
 8000b56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	015b      	lsls	r3, r3, #5
 8000b5e:	4413      	add	r3, r2
 8000b60:	332b      	adds	r3, #43	; 0x2b
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	015b      	lsls	r3, r3, #5
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3338      	adds	r3, #56	; 0x38
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	015b      	lsls	r3, r3, #5
 8000b7a:	4413      	add	r3, r2
 8000b7c:	333c      	adds	r3, #60	; 0x3c
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	3302      	adds	r3, #2
 8000b88:	015b      	lsls	r3, r3, #5
 8000b8a:	4413      	add	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	3301      	adds	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	7bfa      	ldrb	r2, [r7, #15]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d3c4      	bcc.n	8000b2a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	e031      	b.n	8000c0a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	015b      	lsls	r3, r3, #5
 8000bac:	4413      	add	r3, r2
 8000bae:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	015b      	lsls	r3, r3, #5
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000bc2:	7bfa      	ldrb	r2, [r7, #15]
 8000bc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	015b      	lsls	r3, r3, #5
 8000bcc:	4413      	add	r3, r2
 8000bce:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	015b      	lsls	r3, r3, #5
 8000bdc:	4413      	add	r3, r2
 8000bde:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	015b      	lsls	r3, r3, #5
 8000bec:	4413      	add	r3, r2
 8000bee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	330a      	adds	r3, #10
 8000bfc:	015b      	lsls	r3, r3, #5
 8000bfe:	4413      	add	r3, r2
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	3301      	adds	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d3c8      	bcc.n	8000ba6 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	687e      	ldr	r6, [r7, #4]
 8000c1c:	466d      	mov	r5, sp
 8000c1e:	f106 0410 	add.w	r4, r6, #16
 8000c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	602b      	str	r3, [r5, #0]
 8000c2a:	1d33      	adds	r3, r6, #4
 8000c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c2e:	6838      	ldr	r0, [r7, #0]
 8000c30:	f001 fd51 	bl	80026d6 <USB_DevInit>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00d      	b.n	8000c62 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fd8f 	bl	800377e <USB_DevDisconnect>

  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d101      	bne.n	8000c80 <HAL_PCD_Start+0x16>
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	e016      	b.n	8000cae <HAL_PCD_Start+0x44>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2201      	movs	r2, #1
 8000c84:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000c88:	2101      	movs	r1, #1
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f004 fec9 	bl	8005a22 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fd68 	bl	800376a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fcda 	bl	8002658 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fd65 	bl	8003792 <USB_ReadInterrupts>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cd2:	d102      	bne.n	8000cda <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 faf3 	bl	80012c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 fd57 	bl	8003792 <USB_ReadInterrupts>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cee:	d112      	bne.n	8000d16 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d02:	b292      	uxth	r2, r2
 8000d04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f004 fc98 	bl	800563e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f000 f8de 	bl	8000ed2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 fd39 	bl	8003792 <USB_ReadInterrupts>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d2a:	d10b      	bne.n	8000d44 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d3e:	b292      	uxth	r2, r2
 8000d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 fd22 	bl	8003792 <USB_ReadInterrupts>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d58:	d10b      	bne.n	8000d72 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d6c:	b292      	uxth	r2, r2
 8000d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 fd0b 	bl	8003792 <USB_ReadInterrupts>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d86:	d126      	bne.n	8000dd6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0204 	bic.w	r2, r2, #4
 8000d9a:	b292      	uxth	r2, r2
 8000d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0208 	bic.w	r2, r2, #8
 8000db2:	b292      	uxth	r2, r2
 8000db4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f004 fc79 	bl	80056b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 fcd9 	bl	8003792 <USB_ReadInterrupts>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dea:	d13d      	bne.n	8000e68 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0208 	orr.w	r2, r2, #8
 8000dfe:	b292      	uxth	r2, r2
 8000e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e16:	b292      	uxth	r2, r2
 8000e18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0204 	orr.w	r2, r2, #4
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 fcaa 	bl	8003792 <USB_ReadInterrupts>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e48:	d10b      	bne.n	8000e62 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e5c:	b292      	uxth	r2, r2
 8000e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f004 fc0a 	bl	800567c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 fc90 	bl	8003792 <USB_ReadInterrupts>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e7c:	d10e      	bne.n	8000e9c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e90:	b292      	uxth	r2, r2
 8000e92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f004 fbc3 	bl	8005622 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 fc76 	bl	8003792 <USB_ReadInterrupts>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eb0:	d10b      	bne.n	8000eca <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ec4:	b292      	uxth	r2, r2
 8000ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d101      	bne.n	8000eec <HAL_PCD_SetAddress+0x1a>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e013      	b.n	8000f14 <HAL_PCD_SetAddress+0x42>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	78fa      	ldrb	r2, [r7, #3]
 8000ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	78fa      	ldrb	r2, [r7, #3]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 fc1d 	bl	8003744 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	4608      	mov	r0, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	70fb      	strb	r3, [r7, #3]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	803b      	strh	r3, [r7, #0]
 8000f32:	4613      	mov	r3, r2
 8000f34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da0b      	bge.n	8000f5a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	015b      	lsls	r3, r3, #5
 8000f4a:	3328      	adds	r3, #40	; 0x28
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2201      	movs	r2, #1
 8000f56:	705a      	strb	r2, [r3, #1]
 8000f58:	e00b      	b.n	8000f72 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	015b      	lsls	r3, r3, #5
 8000f62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000f7e:	883a      	ldrh	r2, [r7, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	78ba      	ldrb	r2, [r7, #2]
 8000f88:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	785b      	ldrb	r3, [r3, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000f9c:	78bb      	ldrb	r3, [r7, #2]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d102      	bne.n	8000fa8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <HAL_PCD_EP_Open+0x9a>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e00e      	b.n	8000fd4 <HAL_PCD_EP_Open+0xb8>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 fbab 	bl	8002720 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000fd2:	7afb      	ldrb	r3, [r7, #11]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da0b      	bge.n	8001008 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	3328      	adds	r3, #40	; 0x28
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2201      	movs	r2, #1
 8001004:	705a      	strb	r2, [r3, #1]
 8001006:	e00b      	b.n	8001020 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	015b      	lsls	r3, r3, #5
 8001010:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2200      	movs	r2, #0
 800101e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	b2da      	uxtb	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001032:	2b01      	cmp	r3, #1
 8001034:	d101      	bne.n	800103a <HAL_PCD_EP_Close+0x5e>
 8001036:	2302      	movs	r3, #2
 8001038:	e00e      	b.n	8001058 <HAL_PCD_EP_Close+0x7c>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68f9      	ldr	r1, [r7, #12]
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fe57 	bl	8002cfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	460b      	mov	r3, r1
 800106e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	015b      	lsls	r3, r3, #5
 8001078:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2200      	movs	r2, #0
 8001098:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80010a6:	7afb      	ldrb	r3, [r7, #11]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d106      	bne.n	80010be <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6979      	ldr	r1, [r7, #20]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 ffb6 	bl	8003028 <USB_EPStartXfer>
 80010bc:	e005      	b.n	80010ca <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6979      	ldr	r1, [r7, #20]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 ffaf 	bl	8003028 <USB_EPStartXfer>
  }

  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	330a      	adds	r3, #10
 80010ea:	015b      	lsls	r3, r3, #5
 80010ec:	4413      	add	r3, r2
 80010ee:	3304      	adds	r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	460b      	mov	r3, r1
 800110a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800110c:	7afb      	ldrb	r3, [r7, #11]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	015b      	lsls	r3, r3, #5
 8001114:	3328      	adds	r3, #40	; 0x28
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2201      	movs	r2, #1
 8001132:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001134:	7afb      	ldrb	r3, [r7, #11]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	b2da      	uxtb	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001140:	7afb      	ldrb	r3, [r7, #11]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	2b00      	cmp	r3, #0
 8001148:	d106      	bne.n	8001158 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6979      	ldr	r1, [r7, #20]
 8001150:	4618      	mov	r0, r3
 8001152:	f001 ff69 	bl	8003028 <USB_EPStartXfer>
 8001156:	e005      	b.n	8001164 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6979      	ldr	r1, [r7, #20]
 800115e:	4618      	mov	r0, r3
 8001160:	f001 ff62 	bl	8003028 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	f003 0207 	and.w	r2, r3, #7
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	d901      	bls.n	800118c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e046      	b.n	800121a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800118c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001190:	2b00      	cmp	r3, #0
 8001192:	da0b      	bge.n	80011ac <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	015b      	lsls	r3, r3, #5
 800119c:	3328      	adds	r3, #40	; 0x28
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2201      	movs	r2, #1
 80011a8:	705a      	strb	r2, [r3, #1]
 80011aa:	e009      	b.n	80011c0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2201      	movs	r2, #1
 80011c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_PCD_EP_SetStall+0x72>
 80011dc:	2302      	movs	r3, #2
 80011de:	e01c      	b.n	800121a <HAL_PCD_EP_SetStall+0xac>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68f9      	ldr	r1, [r7, #12]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 f9d2 	bl	8003598 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d108      	bne.n	8001210 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001208:	4619      	mov	r1, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f002 fad0 	bl	80037b0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	f003 020f 	and.w	r2, r3, #15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	d901      	bls.n	8001240 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e03a      	b.n	80012b6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001244:	2b00      	cmp	r3, #0
 8001246:	da0b      	bge.n	8001260 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	015b      	lsls	r3, r3, #5
 8001250:	3328      	adds	r3, #40	; 0x28
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2201      	movs	r2, #1
 800125c:	705a      	strb	r2, [r3, #1]
 800125e:	e00b      	b.n	8001278 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	015b      	lsls	r3, r3, #5
 8001268:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	b2da      	uxtb	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_PCD_EP_ClrStall+0x76>
 8001294:	2302      	movs	r3, #2
 8001296:	e00e      	b.n	80012b6 <HAL_PCD_EP_ClrStall+0x94>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68f9      	ldr	r1, [r7, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 f9b8 	bl	800361c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80012c8:	e282      	b.n	80017d0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012d2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80012d4:	8afb      	ldrh	r3, [r7, #22]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80012de:	7d7b      	ldrb	r3, [r7, #21]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f040 8142 	bne.w	800156a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80012e6:	8afb      	ldrh	r3, [r7, #22]
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d151      	bne.n	8001394 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80012fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001300:	b29c      	uxth	r4, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800130a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800130e:	b29b      	uxth	r3, r3
 8001310:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3328      	adds	r3, #40	; 0x28
 8001316:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001320:	b29b      	uxth	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	3302      	adds	r3, #2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	4413      	add	r3, r2
 8001336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	441a      	add	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001352:	2100      	movs	r1, #0
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f004 f94d 	bl	80055f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8234 	beq.w	80017d0 <PCD_EP_ISR_Handler+0x510>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 822f 	bne.w	80017d0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800137e:	b2da      	uxtb	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	b292      	uxth	r2, r2
 8001386:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001392:	e21d      	b.n	80017d0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800139a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013a4:	8a7b      	ldrh	r3, [r7, #18]
 80013a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d033      	beq.n	8001416 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	3306      	adds	r3, #6
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f002 fa2e 	bl	800384e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80013fe:	4013      	ands	r3, r2
 8001400:	b29c      	uxth	r4, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800140a:	b292      	uxth	r2, r2
 800140c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f004 f8c6 	bl	80055a0 <HAL_PCD_SetupStageCallback>
 8001414:	e1dc      	b.n	80017d0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001416:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f280 81d8 	bge.w	80017d0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	b29a      	uxth	r2, r3
 8001428:	f640 738f 	movw	r3, #3983	; 0xf8f
 800142c:	4013      	ands	r3, r2
 800142e:	b29c      	uxth	r4, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001438:	b292      	uxth	r2, r2
 800143a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001444:	b29b      	uxth	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	3306      	adds	r3, #6
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	4413      	add	r3, r2
 800145a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d019      	beq.n	80014a4 <PCD_EP_ISR_Handler+0x1e4>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d015      	beq.n	80014a4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6959      	ldr	r1, [r3, #20]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001488:	b29b      	uxth	r3, r3
 800148a:	f002 f9e0 	bl	800384e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	441a      	add	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800149c:	2100      	movs	r1, #0
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f004 f890 	bl	80055c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	461c      	mov	r4, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	441c      	add	r4, r3
 80014b6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80014ba:	461c      	mov	r4, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10e      	bne.n	80014e2 <PCD_EP_ISR_Handler+0x222>
 80014c4:	8823      	ldrh	r3, [r4, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	8023      	strh	r3, [r4, #0]
 80014d0:	8823      	ldrh	r3, [r4, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014dc:	b29b      	uxth	r3, r3
 80014de:	8023      	strh	r3, [r4, #0]
 80014e0:	e02d      	b.n	800153e <PCD_EP_ISR_Handler+0x27e>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b3e      	cmp	r3, #62	; 0x3e
 80014e8:	d812      	bhi.n	8001510 <PCD_EP_ISR_Handler+0x250>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	085b      	lsrs	r3, r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <PCD_EP_ISR_Handler+0x244>
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	3301      	adds	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	b29b      	uxth	r3, r3
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	b29b      	uxth	r3, r3
 800150c:	8023      	strh	r3, [r4, #0]
 800150e:	e016      	b.n	800153e <PCD_EP_ISR_Handler+0x27e>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	095b      	lsrs	r3, r3, #5
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <PCD_EP_ISR_Handler+0x26a>
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	3b01      	subs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	b29b      	uxth	r3, r3
 800152e:	029b      	lsls	r3, r3, #10
 8001530:	b29b      	uxth	r3, r3
 8001532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800153a:	b29b      	uxth	r3, r3
 800153c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800154a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800154e:	b29c      	uxth	r4, r3
 8001550:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001554:	b29c      	uxth	r4, r3
 8001556:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800155a:	b29c      	uxth	r4, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4ba2      	ldr	r3, [pc, #648]	; (80017ec <PCD_EP_ISR_Handler+0x52c>)
 8001562:	4323      	orrs	r3, r4
 8001564:	b29b      	uxth	r3, r3
 8001566:	8013      	strh	r3, [r2, #0]
 8001568:	e132      	b.n	80017d0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	7d7b      	ldrb	r3, [r7, #21]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800157a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f280 80d1 	bge.w	8001726 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	7d7b      	ldrb	r3, [r7, #21]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	b29a      	uxth	r2, r3
 8001594:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001598:	4013      	ands	r3, r2
 800159a:	b29c      	uxth	r4, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	7d7b      	ldrb	r3, [r7, #21]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80015ac:	b292      	uxth	r2, r2
 80015ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80015b0:	7d7b      	ldrb	r3, [r7, #21]
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	7b1b      	ldrb	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d121      	bne.n	800160a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	3306      	adds	r3, #6
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015ee:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d072      	beq.n	80016dc <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6959      	ldr	r1, [r3, #20]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	88da      	ldrh	r2, [r3, #6]
 8001602:	8bfb      	ldrh	r3, [r7, #30]
 8001604:	f002 f923 	bl	800384e <USB_ReadPMA>
 8001608:	e068      	b.n	80016dc <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d021      	beq.n	8001668 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800162c:	b29b      	uxth	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	3302      	adds	r3, #2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800164c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800164e:	8bfb      	ldrh	r3, [r7, #30]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d02a      	beq.n	80016aa <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6959      	ldr	r1, [r3, #20]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	891a      	ldrh	r2, [r3, #8]
 8001660:	8bfb      	ldrh	r3, [r7, #30]
 8001662:	f002 f8f4 	bl	800384e <USB_ReadPMA>
 8001666:	e020      	b.n	80016aa <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001670:	b29b      	uxth	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	3306      	adds	r3, #6
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	4413      	add	r3, r2
 8001686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001690:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001692:	8bfb      	ldrh	r3, [r7, #30]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6959      	ldr	r1, [r3, #20]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	895a      	ldrh	r2, [r3, #10]
 80016a4:	8bfb      	ldrh	r3, [r7, #30]
 80016a6:	f002 f8d2 	bl	800384e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c4:	b29c      	uxth	r4, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	441a      	add	r2, r3
 80016d4:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <PCD_EP_ISR_Handler+0x530>)
 80016d6:	4323      	orrs	r3, r4
 80016d8:	b29b      	uxth	r3, r3
 80016da:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	69da      	ldr	r2, [r3, #28]
 80016e0:	8bfb      	ldrh	r3, [r7, #30]
 80016e2:	441a      	add	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	8bfb      	ldrh	r3, [r7, #30]
 80016ee:	441a      	add	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <PCD_EP_ISR_Handler+0x446>
 80016fc:	8bfa      	ldrh	r2, [r7, #30]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	429a      	cmp	r2, r3
 8001704:	d206      	bcs.n	8001714 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f003 ff59 	bl	80055c4 <HAL_PCD_DataOutStageCallback>
 8001712:	e008      	b.n	8001726 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	7819      	ldrb	r1, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fc9d 	bl	8001060 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001726:	8a7b      	ldrh	r3, [r7, #18]
 8001728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172c:	2b00      	cmp	r3, #0
 800172e:	d04f      	beq.n	80017d0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001730:	7d7b      	ldrb	r3, [r7, #21]
 8001732:	015b      	lsls	r3, r3, #5
 8001734:	3328      	adds	r3, #40	; 0x28
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	7d7b      	ldrb	r3, [r7, #21]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001754:	b29c      	uxth	r4, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	7d7b      	ldrb	r3, [r7, #21]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	441a      	add	r2, r3
 8001762:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800176a:	b29b      	uxth	r3, r3
 800176c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001776:	b29b      	uxth	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4413      	add	r3, r2
 8001782:	3302      	adds	r3, #2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	441a      	add	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d106      	bne.n	80017be <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f003 ff1c 	bl	80055f4 <HAL_PCD_DataInStageCallback>
 80017bc:	e008      	b.n	80017d0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	7819      	ldrb	r1, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fc96 	bl	80010fc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b21b      	sxth	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f6ff ad74 	blt.w	80012ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3724      	adds	r7, #36	; 0x24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}
 80017ec:	ffff8080 	.word	0xffff8080
 80017f0:	ffff80c0 	.word	0xffff80c0

080017f4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	817b      	strh	r3, [r7, #10]
 8001802:	4613      	mov	r3, r2
 8001804:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001806:	897b      	ldrh	r3, [r7, #10]
 8001808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180c:	b29b      	uxth	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001812:	897b      	ldrh	r3, [r7, #10]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	015b      	lsls	r3, r3, #5
 800181a:	3328      	adds	r3, #40	; 0x28
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e006      	b.n	8001832 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001824:	897b      	ldrh	r3, [r7, #10]
 8001826:	015b      	lsls	r3, r3, #5
 8001828:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001832:	893b      	ldrh	r3, [r7, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d107      	bne.n	8001848 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2200      	movs	r2, #0
 800183c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	b29a      	uxth	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	80da      	strh	r2, [r3, #6]
 8001846:	e00b      	b.n	8001860 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2201      	movs	r2, #1
 800184c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	b29a      	uxth	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	b29a      	uxth	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e26c      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8087 	beq.w	800199a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800188c:	4b92      	ldr	r3, [pc, #584]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b04      	cmp	r3, #4
 8001896:	d00c      	beq.n	80018b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001898:	4b8f      	ldr	r3, [pc, #572]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d112      	bne.n	80018ca <HAL_RCC_OscConfig+0x5e>
 80018a4:	4b8c      	ldr	r3, [pc, #560]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d10b      	bne.n	80018ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b2:	4b89      	ldr	r3, [pc, #548]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d06c      	beq.n	8001998 <HAL_RCC_OscConfig+0x12c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d168      	bne.n	8001998 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e246      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x76>
 80018d4:	4b80      	ldr	r3, [pc, #512]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a7f      	ldr	r2, [pc, #508]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e02e      	b.n	8001940 <HAL_RCC_OscConfig+0xd4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x98>
 80018ea:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a7a      	ldr	r2, [pc, #488]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b78      	ldr	r3, [pc, #480]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a77      	ldr	r2, [pc, #476]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xd4>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0xbc>
 800190e:	4b72      	ldr	r3, [pc, #456]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a71      	ldr	r2, [pc, #452]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a6e      	ldr	r2, [pc, #440]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xd4>
 8001928:	4b6b      	ldr	r3, [pc, #428]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a6a      	ldr	r2, [pc, #424]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a67      	ldr	r2, [pc, #412]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7fe fe30 	bl	80005ac <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7fe fe2c 	bl	80005ac <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1fa      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xe4>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7fe fe1c 	bl	80005ac <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7fe fe18 	bl	80005ac <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1e6      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x10c>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d063      	beq.n	8001a6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a6:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019b2:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d11c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x18c>
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b43      	ldr	r3, [pc, #268]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x176>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e1ba      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4939      	ldr	r1, [pc, #228]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e03a      	b.n	8001a6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	4b36      	ldr	r3, [pc, #216]	; (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7fe fdd1 	bl	80005ac <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7fe fdcd 	bl	80005ac <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e19b      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4927      	ldr	r1, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7fe fdb0 	bl	80005ac <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a50:	f7fe fdac 	bl	80005ac <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e17a      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d03a      	beq.n	8001af0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d019      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a88:	f7fe fd90 	bl	80005ac <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a90:	f7fe fd8c 	bl	80005ac <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e15a      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f000 faf6 	bl	80020a0 <RCC_Delay>
 8001ab4:	e01c      	b.n	8001af0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7fe fd76 	bl	80005ac <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac2:	e00f      	b.n	8001ae4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7fe fd72 	bl	80005ac <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d908      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e140      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	42420000 	.word	0x42420000
 8001ae0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b9e      	ldr	r3, [pc, #632]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1e9      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80a6 	beq.w	8001c4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b97      	ldr	r3, [pc, #604]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10d      	bne.n	8001b2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b94      	ldr	r3, [pc, #592]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a93      	ldr	r2, [pc, #588]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b91      	ldr	r3, [pc, #580]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	4b8e      	ldr	r3, [pc, #568]	; (8001d64 <HAL_RCC_OscConfig+0x4f8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d118      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b36:	4b8b      	ldr	r3, [pc, #556]	; (8001d64 <HAL_RCC_OscConfig+0x4f8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a8a      	ldr	r2, [pc, #552]	; (8001d64 <HAL_RCC_OscConfig+0x4f8>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b42:	f7fe fd33 	bl	80005ac <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4a:	f7fe fd2f 	bl	80005ac <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b64      	cmp	r3, #100	; 0x64
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e0fd      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5c:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x312>
 8001b70:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	e02d      	b.n	8001bda <HAL_RCC_OscConfig+0x36e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x334>
 8001b86:	4b76      	ldr	r3, [pc, #472]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a75      	ldr	r2, [pc, #468]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	4b73      	ldr	r3, [pc, #460]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a72      	ldr	r2, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	f023 0304 	bic.w	r3, r3, #4
 8001b9c:	6213      	str	r3, [r2, #32]
 8001b9e:	e01c      	b.n	8001bda <HAL_RCC_OscConfig+0x36e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x356>
 8001ba8:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4a6c      	ldr	r2, [pc, #432]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	6213      	str	r3, [r2, #32]
 8001bb4:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a69      	ldr	r2, [pc, #420]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6213      	str	r3, [r2, #32]
 8001bc0:	e00b      	b.n	8001bda <HAL_RCC_OscConfig+0x36e>
 8001bc2:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a66      	ldr	r2, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	6213      	str	r3, [r2, #32]
 8001bce:	4b64      	ldr	r3, [pc, #400]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a63      	ldr	r2, [pc, #396]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	f023 0304 	bic.w	r3, r3, #4
 8001bd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d015      	beq.n	8001c0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be2:	f7fe fce3 	bl	80005ac <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7fe fcdf 	bl	80005ac <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0ab      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ee      	beq.n	8001bea <HAL_RCC_OscConfig+0x37e>
 8001c0c:	e014      	b.n	8001c38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7fe fccd 	bl	80005ac <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7fe fcc9 	bl	80005ac <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e095      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1ee      	bne.n	8001c16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d105      	bne.n	8001c4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3e:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a47      	ldr	r2, [pc, #284]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8081 	beq.w	8001d56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c54:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d061      	beq.n	8001d24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d146      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_OscConfig+0x4fc>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7fe fc9d 	bl	80005ac <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c76:	f7fe fc99 	bl	80005ac <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e067      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9c:	d108      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c9e:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	492d      	ldr	r1, [pc, #180]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a19      	ldr	r1, [r3, #32]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	4927      	ldr	r1, [pc, #156]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_OscConfig+0x4fc>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7fe fc6d 	bl	80005ac <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7fe fc69 	bl	80005ac <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e037      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x46a>
 8001cf4:	e02f      	b.n	8001d56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <HAL_RCC_OscConfig+0x4fc>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fc56 	bl	80005ac <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7fe fc52 	bl	80005ac <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e020      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x498>
 8001d22:	e018      	b.n	8001d56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e013      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40007000 	.word	0x40007000
 8001d68:	42420060 	.word	0x42420060

08001d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0d0      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b6a      	ldr	r3, [pc, #424]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b67      	ldr	r3, [pc, #412]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4965      	ldr	r1, [pc, #404]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0b8      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc8:	4b59      	ldr	r3, [pc, #356]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de0:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a52      	ldr	r2, [pc, #328]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	494d      	ldr	r1, [pc, #308]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d040      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d115      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e07f      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e073      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e06b      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4936      	ldr	r1, [pc, #216]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7fe fba6 	bl	80005ac <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7fe fba2 	bl	80005ac <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e053      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d210      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0207 	bic.w	r2, r3, #7
 8001ea2:	4922      	ldr	r1, [pc, #136]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e032      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4916      	ldr	r1, [pc, #88]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	490e      	ldr	r1, [pc, #56]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001efa:	f000 f821 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001efe:	4601      	mov	r1, r0
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <HAL_RCC_ClockConfig+0x1cc>)
 8001f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_ClockConfig+0x1d0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fa2e 	bl	800037c <HAL_InitTick>

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08005b5c 	.word	0x08005b5c
 8001f38:	20000080 	.word	0x20000080
 8001f3c:	20000084 	.word	0x20000084

08001f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	b490      	push	{r4, r7}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f48:	1d3c      	adds	r4, r7, #4
 8001f4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f6a:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x40>
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x46>
 8001f7e:	e02d      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f80:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f82:	623b      	str	r3, [r7, #32]
      break;
 8001f84:	e02d      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	0c9b      	lsrs	r3, r3, #18
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f92:	4413      	add	r3, r2
 8001f94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	0c5b      	lsrs	r3, r3, #17
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fbe:	fb02 f203 	mul.w	r2, r2, r3
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fca:	e004      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	623b      	str	r3, [r7, #32]
      break;
 8001fda:	e002      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fde:	623b      	str	r3, [r7, #32]
      break;
 8001fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc90      	pop	{r4, r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	08005b00 	.word	0x08005b00
 8001ff4:	08005b10 	.word	0x08005b10
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	007a1200 	.word	0x007a1200
 8002000:	003d0900 	.word	0x003d0900

08002004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <HAL_RCC_GetHCLKFreq+0x10>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	20000080 	.word	0x20000080

08002018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800201c:	f7ff fff2 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002020:	4601      	mov	r1, r0
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <HAL_RCC_GetPCLK1Freq+0x24>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08005b6c 	.word	0x08005b6c

08002040 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	220f      	movs	r2, #15
 800204e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_RCC_GetClockConfig+0x58>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0203 	and.w	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_RCC_GetClockConfig+0x58>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_GetClockConfig+0x58>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <HAL_RCC_GetClockConfig+0x58>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	08db      	lsrs	r3, r3, #3
 800207a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_GetClockConfig+0x5c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0207 	and.w	r2, r3, #7
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000
 800209c:	40022000 	.word	0x40022000

080020a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <RCC_Delay+0x34>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <RCC_Delay+0x38>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0a5b      	lsrs	r3, r3, #9
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020bc:	bf00      	nop
  }
  while (Delay --);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1e5a      	subs	r2, r3, #1
 80020c2:	60fa      	str	r2, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f9      	bne.n	80020bc <RCC_Delay+0x1c>
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000080 	.word	0x20000080
 80020d8:	10624dd3 	.word	0x10624dd3

080020dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d07d      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fc:	4b4f      	ldr	r3, [pc, #316]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10d      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002108:	4b4c      	ldr	r3, [pc, #304]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002112:	61d3      	str	r3, [r2, #28]
 8002114:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002120:	2301      	movs	r3, #1
 8002122:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d118      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a42      	ldr	r2, [pc, #264]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213c:	f7fe fa36 	bl	80005ac <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	e008      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002144:	f7fe fa32 	bl	80005ac <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e06d      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d02e      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d027      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002188:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800218a:	4b2e      	ldr	r3, [pc, #184]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002190:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002196:	4a29      	ldr	r2, [pc, #164]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d014      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7fe fa01 	bl	80005ac <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7fe f9fd 	bl	80005ac <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e036      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ee      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4917      	ldr	r1, [pc, #92]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	490b      	ldr	r1, [pc, #44]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4904      	ldr	r1, [pc, #16]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	40007000 	.word	0x40007000
 8002244:	42420440 	.word	0x42420440

08002248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e01d      	b.n	8002296 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f815 	bl	800229e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f000 f962 	bl	8002550 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b06      	cmp	r3, #6
 80022d8:	d007      	beq.n	80022ea <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0201 	orr.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b02      	cmp	r3, #2
 800230a:	d122      	bne.n	8002352 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d11b      	bne.n	8002352 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f06f 0202 	mvn.w	r2, #2
 8002322:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f8ed 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 800233e:	e005      	b.n	800234c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f8e0 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8ef 	bl	800252a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b04      	cmp	r3, #4
 800235e:	d122      	bne.n	80023a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b04      	cmp	r3, #4
 800236c:	d11b      	bne.n	80023a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f06f 0204 	mvn.w	r2, #4
 8002376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f8c3 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 8002392:	e005      	b.n	80023a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8b6 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8c5 	bl	800252a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d122      	bne.n	80023fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d11b      	bne.n	80023fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f06f 0208 	mvn.w	r2, #8
 80023ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2204      	movs	r2, #4
 80023d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f899 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 80023e6:	e005      	b.n	80023f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f88c 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f89b 	bl	800252a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b10      	cmp	r3, #16
 8002406:	d122      	bne.n	800244e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b10      	cmp	r3, #16
 8002414:	d11b      	bne.n	800244e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f06f 0210 	mvn.w	r2, #16
 800241e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2208      	movs	r2, #8
 8002424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f86f 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 800243a:	e005      	b.n	8002448 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f862 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f871 	bl	800252a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10e      	bne.n	800247a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d107      	bne.n	800247a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f06f 0201 	mvn.w	r2, #1
 8002472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7fd ff37 	bl	80002e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002484:	2b80      	cmp	r3, #128	; 0x80
 8002486:	d10e      	bne.n	80024a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	2b80      	cmp	r3, #128	; 0x80
 8002494:	d107      	bne.n	80024a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800249e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8c0 	bl	8002626 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	d10e      	bne.n	80024d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b40      	cmp	r3, #64	; 0x40
 80024c0:	d107      	bne.n	80024d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f835 	bl	800253c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d10e      	bne.n	80024fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d107      	bne.n	80024fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f06f 0220 	mvn.w	r2, #32
 80024f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f88b 	bl	8002614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
	...

08002550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a29      	ldr	r2, [pc, #164]	; (8002608 <TIM_Base_SetConfig+0xb8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00b      	beq.n	8002580 <TIM_Base_SetConfig+0x30>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256e:	d007      	beq.n	8002580 <TIM_Base_SetConfig+0x30>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a26      	ldr	r2, [pc, #152]	; (800260c <TIM_Base_SetConfig+0xbc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d003      	beq.n	8002580 <TIM_Base_SetConfig+0x30>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a25      	ldr	r2, [pc, #148]	; (8002610 <TIM_Base_SetConfig+0xc0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d108      	bne.n	8002592 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <TIM_Base_SetConfig+0xb8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00b      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a0:	d007      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a19      	ldr	r2, [pc, #100]	; (800260c <TIM_Base_SetConfig+0xbc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d003      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <TIM_Base_SetConfig+0xc0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d108      	bne.n	80025c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a07      	ldr	r2, [pc, #28]	; (8002608 <TIM_Base_SetConfig+0xb8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d103      	bne.n	80025f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	615a      	str	r2, [r3, #20]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40000400 	.word	0x40000400
 8002610:	40000800 	.word	0x40000800

08002614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002638:	b084      	sub	sp, #16
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	f107 0014 	add.w	r0, r7, #20
 8002646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	b004      	add	sp, #16
 8002656:	4770      	bx	lr

08002658 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002660:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002664:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800266c:	b29a      	uxth	r2, r3
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	4313      	orrs	r3, r2
 8002672:	b29a      	uxth	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800268e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002692:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800269a:	b29b      	uxth	r3, r3
 800269c:	b21a      	sxth	r2, r3
 800269e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	4013      	ands	r3, r2
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80026d6:	b084      	sub	sp, #16
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	f107 0014 	add.w	r0, r7, #20
 80026e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ffa5 	bl	8002658 <USB_EnableGlobalInt>

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800271a:	b004      	add	sp, #16
 800271c:	4770      	bx	lr
	...

08002720 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002720:	b490      	push	{r4, r7}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002744:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	78db      	ldrb	r3, [r3, #3]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d819      	bhi.n	8002782 <USB_ActivateEndpoint+0x62>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <USB_ActivateEndpoint+0x34>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	08002765 	.word	0x08002765
 8002758:	08002779 	.word	0x08002779
 800275c:	08002789 	.word	0x08002789
 8002760:	0800276f 	.word	0x0800276f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002764:	89bb      	ldrh	r3, [r7, #12]
 8002766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276a:	81bb      	strh	r3, [r7, #12]
      break;
 800276c:	e00d      	b.n	800278a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800276e:	89bb      	ldrh	r3, [r7, #12]
 8002770:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002774:	81bb      	strh	r3, [r7, #12]
      break;
 8002776:	e008      	b.n	800278a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002778:	89bb      	ldrh	r3, [r7, #12]
 800277a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277e:	81bb      	strh	r3, [r7, #12]
      break;
 8002780:	e003      	b.n	800278a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
      break;
 8002786:	e000      	b.n	800278a <USB_ActivateEndpoint+0x6a>
      break;
 8002788:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	441a      	add	r2, r3
 8002794:	89bb      	ldrh	r3, [r7, #12]
 8002796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800279a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800279e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4313      	orrs	r3, r2
 80027ca:	b29c      	uxth	r4, r3
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	4b8a      	ldr	r3, [pc, #552]	; (8002a00 <USB_ActivateEndpoint+0x2e0>)
 80027d8:	4323      	orrs	r3, r4
 80027da:	b29b      	uxth	r3, r3
 80027dc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	7b1b      	ldrb	r3, [r3, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 8112 	bne.w	8002a0c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d067      	beq.n	80028c0 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80027f0:	687c      	ldr	r4, [r7, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	441c      	add	r4, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4423      	add	r3, r4
 8002804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002808:	461c      	mov	r4, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	88db      	ldrh	r3, [r3, #6]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	b29b      	uxth	r3, r3
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	b29b      	uxth	r3, r3
 8002816:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29c      	uxth	r4, r3
 8002826:	4623      	mov	r3, r4
 8002828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	d014      	beq.n	800285a <USB_ActivateEndpoint+0x13a>
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002846:	b29c      	uxth	r4, r3
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	441a      	add	r2, r3
 8002852:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <USB_ActivateEndpoint+0x2e4>)
 8002854:	4323      	orrs	r3, r4
 8002856:	b29b      	uxth	r3, r3
 8002858:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	78db      	ldrb	r3, [r3, #3]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d018      	beq.n	8002894 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002878:	b29c      	uxth	r4, r3
 800287a:	f084 0320 	eor.w	r3, r4, #32
 800287e:	b29c      	uxth	r4, r3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	441a      	add	r2, r3
 800288a:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <USB_ActivateEndpoint+0x2e0>)
 800288c:	4323      	orrs	r3, r4
 800288e:	b29b      	uxth	r3, r3
 8002890:	8013      	strh	r3, [r2, #0]
 8002892:	e22b      	b.n	8002cec <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028aa:	b29c      	uxth	r4, r3
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	441a      	add	r2, r3
 80028b6:	4b52      	ldr	r3, [pc, #328]	; (8002a00 <USB_ActivateEndpoint+0x2e0>)
 80028b8:	4323      	orrs	r3, r4
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	8013      	strh	r3, [r2, #0]
 80028be:	e215      	b.n	8002cec <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80028c0:	687c      	ldr	r4, [r7, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	441c      	add	r4, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	4423      	add	r3, r4
 80028d4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80028d8:	461c      	mov	r4, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	88db      	ldrh	r3, [r3, #6]
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80028e8:	687c      	ldr	r4, [r7, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	441c      	add	r4, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	4423      	add	r3, r4
 80028fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002900:	461c      	mov	r4, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10e      	bne.n	8002928 <USB_ActivateEndpoint+0x208>
 800290a:	8823      	ldrh	r3, [r4, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002912:	b29b      	uxth	r3, r3
 8002914:	8023      	strh	r3, [r4, #0]
 8002916:	8823      	ldrh	r3, [r4, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002922:	b29b      	uxth	r3, r3
 8002924:	8023      	strh	r3, [r4, #0]
 8002926:	e02d      	b.n	8002984 <USB_ActivateEndpoint+0x264>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b3e      	cmp	r3, #62	; 0x3e
 800292e:	d812      	bhi.n	8002956 <USB_ActivateEndpoint+0x236>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <USB_ActivateEndpoint+0x22a>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	3301      	adds	r3, #1
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	b29b      	uxth	r3, r3
 800294e:	029b      	lsls	r3, r3, #10
 8002950:	b29b      	uxth	r3, r3
 8002952:	8023      	strh	r3, [r4, #0]
 8002954:	e016      	b.n	8002984 <USB_ActivateEndpoint+0x264>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <USB_ActivateEndpoint+0x250>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3b01      	subs	r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	b29b      	uxth	r3, r3
 8002974:	029b      	lsls	r3, r3, #10
 8002976:	b29b      	uxth	r3, r3
 8002978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002980:	b29b      	uxth	r3, r3
 8002982:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29c      	uxth	r4, r3
 8002992:	4623      	mov	r3, r4
 8002994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d014      	beq.n	80029c6 <USB_ActivateEndpoint+0x2a6>
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b2:	b29c      	uxth	r4, r3
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <USB_ActivateEndpoint+0x2e8>)
 80029c0:	4323      	orrs	r3, r4
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029dc:	b29c      	uxth	r4, r3
 80029de:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80029e2:	b29c      	uxth	r4, r3
 80029e4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80029e8:	b29c      	uxth	r4, r3
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	441a      	add	r2, r3
 80029f4:	4b02      	ldr	r3, [pc, #8]	; (8002a00 <USB_ActivateEndpoint+0x2e0>)
 80029f6:	4323      	orrs	r3, r4
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	8013      	strh	r3, [r2, #0]
 80029fc:	e176      	b.n	8002cec <USB_ActivateEndpoint+0x5cc>
 80029fe:	bf00      	nop
 8002a00:	ffff8080 	.word	0xffff8080
 8002a04:	ffff80c0 	.word	0xffff80c0
 8002a08:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	b29c      	uxth	r4, r3
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	4b96      	ldr	r3, [pc, #600]	; (8002c88 <USB_ActivateEndpoint+0x568>)
 8002a30:	4323      	orrs	r3, r4
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002a36:	687c      	ldr	r4, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	441c      	add	r4, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4423      	add	r3, r4
 8002a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a4e:	461c      	mov	r4, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	891b      	ldrh	r3, [r3, #8]
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	8023      	strh	r3, [r4, #0]
 8002a5e:	687c      	ldr	r4, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	441c      	add	r4, r3
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	4423      	add	r3, r4
 8002a72:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002a76:	461c      	mov	r4, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	895b      	ldrh	r3, [r3, #10]
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 8088 	bne.w	8002ba0 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b29c      	uxth	r4, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d014      	beq.n	8002ad2 <USB_ActivateEndpoint+0x3b2>
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	b29c      	uxth	r4, r3
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	441a      	add	r2, r3
 8002aca:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <USB_ActivateEndpoint+0x56c>)
 8002acc:	4323      	orrs	r3, r4
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29c      	uxth	r4, r3
 8002ae0:	4623      	mov	r3, r4
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d014      	beq.n	8002b14 <USB_ActivateEndpoint+0x3f4>
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b00:	b29c      	uxth	r4, r3
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	4b60      	ldr	r3, [pc, #384]	; (8002c90 <USB_ActivateEndpoint+0x570>)
 8002b0e:	4323      	orrs	r3, r4
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	b29c      	uxth	r4, r3
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	441a      	add	r2, r3
 8002b36:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <USB_ActivateEndpoint+0x570>)
 8002b38:	4323      	orrs	r3, r4
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	b29c      	uxth	r4, r3
 8002b56:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002b5a:	b29c      	uxth	r4, r3
 8002b5c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002b60:	b29c      	uxth	r4, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	4b49      	ldr	r3, [pc, #292]	; (8002c94 <USB_ActivateEndpoint+0x574>)
 8002b6e:	4323      	orrs	r3, r4
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b8a:	b29c      	uxth	r4, r3
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	441a      	add	r2, r3
 8002b96:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <USB_ActivateEndpoint+0x574>)
 8002b98:	4323      	orrs	r3, r4
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8013      	strh	r3, [r2, #0]
 8002b9e:	e0a5      	b.n	8002cec <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b29c      	uxth	r4, r3
 8002bae:	4623      	mov	r3, r4
 8002bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d014      	beq.n	8002be2 <USB_ActivateEndpoint+0x4c2>
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	b29c      	uxth	r4, r3
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	441a      	add	r2, r3
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <USB_ActivateEndpoint+0x56c>)
 8002bdc:	4323      	orrs	r3, r4
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b29c      	uxth	r4, r3
 8002bf0:	4623      	mov	r3, r4
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d014      	beq.n	8002c24 <USB_ActivateEndpoint+0x504>
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c10:	b29c      	uxth	r4, r3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	441a      	add	r2, r3
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <USB_ActivateEndpoint+0x570>)
 8002c1e:	4323      	orrs	r3, r4
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	b29c      	uxth	r4, r3
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	441a      	add	r2, r3
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <USB_ActivateEndpoint+0x56c>)
 8002c48:	4323      	orrs	r3, r4
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	78db      	ldrb	r3, [r3, #3]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d020      	beq.n	8002c98 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6c:	b29c      	uxth	r4, r3
 8002c6e:	f084 0320 	eor.w	r3, r4, #32
 8002c72:	b29c      	uxth	r4, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	441a      	add	r2, r3
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <USB_ActivateEndpoint+0x574>)
 8002c80:	4323      	orrs	r3, r4
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	8013      	strh	r3, [r2, #0]
 8002c86:	e01c      	b.n	8002cc2 <USB_ActivateEndpoint+0x5a2>
 8002c88:	ffff8180 	.word	0xffff8180
 8002c8c:	ffffc080 	.word	0xffffc080
 8002c90:	ffff80c0 	.word	0xffff80c0
 8002c94:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cae:	b29c      	uxth	r4, r3
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	441a      	add	r2, r3
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <USB_ActivateEndpoint+0x5d8>)
 8002cbc:	4323      	orrs	r3, r4
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd8:	b29c      	uxth	r4, r3
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	441a      	add	r2, r3
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <USB_ActivateEndpoint+0x5d8>)
 8002ce6:	4323      	orrs	r3, r4
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc90      	pop	{r4, r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	ffff8080 	.word	0xffff8080

08002cfc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002cfc:	b490      	push	{r4, r7}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	7b1b      	ldrb	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d171      	bne.n	8002df2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d036      	beq.n	8002d84 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29c      	uxth	r4, r3
 8002d24:	4623      	mov	r3, r4
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d014      	beq.n	8002d58 <USB_DeactivateEndpoint+0x5c>
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d44:	b29c      	uxth	r4, r3
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	441a      	add	r2, r3
 8002d50:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <USB_DeactivateEndpoint+0x204>)
 8002d52:	4323      	orrs	r3, r4
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6e:	b29c      	uxth	r4, r3
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <USB_DeactivateEndpoint+0x208>)
 8002d7c:	4323      	orrs	r3, r4
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	8013      	strh	r3, [r2, #0]
 8002d82:	e144      	b.n	800300e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29c      	uxth	r4, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d014      	beq.n	8002dc6 <USB_DeactivateEndpoint+0xca>
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	b29c      	uxth	r4, r3
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	441a      	add	r2, r3
 8002dbe:	4b52      	ldr	r3, [pc, #328]	; (8002f08 <USB_DeactivateEndpoint+0x20c>)
 8002dc0:	4323      	orrs	r3, r4
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ddc:	b29c      	uxth	r4, r3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	441a      	add	r2, r3
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <USB_DeactivateEndpoint+0x208>)
 8002dea:	4323      	orrs	r3, r4
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	8013      	strh	r3, [r2, #0]
 8002df0:	e10d      	b.n	800300e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	785b      	ldrb	r3, [r3, #1]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 8088 	bne.w	8002f0c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29c      	uxth	r4, r3
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d014      	beq.n	8002e3e <USB_DeactivateEndpoint+0x142>
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2a:	b29c      	uxth	r4, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	441a      	add	r2, r3
 8002e36:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <USB_DeactivateEndpoint+0x20c>)
 8002e38:	4323      	orrs	r3, r4
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29c      	uxth	r4, r3
 8002e4c:	4623      	mov	r3, r4
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d014      	beq.n	8002e80 <USB_DeactivateEndpoint+0x184>
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6c:	b29c      	uxth	r4, r3
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	441a      	add	r2, r3
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <USB_DeactivateEndpoint+0x204>)
 8002e7a:	4323      	orrs	r3, r4
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	b29c      	uxth	r4, r3
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <USB_DeactivateEndpoint+0x204>)
 8002ea4:	4323      	orrs	r3, r4
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec0:	b29c      	uxth	r4, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	441a      	add	r2, r3
 8002ecc:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <USB_DeactivateEndpoint+0x208>)
 8002ece:	4323      	orrs	r3, r4
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eea:	b29c      	uxth	r4, r3
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	441a      	add	r2, r3
 8002ef6:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <USB_DeactivateEndpoint+0x208>)
 8002ef8:	4323      	orrs	r3, r4
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	8013      	strh	r3, [r2, #0]
 8002efe:	e086      	b.n	800300e <USB_DeactivateEndpoint+0x312>
 8002f00:	ffff80c0 	.word	0xffff80c0
 8002f04:	ffff8080 	.word	0xffff8080
 8002f08:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	b29c      	uxth	r4, r3
 8002f1a:	4623      	mov	r3, r4
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d014      	beq.n	8002f4e <USB_DeactivateEndpoint+0x252>
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	b29c      	uxth	r4, r3
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	441a      	add	r2, r3
 8002f46:	4b35      	ldr	r3, [pc, #212]	; (800301c <USB_DeactivateEndpoint+0x320>)
 8002f48:	4323      	orrs	r3, r4
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29c      	uxth	r4, r3
 8002f5c:	4623      	mov	r3, r4
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d014      	beq.n	8002f90 <USB_DeactivateEndpoint+0x294>
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7c:	b29c      	uxth	r4, r3
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	441a      	add	r2, r3
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <USB_DeactivateEndpoint+0x324>)
 8002f8a:	4323      	orrs	r3, r4
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	b29c      	uxth	r4, r3
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <USB_DeactivateEndpoint+0x320>)
 8002fb4:	4323      	orrs	r3, r4
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd0:	b29c      	uxth	r4, r3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	441a      	add	r2, r3
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <USB_DeactivateEndpoint+0x328>)
 8002fde:	4323      	orrs	r3, r4
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	b29c      	uxth	r4, r3
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	441a      	add	r2, r3
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <USB_DeactivateEndpoint+0x328>)
 8003008:	4323      	orrs	r3, r4
 800300a:	b29b      	uxth	r3, r3
 800300c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bc90      	pop	{r4, r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	ffffc080 	.word	0xffffc080
 8003020:	ffff80c0 	.word	0xffff80c0
 8003024:	ffff8080 	.word	0xffff8080

08003028 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b08d      	sub	sp, #52	; 0x34
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	785b      	ldrb	r3, [r3, #1]
 8003036:	2b01      	cmp	r3, #1
 8003038:	f040 8160 	bne.w	80032fc <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	429a      	cmp	r2, r3
 8003046:	d909      	bls.n	800305c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	1ad2      	subs	r2, r2, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	619a      	str	r2, [r3, #24]
 800305a:	e005      	b.n	8003068 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	7b1b      	ldrb	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d119      	bne.n	80030a4 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6959      	ldr	r1, [r3, #20]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	88da      	ldrh	r2, [r3, #6]
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	b29b      	uxth	r3, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fba2 	bl	80037c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003082:	687c      	ldr	r4, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308a:	b29b      	uxth	r3, r3
 800308c:	441c      	add	r4, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	4423      	add	r3, r4
 8003096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800309a:	461c      	mov	r4, r3
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	b29b      	uxth	r3, r3
 80030a0:	8023      	strh	r3, [r4, #0]
 80030a2:	e10f      	b.n	80032c4 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d065      	beq.n	8003186 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80030ba:	687c      	ldr	r4, [r7, #4]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d148      	bne.n	8003156 <USB_EPStartXfer+0x12e>
 80030c4:	687c      	ldr	r4, [r7, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	441c      	add	r4, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	4423      	add	r3, r4
 80030d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030dc:	461c      	mov	r4, r3
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10e      	bne.n	8003102 <USB_EPStartXfer+0xda>
 80030e4:	8823      	ldrh	r3, [r4, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	8023      	strh	r3, [r4, #0]
 80030f0:	8823      	ldrh	r3, [r4, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	8023      	strh	r3, [r4, #0]
 8003100:	e03d      	b.n	800317e <USB_EPStartXfer+0x156>
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	2b3e      	cmp	r3, #62	; 0x3e
 8003106:	d810      	bhi.n	800312a <USB_EPStartXfer+0x102>
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <USB_EPStartXfer+0xf6>
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	3301      	adds	r3, #1
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	b29b      	uxth	r3, r3
 8003122:	029b      	lsls	r3, r3, #10
 8003124:	b29b      	uxth	r3, r3
 8003126:	8023      	strh	r3, [r4, #0]
 8003128:	e029      	b.n	800317e <USB_EPStartXfer+0x156>
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <USB_EPStartXfer+0x118>
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	3b01      	subs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	b29b      	uxth	r3, r3
 8003144:	029b      	lsls	r3, r3, #10
 8003146:	b29b      	uxth	r3, r3
 8003148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003150:	b29b      	uxth	r3, r3
 8003152:	8023      	strh	r3, [r4, #0]
 8003154:	e013      	b.n	800317e <USB_EPStartXfer+0x156>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d10f      	bne.n	800317e <USB_EPStartXfer+0x156>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003164:	b29b      	uxth	r3, r3
 8003166:	441c      	add	r4, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	4423      	add	r3, r4
 8003170:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	895b      	ldrh	r3, [r3, #10]
 8003182:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003184:	e063      	b.n	800324e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	785b      	ldrb	r3, [r3, #1]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d148      	bne.n	8003220 <USB_EPStartXfer+0x1f8>
 800318e:	687c      	ldr	r4, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003196:	b29b      	uxth	r3, r3
 8003198:	441c      	add	r4, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	4423      	add	r3, r4
 80031a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031a6:	461c      	mov	r4, r3
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10e      	bne.n	80031cc <USB_EPStartXfer+0x1a4>
 80031ae:	8823      	ldrh	r3, [r4, #0]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	8023      	strh	r3, [r4, #0]
 80031ba:	8823      	ldrh	r3, [r4, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8023      	strh	r3, [r4, #0]
 80031ca:	e03d      	b.n	8003248 <USB_EPStartXfer+0x220>
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	2b3e      	cmp	r3, #62	; 0x3e
 80031d0:	d810      	bhi.n	80031f4 <USB_EPStartXfer+0x1cc>
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	623b      	str	r3, [r7, #32]
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <USB_EPStartXfer+0x1c0>
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	3301      	adds	r3, #1
 80031e6:	623b      	str	r3, [r7, #32]
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	029b      	lsls	r3, r3, #10
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	8023      	strh	r3, [r4, #0]
 80031f2:	e029      	b.n	8003248 <USB_EPStartXfer+0x220>
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	623b      	str	r3, [r7, #32]
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <USB_EPStartXfer+0x1e2>
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	3b01      	subs	r3, #1
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	b29b      	uxth	r3, r3
 800320e:	029b      	lsls	r3, r3, #10
 8003210:	b29b      	uxth	r3, r3
 8003212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800321a:	b29b      	uxth	r3, r3
 800321c:	8023      	strh	r3, [r4, #0]
 800321e:	e013      	b.n	8003248 <USB_EPStartXfer+0x220>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10f      	bne.n	8003248 <USB_EPStartXfer+0x220>
 8003228:	687c      	ldr	r4, [r7, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003230:	b29b      	uxth	r3, r3
 8003232:	441c      	add	r4, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4423      	add	r3, r4
 800323c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003240:	461c      	mov	r4, r3
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	b29b      	uxth	r3, r3
 8003246:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	891b      	ldrh	r3, [r3, #8]
 800324c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6959      	ldr	r1, [r3, #20]
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	b29b      	uxth	r3, r3
 8003256:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fab4 	bl	80037c6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	785b      	ldrb	r3, [r3, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d115      	bne.n	8003292 <USB_EPStartXfer+0x26a>
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327c:	b29c      	uxth	r4, r3
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	441a      	add	r2, r3
 8003288:	4b9a      	ldr	r3, [pc, #616]	; (80034f4 <USB_EPStartXfer+0x4cc>)
 800328a:	4323      	orrs	r3, r4
 800328c:	b29b      	uxth	r3, r3
 800328e:	8013      	strh	r3, [r2, #0]
 8003290:	e018      	b.n	80032c4 <USB_EPStartXfer+0x29c>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	785b      	ldrb	r3, [r3, #1]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d114      	bne.n	80032c4 <USB_EPStartXfer+0x29c>
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b0:	b29c      	uxth	r4, r3
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	441a      	add	r2, r3
 80032bc:	4b8e      	ldr	r3, [pc, #568]	; (80034f8 <USB_EPStartXfer+0x4d0>)
 80032be:	4323      	orrs	r3, r4
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032da:	b29c      	uxth	r4, r3
 80032dc:	f084 0310 	eor.w	r3, r4, #16
 80032e0:	b29c      	uxth	r4, r3
 80032e2:	f084 0320 	eor.w	r3, r4, #32
 80032e6:	b29c      	uxth	r4, r3
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	4b82      	ldr	r3, [pc, #520]	; (80034fc <USB_EPStartXfer+0x4d4>)
 80032f4:	4323      	orrs	r3, r4
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	8013      	strh	r3, [r2, #0]
 80032fa:	e146      	b.n	800358a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	429a      	cmp	r2, r3
 8003306:	d909      	bls.n	800331c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	1ad2      	subs	r2, r2, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	619a      	str	r2, [r3, #24]
 800331a:	e005      	b.n	8003328 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	7b1b      	ldrb	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d148      	bne.n	80033c2 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003330:	687c      	ldr	r4, [r7, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003338:	b29b      	uxth	r3, r3
 800333a:	441c      	add	r4, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	4423      	add	r3, r4
 8003344:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003348:	461c      	mov	r4, r3
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10e      	bne.n	800336e <USB_EPStartXfer+0x346>
 8003350:	8823      	ldrh	r3, [r4, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003358:	b29b      	uxth	r3, r3
 800335a:	8023      	strh	r3, [r4, #0]
 800335c:	8823      	ldrh	r3, [r4, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003368:	b29b      	uxth	r3, r3
 800336a:	8023      	strh	r3, [r4, #0]
 800336c:	e0f2      	b.n	8003554 <USB_EPStartXfer+0x52c>
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	2b3e      	cmp	r3, #62	; 0x3e
 8003372:	d810      	bhi.n	8003396 <USB_EPStartXfer+0x36e>
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <USB_EPStartXfer+0x362>
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	b29b      	uxth	r3, r3
 800338e:	029b      	lsls	r3, r3, #10
 8003390:	b29b      	uxth	r3, r3
 8003392:	8023      	strh	r3, [r4, #0]
 8003394:	e0de      	b.n	8003554 <USB_EPStartXfer+0x52c>
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <USB_EPStartXfer+0x384>
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	029b      	lsls	r3, r3, #10
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033bc:	b29b      	uxth	r3, r3
 80033be:	8023      	strh	r3, [r4, #0]
 80033c0:	e0c8      	b.n	8003554 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d148      	bne.n	800345c <USB_EPStartXfer+0x434>
 80033ca:	687c      	ldr	r4, [r7, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	441c      	add	r4, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	4423      	add	r3, r4
 80033de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033e2:	461c      	mov	r4, r3
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <USB_EPStartXfer+0x3e0>
 80033ea:	8823      	ldrh	r3, [r4, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	8023      	strh	r3, [r4, #0]
 80033f6:	8823      	ldrh	r3, [r4, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003402:	b29b      	uxth	r3, r3
 8003404:	8023      	strh	r3, [r4, #0]
 8003406:	e03d      	b.n	8003484 <USB_EPStartXfer+0x45c>
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	2b3e      	cmp	r3, #62	; 0x3e
 800340c:	d810      	bhi.n	8003430 <USB_EPStartXfer+0x408>
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <USB_EPStartXfer+0x3fc>
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	3301      	adds	r3, #1
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	b29b      	uxth	r3, r3
 8003428:	029b      	lsls	r3, r3, #10
 800342a:	b29b      	uxth	r3, r3
 800342c:	8023      	strh	r3, [r4, #0]
 800342e:	e029      	b.n	8003484 <USB_EPStartXfer+0x45c>
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <USB_EPStartXfer+0x41e>
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	3b01      	subs	r3, #1
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	b29b      	uxth	r3, r3
 800344a:	029b      	lsls	r3, r3, #10
 800344c:	b29b      	uxth	r3, r3
 800344e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003456:	b29b      	uxth	r3, r3
 8003458:	8023      	strh	r3, [r4, #0]
 800345a:	e013      	b.n	8003484 <USB_EPStartXfer+0x45c>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	785b      	ldrb	r3, [r3, #1]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d10f      	bne.n	8003484 <USB_EPStartXfer+0x45c>
 8003464:	687c      	ldr	r4, [r7, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800346c:	b29b      	uxth	r3, r3
 800346e:	441c      	add	r4, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	4423      	add	r3, r4
 8003478:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800347c:	461c      	mov	r4, r3
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	b29b      	uxth	r3, r3
 8003482:	8023      	strh	r3, [r4, #0]
 8003484:	687c      	ldr	r4, [r7, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d14e      	bne.n	800352c <USB_EPStartXfer+0x504>
 800348e:	687c      	ldr	r4, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003496:	b29b      	uxth	r3, r3
 8003498:	441c      	add	r4, r3
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	4423      	add	r3, r4
 80034a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034a6:	461c      	mov	r4, r3
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10e      	bne.n	80034cc <USB_EPStartXfer+0x4a4>
 80034ae:	8823      	ldrh	r3, [r4, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8023      	strh	r3, [r4, #0]
 80034ba:	8823      	ldrh	r3, [r4, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	8023      	strh	r3, [r4, #0]
 80034ca:	e043      	b.n	8003554 <USB_EPStartXfer+0x52c>
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	2b3e      	cmp	r3, #62	; 0x3e
 80034d0:	d816      	bhi.n	8003500 <USB_EPStartXfer+0x4d8>
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <USB_EPStartXfer+0x4c0>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3301      	adds	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	029b      	lsls	r3, r3, #10
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	8023      	strh	r3, [r4, #0]
 80034f2:	e02f      	b.n	8003554 <USB_EPStartXfer+0x52c>
 80034f4:	ffff80c0 	.word	0xffff80c0
 80034f8:	ffffc080 	.word	0xffffc080
 80034fc:	ffff8080 	.word	0xffff8080
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <USB_EPStartXfer+0x4ee>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3b01      	subs	r3, #1
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	b29b      	uxth	r3, r3
 800351a:	029b      	lsls	r3, r3, #10
 800351c:	b29b      	uxth	r3, r3
 800351e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003526:	b29b      	uxth	r3, r3
 8003528:	8023      	strh	r3, [r4, #0]
 800352a:	e013      	b.n	8003554 <USB_EPStartXfer+0x52c>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	785b      	ldrb	r3, [r3, #1]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d10f      	bne.n	8003554 <USB_EPStartXfer+0x52c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800353a:	b29b      	uxth	r3, r3
 800353c:	441c      	add	r4, r3
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	4423      	add	r3, r4
 8003546:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	b29a      	uxth	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	b29c      	uxth	r4, r3
 800356c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003570:	b29c      	uxth	r4, r3
 8003572:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003576:	b29c      	uxth	r4, r3
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	4b04      	ldr	r3, [pc, #16]	; (8003594 <USB_EPStartXfer+0x56c>)
 8003584:	4323      	orrs	r3, r4
 8003586:	b29b      	uxth	r3, r3
 8003588:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3734      	adds	r7, #52	; 0x34
 8003590:	46bd      	mov	sp, r7
 8003592:	bd90      	pop	{r4, r7, pc}
 8003594:	ffff8080 	.word	0xffff8080

08003598 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003598:	b490      	push	{r4, r7}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	785b      	ldrb	r3, [r3, #1]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d018      	beq.n	80035dc <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c0:	b29c      	uxth	r4, r3
 80035c2:	f084 0310 	eor.w	r3, r4, #16
 80035c6:	b29c      	uxth	r4, r3
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <USB_EPSetStall+0x80>)
 80035d4:	4323      	orrs	r3, r4
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	8013      	strh	r3, [r2, #0]
 80035da:	e017      	b.n	800360c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f2:	b29c      	uxth	r4, r3
 80035f4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80035f8:	b29c      	uxth	r4, r3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	441a      	add	r2, r3
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <USB_EPSetStall+0x80>)
 8003606:	4323      	orrs	r3, r4
 8003608:	b29b      	uxth	r3, r3
 800360a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bc90      	pop	{r4, r7}
 8003616:	4770      	bx	lr
 8003618:	ffff8080 	.word	0xffff8080

0800361c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800361c:	b490      	push	{r4, r7}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	7b1b      	ldrb	r3, [r3, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d17d      	bne.n	800372a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	785b      	ldrb	r3, [r3, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d03d      	beq.n	80036b2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29c      	uxth	r4, r3
 8003644:	4623      	mov	r3, r4
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d014      	beq.n	8003678 <USB_EPClearStall+0x5c>
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003664:	b29c      	uxth	r4, r3
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <USB_EPClearStall+0x11c>)
 8003672:	4323      	orrs	r3, r4
 8003674:	b29b      	uxth	r3, r3
 8003676:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	78db      	ldrb	r3, [r3, #3]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d054      	beq.n	800372a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003696:	b29c      	uxth	r4, r3
 8003698:	f084 0320 	eor.w	r3, r4, #32
 800369c:	b29c      	uxth	r4, r3
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	441a      	add	r2, r3
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <USB_EPClearStall+0x120>)
 80036aa:	4323      	orrs	r3, r4
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	8013      	strh	r3, [r2, #0]
 80036b0:	e03b      	b.n	800372a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b29c      	uxth	r4, r3
 80036c0:	4623      	mov	r3, r4
 80036c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d014      	beq.n	80036f4 <USB_EPClearStall+0xd8>
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e0:	b29c      	uxth	r4, r3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	441a      	add	r2, r3
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <USB_EPClearStall+0x124>)
 80036ee:	4323      	orrs	r3, r4
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	b29c      	uxth	r4, r3
 800370c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003710:	b29c      	uxth	r4, r3
 8003712:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003716:	b29c      	uxth	r4, r3
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <USB_EPClearStall+0x120>)
 8003724:	4323      	orrs	r3, r4
 8003726:	b29b      	uxth	r3, r3
 8003728:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bc90      	pop	{r4, r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	ffff80c0 	.word	0xffff80c0
 800373c:	ffff8080 	.word	0xffff8080
 8003740:	ffffc080 	.word	0xffffc080

08003744 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80037a4:	68fb      	ldr	r3, [r7, #12]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b08d      	sub	sp, #52	; 0x34
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	4611      	mov	r1, r2
 80037d2:	461a      	mov	r2, r3
 80037d4:	460b      	mov	r3, r1
 80037d6:	80fb      	strh	r3, [r7, #6]
 80037d8:	4613      	mov	r3, r2
 80037da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80037dc:	88bb      	ldrh	r3, [r7, #4]
 80037de:	3301      	adds	r3, #1
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	005a      	lsls	r2, r3, #1
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fe:	e01e      	b.n	800383e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	3301      	adds	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	b29b      	uxth	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	b29a      	uxth	r2, r3
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	3302      	adds	r3, #2
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	3302      	adds	r3, #2
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	3301      	adds	r3, #1
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	3b01      	subs	r3, #1
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1dd      	bne.n	8003800 <USB_WritePMA+0x3a>
  }
}
 8003844:	bf00      	nop
 8003846:	3734      	adds	r7, #52	; 0x34
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800384e:	b480      	push	{r7}
 8003850:	b08b      	sub	sp, #44	; 0x2c
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	4611      	mov	r1, r2
 800385a:	461a      	mov	r2, r3
 800385c:	460b      	mov	r3, r1
 800385e:	80fb      	strh	r3, [r7, #6]
 8003860:	4613      	mov	r3, r2
 8003862:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003864:	88bb      	ldrh	r3, [r7, #4]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	b29b      	uxth	r3, r3
 800386a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	005a      	lsls	r2, r3, #1
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003880:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	e01b      	b.n	80038c0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29b      	uxth	r3, r3
 800388e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	3302      	adds	r3, #2
 8003894:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	0a1b      	lsrs	r3, r3, #8
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3301      	adds	r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	3302      	adds	r3, #2
 80038b8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	3b01      	subs	r3, #1
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e0      	bne.n	8003888 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80038c6:	88bb      	ldrh	r3, [r7, #4]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	701a      	strb	r2, [r3, #0]
  }
}
 80038e2:	bf00      	nop
 80038e4:	372c      	adds	r7, #44	; 0x2c
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <RingBuffer_Init>:
*/

#include "ringbuffer.h"
//initializes the given ringbuffer with the supplied array and its length
inline void RingBuffer_Init(RingBuffer *rb, rbdatatype *array, uint32_t length)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
    rb->buf = array;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	601a      	str	r2, [r3, #0]
    rb->length = length;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	605a      	str	r2, [r3, #4]
    rb->head = rb->tail = 0;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	725a      	strb	r2, [r3, #9]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	7a5a      	ldrb	r2, [r3, #9]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	721a      	strb	r2, [r3, #8]
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <RingBuffer_Put>:
}

//puts an element into the buffer
//returns 0 if buffer is full, otherwise returns 1
inline uint8_t RingBuffer_Put(RingBuffer *rb, rbdatatype c)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
    char newtail;
    newtail = (rb->tail + 1) % rb->length;			//calculate where the new tail would be
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7a5b      	ldrb	r3, [r3, #9]
 800392c:	3301      	adds	r3, #1
 800392e:	461a      	mov	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	fbb2 f1f3 	udiv	r1, r2, r3
 8003938:	fb03 f301 	mul.w	r3, r3, r1
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	73fb      	strb	r3, [r7, #15]
    if (newtail == rb->head)						//if the new tail would make the buffer look empty, buffer is full
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7a1b      	ldrb	r3, [r3, #8]
 8003944:	7bfa      	ldrb	r2, [r7, #15]
 8003946:	429a      	cmp	r2, r3
 8003948:	d101      	bne.n	800394e <RingBuffer_Put+0x32>
        return 0;
 800394a:	2300      	movs	r3, #0
 800394c:	e00a      	b.n	8003964 <RingBuffer_Put+0x48>
    else
    {
        rb->buf[rb->tail] = c;						//store the data
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	7a52      	ldrb	r2, [r2, #9]
 8003956:	4413      	add	r3, r2
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	701a      	strb	r2, [r3, #0]
        rb->tail = newtail;							//move the tail pointer forward (with wraparound)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7bfa      	ldrb	r2, [r7, #15]
 8003960:	725a      	strb	r2, [r3, #9]
        return 1;
 8003962:	2301      	movs	r3, #1
    }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr

0800396e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	7c1b      	ldrb	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d115      	bne.n	80039b2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800398a:	2202      	movs	r2, #2
 800398c:	2181      	movs	r1, #129	; 0x81
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f001 ff11 	bl	80057b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800399a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800399e:	2202      	movs	r2, #2
 80039a0:	2101      	movs	r1, #1
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f001 ff07 	bl	80057b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80039b0:	e012      	b.n	80039d8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	2202      	movs	r2, #2
 80039b6:	2181      	movs	r1, #129	; 0x81
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f001 fefc 	bl	80057b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80039c4:	2340      	movs	r3, #64	; 0x40
 80039c6:	2202      	movs	r2, #2
 80039c8:	2101      	movs	r1, #1
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f001 fef3 	bl	80057b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80039d8:	2308      	movs	r3, #8
 80039da:	2203      	movs	r2, #3
 80039dc:	2182      	movs	r1, #130	; 0x82
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f001 fee9 	bl	80057b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80039ea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80039ee:	f002 f803 	bl	80059f8 <USBD_static_malloc>
 80039f2:	4602      	mov	r2, r0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e026      	b.n	8003a58 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a10:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7c1b      	ldrb	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a3e:	2101      	movs	r1, #1
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f001 ffa2 	bl	800598a <USBD_LL_PrepareReceive>
 8003a46:	e007      	b.n	8003a58 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a4e:	2340      	movs	r3, #64	; 0x40
 8003a50:	2101      	movs	r1, #1
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f001 ff99 	bl	800598a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003a72:	2181      	movs	r1, #129	; 0x81
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f001 fec4 	bl	8005802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003a80:	2101      	movs	r1, #1
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f001 febd 	bl	8005802 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003a90:	2182      	movs	r1, #130	; 0x82
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f001 feb5 	bl	8005802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 ffa9 	bl	8005a10 <USBD_static_free>
    pdev->pClassData = NULL;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ae0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d039      	beq.n	8003b6e <USBD_CDC_Setup+0x9e>
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d17c      	bne.n	8003bf8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	88db      	ldrh	r3, [r3, #6]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d029      	beq.n	8003b5a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	b25b      	sxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	da11      	bge.n	8003b34 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003b1c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	88d2      	ldrh	r2, [r2, #6]
 8003b22:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003b24:	6939      	ldr	r1, [r7, #16]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	88db      	ldrh	r3, [r3, #6]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f001 f9f7 	bl	8004f20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003b32:	e068      	b.n	8003c06 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	785a      	ldrb	r2, [r3, #1]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	88db      	ldrh	r3, [r3, #6]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003b4a:	6939      	ldr	r1, [r7, #16]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	88db      	ldrh	r3, [r3, #6]
 8003b50:	461a      	mov	r2, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f001 fa12 	bl	8004f7c <USBD_CtlPrepareRx>
      break;
 8003b58:	e055      	b.n	8003c06 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	7850      	ldrb	r0, [r2, #1]
 8003b66:	2200      	movs	r2, #0
 8003b68:	6839      	ldr	r1, [r7, #0]
 8003b6a:	4798      	blx	r3
      break;
 8003b6c:	e04b      	b.n	8003c06 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	2b0a      	cmp	r3, #10
 8003b74:	d017      	beq.n	8003ba6 <USBD_CDC_Setup+0xd6>
 8003b76:	2b0b      	cmp	r3, #11
 8003b78:	d029      	beq.n	8003bce <USBD_CDC_Setup+0xfe>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d133      	bne.n	8003be6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d107      	bne.n	8003b98 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f001 f9c5 	bl	8004f20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003b96:	e02e      	b.n	8003bf6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003b98:	6839      	ldr	r1, [r7, #0]
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f001 f956 	bl	8004e4c <USBD_CtlError>
            ret = USBD_FAIL;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	75fb      	strb	r3, [r7, #23]
          break;
 8003ba4:	e027      	b.n	8003bf6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d107      	bne.n	8003bc0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003bb0:	f107 030f 	add.w	r3, r7, #15
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f001 f9b1 	bl	8004f20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003bbe:	e01a      	b.n	8003bf6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003bc0:	6839      	ldr	r1, [r7, #0]
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f001 f942 	bl	8004e4c <USBD_CtlError>
            ret = USBD_FAIL;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	75fb      	strb	r3, [r7, #23]
          break;
 8003bcc:	e013      	b.n	8003bf6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d00d      	beq.n	8003bf4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003bd8:	6839      	ldr	r1, [r7, #0]
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f001 f936 	bl	8004e4c <USBD_CtlError>
            ret = USBD_FAIL;
 8003be0:	2302      	movs	r3, #2
 8003be2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003be4:	e006      	b.n	8003bf4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003be6:	6839      	ldr	r1, [r7, #0]
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f001 f92f 	bl	8004e4c <USBD_CtlError>
          ret = USBD_FAIL;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8003bf2:	e000      	b.n	8003bf6 <USBD_CDC_Setup+0x126>
          break;
 8003bf4:	bf00      	nop
      }
      break;
 8003bf6:	e006      	b.n	8003c06 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003bf8:	6839      	ldr	r1, [r7, #0]
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f001 f926 	bl	8004e4c <USBD_CtlError>
      ret = USBD_FAIL;
 8003c00:	2302      	movs	r3, #2
 8003c02:	75fb      	strb	r3, [r7, #23]
      break;
 8003c04:	bf00      	nop
  }

  return ret;
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c22:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003c2a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d037      	beq.n	8003ca6 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	331c      	adds	r3, #28
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d026      	beq.n	8003c9a <USBD_CDC_DataIn+0x8a>
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	331c      	adds	r3, #28
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	0152      	lsls	r2, r2, #5
 8003c64:	440a      	add	r2, r1
 8003c66:	3238      	adds	r2, #56	; 0x38
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c6e:	fb02 f201 	mul.w	r2, r2, r1
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d110      	bne.n	8003c9a <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	331c      	adds	r3, #28
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003c8c:	78f9      	ldrb	r1, [r7, #3]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2200      	movs	r2, #0
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f001 fe56 	bl	8005944 <USBD_LL_Transmit>
 8003c98:	e003      	b.n	8003ca2 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e000      	b.n	8003ca8 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8003ca6:	2302      	movs	r3, #2
  }
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f001 fe81 	bl	80059d0 <USBD_LL_GetRxDataSize>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00d      	beq.n	8003cfc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4798      	blx	r3

    return USBD_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e000      	b.n	8003cfe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003cfc:	2302      	movs	r3, #2
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d14:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d015      	beq.n	8003d4c <USBD_CDC_EP0_RxReady+0x46>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003d26:	2bff      	cmp	r3, #255	; 0xff
 8003d28:	d010      	beq.n	8003d4c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8003d38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003d40:	b292      	uxth	r2, r2
 8003d42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	22ff      	movs	r2, #255	; 0xff
 8003d48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2243      	movs	r2, #67	; 0x43
 8003d64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003d66:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000114 	.word	0x20000114

08003d78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2243      	movs	r2, #67	; 0x43
 8003d84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8003d86:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	200000d0 	.word	0x200000d0

08003d98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2243      	movs	r2, #67	; 0x43
 8003da4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8003da6:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000158 	.word	0x20000158

08003db8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	220a      	movs	r2, #10
 8003dc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8003dc6:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	2000008c 	.word	0x2000008c

08003dd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8003de2:	2302      	movs	r3, #2
 8003de4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e18:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003e22:	88fa      	ldrh	r2, [r7, #6]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr

08003e36 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e46:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01c      	beq.n	8003eb0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d115      	bne.n	8003eac <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2181      	movs	r1, #129	; 0x81
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f001 fd4e 	bl	8005944 <USBD_LL_Transmit>

      return USBD_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e002      	b.n	8003eb2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8003eb0:	2302      	movs	r3, #2
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d017      	beq.n	8003f04 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7c1b      	ldrb	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 fd4e 	bl	800598a <USBD_LL_PrepareReceive>
 8003eee:	e007      	b.n	8003f00 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ef6:	2340      	movs	r3, #64	; 0x40
 8003ef8:	2101      	movs	r1, #1
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f001 fd45 	bl	800598a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003f22:	2302      	movs	r3, #2
 8003f24:	e01a      	b.n	8003f5c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	79fa      	ldrb	r2, [r7, #7]
 8003f52:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f001 fbb9 	bl	80056cc <USBD_LL_Init>

  return USBD_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d006      	beq.n	8003f86 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e001      	b.n	8003f8a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003f86:	2302      	movs	r3, #2
 8003f88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f001 fbee 	bl	8005780 <USBD_LL_Start>

  return USBD_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00c      	beq.n	8003ff6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	4611      	mov	r1, r2
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	4798      	blx	r3

  return USBD_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004036:	6839      	ldr	r1, [r7, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fecb 	bl	8004dd4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800404c:	461a      	mov	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	2b01      	cmp	r3, #1
 8004060:	d00c      	beq.n	800407c <USBD_LL_SetupStage+0x56>
 8004062:	2b01      	cmp	r3, #1
 8004064:	d302      	bcc.n	800406c <USBD_LL_SetupStage+0x46>
 8004066:	2b02      	cmp	r3, #2
 8004068:	d010      	beq.n	800408c <USBD_LL_SetupStage+0x66>
 800406a:	e017      	b.n	800409c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f9cb 	bl	8004410 <USBD_StdDevReq>
      break;
 800407a:	e01a      	b.n	80040b2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fa2d 	bl	80044e4 <USBD_StdItfReq>
      break;
 800408a:	e012      	b.n	80040b2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004092:	4619      	mov	r1, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fa6b 	bl	8004570 <USBD_StdEPReq>
      break;
 800409a:	e00a      	b.n	80040b2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f001 fbc8 	bl	8005840 <USBD_LL_StallEP>
      break;
 80040b0:	bf00      	nop
  }

  return USBD_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	460b      	mov	r3, r1
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80040ca:	7afb      	ldrb	r3, [r7, #11]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d14b      	bne.n	8004168 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80040d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d134      	bne.n	800414c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d919      	bls.n	8004122 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	1ad2      	subs	r2, r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004104:	429a      	cmp	r2, r3
 8004106:	d203      	bcs.n	8004110 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800410c:	b29b      	uxth	r3, r3
 800410e:	e002      	b.n	8004116 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004114:	b29b      	uxth	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 ff4c 	bl	8004fb8 <USBD_CtlContinueRx>
 8004120:	e038      	b.n	8004194 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004134:	2b03      	cmp	r3, #3
 8004136:	d105      	bne.n	8004144 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 ff49 	bl	8004fdc <USBD_CtlSendStatus>
 800414a:	e023      	b.n	8004194 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004152:	2b05      	cmp	r3, #5
 8004154:	d11e      	bne.n	8004194 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800415e:	2100      	movs	r1, #0
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f001 fb6d 	bl	8005840 <USBD_LL_StallEP>
 8004166:	e015      	b.n	8004194 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00d      	beq.n	8004190 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800417a:	2b03      	cmp	r3, #3
 800417c:	d108      	bne.n	8004190 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	7afa      	ldrb	r2, [r7, #11]
 8004188:	4611      	mov	r1, r2
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	4798      	blx	r3
 800418e:	e001      	b.n	8004194 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004190:	2302      	movs	r3, #2
 8004192:	e000      	b.n	8004196 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b086      	sub	sp, #24
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	460b      	mov	r3, r1
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80041ac:	7afb      	ldrb	r3, [r7, #11]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d17f      	bne.n	80042b2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3314      	adds	r3, #20
 80041b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d15c      	bne.n	800427c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d915      	bls.n	80041fa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	1ad2      	subs	r2, r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 feb6 	bl	8004f58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80041ec:	2300      	movs	r3, #0
 80041ee:	2200      	movs	r2, #0
 80041f0:	2100      	movs	r1, #0
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f001 fbc9 	bl	800598a <USBD_LL_PrepareReceive>
 80041f8:	e04e      	b.n	8004298 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	6912      	ldr	r2, [r2, #16]
 8004202:	fbb3 f1f2 	udiv	r1, r3, r2
 8004206:	fb02 f201 	mul.w	r2, r2, r1
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11c      	bne.n	800424a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004218:	429a      	cmp	r2, r3
 800421a:	d316      	bcc.n	800424a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004226:	429a      	cmp	r2, r3
 8004228:	d20f      	bcs.n	800424a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800422a:	2200      	movs	r2, #0
 800422c:	2100      	movs	r1, #0
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fe92 	bl	8004f58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800423c:	2300      	movs	r3, #0
 800423e:	2200      	movs	r2, #0
 8004240:	2100      	movs	r1, #0
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f001 fba1 	bl	800598a <USBD_LL_PrepareReceive>
 8004248:	e026      	b.n	8004298 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800425c:	2b03      	cmp	r3, #3
 800425e:	d105      	bne.n	800426c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f001 fae6 	bl	8005840 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fec4 	bl	8005002 <USBD_CtlReceiveStatus>
 800427a:	e00d      	b.n	8004298 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004282:	2b04      	cmp	r3, #4
 8004284:	d004      	beq.n	8004290 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800428c:	2b00      	cmp	r3, #0
 800428e:	d103      	bne.n	8004298 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004290:	2180      	movs	r1, #128	; 0x80
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f001 fad4 	bl	8005840 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d11d      	bne.n	80042de <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff fe83 	bl	8003fae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80042b0:	e015      	b.n	80042de <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00d      	beq.n	80042da <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d108      	bne.n	80042da <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	7afa      	ldrb	r2, [r7, #11]
 80042d2:	4611      	mov	r1, r2
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	4798      	blx	r3
 80042d8:	e001      	b.n	80042de <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80042da:	2302      	movs	r3, #2
 80042dc:	e000      	b.n	80042e0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042f0:	2340      	movs	r3, #64	; 0x40
 80042f2:	2200      	movs	r2, #0
 80042f4:	2100      	movs	r1, #0
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f001 fa5d 	bl	80057b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2240      	movs	r2, #64	; 0x40
 8004308:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800430c:	2340      	movs	r3, #64	; 0x40
 800430e:	2200      	movs	r2, #0
 8004310:	2180      	movs	r1, #128	; 0x80
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f001 fa4f 	bl	80057b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2240      	movs	r2, #64	; 0x40
 8004322:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d009      	beq.n	8004360 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6852      	ldr	r2, [r2, #4]
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	4611      	mov	r1, r2
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
  }

  return USBD_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2204      	movs	r2, #4
 80043a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d105      	bne.n	80043ce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d10b      	bne.n	8004404 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004426:	2b20      	cmp	r3, #32
 8004428:	d004      	beq.n	8004434 <USBD_StdDevReq+0x24>
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d002      	beq.n	8004434 <USBD_StdDevReq+0x24>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <USBD_StdDevReq+0x34>
 8004432:	e04c      	b.n	80044ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	4798      	blx	r3
      break;
 8004442:	e049      	b.n	80044d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	2b09      	cmp	r3, #9
 800444a:	d83a      	bhi.n	80044c2 <USBD_StdDevReq+0xb2>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <USBD_StdDevReq+0x44>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	080044a5 	.word	0x080044a5
 8004458:	080044b9 	.word	0x080044b9
 800445c:	080044c3 	.word	0x080044c3
 8004460:	080044af 	.word	0x080044af
 8004464:	080044c3 	.word	0x080044c3
 8004468:	08004487 	.word	0x08004487
 800446c:	0800447d 	.word	0x0800447d
 8004470:	080044c3 	.word	0x080044c3
 8004474:	0800449b 	.word	0x0800449b
 8004478:	08004491 	.word	0x08004491
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800447c:	6839      	ldr	r1, [r7, #0]
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9d4 	bl	800482c <USBD_GetDescriptor>
          break;
 8004484:	e022      	b.n	80044cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004486:	6839      	ldr	r1, [r7, #0]
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fb37 	bl	8004afc <USBD_SetAddress>
          break;
 800448e:	e01d      	b.n	80044cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fb74 	bl	8004b80 <USBD_SetConfig>
          break;
 8004498:	e018      	b.n	80044cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800449a:	6839      	ldr	r1, [r7, #0]
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fbfd 	bl	8004c9c <USBD_GetConfig>
          break;
 80044a2:	e013      	b.n	80044cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80044a4:	6839      	ldr	r1, [r7, #0]
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fc2c 	bl	8004d04 <USBD_GetStatus>
          break;
 80044ac:	e00e      	b.n	80044cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80044ae:	6839      	ldr	r1, [r7, #0]
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fc5a 	bl	8004d6a <USBD_SetFeature>
          break;
 80044b6:	e009      	b.n	80044cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fc69 	bl	8004d92 <USBD_ClrFeature>
          break;
 80044c0:	e004      	b.n	80044cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fcc1 	bl	8004e4c <USBD_CtlError>
          break;
 80044ca:	bf00      	nop
      }
      break;
 80044cc:	e004      	b.n	80044d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80044ce:	6839      	ldr	r1, [r7, #0]
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fcbb 	bl	8004e4c <USBD_CtlError>
      break;
 80044d6:	bf00      	nop
  }

  return ret;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop

080044e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d003      	beq.n	8004506 <USBD_StdItfReq+0x22>
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d001      	beq.n	8004506 <USBD_StdItfReq+0x22>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d12a      	bne.n	800455c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800450c:	3b01      	subs	r3, #1
 800450e:	2b02      	cmp	r3, #2
 8004510:	d81d      	bhi.n	800454e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	889b      	ldrh	r3, [r3, #4]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d813      	bhi.n	8004544 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	6839      	ldr	r1, [r7, #0]
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	4798      	blx	r3
 800452a:	4603      	mov	r3, r0
 800452c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	88db      	ldrh	r3, [r3, #6]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d110      	bne.n	8004558 <USBD_StdItfReq+0x74>
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10d      	bne.n	8004558 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fd4d 	bl	8004fdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004542:	e009      	b.n	8004558 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004544:	6839      	ldr	r1, [r7, #0]
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fc80 	bl	8004e4c <USBD_CtlError>
          break;
 800454c:	e004      	b.n	8004558 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fc7b 	bl	8004e4c <USBD_CtlError>
          break;
 8004556:	e000      	b.n	800455a <USBD_StdItfReq+0x76>
          break;
 8004558:	bf00      	nop
      }
      break;
 800455a:	e004      	b.n	8004566 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800455c:	6839      	ldr	r1, [r7, #0]
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fc74 	bl	8004e4c <USBD_CtlError>
      break;
 8004564:	bf00      	nop
  }

  return USBD_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	889b      	ldrh	r3, [r3, #4]
 8004582:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800458c:	2b20      	cmp	r3, #32
 800458e:	d004      	beq.n	800459a <USBD_StdEPReq+0x2a>
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d002      	beq.n	800459a <USBD_StdEPReq+0x2a>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <USBD_StdEPReq+0x3a>
 8004598:	e13d      	b.n	8004816 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	6839      	ldr	r1, [r7, #0]
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
      break;
 80045a8:	e13a      	b.n	8004820 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d10a      	bne.n	80045cc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	6839      	ldr	r1, [r7, #0]
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
 80045c4:	4603      	mov	r3, r0
 80045c6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	e12a      	b.n	8004822 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d03e      	beq.n	8004652 <USBD_StdEPReq+0xe2>
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d002      	beq.n	80045de <USBD_StdEPReq+0x6e>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d070      	beq.n	80046be <USBD_StdEPReq+0x14e>
 80045dc:	e115      	b.n	800480a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d002      	beq.n	80045ee <USBD_StdEPReq+0x7e>
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d015      	beq.n	8004618 <USBD_StdEPReq+0xa8>
 80045ec:	e02b      	b.n	8004646 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80045ee:	7bbb      	ldrb	r3, [r7, #14]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00c      	beq.n	800460e <USBD_StdEPReq+0x9e>
 80045f4:	7bbb      	ldrb	r3, [r7, #14]
 80045f6:	2b80      	cmp	r3, #128	; 0x80
 80045f8:	d009      	beq.n	800460e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80045fa:	7bbb      	ldrb	r3, [r7, #14]
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f001 f91e 	bl	8005840 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004604:	2180      	movs	r1, #128	; 0x80
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f001 f91a 	bl	8005840 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800460c:	e020      	b.n	8004650 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800460e:	6839      	ldr	r1, [r7, #0]
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fc1b 	bl	8004e4c <USBD_CtlError>
              break;
 8004616:	e01b      	b.n	8004650 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	885b      	ldrh	r3, [r3, #2]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10e      	bne.n	800463e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004620:	7bbb      	ldrb	r3, [r7, #14]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <USBD_StdEPReq+0xce>
 8004626:	7bbb      	ldrb	r3, [r7, #14]
 8004628:	2b80      	cmp	r3, #128	; 0x80
 800462a:	d008      	beq.n	800463e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	88db      	ldrh	r3, [r3, #6]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004634:	7bbb      	ldrb	r3, [r7, #14]
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f001 f901 	bl	8005840 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fccc 	bl	8004fdc <USBD_CtlSendStatus>

              break;
 8004644:	e004      	b.n	8004650 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fbff 	bl	8004e4c <USBD_CtlError>
              break;
 800464e:	bf00      	nop
          }
          break;
 8004650:	e0e0      	b.n	8004814 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004658:	2b02      	cmp	r3, #2
 800465a:	d002      	beq.n	8004662 <USBD_StdEPReq+0xf2>
 800465c:	2b03      	cmp	r3, #3
 800465e:	d015      	beq.n	800468c <USBD_StdEPReq+0x11c>
 8004660:	e026      	b.n	80046b0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004662:	7bbb      	ldrb	r3, [r7, #14]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00c      	beq.n	8004682 <USBD_StdEPReq+0x112>
 8004668:	7bbb      	ldrb	r3, [r7, #14]
 800466a:	2b80      	cmp	r3, #128	; 0x80
 800466c:	d009      	beq.n	8004682 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800466e:	7bbb      	ldrb	r3, [r7, #14]
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 f8e4 	bl	8005840 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 f8e0 	bl	8005840 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004680:	e01c      	b.n	80046bc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fbe1 	bl	8004e4c <USBD_CtlError>
              break;
 800468a:	e017      	b.n	80046bc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	885b      	ldrh	r3, [r3, #2]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d112      	bne.n	80046ba <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004694:	7bbb      	ldrb	r3, [r7, #14]
 8004696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800469e:	7bbb      	ldrb	r3, [r7, #14]
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f001 f8eb 	bl	800587e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fc97 	bl	8004fdc <USBD_CtlSendStatus>
              }
              break;
 80046ae:	e004      	b.n	80046ba <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fbca 	bl	8004e4c <USBD_CtlError>
              break;
 80046b8:	e000      	b.n	80046bc <USBD_StdEPReq+0x14c>
              break;
 80046ba:	bf00      	nop
          }
          break;
 80046bc:	e0aa      	b.n	8004814 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d002      	beq.n	80046ce <USBD_StdEPReq+0x15e>
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d032      	beq.n	8004732 <USBD_StdEPReq+0x1c2>
 80046cc:	e097      	b.n	80047fe <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80046ce:	7bbb      	ldrb	r3, [r7, #14]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <USBD_StdEPReq+0x174>
 80046d4:	7bbb      	ldrb	r3, [r7, #14]
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d004      	beq.n	80046e4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fbb5 	bl	8004e4c <USBD_CtlError>
                break;
 80046e2:	e091      	b.n	8004808 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da0b      	bge.n	8004704 <USBD_StdEPReq+0x194>
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	3310      	adds	r3, #16
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	4413      	add	r3, r2
 8004700:	3304      	adds	r3, #4
 8004702:	e00b      	b.n	800471c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4413      	add	r3, r2
 800471a:	3304      	adds	r3, #4
 800471c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2202      	movs	r2, #2
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fbf8 	bl	8004f20 <USBD_CtlSendData>
              break;
 8004730:	e06a      	b.n	8004808 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004732:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004736:	2b00      	cmp	r3, #0
 8004738:	da11      	bge.n	800475e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800473a:	7bbb      	ldrb	r3, [r7, #14]
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	3318      	adds	r3, #24
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d117      	bne.n	8004784 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004754:	6839      	ldr	r1, [r7, #0]
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fb78 	bl	8004e4c <USBD_CtlError>
                  break;
 800475c:	e054      	b.n	8004808 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800475e:	7bbb      	ldrb	r3, [r7, #14]
 8004760:	f003 020f 	and.w	r2, r3, #15
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb65 	bl	8004e4c <USBD_CtlError>
                  break;
 8004782:	e041      	b.n	8004808 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004788:	2b00      	cmp	r3, #0
 800478a:	da0b      	bge.n	80047a4 <USBD_StdEPReq+0x234>
 800478c:	7bbb      	ldrb	r3, [r7, #14]
 800478e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	3310      	adds	r3, #16
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4413      	add	r3, r2
 80047a0:	3304      	adds	r3, #4
 80047a2:	e00b      	b.n	80047bc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80047a4:	7bbb      	ldrb	r3, [r7, #14]
 80047a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	3304      	adds	r3, #4
 80047bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80047be:	7bbb      	ldrb	r3, [r7, #14]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <USBD_StdEPReq+0x25a>
 80047c4:	7bbb      	ldrb	r3, [r7, #14]
 80047c6:	2b80      	cmp	r3, #128	; 0x80
 80047c8:	d103      	bne.n	80047d2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e00e      	b.n	80047f0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80047d2:	7bbb      	ldrb	r3, [r7, #14]
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f001 f870 	bl	80058bc <USBD_LL_IsStallEP>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	e002      	b.n	80047f0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2202      	movs	r2, #2
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fb92 	bl	8004f20 <USBD_CtlSendData>
              break;
 80047fc:	e004      	b.n	8004808 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80047fe:	6839      	ldr	r1, [r7, #0]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fb23 	bl	8004e4c <USBD_CtlError>
              break;
 8004806:	bf00      	nop
          }
          break;
 8004808:	e004      	b.n	8004814 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fb1d 	bl	8004e4c <USBD_CtlError>
          break;
 8004812:	bf00      	nop
      }
      break;
 8004814:	e004      	b.n	8004820 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004816:	6839      	ldr	r1, [r7, #0]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb17 	bl	8004e4c <USBD_CtlError>
      break;
 800481e:	bf00      	nop
  }

  return ret;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	885b      	ldrh	r3, [r3, #2]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	2b06      	cmp	r3, #6
 800484e:	f200 8128 	bhi.w	8004aa2 <USBD_GetDescriptor+0x276>
 8004852:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <USBD_GetDescriptor+0x2c>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	08004875 	.word	0x08004875
 800485c:	0800488d 	.word	0x0800488d
 8004860:	080048cd 	.word	0x080048cd
 8004864:	08004aa3 	.word	0x08004aa3
 8004868:	08004aa3 	.word	0x08004aa3
 800486c:	08004a43 	.word	0x08004a43
 8004870:	08004a6f 	.word	0x08004a6f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	7c12      	ldrb	r2, [r2, #16]
 8004880:	f107 0108 	add.w	r1, r7, #8
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
 8004888:	60f8      	str	r0, [r7, #12]
      break;
 800488a:	e112      	b.n	8004ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	7c1b      	ldrb	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10d      	bne.n	80048b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	f107 0208 	add.w	r2, r7, #8
 80048a0:	4610      	mov	r0, r2
 80048a2:	4798      	blx	r3
 80048a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	2202      	movs	r2, #2
 80048ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80048ae:	e100      	b.n	8004ab2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	f107 0208 	add.w	r2, r7, #8
 80048bc:	4610      	mov	r0, r2
 80048be:	4798      	blx	r3
 80048c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	2202      	movs	r2, #2
 80048c8:	701a      	strb	r2, [r3, #0]
      break;
 80048ca:	e0f2      	b.n	8004ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	885b      	ldrh	r3, [r3, #2]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	f200 80ac 	bhi.w	8004a30 <USBD_GetDescriptor+0x204>
 80048d8:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <USBD_GetDescriptor+0xb4>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	080048f9 	.word	0x080048f9
 80048e4:	0800492d 	.word	0x0800492d
 80048e8:	08004961 	.word	0x08004961
 80048ec:	08004995 	.word	0x08004995
 80048f0:	080049c9 	.word	0x080049c9
 80048f4:	080049fd 	.word	0x080049fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00b      	beq.n	800491c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	7c12      	ldrb	r2, [r2, #16]
 8004910:	f107 0108 	add.w	r1, r7, #8
 8004914:	4610      	mov	r0, r2
 8004916:	4798      	blx	r3
 8004918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800491a:	e091      	b.n	8004a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa94 	bl	8004e4c <USBD_CtlError>
            err++;
 8004924:	7afb      	ldrb	r3, [r7, #11]
 8004926:	3301      	adds	r3, #1
 8004928:	72fb      	strb	r3, [r7, #11]
          break;
 800492a:	e089      	b.n	8004a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00b      	beq.n	8004950 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	7c12      	ldrb	r2, [r2, #16]
 8004944:	f107 0108 	add.w	r1, r7, #8
 8004948:	4610      	mov	r0, r2
 800494a:	4798      	blx	r3
 800494c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800494e:	e077      	b.n	8004a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004950:	6839      	ldr	r1, [r7, #0]
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa7a 	bl	8004e4c <USBD_CtlError>
            err++;
 8004958:	7afb      	ldrb	r3, [r7, #11]
 800495a:	3301      	adds	r3, #1
 800495c:	72fb      	strb	r3, [r7, #11]
          break;
 800495e:	e06f      	b.n	8004a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00b      	beq.n	8004984 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	7c12      	ldrb	r2, [r2, #16]
 8004978:	f107 0108 	add.w	r1, r7, #8
 800497c:	4610      	mov	r0, r2
 800497e:	4798      	blx	r3
 8004980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004982:	e05d      	b.n	8004a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fa60 	bl	8004e4c <USBD_CtlError>
            err++;
 800498c:	7afb      	ldrb	r3, [r7, #11]
 800498e:	3301      	adds	r3, #1
 8004990:	72fb      	strb	r3, [r7, #11]
          break;
 8004992:	e055      	b.n	8004a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	7c12      	ldrb	r2, [r2, #16]
 80049ac:	f107 0108 	add.w	r1, r7, #8
 80049b0:	4610      	mov	r0, r2
 80049b2:	4798      	blx	r3
 80049b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80049b6:	e043      	b.n	8004a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fa46 	bl	8004e4c <USBD_CtlError>
            err++;
 80049c0:	7afb      	ldrb	r3, [r7, #11]
 80049c2:	3301      	adds	r3, #1
 80049c4:	72fb      	strb	r3, [r7, #11]
          break;
 80049c6:	e03b      	b.n	8004a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	7c12      	ldrb	r2, [r2, #16]
 80049e0:	f107 0108 	add.w	r1, r7, #8
 80049e4:	4610      	mov	r0, r2
 80049e6:	4798      	blx	r3
 80049e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80049ea:	e029      	b.n	8004a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa2c 	bl	8004e4c <USBD_CtlError>
            err++;
 80049f4:	7afb      	ldrb	r3, [r7, #11]
 80049f6:	3301      	adds	r3, #1
 80049f8:	72fb      	strb	r3, [r7, #11]
          break;
 80049fa:	e021      	b.n	8004a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00b      	beq.n	8004a20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	7c12      	ldrb	r2, [r2, #16]
 8004a14:	f107 0108 	add.w	r1, r7, #8
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4798      	blx	r3
 8004a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004a1e:	e00f      	b.n	8004a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fa12 	bl	8004e4c <USBD_CtlError>
            err++;
 8004a28:	7afb      	ldrb	r3, [r7, #11]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8004a2e:	e007      	b.n	8004a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fa0a 	bl	8004e4c <USBD_CtlError>
          err++;
 8004a38:	7afb      	ldrb	r3, [r7, #11]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004a3e:	e038      	b.n	8004ab2 <USBD_GetDescriptor+0x286>
 8004a40:	e037      	b.n	8004ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	7c1b      	ldrb	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a52:	f107 0208 	add.w	r2, r7, #8
 8004a56:	4610      	mov	r0, r2
 8004a58:	4798      	blx	r3
 8004a5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004a5c:	e029      	b.n	8004ab2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f9f3 	bl	8004e4c <USBD_CtlError>
        err++;
 8004a66:	7afb      	ldrb	r3, [r7, #11]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	72fb      	strb	r3, [r7, #11]
      break;
 8004a6c:	e021      	b.n	8004ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7c1b      	ldrb	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	f107 0208 	add.w	r2, r7, #8
 8004a82:	4610      	mov	r0, r2
 8004a84:	4798      	blx	r3
 8004a86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	2207      	movs	r2, #7
 8004a8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004a90:	e00f      	b.n	8004ab2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004a92:	6839      	ldr	r1, [r7, #0]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f9d9 	bl	8004e4c <USBD_CtlError>
        err++;
 8004a9a:	7afb      	ldrb	r3, [r7, #11]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	72fb      	strb	r3, [r7, #11]
      break;
 8004aa0:	e007      	b.n	8004ab2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f9d1 	bl	8004e4c <USBD_CtlError>
      err++;
 8004aaa:	7afb      	ldrb	r3, [r7, #11]
 8004aac:	3301      	adds	r3, #1
 8004aae:	72fb      	strb	r3, [r7, #11]
      break;
 8004ab0:	bf00      	nop
  }

  if (err != 0U)
 8004ab2:	7afb      	ldrb	r3, [r7, #11]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11c      	bne.n	8004af2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004ab8:	893b      	ldrh	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d011      	beq.n	8004ae2 <USBD_GetDescriptor+0x2b6>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	88db      	ldrh	r3, [r3, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	88da      	ldrh	r2, [r3, #6]
 8004aca:	893b      	ldrh	r3, [r7, #8]
 8004acc:	4293      	cmp	r3, r2
 8004ace:	bf28      	it	cs
 8004ad0:	4613      	movcs	r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ad6:	893b      	ldrh	r3, [r7, #8]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68f9      	ldr	r1, [r7, #12]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fa1f 	bl	8004f20 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	88db      	ldrh	r3, [r3, #6]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fa76 	bl	8004fdc <USBD_CtlSendStatus>
 8004af0:	e000      	b.n	8004af4 <USBD_GetDescriptor+0x2c8>
    return;
 8004af2:	bf00      	nop
    }
  }
}
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop

08004afc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	889b      	ldrh	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d130      	bne.n	8004b70 <USBD_SetAddress+0x74>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	88db      	ldrh	r3, [r3, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d12c      	bne.n	8004b70 <USBD_SetAddress+0x74>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	885b      	ldrh	r3, [r3, #2]
 8004b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b1c:	d828      	bhi.n	8004b70 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	885b      	ldrh	r3, [r3, #2]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d104      	bne.n	8004b3e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004b34:	6839      	ldr	r1, [r7, #0]
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f988 	bl	8004e4c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b3c:	e01c      	b.n	8004b78 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	7bfa      	ldrb	r2, [r7, #15]
 8004b42:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fedb 	bl	8005906 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fa43 	bl	8004fdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b64:	e008      	b.n	8004b78 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b6e:	e003      	b.n	8004b78 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004b70:	6839      	ldr	r1, [r7, #0]
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f96a 	bl	8004e4c <USBD_CtlError>
  }
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	885b      	ldrh	r3, [r3, #2]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	4b41      	ldr	r3, [pc, #260]	; (8004c98 <USBD_SetConfig+0x118>)
 8004b92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004b94:	4b40      	ldr	r3, [pc, #256]	; (8004c98 <USBD_SetConfig+0x118>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d904      	bls.n	8004ba6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004b9c:	6839      	ldr	r1, [r7, #0]
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f954 	bl	8004e4c <USBD_CtlError>
 8004ba4:	e075      	b.n	8004c92 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d002      	beq.n	8004bb6 <USBD_SetConfig+0x36>
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d023      	beq.n	8004bfc <USBD_SetConfig+0x7c>
 8004bb4:	e062      	b.n	8004c7c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004bb6:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <USBD_SetConfig+0x118>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01a      	beq.n	8004bf4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <USBD_SetConfig+0x118>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2203      	movs	r2, #3
 8004bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004bd0:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <USBD_SetConfig+0x118>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff f9f3 	bl	8003fc2 <USBD_SetClassConfig>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d104      	bne.n	8004bec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f931 	bl	8004e4c <USBD_CtlError>
            return;
 8004bea:	e052      	b.n	8004c92 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f9f5 	bl	8004fdc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004bf2:	e04e      	b.n	8004c92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f9f1 	bl	8004fdc <USBD_CtlSendStatus>
        break;
 8004bfa:	e04a      	b.n	8004c92 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004bfc:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <USBD_SetConfig+0x118>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d112      	bne.n	8004c2a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004c0c:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <USBD_SetConfig+0x118>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <USBD_SetConfig+0x118>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff f9ef 	bl	8004000 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f9da 	bl	8004fdc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004c28:	e033      	b.n	8004c92 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <USBD_SetConfig+0x118>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d01d      	beq.n	8004c74 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff f9dd 	bl	8004000 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <USBD_SetConfig+0x118>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004c50:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <USBD_SetConfig+0x118>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff f9b3 	bl	8003fc2 <USBD_SetClassConfig>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d104      	bne.n	8004c6c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f8f1 	bl	8004e4c <USBD_CtlError>
            return;
 8004c6a:	e012      	b.n	8004c92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f9b5 	bl	8004fdc <USBD_CtlSendStatus>
        break;
 8004c72:	e00e      	b.n	8004c92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f9b1 	bl	8004fdc <USBD_CtlSendStatus>
        break;
 8004c7a:	e00a      	b.n	8004c92 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8e4 	bl	8004e4c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004c84:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <USBD_SetConfig+0x118>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff f9b8 	bl	8004000 <USBD_ClrClassConfig>
        break;
 8004c90:	bf00      	nop
    }
  }
}
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000220 	.word	0x20000220

08004c9c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	88db      	ldrh	r3, [r3, #6]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d004      	beq.n	8004cb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f8cb 	bl	8004e4c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004cb6:	e021      	b.n	8004cfc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	db17      	blt.n	8004cf2 <USBD_GetConfig+0x56>
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	dd02      	ble.n	8004ccc <USBD_GetConfig+0x30>
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d00b      	beq.n	8004ce2 <USBD_GetConfig+0x46>
 8004cca:	e012      	b.n	8004cf2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f920 	bl	8004f20 <USBD_CtlSendData>
        break;
 8004ce0:	e00c      	b.n	8004cfc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	4619      	mov	r1, r3
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f918 	bl	8004f20 <USBD_CtlSendData>
        break;
 8004cf0:	e004      	b.n	8004cfc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f8a9 	bl	8004e4c <USBD_CtlError>
        break;
 8004cfa:	bf00      	nop
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d14:	3b01      	subs	r3, #1
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d81e      	bhi.n	8004d58 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	88db      	ldrh	r3, [r3, #6]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d004      	beq.n	8004d2c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f891 	bl	8004e4c <USBD_CtlError>
        break;
 8004d2a:	e01a      	b.n	8004d62 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f043 0202 	orr.w	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f8e5 	bl	8004f20 <USBD_CtlSendData>
      break;
 8004d56:	e004      	b.n	8004d62 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f876 	bl	8004e4c <USBD_CtlError>
      break;
 8004d60:	bf00      	nop
  }
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	885b      	ldrh	r3, [r3, #2]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d106      	bne.n	8004d8a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f929 	bl	8004fdc <USBD_CtlSendStatus>
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004da2:	3b01      	subs	r3, #1
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d80b      	bhi.n	8004dc0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	885b      	ldrh	r3, [r3, #2]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d10c      	bne.n	8004dca <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f90f 	bl	8004fdc <USBD_CtlSendStatus>
      }
      break;
 8004dbe:	e004      	b.n	8004dca <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f842 	bl	8004e4c <USBD_CtlError>
      break;
 8004dc8:	e000      	b.n	8004dcc <USBD_ClrFeature+0x3a>
      break;
 8004dca:	bf00      	nop
  }
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781a      	ldrb	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	785a      	ldrb	r2, [r3, #1]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	3302      	adds	r3, #2
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	3303      	adds	r3, #3
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	3305      	adds	r3, #5
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	4413      	add	r3, r2
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	3306      	adds	r3, #6
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	3307      	adds	r3, #7
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	80da      	strh	r2, [r3, #6]

}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004e56:	2180      	movs	r1, #128	; 0x80
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fcf1 	bl	8005840 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004e5e:	2100      	movs	r1, #0
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fced 	bl	8005840 <USBD_LL_StallEP>
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b086      	sub	sp, #24
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d032      	beq.n	8004eea <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f834 	bl	8004ef2 <USBD_GetLen>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	75fa      	strb	r2, [r7, #23]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	7812      	ldrb	r2, [r2, #0]
 8004ea8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	75fa      	strb	r2, [r7, #23]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004eba:	e012      	b.n	8004ee2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	60fa      	str	r2, [r7, #12]
 8004ec2:	7dfa      	ldrb	r2, [r7, #23]
 8004ec4:	1c51      	adds	r1, r2, #1
 8004ec6:	75f9      	strb	r1, [r7, #23]
 8004ec8:	4611      	mov	r1, r2
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	440a      	add	r2, r1
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	75fa      	strb	r2, [r7, #23]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4413      	add	r3, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e8      	bne.n	8004ebc <USBD_GetString+0x4e>
    }
  }
}
 8004eea:	bf00      	nop
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8004efe:	e005      	b.n	8004f0c <USBD_GetLen+0x1a>
  {
    len++;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	3301      	adds	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
    buf++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f5      	bne.n	8004f00 <USBD_GetLen+0xe>
  }

  return len;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004f3c:	88fa      	ldrh	r2, [r7, #6]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	2100      	movs	r1, #0
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fcfb 	bl	8005944 <USBD_LL_Transmit>

  return USBD_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 fce9 	bl	8005944 <USBD_LL_Transmit>

  return USBD_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	4613      	mov	r3, r2
 8004f88:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004f92:	88fa      	ldrh	r2, [r7, #6]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004f9a:	88fa      	ldrh	r2, [r7, #6]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fcee 	bl	800598a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	2100      	movs	r1, #0
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fcdc 	bl	800598a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004fec:	2300      	movs	r3, #0
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fca6 	bl	8005944 <USBD_LL_Transmit>

  return USBD_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2205      	movs	r2, #5
 800500e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005012:	2300      	movs	r3, #0
 8005014:	2200      	movs	r2, #0
 8005016:	2100      	movs	r1, #0
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fcb6 	bl	800598a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
//	GPIOA->BSRR = (uint32_t) GPIO_PIN_12;



	/* Sets PA12 (D+) low for 5ms to force USB enumeration */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800502e:	f107 0308 	add.w	r3, r7, #8
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	605a      	str	r2, [r3, #4]
 8005038:	609a      	str	r2, [r3, #8]
 800503a:	60da      	str	r2, [r3, #12]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800503c:	4b28      	ldr	r3, [pc, #160]	; (80050e0 <MX_USB_DEVICE_Init+0xb8>)
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	4a27      	ldr	r2, [pc, #156]	; (80050e0 <MX_USB_DEVICE_Init+0xb8>)
 8005042:	f043 0304 	orr.w	r3, r3, #4
 8005046:	6193      	str	r3, [r2, #24]
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <MX_USB_DEVICE_Init+0xb8>)
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	607b      	str	r3, [r7, #4]
 8005052:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005054:	2200      	movs	r2, #0
 8005056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800505a:	4822      	ldr	r0, [pc, #136]	; (80050e4 <MX_USB_DEVICE_Init+0xbc>)
 800505c:	f7fb fd0c 	bl	8000a78 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PA12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005064:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005066:	2301      	movs	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506e:	2302      	movs	r3, #2
 8005070:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	4619      	mov	r1, r3
 8005078:	481a      	ldr	r0, [pc, #104]	; (80050e4 <MX_USB_DEVICE_Init+0xbc>)
 800507a:	f7fb fba3 	bl	80007c4 <HAL_GPIO_Init>
	  HAL_Delay(5);
 800507e:	2005      	movs	r0, #5
 8005080:	f7fb fa9e 	bl	80005c0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8005084:	2201      	movs	r2, #1
 8005086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800508a:	4816      	ldr	r0, [pc, #88]	; (80050e4 <MX_USB_DEVICE_Init+0xbc>)
 800508c:	f7fb fcf4 	bl	8000a78 <HAL_GPIO_WritePin>

  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005090:	2200      	movs	r2, #0
 8005092:	4915      	ldr	r1, [pc, #84]	; (80050e8 <MX_USB_DEVICE_Init+0xc0>)
 8005094:	4815      	ldr	r0, [pc, #84]	; (80050ec <MX_USB_DEVICE_Init+0xc4>)
 8005096:	f7fe ff3a 	bl	8003f0e <USBD_Init>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_USB_DEVICE_Init+0x7c>
  {
    Error_Handler();
 80050a0:	f7fb f934 	bl	800030c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80050a4:	4912      	ldr	r1, [pc, #72]	; (80050f0 <MX_USB_DEVICE_Init+0xc8>)
 80050a6:	4811      	ldr	r0, [pc, #68]	; (80050ec <MX_USB_DEVICE_Init+0xc4>)
 80050a8:	f7fe ff5c 	bl	8003f64 <USBD_RegisterClass>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <MX_USB_DEVICE_Init+0x8e>
  {
    Error_Handler();
 80050b2:	f7fb f92b 	bl	800030c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80050b6:	490f      	ldr	r1, [pc, #60]	; (80050f4 <MX_USB_DEVICE_Init+0xcc>)
 80050b8:	480c      	ldr	r0, [pc, #48]	; (80050ec <MX_USB_DEVICE_Init+0xc4>)
 80050ba:	f7fe fe8d 	bl	8003dd8 <USBD_CDC_RegisterInterface>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <MX_USB_DEVICE_Init+0xa0>
  {
    Error_Handler();
 80050c4:	f7fb f922 	bl	800030c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80050c8:	4808      	ldr	r0, [pc, #32]	; (80050ec <MX_USB_DEVICE_Init+0xc4>)
 80050ca:	f7fe ff64 	bl	8003f96 <USBD_Start>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <MX_USB_DEVICE_Init+0xb0>
  {
    Error_Handler();
 80050d4:	f7fb f91a 	bl	800030c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80050d8:	bf00      	nop
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40010800 	.word	0x40010800
 80050e8:	200001b4 	.word	0x200001b4
 80050ec:	20000514 	.word	0x20000514
 80050f0:	20000098 	.word	0x20000098
 80050f4:	200001a4 	.word	0x200001a4

080050f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80050fc:	2200      	movs	r2, #0
 80050fe:	4905      	ldr	r1, [pc, #20]	; (8005114 <CDC_Init_FS+0x1c>)
 8005100:	4805      	ldr	r0, [pc, #20]	; (8005118 <CDC_Init_FS+0x20>)
 8005102:	f7fe fe7f 	bl	8003e04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005106:	4905      	ldr	r1, [pc, #20]	; (800511c <CDC_Init_FS+0x24>)
 8005108:	4803      	ldr	r0, [pc, #12]	; (8005118 <CDC_Init_FS+0x20>)
 800510a:	f7fe fe94 	bl	8003e36 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800510e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005110:	4618      	mov	r0, r3
 8005112:	bd80      	pop	{r7, pc}
 8005114:	200008d8 	.word	0x200008d8
 8005118:	20000514 	.word	0x20000514
 800511c:	200007d8 	.word	0x200007d8

08005120 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005124:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005126:	4618      	mov	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
	...

08005130 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
 800513c:	4613      	mov	r3, r2
 800513e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	2b23      	cmp	r3, #35	; 0x23
 8005144:	f200 8098 	bhi.w	8005278 <CDC_Control_FS+0x148>
 8005148:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <CDC_Control_FS+0x20>)
 800514a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514e:	bf00      	nop
 8005150:	08005279 	.word	0x08005279
 8005154:	08005279 	.word	0x08005279
 8005158:	08005279 	.word	0x08005279
 800515c:	08005279 	.word	0x08005279
 8005160:	08005279 	.word	0x08005279
 8005164:	08005279 	.word	0x08005279
 8005168:	08005279 	.word	0x08005279
 800516c:	08005279 	.word	0x08005279
 8005170:	08005279 	.word	0x08005279
 8005174:	08005279 	.word	0x08005279
 8005178:	08005279 	.word	0x08005279
 800517c:	08005279 	.word	0x08005279
 8005180:	08005279 	.word	0x08005279
 8005184:	08005279 	.word	0x08005279
 8005188:	08005279 	.word	0x08005279
 800518c:	08005279 	.word	0x08005279
 8005190:	08005279 	.word	0x08005279
 8005194:	08005279 	.word	0x08005279
 8005198:	08005279 	.word	0x08005279
 800519c:	08005279 	.word	0x08005279
 80051a0:	08005279 	.word	0x08005279
 80051a4:	08005279 	.word	0x08005279
 80051a8:	08005279 	.word	0x08005279
 80051ac:	08005279 	.word	0x08005279
 80051b0:	08005279 	.word	0x08005279
 80051b4:	08005279 	.word	0x08005279
 80051b8:	08005279 	.word	0x08005279
 80051bc:	08005279 	.word	0x08005279
 80051c0:	08005279 	.word	0x08005279
 80051c4:	08005279 	.word	0x08005279
 80051c8:	08005279 	.word	0x08005279
 80051cc:	08005279 	.word	0x08005279
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	08005225 	.word	0x08005225
 80051d8:	08005279 	.word	0x08005279
 80051dc:	08005279 	.word	0x08005279
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	/* Save new USB line coding parameters */
    			linecoding.bitrate = (uint32_t) ((pbuf[0]) | (pbuf[1] << 8)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	431a      	orrs	r2, r3
    					| (pbuf[2] << 16) | (pbuf[3] << 24));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	3302      	adds	r3, #2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	431a      	orrs	r2, r3
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	3303      	adds	r3, #3
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	061b      	lsls	r3, r3, #24
 8005202:	4313      	orrs	r3, r2
    			linecoding.bitrate = (uint32_t) ((pbuf[0]) | (pbuf[1] << 8)
 8005204:	461a      	mov	r2, r3
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <CDC_Control_FS+0x158>)
 8005208:	601a      	str	r2, [r3, #0]
    			linecoding.format = pbuf[4];
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	791a      	ldrb	r2, [r3, #4]
 800520e:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <CDC_Control_FS+0x158>)
 8005210:	711a      	strb	r2, [r3, #4]
    			linecoding.paritytype = pbuf[5];
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	795a      	ldrb	r2, [r3, #5]
 8005216:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <CDC_Control_FS+0x158>)
 8005218:	715a      	strb	r2, [r3, #5]
    			linecoding.datatype = pbuf[6];
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	799a      	ldrb	r2, [r3, #6]
 800521e:	4b1a      	ldr	r3, [pc, #104]	; (8005288 <CDC_Control_FS+0x158>)
 8005220:	719a      	strb	r2, [r3, #6]
    break;
 8005222:	e02a      	b.n	800527a <CDC_Control_FS+0x14a>
    case CDC_GET_LINE_CODING:
    	/* Return current USB line coding parameters */
    			pbuf[0] = (uint8_t) (linecoding.bitrate);
 8005224:	4b18      	ldr	r3, [pc, #96]	; (8005288 <CDC_Control_FS+0x158>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	b2da      	uxtb	r2, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	701a      	strb	r2, [r3, #0]
    			pbuf[1] = (uint8_t) (linecoding.bitrate >> 8);
 800522e:	4b16      	ldr	r3, [pc, #88]	; (8005288 <CDC_Control_FS+0x158>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	0a1a      	lsrs	r2, r3, #8
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	3301      	adds	r3, #1
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
    			pbuf[2] = (uint8_t) (linecoding.bitrate >> 16);
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <CDC_Control_FS+0x158>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	0c1a      	lsrs	r2, r3, #16
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	3302      	adds	r3, #2
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]
    			pbuf[3] = (uint8_t) (linecoding.bitrate >> 24);
 800524a:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <CDC_Control_FS+0x158>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	0e1a      	lsrs	r2, r3, #24
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	3303      	adds	r3, #3
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
    			pbuf[4] = linecoding.format;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	3304      	adds	r3, #4
 800525c:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <CDC_Control_FS+0x158>)
 800525e:	7912      	ldrb	r2, [r2, #4]
 8005260:	701a      	strb	r2, [r3, #0]
    			pbuf[5] = linecoding.paritytype;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	3305      	adds	r3, #5
 8005266:	4a08      	ldr	r2, [pc, #32]	; (8005288 <CDC_Control_FS+0x158>)
 8005268:	7952      	ldrb	r2, [r2, #5]
 800526a:	701a      	strb	r2, [r3, #0]
    			pbuf[6] = linecoding.datatype;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	3306      	adds	r3, #6
 8005270:	4a05      	ldr	r2, [pc, #20]	; (8005288 <CDC_Control_FS+0x158>)
 8005272:	7992      	ldrb	r2, [r2, #6]
 8005274:	701a      	strb	r2, [r3, #0]
    break;
 8005276:	e000      	b.n	800527a <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005278:	bf00      	nop
  }

  return (USBD_OK);
 800527a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	2000019c 	.word	0x2000019c

0800528c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	/* Push received data to RingBuffer */
		int len = *Len;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < len; i++) {
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e00a      	b.n	80052b8 <CDC_Receive_FS+0x2c>
			RingBuffer_Put(&rx_buf, Buf[i]);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4413      	add	r3, r2
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	4619      	mov	r1, r3
 80052ac:	480a      	ldr	r0, [pc, #40]	; (80052d8 <CDC_Receive_FS+0x4c>)
 80052ae:	f7fe fb35 	bl	800391c <RingBuffer_Put>
		for(int i = 0; i < len; i++) {
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3301      	adds	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	dbf0      	blt.n	80052a2 <CDC_Receive_FS+0x16>
		}
		USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	4806      	ldr	r0, [pc, #24]	; (80052dc <CDC_Receive_FS+0x50>)
 80052c4:	f7fe fdb7 	bl	8003e36 <USBD_CDC_SetRxBuffer>
		USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80052c8:	4804      	ldr	r0, [pc, #16]	; (80052dc <CDC_Receive_FS+0x50>)
 80052ca:	f7fe fdf6 	bl	8003eba <USBD_CDC_ReceivePacket>
		return (USBD_OK);
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000444 	.word	0x20000444
 80052dc:	20000514 	.word	0x20000514

080052e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	73fb      	strb	r3, [r7, #15]
  /* Only transmit data if USB connected to host */
  	if (hUsbDeviceFS.pClassData == NULL) {
 80052f0:	4b10      	ldr	r3, [pc, #64]	; (8005334 <CDC_Transmit_FS+0x54>)
 80052f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <CDC_Transmit_FS+0x1e>
  		return USBD_BUSY;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e016      	b.n	800532c <CDC_Transmit_FS+0x4c>
  	}
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <CDC_Transmit_FS+0x54>)
 8005300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005304:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <CDC_Transmit_FS+0x34>
    return USBD_BUSY;
 8005310:	2301      	movs	r3, #1
 8005312:	e00b      	b.n	800532c <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005314:	887b      	ldrh	r3, [r7, #2]
 8005316:	461a      	mov	r2, r3
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4806      	ldr	r0, [pc, #24]	; (8005334 <CDC_Transmit_FS+0x54>)
 800531c:	f7fe fd72 	bl	8003e04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005320:	4804      	ldr	r0, [pc, #16]	; (8005334 <CDC_Transmit_FS+0x54>)
 8005322:	f7fe fd9b 	bl	8003e5c <USBD_CDC_TransmitPacket>
 8005326:	4603      	mov	r3, r0
 8005328:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000514 	.word	0x20000514

08005338 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	6039      	str	r1, [r7, #0]
 8005342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2212      	movs	r2, #18
 8005348:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800534a:	4b03      	ldr	r3, [pc, #12]	; (8005358 <USBD_FS_DeviceDescriptor+0x20>)
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	200001d0 	.word	0x200001d0

0800535c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	6039      	str	r1, [r7, #0]
 8005366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2204      	movs	r2, #4
 800536c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800536e:	4b03      	ldr	r3, [pc, #12]	; (800537c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	200001e4 	.word	0x200001e4

08005380 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	6039      	str	r1, [r7, #0]
 800538a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d105      	bne.n	800539e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	4907      	ldr	r1, [pc, #28]	; (80053b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8005396:	4808      	ldr	r0, [pc, #32]	; (80053b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8005398:	f7ff fd69 	bl	8004e6e <USBD_GetString>
 800539c:	e004      	b.n	80053a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	4904      	ldr	r1, [pc, #16]	; (80053b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80053a2:	4805      	ldr	r0, [pc, #20]	; (80053b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80053a4:	f7ff fd63 	bl	8004e6e <USBD_GetString>
  }
  return USBD_StrDesc;
 80053a8:	4b02      	ldr	r3, [pc, #8]	; (80053b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	200009d8 	.word	0x200009d8
 80053b8:	08005b14 	.word	0x08005b14

080053bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	4904      	ldr	r1, [pc, #16]	; (80053dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80053cc:	4804      	ldr	r0, [pc, #16]	; (80053e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80053ce:	f7ff fd4e 	bl	8004e6e <USBD_GetString>
  return USBD_StrDesc;
 80053d2:	4b02      	ldr	r3, [pc, #8]	; (80053dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	200009d8 	.word	0x200009d8
 80053e0:	08005b2c 	.word	0x08005b2c

080053e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	6039      	str	r1, [r7, #0]
 80053ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	221a      	movs	r2, #26
 80053f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80053f6:	f000 f843 	bl	8005480 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80053fa:	4b02      	ldr	r3, [pc, #8]	; (8005404 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	200001e8 	.word	0x200001e8

08005408 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	6039      	str	r1, [r7, #0]
 8005412:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	4907      	ldr	r1, [pc, #28]	; (800543c <USBD_FS_ConfigStrDescriptor+0x34>)
 800541e:	4808      	ldr	r0, [pc, #32]	; (8005440 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005420:	f7ff fd25 	bl	8004e6e <USBD_GetString>
 8005424:	e004      	b.n	8005430 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	4904      	ldr	r1, [pc, #16]	; (800543c <USBD_FS_ConfigStrDescriptor+0x34>)
 800542a:	4805      	ldr	r0, [pc, #20]	; (8005440 <USBD_FS_ConfigStrDescriptor+0x38>)
 800542c:	f7ff fd1f 	bl	8004e6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005430:	4b02      	ldr	r3, [pc, #8]	; (800543c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	200009d8 	.word	0x200009d8
 8005440:	08005b40 	.word	0x08005b40

08005444 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	6039      	str	r1, [r7, #0]
 800544e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d105      	bne.n	8005462 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	4907      	ldr	r1, [pc, #28]	; (8005478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800545a:	4808      	ldr	r0, [pc, #32]	; (800547c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800545c:	f7ff fd07 	bl	8004e6e <USBD_GetString>
 8005460:	e004      	b.n	800546c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	4904      	ldr	r1, [pc, #16]	; (8005478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005466:	4805      	ldr	r0, [pc, #20]	; (800547c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005468:	f7ff fd01 	bl	8004e6e <USBD_GetString>
  }
  return USBD_StrDesc;
 800546c:	4b02      	ldr	r3, [pc, #8]	; (8005478 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200009d8 	.word	0x200009d8
 800547c:	08005b4c 	.word	0x08005b4c

08005480 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005486:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <Get_SerialNum+0x44>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <Get_SerialNum+0x48>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005492:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <Get_SerialNum+0x4c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d009      	beq.n	80054ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80054a6:	2208      	movs	r2, #8
 80054a8:	4909      	ldr	r1, [pc, #36]	; (80054d0 <Get_SerialNum+0x50>)
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f814 	bl	80054d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80054b0:	2204      	movs	r2, #4
 80054b2:	4908      	ldr	r1, [pc, #32]	; (80054d4 <Get_SerialNum+0x54>)
 80054b4:	68b8      	ldr	r0, [r7, #8]
 80054b6:	f000 f80f 	bl	80054d8 <IntToUnicode>
  }
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	1ffff7e8 	.word	0x1ffff7e8
 80054c8:	1ffff7ec 	.word	0x1ffff7ec
 80054cc:	1ffff7f0 	.word	0x1ffff7f0
 80054d0:	200001ea 	.word	0x200001ea
 80054d4:	200001fa 	.word	0x200001fa

080054d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
 80054ee:	e027      	b.n	8005540 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	0f1b      	lsrs	r3, r3, #28
 80054f4:	2b09      	cmp	r3, #9
 80054f6:	d80b      	bhi.n	8005510 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	0f1b      	lsrs	r3, r3, #28
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	4619      	mov	r1, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	440b      	add	r3, r1
 8005508:	3230      	adds	r2, #48	; 0x30
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e00a      	b.n	8005526 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	0f1b      	lsrs	r3, r3, #28
 8005514:	b2da      	uxtb	r2, r3
 8005516:	7dfb      	ldrb	r3, [r7, #23]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	4619      	mov	r1, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	440b      	add	r3, r1
 8005520:	3237      	adds	r2, #55	; 0x37
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800552c:	7dfb      	ldrb	r3, [r7, #23]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	3301      	adds	r3, #1
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	4413      	add	r3, r2
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	3301      	adds	r3, #1
 800553e:	75fb      	strb	r3, [r7, #23]
 8005540:	7dfa      	ldrb	r2, [r7, #23]
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	429a      	cmp	r2, r3
 8005546:	d3d3      	bcc.n	80054f0 <IntToUnicode+0x18>
  }
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
	...

08005554 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <HAL_PCD_MspInit+0x44>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d113      	bne.n	800558e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <HAL_PCD_MspInit+0x48>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	4a0c      	ldr	r2, [pc, #48]	; (800559c <HAL_PCD_MspInit+0x48>)
 800556c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005570:	61d3      	str	r3, [r2, #28]
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_PCD_MspInit+0x48>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800557e:	2200      	movs	r2, #0
 8005580:	2100      	movs	r1, #0
 8005582:	2014      	movs	r0, #20
 8005584:	f7fb f8f3 	bl	800076e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005588:	2014      	movs	r0, #20
 800558a:	f7fb f90c 	bl	80007a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800558e:	bf00      	nop
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40005c00 	.word	0x40005c00
 800559c:	40021000 	.word	0x40021000

080055a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f7fe fd35 	bl	8004026 <USBD_LL_SetupStage>
}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	015b      	lsls	r3, r3, #5
 80055dc:	4413      	add	r3, r2
 80055de:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	4619      	mov	r1, r3
 80055e8:	f7fe fd68 	bl	80040bc <USBD_LL_DataOutStage>
}
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	015b      	lsls	r3, r3, #5
 800560c:	4413      	add	r3, r2
 800560e:	333c      	adds	r3, #60	; 0x3c
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	4619      	mov	r1, r3
 8005616:	f7fe fdc2 	bl	800419e <USBD_LL_DataInStage>
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005630:	4618      	mov	r0, r3
 8005632:	f7fe fed2 	bl	80043da <USBD_LL_SOF>
}
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d001      	beq.n	8005656 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005652:	f7fa fe5b 	bl	800030c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe fe82 	bl	800436a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe fe3b 	bl	80042e8 <USBD_LL_Reset>
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800568a:	4618      	mov	r0, r3
 800568c:	f7fe fe7c 	bl	8004388 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005698:	4b04      	ldr	r3, [pc, #16]	; (80056ac <HAL_PCD_SuspendCallback+0x30>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	4a03      	ldr	r2, [pc, #12]	; (80056ac <HAL_PCD_SuspendCallback+0x30>)
 800569e:	f043 0306 	orr.w	r3, r3, #6
 80056a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	e000ed00 	.word	0xe000ed00

080056b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe fe76 	bl	80043b0 <USBD_LL_Resume>
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80056d4:	4a28      	ldr	r2, [pc, #160]	; (8005778 <USBD_LL_Init+0xac>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a26      	ldr	r2, [pc, #152]	; (8005778 <USBD_LL_Init+0xac>)
 80056e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80056e4:	4b24      	ldr	r3, [pc, #144]	; (8005778 <USBD_LL_Init+0xac>)
 80056e6:	4a25      	ldr	r2, [pc, #148]	; (800577c <USBD_LL_Init+0xb0>)
 80056e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80056ea:	4b23      	ldr	r3, [pc, #140]	; (8005778 <USBD_LL_Init+0xac>)
 80056ec:	2208      	movs	r2, #8
 80056ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80056f0:	4b21      	ldr	r3, [pc, #132]	; (8005778 <USBD_LL_Init+0xac>)
 80056f2:	2202      	movs	r2, #2
 80056f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80056f6:	4b20      	ldr	r3, [pc, #128]	; (8005778 <USBD_LL_Init+0xac>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80056fc:	4b1e      	ldr	r3, [pc, #120]	; (8005778 <USBD_LL_Init+0xac>)
 80056fe:	2200      	movs	r2, #0
 8005700:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005702:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <USBD_LL_Init+0xac>)
 8005704:	2200      	movs	r2, #0
 8005706:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005708:	481b      	ldr	r0, [pc, #108]	; (8005778 <USBD_LL_Init+0xac>)
 800570a:	f7fb f9cd 	bl	8000aa8 <HAL_PCD_Init>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005714:	f7fa fdfa 	bl	800030c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800571e:	2318      	movs	r3, #24
 8005720:	2200      	movs	r2, #0
 8005722:	2100      	movs	r1, #0
 8005724:	f7fc f866 	bl	80017f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800572e:	2358      	movs	r3, #88	; 0x58
 8005730:	2200      	movs	r2, #0
 8005732:	2180      	movs	r1, #128	; 0x80
 8005734:	f7fc f85e 	bl	80017f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800573e:	23c0      	movs	r3, #192	; 0xc0
 8005740:	2200      	movs	r2, #0
 8005742:	2181      	movs	r1, #129	; 0x81
 8005744:	f7fc f856 	bl	80017f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800574e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005752:	2200      	movs	r2, #0
 8005754:	2101      	movs	r1, #1
 8005756:	f7fc f84d 	bl	80017f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005764:	2200      	movs	r2, #0
 8005766:	2182      	movs	r1, #130	; 0x82
 8005768:	f7fc f844 	bl	80017f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000bd8 	.word	0x20000bd8
 800577c:	40005c00 	.word	0x40005c00

08005780 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005796:	4618      	mov	r0, r3
 8005798:	f7fb fa67 	bl	8000c6a <HAL_PCD_Start>
 800579c:	4603      	mov	r3, r0
 800579e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f948 	bl	8005a38 <USBD_Get_USB_Status>
 80057a8:	4603      	mov	r3, r0
 80057aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80057ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	4608      	mov	r0, r1
 80057c0:	4611      	mov	r1, r2
 80057c2:	461a      	mov	r2, r3
 80057c4:	4603      	mov	r3, r0
 80057c6:	70fb      	strb	r3, [r7, #3]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70bb      	strb	r3, [r7, #2]
 80057cc:	4613      	mov	r3, r2
 80057ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80057de:	78bb      	ldrb	r3, [r7, #2]
 80057e0:	883a      	ldrh	r2, [r7, #0]
 80057e2:	78f9      	ldrb	r1, [r7, #3]
 80057e4:	f7fb fb9a 	bl	8000f1c <HAL_PCD_EP_Open>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 f922 	bl	8005a38 <USBD_Get_USB_Status>
 80057f4:	4603      	mov	r3, r0
 80057f6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80057f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	460b      	mov	r3, r1
 800580c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800581c:	78fa      	ldrb	r2, [r7, #3]
 800581e:	4611      	mov	r1, r2
 8005820:	4618      	mov	r0, r3
 8005822:	f7fb fbdb 	bl	8000fdc <HAL_PCD_EP_Close>
 8005826:	4603      	mov	r3, r0
 8005828:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f903 	bl	8005a38 <USBD_Get_USB_Status>
 8005832:	4603      	mov	r3, r0
 8005834:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005836:	7bbb      	ldrb	r3, [r7, #14]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800585a:	78fa      	ldrb	r2, [r7, #3]
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f7fb fc85 	bl	800116e <HAL_PCD_EP_SetStall>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f8e4 	bl	8005a38 <USBD_Get_USB_Status>
 8005870:	4603      	mov	r3, r0
 8005872:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005874:	7bbb      	ldrb	r3, [r7, #14]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	460b      	mov	r3, r1
 8005888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005898:	78fa      	ldrb	r2, [r7, #3]
 800589a:	4611      	mov	r1, r2
 800589c:	4618      	mov	r0, r3
 800589e:	f7fb fcc0 	bl	8001222 <HAL_PCD_EP_ClrStall>
 80058a2:	4603      	mov	r3, r0
 80058a4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f8c5 	bl	8005a38 <USBD_Get_USB_Status>
 80058ae:	4603      	mov	r3, r0
 80058b0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80058b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058ce:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80058d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	da08      	bge.n	80058ea <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	015b      	lsls	r3, r3, #5
 80058e2:	4413      	add	r3, r2
 80058e4:	332a      	adds	r3, #42	; 0x2a
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	e008      	b.n	80058fc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	015b      	lsls	r3, r3, #5
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80058fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr

08005906 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005920:	78fa      	ldrb	r2, [r7, #3]
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f7fb fad4 	bl	8000ed2 <HAL_PCD_SetAddress>
 800592a:	4603      	mov	r3, r0
 800592c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800592e:	7bfb      	ldrb	r3, [r7, #15]
 8005930:	4618      	mov	r0, r3
 8005932:	f000 f881 	bl	8005a38 <USBD_Get_USB_Status>
 8005936:	4603      	mov	r3, r0
 8005938:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800593a:	7bbb      	ldrb	r3, [r7, #14]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	461a      	mov	r2, r3
 8005950:	460b      	mov	r3, r1
 8005952:	72fb      	strb	r3, [r7, #11]
 8005954:	4613      	mov	r3, r2
 8005956:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005966:	893b      	ldrh	r3, [r7, #8]
 8005968:	7af9      	ldrb	r1, [r7, #11]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	f7fb fbc6 	bl	80010fc <HAL_PCD_EP_Transmit>
 8005970:	4603      	mov	r3, r0
 8005972:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f85e 	bl	8005a38 <USBD_Get_USB_Status>
 800597c:	4603      	mov	r3, r0
 800597e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005980:	7dbb      	ldrb	r3, [r7, #22]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b086      	sub	sp, #24
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	461a      	mov	r2, r3
 8005996:	460b      	mov	r3, r1
 8005998:	72fb      	strb	r3, [r7, #11]
 800599a:	4613      	mov	r3, r2
 800599c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059ac:	893b      	ldrh	r3, [r7, #8]
 80059ae:	7af9      	ldrb	r1, [r7, #11]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	f7fb fb55 	bl	8001060 <HAL_PCD_EP_Receive>
 80059b6:	4603      	mov	r3, r0
 80059b8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 f83b 	bl	8005a38 <USBD_Get_USB_Status>
 80059c2:	4603      	mov	r3, r0
 80059c4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80059c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	4611      	mov	r1, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fb fb74 	bl	80010d4 <HAL_PCD_EP_GetRxCount>
 80059ec:	4603      	mov	r3, r0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005a00:	4b02      	ldr	r3, [pc, #8]	; (8005a0c <USBD_static_malloc+0x14>)
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr
 8005a0c:	20000224 	.word	0x20000224

08005a10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr

08005a22 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d817      	bhi.n	8005a7c <USBD_Get_USB_Status+0x44>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <USBD_Get_USB_Status+0x1c>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a65 	.word	0x08005a65
 8005a58:	08005a6b 	.word	0x08005a6b
 8005a5c:	08005a71 	.word	0x08005a71
 8005a60:	08005a77 	.word	0x08005a77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	73fb      	strb	r3, [r7, #15]
    break;
 8005a68:	e00b      	b.n	8005a82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8005a6e:	e008      	b.n	8005a82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
    break;
 8005a74:	e005      	b.n	8005a82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005a76:	2302      	movs	r3, #2
 8005a78:	73fb      	strb	r3, [r7, #15]
    break;
 8005a7a:	e002      	b.n	8005a82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8005a80:	bf00      	nop
  }
  return usb_status;
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop

08005a90 <__libc_init_array>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	2500      	movs	r5, #0
 8005a94:	4e0c      	ldr	r6, [pc, #48]	; (8005ac8 <__libc_init_array+0x38>)
 8005a96:	4c0d      	ldr	r4, [pc, #52]	; (8005acc <__libc_init_array+0x3c>)
 8005a98:	1ba4      	subs	r4, r4, r6
 8005a9a:	10a4      	asrs	r4, r4, #2
 8005a9c:	42a5      	cmp	r5, r4
 8005a9e:	d109      	bne.n	8005ab4 <__libc_init_array+0x24>
 8005aa0:	f000 f822 	bl	8005ae8 <_init>
 8005aa4:	2500      	movs	r5, #0
 8005aa6:	4e0a      	ldr	r6, [pc, #40]	; (8005ad0 <__libc_init_array+0x40>)
 8005aa8:	4c0a      	ldr	r4, [pc, #40]	; (8005ad4 <__libc_init_array+0x44>)
 8005aaa:	1ba4      	subs	r4, r4, r6
 8005aac:	10a4      	asrs	r4, r4, #2
 8005aae:	42a5      	cmp	r5, r4
 8005ab0:	d105      	bne.n	8005abe <__libc_init_array+0x2e>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ab8:	4798      	blx	r3
 8005aba:	3501      	adds	r5, #1
 8005abc:	e7ee      	b.n	8005a9c <__libc_init_array+0xc>
 8005abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ac2:	4798      	blx	r3
 8005ac4:	3501      	adds	r5, #1
 8005ac6:	e7f2      	b.n	8005aae <__libc_init_array+0x1e>
 8005ac8:	08005b74 	.word	0x08005b74
 8005acc:	08005b74 	.word	0x08005b74
 8005ad0:	08005b74 	.word	0x08005b74
 8005ad4:	08005b78 	.word	0x08005b78

08005ad8 <memset>:
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4402      	add	r2, r0
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d100      	bne.n	8005ae2 <memset+0xa>
 8005ae0:	4770      	bx	lr
 8005ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae6:	e7f9      	b.n	8005adc <memset+0x4>

08005ae8 <_init>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr

08005af4 <_fini>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	bf00      	nop
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr
