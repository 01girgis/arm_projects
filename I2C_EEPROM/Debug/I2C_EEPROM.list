
I2C_EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004024  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047bc  080047bc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047c4  080047c4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080047cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000094  08004860  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08004860  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4c1  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b71  00000000  00000000  0002b585  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0002d0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000878  00000000  00000000  0002da60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002265a  00000000  00000000  0002e2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000095ad  00000000  00000000  00050932  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9a2e  00000000  00000000  00059edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012390d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002858  00000000  00000000  00123988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080041dc 	.word	0x080041dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	080041dc 	.word	0x080041dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <HAL_Init+0x40>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <HAL_Init+0x40>)
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x40>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f92f 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f003 f8d8 	bl	80037a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f939 	bl	800089a <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 f90f 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2000002c 	.word	0x2000002c
 800065c:	20000004 	.word	0x20000004
 8000660:	20000000 	.word	0x20000000

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	200001cc 	.word	0x200001cc

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200001cc 	.word	0x200001cc

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f7ff ffee 	bl	800068c <HAL_GetTick>
 80006b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d005      	beq.n	80006ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_Delay+0x40>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ca:	bf00      	nop
 80006cc:	f7ff ffde 	bl	800068c <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d8f7      	bhi.n	80006cc <HAL_Delay+0x28>
  {
  }
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004

080006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_GetPriorityGrouping+0x18>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	f003 0307 	and.w	r3, r3, #7
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff47 	bl	80006e8 <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff5c 	bl	8000730 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffb0 	bl	8000808 <SysTick_Config>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	e165      	b.n	8000b9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008d0:	2201      	movs	r2, #1
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	f040 8154 	bne.w	8000b96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d00b      	beq.n	800090e <HAL_GPIO_Init+0x5a>
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d007      	beq.n	800090e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000902:	2b11      	cmp	r3, #17
 8000904:	d003      	beq.n	800090e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b12      	cmp	r3, #18
 800090c:	d130      	bne.n	8000970 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	2203      	movs	r2, #3
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	4013      	ands	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4313      	orrs	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000944:	2201      	movs	r2, #1
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	091b      	lsrs	r3, r3, #4
 800095a:	f003 0201 	and.w	r2, r3, #1
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4313      	orrs	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4313      	orrs	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d003      	beq.n	80009b0 <HAL_GPIO_Init+0xfc>
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b12      	cmp	r3, #18
 80009ae:	d123      	bne.n	80009f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	08da      	lsrs	r2, r3, #3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3208      	adds	r2, #8
 80009b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	220f      	movs	r2, #15
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	4013      	ands	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	691a      	ldr	r2, [r3, #16]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	08da      	lsrs	r2, r3, #3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3208      	adds	r2, #8
 80009f2:	69b9      	ldr	r1, [r7, #24]
 80009f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2203      	movs	r2, #3
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 0203 	and.w	r2, r3, #3
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f000 80ae 	beq.w	8000b96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b5c      	ldr	r3, [pc, #368]	; (8000bb0 <HAL_GPIO_Init+0x2fc>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a5b      	ldr	r2, [pc, #364]	; (8000bb0 <HAL_GPIO_Init+0x2fc>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b59      	ldr	r3, [pc, #356]	; (8000bb0 <HAL_GPIO_Init+0x2fc>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a56:	4a57      	ldr	r2, [pc, #348]	; (8000bb4 <HAL_GPIO_Init+0x300>)
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	220f      	movs	r2, #15
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <HAL_GPIO_Init+0x304>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d025      	beq.n	8000ace <HAL_GPIO_Init+0x21a>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4d      	ldr	r2, [pc, #308]	; (8000bbc <HAL_GPIO_Init+0x308>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d01f      	beq.n	8000aca <HAL_GPIO_Init+0x216>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_GPIO_Init+0x30c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d019      	beq.n	8000ac6 <HAL_GPIO_Init+0x212>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4b      	ldr	r2, [pc, #300]	; (8000bc4 <HAL_GPIO_Init+0x310>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d013      	beq.n	8000ac2 <HAL_GPIO_Init+0x20e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4a      	ldr	r2, [pc, #296]	; (8000bc8 <HAL_GPIO_Init+0x314>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d00d      	beq.n	8000abe <HAL_GPIO_Init+0x20a>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a49      	ldr	r2, [pc, #292]	; (8000bcc <HAL_GPIO_Init+0x318>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d007      	beq.n	8000aba <HAL_GPIO_Init+0x206>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <HAL_GPIO_Init+0x31c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d101      	bne.n	8000ab6 <HAL_GPIO_Init+0x202>
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	e00c      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	e00a      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000aba:	2305      	movs	r3, #5
 8000abc:	e008      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000abe:	2304      	movs	r3, #4
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e004      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	e002      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	69fa      	ldr	r2, [r7, #28]
 8000ad2:	f002 0203 	and.w	r2, r2, #3
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	4093      	lsls	r3, r2
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ae0:	4934      	ldr	r1, [pc, #208]	; (8000bb4 <HAL_GPIO_Init+0x300>)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aee:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4013      	ands	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b12:	4a30      	ldr	r2, [pc, #192]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b18:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b3c:	4a25      	ldr	r2, [pc, #148]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b42:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b66:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b90:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	2b0f      	cmp	r3, #15
 8000ba0:	f67f ae96 	bls.w	80008d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3724      	adds	r7, #36	; 0x24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40021400 	.word	0x40021400
 8000bd0:	40021800 	.word	0x40021800
 8000bd4:	40013c00 	.word	0x40013c00

08000bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
 8000be4:	4613      	mov	r3, r2
 8000be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000be8:	787b      	ldrb	r3, [r7, #1]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bf4:	e003      	b.n	8000bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bf6:	887b      	ldrh	r3, [r7, #2]
 8000bf8:	041a      	lsls	r2, r3, #16
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	619a      	str	r2, [r3, #24]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e11f      	b.n	8000e5e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d106      	bne.n	8000c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f002 fc9e 	bl	8003574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2224      	movs	r2, #36	; 0x24
 8000c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f022 0201 	bic.w	r2, r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c70:	f001 f9ec 	bl	800204c <HAL_RCC_GetPCLK1Freq>
 8000c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	4a7b      	ldr	r2, [pc, #492]	; (8000e68 <HAL_I2C_Init+0x25c>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d807      	bhi.n	8000c90 <HAL_I2C_Init+0x84>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4a7a      	ldr	r2, [pc, #488]	; (8000e6c <HAL_I2C_Init+0x260>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	bf94      	ite	ls
 8000c88:	2301      	movls	r3, #1
 8000c8a:	2300      	movhi	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	e006      	b.n	8000c9e <HAL_I2C_Init+0x92>
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4a77      	ldr	r2, [pc, #476]	; (8000e70 <HAL_I2C_Init+0x264>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	bf94      	ite	ls
 8000c98:	2301      	movls	r3, #1
 8000c9a:	2300      	movhi	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e0db      	b.n	8000e5e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4a72      	ldr	r2, [pc, #456]	; (8000e74 <HAL_I2C_Init+0x268>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	0c9b      	lsrs	r3, r3, #18
 8000cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	4a64      	ldr	r2, [pc, #400]	; (8000e68 <HAL_I2C_Init+0x25c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d802      	bhi.n	8000ce0 <HAL_I2C_Init+0xd4>
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	e009      	b.n	8000cf4 <HAL_I2C_Init+0xe8>
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	4a63      	ldr	r2, [pc, #396]	; (8000e78 <HAL_I2C_Init+0x26c>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	099b      	lsrs	r3, r3, #6
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	4956      	ldr	r1, [pc, #344]	; (8000e68 <HAL_I2C_Init+0x25c>)
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d80d      	bhi.n	8000d30 <HAL_I2C_Init+0x124>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	1e59      	subs	r1, r3, #1
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d22:	3301      	adds	r3, #1
 8000d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d28:	2b04      	cmp	r3, #4
 8000d2a:	bf38      	it	cc
 8000d2c:	2304      	movcc	r3, #4
 8000d2e:	e04f      	b.n	8000dd0 <HAL_I2C_Init+0x1c4>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d111      	bne.n	8000d5c <HAL_I2C_Init+0x150>
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	1e58      	subs	r0, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6859      	ldr	r1, [r3, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	440b      	add	r3, r1
 8000d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf0c      	ite	eq
 8000d54:	2301      	moveq	r3, #1
 8000d56:	2300      	movne	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	e012      	b.n	8000d82 <HAL_I2C_Init+0x176>
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	1e58      	subs	r0, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6859      	ldr	r1, [r3, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	440b      	add	r3, r1
 8000d6a:	0099      	lsls	r1, r3, #2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d72:	3301      	adds	r3, #1
 8000d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	bf0c      	ite	eq
 8000d7c:	2301      	moveq	r3, #1
 8000d7e:	2300      	movne	r3, #0
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_I2C_Init+0x17e>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e022      	b.n	8000dd0 <HAL_I2C_Init+0x1c4>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10e      	bne.n	8000db0 <HAL_I2C_Init+0x1a4>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	1e58      	subs	r0, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6859      	ldr	r1, [r3, #4]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	440b      	add	r3, r1
 8000da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dae:	e00f      	b.n	8000dd0 <HAL_I2C_Init+0x1c4>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	1e58      	subs	r0, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6859      	ldr	r1, [r3, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	0099      	lsls	r1, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	6809      	ldr	r1, [r1, #0]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69da      	ldr	r2, [r3, #28]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6911      	ldr	r1, [r2, #16]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68d2      	ldr	r2, [r2, #12]
 8000e0a:	4311      	orrs	r1, r2
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	430b      	orrs	r3, r1
 8000e12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695a      	ldr	r2, [r3, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0201 	orr.w	r2, r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2220      	movs	r2, #32
 8000e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	000186a0 	.word	0x000186a0
 8000e6c:	001e847f 	.word	0x001e847f
 8000e70:	003d08ff 	.word	0x003d08ff
 8000e74:	431bde83 	.word	0x431bde83
 8000e78:	10624dd3 	.word	0x10624dd3

08000e7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	4608      	mov	r0, r1
 8000e86:	4611      	mov	r1, r2
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	817b      	strh	r3, [r7, #10]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	813b      	strh	r3, [r7, #8]
 8000e92:	4613      	mov	r3, r2
 8000e94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e96:	f7ff fbf9 	bl	800068c <HAL_GetTick>
 8000e9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b20      	cmp	r3, #32
 8000ea6:	f040 80d9 	bne.w	800105c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2319      	movs	r3, #25
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	496d      	ldr	r1, [pc, #436]	; (8001068 <HAL_I2C_Mem_Write+0x1ec>)
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f000 fda9 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e0cc      	b.n	800105e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d101      	bne.n	8000ed2 <HAL_I2C_Mem_Write+0x56>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e0c5      	b.n	800105e <HAL_I2C_Mem_Write+0x1e2>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d007      	beq.n	8000ef8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2221      	movs	r2, #33	; 0x21
 8000f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2240      	movs	r2, #64	; 0x40
 8000f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6a3a      	ldr	r2, [r7, #32]
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4a4d      	ldr	r2, [pc, #308]	; (800106c <HAL_I2C_Mem_Write+0x1f0>)
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f3a:	88f8      	ldrh	r0, [r7, #6]
 8000f3c:	893a      	ldrh	r2, [r7, #8]
 8000f3e:	8979      	ldrh	r1, [r7, #10]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4603      	mov	r3, r0
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f000 fbe4 	bl	8001718 <I2C_RequestMemoryWrite>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d052      	beq.n	8000ffc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e081      	b.n	800105e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f000 fe2a 	bl	8001bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00d      	beq.n	8000f86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d107      	bne.n	8000f82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e06b      	b.n	800105e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d11b      	bne.n	8000ffc <HAL_I2C_Mem_Write+0x180>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d017      	beq.n	8000ffc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1aa      	bne.n	8000f5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 fe16 	bl	8001c3a <I2C_WaitOnBTFFlagUntilTimeout>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00d      	beq.n	8001030 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	2b04      	cmp	r3, #4
 800101a:	d107      	bne.n	800102c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800102a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e016      	b.n	800105e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800103e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2220      	movs	r2, #32
 8001044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e000      	b.n	800105e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800105c:	2302      	movs	r3, #2
  }
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	00100002 	.word	0x00100002
 800106c:	ffff0000 	.word	0xffff0000

08001070 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af02      	add	r7, sp, #8
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	4608      	mov	r0, r1
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	4603      	mov	r3, r0
 8001080:	817b      	strh	r3, [r7, #10]
 8001082:	460b      	mov	r3, r1
 8001084:	813b      	strh	r3, [r7, #8]
 8001086:	4613      	mov	r3, r2
 8001088:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800108a:	f7ff faff 	bl	800068c <HAL_GetTick>
 800108e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b20      	cmp	r3, #32
 800109a:	f040 8208 	bne.w	80014ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2319      	movs	r3, #25
 80010a4:	2201      	movs	r2, #1
 80010a6:	497b      	ldr	r1, [pc, #492]	; (8001294 <HAL_I2C_Mem_Read+0x224>)
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 fcaf 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80010b4:	2302      	movs	r3, #2
 80010b6:	e1fb      	b.n	80014b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d101      	bne.n	80010c6 <HAL_I2C_Mem_Read+0x56>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e1f4      	b.n	80014b0 <HAL_I2C_Mem_Read+0x440>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d007      	beq.n	80010ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0201 	orr.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2222      	movs	r2, #34	; 0x22
 8001100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2240      	movs	r2, #64	; 0x40
 8001108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800111c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001122:	b29a      	uxth	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4a5b      	ldr	r2, [pc, #364]	; (8001298 <HAL_I2C_Mem_Read+0x228>)
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800112e:	88f8      	ldrh	r0, [r7, #6]
 8001130:	893a      	ldrh	r2, [r7, #8]
 8001132:	8979      	ldrh	r1, [r7, #10]
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	4603      	mov	r3, r0
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 fb7e 	bl	8001840 <I2C_RequestMemoryRead>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e1b0      	b.n	80014b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001152:	2b00      	cmp	r3, #0
 8001154:	d113      	bne.n	800117e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	623b      	str	r3, [r7, #32]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	623b      	str	r3, [r7, #32]
 800116a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e184      	b.n	8001488 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001182:	2b01      	cmp	r3, #1
 8001184:	d11b      	bne.n	80011be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e164      	b.n	8001488 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d11b      	bne.n	80011fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	e144      	b.n	8001488 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001214:	e138      	b.n	8001488 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800121a:	2b03      	cmp	r3, #3
 800121c:	f200 80f1 	bhi.w	8001402 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001224:	2b01      	cmp	r3, #1
 8001226:	d123      	bne.n	8001270 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800122a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f000 fd45 	bl	8001cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e139      	b.n	80014b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001258:	3b01      	subs	r3, #1
 800125a:	b29a      	uxth	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001264:	b29b      	uxth	r3, r3
 8001266:	3b01      	subs	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800126e:	e10b      	b.n	8001488 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001274:	2b02      	cmp	r3, #2
 8001276:	d14e      	bne.n	8001316 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800127e:	2200      	movs	r2, #0
 8001280:	4906      	ldr	r1, [pc, #24]	; (800129c <HAL_I2C_Mem_Read+0x22c>)
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f000 fbc2 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d008      	beq.n	80012a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e10e      	b.n	80014b0 <HAL_I2C_Mem_Read+0x440>
 8001292:	bf00      	nop
 8001294:	00100002 	.word	0x00100002
 8001298:	ffff0000 	.word	0xffff0000
 800129c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3b01      	subs	r3, #1
 80012dc:	b29a      	uxth	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012fe:	3b01      	subs	r3, #1
 8001300:	b29a      	uxth	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130a:	b29b      	uxth	r3, r3
 800130c:	3b01      	subs	r3, #1
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001314:	e0b8      	b.n	8001488 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800131c:	2200      	movs	r2, #0
 800131e:	4966      	ldr	r1, [pc, #408]	; (80014b8 <HAL_I2C_Mem_Read+0x448>)
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 fb73 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0bf      	b.n	80014b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800133e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135c:	3b01      	subs	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001368:	b29b      	uxth	r3, r3
 800136a:	3b01      	subs	r3, #1
 800136c:	b29a      	uxth	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001378:	2200      	movs	r2, #0
 800137a:	494f      	ldr	r1, [pc, #316]	; (80014b8 <HAL_I2C_Mem_Read+0x448>)
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 fb45 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e091      	b.n	80014b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800139a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b8:	3b01      	subs	r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ea:	3b01      	subs	r3, #1
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001400:	e042      	b.n	8001488 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 fc58 	bl	8001cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e04c      	b.n	80014b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001432:	3b01      	subs	r3, #1
 8001434:	b29a      	uxth	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143e:	b29b      	uxth	r3, r3
 8001440:	3b01      	subs	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b04      	cmp	r3, #4
 8001454:	d118      	bne.n	8001488 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001472:	3b01      	subs	r3, #1
 8001474:	b29a      	uxth	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147e:	b29b      	uxth	r3, r3
 8001480:	3b01      	subs	r3, #1
 8001482:	b29a      	uxth	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148c:	2b00      	cmp	r3, #0
 800148e:	f47f aec2 	bne.w	8001216 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2220      	movs	r2, #32
 8001496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80014ae:	2302      	movs	r3, #2
  }
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	00010004 	.word	0x00010004

080014bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	460b      	mov	r3, r1
 80014ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff f8de 	bl	800068c <HAL_GetTick>
 80014d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b20      	cmp	r3, #32
 80014e0:	f040 8110 	bne.w	8001704 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2319      	movs	r3, #25
 80014ea:	2201      	movs	r2, #1
 80014ec:	4988      	ldr	r1, [pc, #544]	; (8001710 <HAL_I2C_IsDeviceReady+0x254>)
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 fa8c 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80014fa:	2302      	movs	r3, #2
 80014fc:	e103      	b.n	8001706 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <HAL_I2C_IsDeviceReady+0x50>
 8001508:	2302      	movs	r3, #2
 800150a:	e0fc      	b.n	8001706 <HAL_I2C_IsDeviceReady+0x24a>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d007      	beq.n	8001532 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 0201 	orr.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001540:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2224      	movs	r2, #36	; 0x24
 8001546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4a70      	ldr	r2, [pc, #448]	; (8001714 <HAL_I2C_IsDeviceReady+0x258>)
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001564:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2200      	movs	r2, #0
 800156e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 fa4a 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00c      	beq.n	8001598 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0b6      	b.n	8001706 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001598:	897b      	ldrh	r3, [r7, #10]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80015a6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff f870 	bl	800068c <HAL_GetTick>
 80015ac:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80015dc:	e025      	b.n	800162a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015de:	f7ff f855 	bl	800068c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d302      	bcc.n	80015f4 <HAL_I2C_IsDeviceReady+0x138>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	22a0      	movs	r2, #160	; 0xa0
 80015f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b02      	cmp	r3, #2
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001620:	bf0c      	ite	eq
 8001622:	2301      	moveq	r3, #1
 8001624:	2300      	movne	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2ba0      	cmp	r3, #160	; 0xa0
 8001634:	d005      	beq.n	8001642 <HAL_I2C_IsDeviceReady+0x186>
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <HAL_I2C_IsDeviceReady+0x186>
 800163c:	7dbb      	ldrb	r3, [r7, #22]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0cd      	beq.n	80015de <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b02      	cmp	r3, #2
 8001656:	d129      	bne.n	80016ac <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001666:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2319      	movs	r3, #25
 8001684:	2201      	movs	r2, #1
 8001686:	4922      	ldr	r1, [pc, #136]	; (8001710 <HAL_I2C_IsDeviceReady+0x254>)
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f9bf 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e036      	b.n	8001706 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2220      	movs	r2, #32
 800169c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e02c      	b.n	8001706 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ba:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016c4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2319      	movs	r3, #25
 80016cc:	2201      	movs	r2, #1
 80016ce:	4910      	ldr	r1, [pc, #64]	; (8001710 <HAL_I2C_IsDeviceReady+0x254>)
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 f99b 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e012      	b.n	8001706 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	3301      	adds	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	f4ff af33 	bcc.w	8001556 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2220      	movs	r2, #32
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8001704:	2302      	movs	r3, #2
  }
}
 8001706:	4618      	mov	r0, r3
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	00100002 	.word	0x00100002
 8001714:	ffff0000 	.word	0xffff0000

08001718 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af02      	add	r7, sp, #8
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4603      	mov	r3, r0
 8001728:	817b      	strh	r3, [r7, #10]
 800172a:	460b      	mov	r3, r1
 800172c:	813b      	strh	r3, [r7, #8]
 800172e:	4613      	mov	r3, r2
 8001730:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001740:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	2200      	movs	r2, #0
 800174a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 f95c 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00c      	beq.n	8001774 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e05f      	b.n	8001834 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001774:	897b      	ldrh	r3, [r7, #10]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001782:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	6a3a      	ldr	r2, [r7, #32]
 8001788:	492c      	ldr	r1, [pc, #176]	; (800183c <I2C_RequestMemoryWrite+0x124>)
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f995 	bl	8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e04c      	b.n	8001834 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b2:	6a39      	ldr	r1, [r7, #32]
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 f9ff 	bl	8001bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00d      	beq.n	80017dc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d107      	bne.n	80017d8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e02b      	b.n	8001834 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d105      	bne.n	80017ee <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80017e2:	893b      	ldrh	r3, [r7, #8]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	e021      	b.n	8001832 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80017ee:	893b      	ldrh	r3, [r7, #8]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fe:	6a39      	ldr	r1, [r7, #32]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 f9d9 	bl	8001bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00d      	beq.n	8001828 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	2b04      	cmp	r3, #4
 8001812:	d107      	bne.n	8001824 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001822:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e005      	b.n	8001834 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001828:	893b      	ldrh	r3, [r7, #8]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	00010002 	.word	0x00010002

08001840 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af02      	add	r7, sp, #8
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	4608      	mov	r0, r1
 800184a:	4611      	mov	r1, r2
 800184c:	461a      	mov	r2, r3
 800184e:	4603      	mov	r3, r0
 8001850:	817b      	strh	r3, [r7, #10]
 8001852:	460b      	mov	r3, r1
 8001854:	813b      	strh	r3, [r7, #8]
 8001856:	4613      	mov	r3, r2
 8001858:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001868:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	2200      	movs	r2, #0
 8001882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f8c0 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0a9      	b.n	8001a00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018ac:	897b      	ldrh	r3, [r7, #10]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	6a3a      	ldr	r2, [r7, #32]
 80018c0:	4951      	ldr	r1, [pc, #324]	; (8001a08 <I2C_RequestMemoryRead+0x1c8>)
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f8f9 	bl	8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e096      	b.n	8001a00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	6a39      	ldr	r1, [r7, #32]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f963 	bl	8001bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00d      	beq.n	8001914 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d107      	bne.n	8001910 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e075      	b.n	8001a00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d105      	bne.n	8001926 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800191a:	893b      	ldrh	r3, [r7, #8]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	e021      	b.n	800196a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001926:	893b      	ldrh	r3, [r7, #8]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	b29b      	uxth	r3, r3
 800192c:	b2da      	uxtb	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	6a39      	ldr	r1, [r7, #32]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f93d 	bl	8001bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00d      	beq.n	8001960 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	2b04      	cmp	r3, #4
 800194a:	d107      	bne.n	800195c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e04f      	b.n	8001a00 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001960:	893b      	ldrh	r3, [r7, #8]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	6a39      	ldr	r1, [r7, #32]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f922 	bl	8001bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00d      	beq.n	8001996 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b04      	cmp	r3, #4
 8001980:	d107      	bne.n	8001992 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001990:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e034      	b.n	8001a00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f82a 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e013      	b.n	8001a00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019d8:	897b      	ldrh	r3, [r7, #10]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	6a3a      	ldr	r2, [r7, #32]
 80019ec:	4906      	ldr	r1, [pc, #24]	; (8001a08 <I2C_RequestMemoryRead+0x1c8>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f863 	bl	8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	00010002 	.word	0x00010002

08001a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a1c:	e025      	b.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d021      	beq.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a26:	f7fe fe31 	bl	800068c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d302      	bcc.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d116      	bne.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f043 0220 	orr.w	r2, r3, #32
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e023      	b.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10d      	bne.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bf0c      	ite	eq
 8001a86:	2301      	moveq	r3, #1
 8001a88:	2300      	movne	r3, #0
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	e00c      	b.n	8001aaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf0c      	ite	eq
 8001aa2:	2301      	moveq	r3, #1
 8001aa4:	2300      	movne	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d0b6      	beq.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ac8:	e051      	b.n	8001b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad8:	d123      	bne.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001af2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f043 0204 	orr.w	r2, r3, #4
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e046      	b.n	8001bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d021      	beq.n	8001b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2a:	f7fe fdaf 	bl	800068c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d302      	bcc.n	8001b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d116      	bne.n	8001b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f043 0220 	orr.w	r2, r3, #32
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e020      	b.n	8001bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10c      	bne.n	8001b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4013      	ands	r3, r2
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf14      	ite	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	2300      	moveq	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	e00b      	b.n	8001baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf14      	ite	ne
 8001ba4:	2301      	movne	r3, #1
 8001ba6:	2300      	moveq	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d18d      	bne.n	8001aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bc4:	e02d      	b.n	8001c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f8ce 	bl	8001d68 <I2C_IsAcknowledgeFailed>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e02d      	b.n	8001c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d021      	beq.n	8001c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bde:	f7fe fd55 	bl	800068c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d302      	bcc.n	8001bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d116      	bne.n	8001c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f043 0220 	orr.w	r2, r3, #32
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e007      	b.n	8001c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2c:	2b80      	cmp	r3, #128	; 0x80
 8001c2e:	d1ca      	bne.n	8001bc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c46:	e02d      	b.n	8001ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f88d 	bl	8001d68 <I2C_IsAcknowledgeFailed>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e02d      	b.n	8001cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5e:	d021      	beq.n	8001ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c60:	f7fe fd14 	bl	800068c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d302      	bcc.n	8001c76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d116      	bne.n	8001ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f043 0220 	orr.w	r2, r3, #32
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e007      	b.n	8001cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d1ca      	bne.n	8001c48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cc8:	e042      	b.n	8001d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b10      	cmp	r3, #16
 8001cd6:	d119      	bne.n	8001d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0210 	mvn.w	r2, #16
 8001ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e029      	b.n	8001d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0c:	f7fe fcbe 	bl	800068c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d302      	bcc.n	8001d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d116      	bne.n	8001d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f043 0220 	orr.w	r2, r3, #32
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e007      	b.n	8001d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5a:	2b40      	cmp	r3, #64	; 0x40
 8001d5c:	d1b5      	bne.n	8001cca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7e:	d11b      	bne.n	8001db8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f043 0204 	orr.w	r2, r3, #4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_PWREx_EnableOverDrive+0x94>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df4:	f7fe fc4a 	bl	800068c <HAL_GetTick>
 8001df8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dfa:	e009      	b.n	8001e10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dfc:	f7fe fc46 	bl	800068c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e0a:	d901      	bls.n	8001e10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e01f      	b.n	8001e50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1c:	d1ee      	bne.n	8001dfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e24:	f7fe fc32 	bl	800068c <HAL_GetTick>
 8001e28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e2a:	e009      	b.n	8001e40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e2c:	f7fe fc2e 	bl	800068c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e3a:	d901      	bls.n	8001e40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e007      	b.n	8001e50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e4c:	d1ee      	bne.n	8001e2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	420e0040 	.word	0x420e0040
 8001e60:	40007000 	.word	0x40007000
 8001e64:	420e0044 	.word	0x420e0044

08001e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0cc      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b68      	ldr	r3, [pc, #416]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d90c      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b65      	ldr	r3, [pc, #404]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b8      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ebc:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed4:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	494d      	ldr	r1, [pc, #308]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d044      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d119      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e07f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f26:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e06f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e067      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	4b37      	ldr	r3, [pc, #220]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4934      	ldr	r1, [pc, #208]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f58:	f7fe fb98 	bl	800068c <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7fe fb94 	bl	800068c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e04f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 020c 	and.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1eb      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d20c      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e032      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4916      	ldr	r1, [pc, #88]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	490e      	ldr	r1, [pc, #56]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fee:	f000 f841 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	fa21 f303 	lsr.w	r3, r1, r3
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe faf8 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00
 8002024:	40023800 	.word	0x40023800
 8002028:	08004770 	.word	0x08004770
 800202c:	2000002c 	.word	0x2000002c
 8002030:	20000000 	.word	0x20000000

08002034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_RCC_GetHCLKFreq+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000002c 	.word	0x2000002c

0800204c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002050:	f7ff fff0 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 8002054:	4601      	mov	r1, r0
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0a9b      	lsrs	r3, r3, #10
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4a03      	ldr	r2, [pc, #12]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	08004780 	.word	0x08004780

08002074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800208e:	4bc6      	ldr	r3, [pc, #792]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b0c      	cmp	r3, #12
 8002098:	f200 817e 	bhi.w	8002398 <HAL_RCC_GetSysClockFreq+0x324>
 800209c:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <HAL_RCC_GetSysClockFreq+0x30>)
 800209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a2:	bf00      	nop
 80020a4:	080020d9 	.word	0x080020d9
 80020a8:	08002399 	.word	0x08002399
 80020ac:	08002399 	.word	0x08002399
 80020b0:	08002399 	.word	0x08002399
 80020b4:	080020df 	.word	0x080020df
 80020b8:	08002399 	.word	0x08002399
 80020bc:	08002399 	.word	0x08002399
 80020c0:	08002399 	.word	0x08002399
 80020c4:	080020e5 	.word	0x080020e5
 80020c8:	08002399 	.word	0x08002399
 80020cc:	08002399 	.word	0x08002399
 80020d0:	08002399 	.word	0x08002399
 80020d4:	08002241 	.word	0x08002241
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4bb4      	ldr	r3, [pc, #720]	; (80023ac <HAL_RCC_GetSysClockFreq+0x338>)
 80020da:	613b      	str	r3, [r7, #16]
       break;
 80020dc:	e15f      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020de:	4bb4      	ldr	r3, [pc, #720]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x33c>)
 80020e0:	613b      	str	r3, [r7, #16]
      break;
 80020e2:	e15c      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e4:	4bb0      	ldr	r3, [pc, #704]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020ec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ee:	4bae      	ldr	r3, [pc, #696]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04a      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fa:	4bab      	ldr	r3, [pc, #684]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	099b      	lsrs	r3, r3, #6
 8002100:	f04f 0400 	mov.w	r4, #0
 8002104:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	ea03 0501 	and.w	r5, r3, r1
 8002110:	ea04 0602 	and.w	r6, r4, r2
 8002114:	4629      	mov	r1, r5
 8002116:	4632      	mov	r2, r6
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	f04f 0400 	mov.w	r4, #0
 8002120:	0154      	lsls	r4, r2, #5
 8002122:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002126:	014b      	lsls	r3, r1, #5
 8002128:	4619      	mov	r1, r3
 800212a:	4622      	mov	r2, r4
 800212c:	1b49      	subs	r1, r1, r5
 800212e:	eb62 0206 	sbc.w	r2, r2, r6
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	f04f 0400 	mov.w	r4, #0
 800213a:	0194      	lsls	r4, r2, #6
 800213c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002140:	018b      	lsls	r3, r1, #6
 8002142:	1a5b      	subs	r3, r3, r1
 8002144:	eb64 0402 	sbc.w	r4, r4, r2
 8002148:	f04f 0100 	mov.w	r1, #0
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	00e2      	lsls	r2, r4, #3
 8002152:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002156:	00d9      	lsls	r1, r3, #3
 8002158:	460b      	mov	r3, r1
 800215a:	4614      	mov	r4, r2
 800215c:	195b      	adds	r3, r3, r5
 800215e:	eb44 0406 	adc.w	r4, r4, r6
 8002162:	f04f 0100 	mov.w	r1, #0
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	0262      	lsls	r2, r4, #9
 800216c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002170:	0259      	lsls	r1, r3, #9
 8002172:	460b      	mov	r3, r1
 8002174:	4614      	mov	r4, r2
 8002176:	4618      	mov	r0, r3
 8002178:	4621      	mov	r1, r4
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f04f 0400 	mov.w	r4, #0
 8002180:	461a      	mov	r2, r3
 8002182:	4623      	mov	r3, r4
 8002184:	f7fe f89c 	bl	80002c0 <__aeabi_uldivmod>
 8002188:	4603      	mov	r3, r0
 800218a:	460c      	mov	r4, r1
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e049      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002190:	4b85      	ldr	r3, [pc, #532]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	f04f 0400 	mov.w	r4, #0
 800219a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	ea03 0501 	and.w	r5, r3, r1
 80021a6:	ea04 0602 	and.w	r6, r4, r2
 80021aa:	4629      	mov	r1, r5
 80021ac:	4632      	mov	r2, r6
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	f04f 0400 	mov.w	r4, #0
 80021b6:	0154      	lsls	r4, r2, #5
 80021b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021bc:	014b      	lsls	r3, r1, #5
 80021be:	4619      	mov	r1, r3
 80021c0:	4622      	mov	r2, r4
 80021c2:	1b49      	subs	r1, r1, r5
 80021c4:	eb62 0206 	sbc.w	r2, r2, r6
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	f04f 0400 	mov.w	r4, #0
 80021d0:	0194      	lsls	r4, r2, #6
 80021d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021d6:	018b      	lsls	r3, r1, #6
 80021d8:	1a5b      	subs	r3, r3, r1
 80021da:	eb64 0402 	sbc.w	r4, r4, r2
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	00e2      	lsls	r2, r4, #3
 80021e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021ec:	00d9      	lsls	r1, r3, #3
 80021ee:	460b      	mov	r3, r1
 80021f0:	4614      	mov	r4, r2
 80021f2:	195b      	adds	r3, r3, r5
 80021f4:	eb44 0406 	adc.w	r4, r4, r6
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	02a2      	lsls	r2, r4, #10
 8002202:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002206:	0299      	lsls	r1, r3, #10
 8002208:	460b      	mov	r3, r1
 800220a:	4614      	mov	r4, r2
 800220c:	4618      	mov	r0, r3
 800220e:	4621      	mov	r1, r4
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f04f 0400 	mov.w	r4, #0
 8002216:	461a      	mov	r2, r3
 8002218:	4623      	mov	r3, r4
 800221a:	f7fe f851 	bl	80002c0 <__aeabi_uldivmod>
 800221e:	4603      	mov	r3, r0
 8002220:	460c      	mov	r4, r1
 8002222:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002224:	4b60      	ldr	r3, [pc, #384]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	0c1b      	lsrs	r3, r3, #16
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	3301      	adds	r3, #1
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	fbb2 f3f3 	udiv	r3, r2, r3
 800223c:	613b      	str	r3, [r7, #16]
      break;
 800223e:	e0ae      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002248:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224a:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d04a      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002256:	4b54      	ldr	r3, [pc, #336]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	f04f 0400 	mov.w	r4, #0
 8002260:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	ea03 0501 	and.w	r5, r3, r1
 800226c:	ea04 0602 	and.w	r6, r4, r2
 8002270:	4629      	mov	r1, r5
 8002272:	4632      	mov	r2, r6
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	f04f 0400 	mov.w	r4, #0
 800227c:	0154      	lsls	r4, r2, #5
 800227e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002282:	014b      	lsls	r3, r1, #5
 8002284:	4619      	mov	r1, r3
 8002286:	4622      	mov	r2, r4
 8002288:	1b49      	subs	r1, r1, r5
 800228a:	eb62 0206 	sbc.w	r2, r2, r6
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	f04f 0400 	mov.w	r4, #0
 8002296:	0194      	lsls	r4, r2, #6
 8002298:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800229c:	018b      	lsls	r3, r1, #6
 800229e:	1a5b      	subs	r3, r3, r1
 80022a0:	eb64 0402 	sbc.w	r4, r4, r2
 80022a4:	f04f 0100 	mov.w	r1, #0
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	00e2      	lsls	r2, r4, #3
 80022ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022b2:	00d9      	lsls	r1, r3, #3
 80022b4:	460b      	mov	r3, r1
 80022b6:	4614      	mov	r4, r2
 80022b8:	195b      	adds	r3, r3, r5
 80022ba:	eb44 0406 	adc.w	r4, r4, r6
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	0262      	lsls	r2, r4, #9
 80022c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80022cc:	0259      	lsls	r1, r3, #9
 80022ce:	460b      	mov	r3, r1
 80022d0:	4614      	mov	r4, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	4621      	mov	r1, r4
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f04f 0400 	mov.w	r4, #0
 80022dc:	461a      	mov	r2, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	f7fd ffee 	bl	80002c0 <__aeabi_uldivmod>
 80022e4:	4603      	mov	r3, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e049      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	099b      	lsrs	r3, r3, #6
 80022f2:	f04f 0400 	mov.w	r4, #0
 80022f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	ea03 0501 	and.w	r5, r3, r1
 8002302:	ea04 0602 	and.w	r6, r4, r2
 8002306:	4629      	mov	r1, r5
 8002308:	4632      	mov	r2, r6
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	f04f 0400 	mov.w	r4, #0
 8002312:	0154      	lsls	r4, r2, #5
 8002314:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002318:	014b      	lsls	r3, r1, #5
 800231a:	4619      	mov	r1, r3
 800231c:	4622      	mov	r2, r4
 800231e:	1b49      	subs	r1, r1, r5
 8002320:	eb62 0206 	sbc.w	r2, r2, r6
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	f04f 0400 	mov.w	r4, #0
 800232c:	0194      	lsls	r4, r2, #6
 800232e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002332:	018b      	lsls	r3, r1, #6
 8002334:	1a5b      	subs	r3, r3, r1
 8002336:	eb64 0402 	sbc.w	r4, r4, r2
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	00e2      	lsls	r2, r4, #3
 8002344:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002348:	00d9      	lsls	r1, r3, #3
 800234a:	460b      	mov	r3, r1
 800234c:	4614      	mov	r4, r2
 800234e:	195b      	adds	r3, r3, r5
 8002350:	eb44 0406 	adc.w	r4, r4, r6
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	02a2      	lsls	r2, r4, #10
 800235e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002362:	0299      	lsls	r1, r3, #10
 8002364:	460b      	mov	r3, r1
 8002366:	4614      	mov	r4, r2
 8002368:	4618      	mov	r0, r3
 800236a:	4621      	mov	r1, r4
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f04f 0400 	mov.w	r4, #0
 8002372:	461a      	mov	r2, r3
 8002374:	4623      	mov	r3, r4
 8002376:	f7fd ffa3 	bl	80002c0 <__aeabi_uldivmod>
 800237a:	4603      	mov	r3, r0
 800237c:	460c      	mov	r4, r1
 800237e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0f1b      	lsrs	r3, r3, #28
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	fbb2 f3f3 	udiv	r3, r2, r3
 8002394:	613b      	str	r3, [r7, #16]
      break;
 8002396:	e002      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <HAL_RCC_GetSysClockFreq+0x338>)
 800239a:	613b      	str	r3, [r7, #16]
      break;
 800239c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239e:	693b      	ldr	r3, [r7, #16]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200

080023b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8083 	beq.w	80024d4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023ce:	4b95      	ldr	r3, [pc, #596]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d019      	beq.n	800240e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023da:	4b92      	ldr	r3, [pc, #584]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023e6:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023f2:	d00c      	beq.n	800240e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f4:	4b8b      	ldr	r3, [pc, #556]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d112      	bne.n	8002426 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002400:	4b88      	ldr	r3, [pc, #544]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800240c:	d10b      	bne.n	8002426 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240e:	4b85      	ldr	r3, [pc, #532]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d05b      	beq.n	80024d2 <HAL_RCC_OscConfig+0x11e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d157      	bne.n	80024d2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e216      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x8a>
 8002430:	4b7c      	ldr	r3, [pc, #496]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a7b      	ldr	r2, [pc, #492]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e01d      	b.n	800247a <HAL_RCC_OscConfig+0xc6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002446:	d10c      	bne.n	8002462 <HAL_RCC_OscConfig+0xae>
 8002448:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a75      	ldr	r2, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 800244e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b73      	ldr	r3, [pc, #460]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a72      	ldr	r2, [pc, #456]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0xc6>
 8002462:	4b70      	ldr	r3, [pc, #448]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6f      	ldr	r2, [pc, #444]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6c      	ldr	r2, [pc, #432]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d013      	beq.n	80024aa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe f903 	bl	800068c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248a:	f7fe f8ff 	bl	800068c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	; 0x64
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1db      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249c:	4b61      	ldr	r3, [pc, #388]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0xd6>
 80024a8:	e014      	b.n	80024d4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe f8ef 	bl	800068c <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b2:	f7fe f8eb 	bl	800068c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b64      	cmp	r3, #100	; 0x64
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e1c7      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c4:	4b57      	ldr	r3, [pc, #348]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0xfe>
 80024d0:	e000      	b.n	80024d4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d06f      	beq.n	80025c0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024e0:	4b50      	ldr	r3, [pc, #320]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d017      	beq.n	800251c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ec:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d105      	bne.n	8002504 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024f8:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002504:	4b47      	ldr	r3, [pc, #284]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800250c:	2b0c      	cmp	r3, #12
 800250e:	d11c      	bne.n	800254a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002510:	4b44      	ldr	r3, [pc, #272]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d116      	bne.n	800254a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251c:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x180>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d001      	beq.n	8002534 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e18f      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4938      	ldr	r1, [pc, #224]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002548:	e03a      	b.n	80025c0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d020      	beq.n	8002594 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002552:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_RCC_OscConfig+0x274>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe f898 	bl	800068c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002560:	f7fe f894 	bl	800068c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e170      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4925      	ldr	r1, [pc, #148]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
 8002592:	e015      	b.n	80025c0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCC_OscConfig+0x274>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe f877 	bl	800068c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe f873 	bl	800068c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e14f      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d037      	beq.n	800263c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d016      	beq.n	8002602 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_RCC_OscConfig+0x278>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025da:	f7fe f857 	bl	800068c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e2:	f7fe f853 	bl	800068c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e12f      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 80025f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x22e>
 8002600:	e01c      	b.n	800263c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_RCC_OscConfig+0x278>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe f840 	bl	800068c <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260e:	e00f      	b.n	8002630 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002610:	f7fe f83c 	bl	800068c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d908      	bls.n	8002630 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e118      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	42470000 	.word	0x42470000
 800262c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	4b8a      	ldr	r3, [pc, #552]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 8002632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e9      	bne.n	8002610 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8097 	beq.w	8002778 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b83      	ldr	r3, [pc, #524]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b7f      	ldr	r3, [pc, #508]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a7e      	ldr	r2, [pc, #504]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b7c      	ldr	r3, [pc, #496]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b79      	ldr	r3, [pc, #484]	; (8002860 <HAL_RCC_OscConfig+0x4ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a75      	ldr	r2, [pc, #468]	; (8002860 <HAL_RCC_OscConfig+0x4ac>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fd fffb 	bl	800068c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fd fff7 	bl	800068c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0d3      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <HAL_RCC_OscConfig+0x4ac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x31a>
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	; 0x70
 80026cc:	e01c      	b.n	8002708 <HAL_RCC_OscConfig+0x354>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x33c>
 80026d6:	4b61      	ldr	r3, [pc, #388]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a60      	ldr	r2, [pc, #384]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
 80026e2:	4b5e      	ldr	r3, [pc, #376]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a5d      	ldr	r2, [pc, #372]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0x354>
 80026f0:	4b5a      	ldr	r3, [pc, #360]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a59      	ldr	r2, [pc, #356]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
 80026fc:	4b57      	ldr	r3, [pc, #348]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a56      	ldr	r2, [pc, #344]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 8002702:	f023 0304 	bic.w	r3, r3, #4
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fd ffbc 	bl	800068c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fd ffb8 	bl	800068c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e092      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	4b4b      	ldr	r3, [pc, #300]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ee      	beq.n	8002718 <HAL_RCC_OscConfig+0x364>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fd ffa6 	bl	800068c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fd ffa2 	bl	800068c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e07c      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275a:	4b40      	ldr	r3, [pc, #256]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ee      	bne.n	8002744 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276c:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	4a3a      	ldr	r2, [pc, #232]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 8002772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d068      	beq.n	8002852 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002780:	4b36      	ldr	r3, [pc, #216]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	d060      	beq.n	800284e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d145      	bne.n	8002820 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002794:	4b33      	ldr	r3, [pc, #204]	; (8002864 <HAL_RCC_OscConfig+0x4b0>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fd ff77 	bl	800068c <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fd ff73 	bl	800068c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e04f      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b4:	4b29      	ldr	r3, [pc, #164]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69da      	ldr	r2, [r3, #28]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	019b      	lsls	r3, r3, #6
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	3b01      	subs	r3, #1
 80027da:	041b      	lsls	r3, r3, #16
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	061b      	lsls	r3, r3, #24
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	071b      	lsls	r3, r3, #28
 80027ec:	491b      	ldr	r1, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_RCC_OscConfig+0x4b0>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fd ff48 	bl	800068c <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7fd ff44 	bl	800068c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e020      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x44c>
 800281e:	e018      	b.n	8002852 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_RCC_OscConfig+0x4b0>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fd ff31 	bl	800068c <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7fd ff2d 	bl	800068c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e009      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_OscConfig+0x4a8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x47a>
 800284c:	e001      	b.n	8002852 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	40007000 	.word	0x40007000
 8002864:	42470060 	.word	0x42470060

08002868 <delay>:
 *
 * \param t		Number of "nop" cycles
 *
 * \return void
 */		
inline void delay(uint32_t t) {
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	for (; t; t--) __asm("nop");
 8002870:	e003      	b.n	800287a <delay+0x12>
 8002872:	bf00      	nop
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f8      	bne.n	8002872 <delay+0xa>
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <GPIO_Init>:
 *
 * \param
 *
 * \return void
 */
void GPIO_Init(uint32_t mode) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d003      	beq.n	80028a2 <GPIO_Init+0x16>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f040 8081 	bne.w	80029a4 <GPIO_Init+0x118>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	4b41      	ldr	r3, [pc, #260]	; (80029ac <GPIO_Init+0x120>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a40      	ldr	r2, [pc, #256]	; (80029ac <GPIO_Init+0x120>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b3e      	ldr	r3, [pc, #248]	; (80029ac <GPIO_Init+0x120>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <GPIO_Init+0x120>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a39      	ldr	r2, [pc, #228]	; (80029ac <GPIO_Init+0x120>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <GPIO_Init+0x120>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b33      	ldr	r3, [pc, #204]	; (80029ac <GPIO_Init+0x120>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a32      	ldr	r2, [pc, #200]	; (80029ac <GPIO_Init+0x120>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b30      	ldr	r3, [pc, #192]	; (80029ac <GPIO_Init+0x120>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 80028f6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80028fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	4828      	ldr	r0, [pc, #160]	; (80029b0 <GPIO_Init+0x124>)
 8002910:	f7fd ffd0 	bl	80008b4 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 8002914:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8002918:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	4821      	ldr	r0, [pc, #132]	; (80029b4 <GPIO_Init+0x128>)
 800292e:	f7fd ffc1 	bl	80008b4 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	481b      	ldr	r0, [pc, #108]	; (80029b8 <GPIO_Init+0x12c>)
 800294a:	f7fd ffb3 	bl	80008b4 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 800294e:	2313      	movs	r3, #19
 8002950:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002952:	2301      	movs	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	4812      	ldr	r0, [pc, #72]	; (80029b0 <GPIO_Init+0x124>)
 8002966:	f7fd ffa5 	bl	80008b4 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800296a:	2301      	movs	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296e:	2301      	movs	r3, #1
 8002970:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <GPIO_Init+0x128>)
 8002982:	f7fd ff97 	bl	80008b4 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002986:	2302      	movs	r3, #2
 8002988:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298a:	2301      	movs	r3, #1
 800298c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	4806      	ldr	r0, [pc, #24]	; (80029b8 <GPIO_Init+0x12c>)
 800299e:	f7fd ff89 	bl	80008b4 <HAL_GPIO_Init>
 80029a2:	e000      	b.n	80029a6 <GPIO_Init+0x11a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 80029a4:	bf00      	nop
}
 80029a6:	3728      	adds	r7, #40	; 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020000 	.word	0x40020000
 80029b4:	40020400 	.word	0x40020400
 80029b8:	40020800 	.word	0x40020800

080029bc <LCD_Write8>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline void LCD_Write8(uint8_t data) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <LCD_Write8+0xa4>)
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ce:	4013      	ands	r3, r2
 80029d0:	79fa      	ldrb	r2, [r7, #7]
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80029d8:	431a      	orrs	r2, r3
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e2:	431a      	orrs	r2, r3
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	491c      	ldr	r1, [pc, #112]	; (8002a60 <LCD_Write8+0xa4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80029f2:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <LCD_Write8+0xa8>)
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 80029fa:	4013      	ands	r3, r2
 80029fc:	79fa      	ldrb	r2, [r7, #7]
 80029fe:	f002 0208 	and.w	r2, r2, #8
 8002a02:	431a      	orrs	r2, r3
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	105b      	asrs	r3, r3, #1
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	4910      	ldr	r1, [pc, #64]	; (8002a64 <LCD_Write8+0xa8>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <LCD_Write8+0xac>)
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8002a2e:	4013      	ands	r3, r2
 8002a30:	79fa      	ldrb	r2, [r7, #7]
 8002a32:	0192      	lsls	r2, r2, #6
 8002a34:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002a38:	490b      	ldr	r1, [pc, #44]	; (8002a68 <LCD_Write8+0xac>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <LCD_Write8+0xa4>)
 8002a40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a44:	619a      	str	r2, [r3, #24]
 8002a46:	2002      	movs	r0, #2
 8002a48:	f7ff ff0e 	bl	8002868 <delay>
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <LCD_Write8+0xa4>)
 8002a4e:	2202      	movs	r2, #2
 8002a50:	619a      	str	r2, [r3, #24]
 8002a52:	2002      	movs	r0, #2
 8002a54:	f7ff ff08 	bl	8002868 <delay>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020800 	.word	0x40020800

08002a6c <LCD_Write16Register16>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	460a      	mov	r2, r1
 8002a76:	80fb      	strh	r3, [r7, #6]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <LCD_Write16Register16+0x58>)
 8002a7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a82:	619a      	str	r2, [r3, #24]
	LCD_Write8(a >> 8);
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff95 	bl	80029bc <LCD_Write8>
	LCD_Write8(a);
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ff90 	bl	80029bc <LCD_Write8>
	LCD_CD_DATA();
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <LCD_Write16Register16+0x58>)
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 8002aa2:	88bb      	ldrh	r3, [r7, #4]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff86 	bl	80029bc <LCD_Write8>
	LCD_Write8(d);
 8002ab0:	88bb      	ldrh	r3, [r7, #4]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff81 	bl	80029bc <LCD_Write8>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <LCD_Init+0xf4>)
 8002ad0:	22f0      	movs	r2, #240	; 0xf0
 8002ad2:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8002ad4:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <LCD_Init+0xf8>)
 8002ad6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ada:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8002adc:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <LCD_Init+0xfc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8002ae2:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <LCD_Init+0x100>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	801a      	strh	r2, [r3, #0]
 8002ae8:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <LCD_Init+0x100>)
 8002aea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002aee:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <LCD_Init+0x104>)
 8002af0:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 8002af2:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <LCD_Init+0x108>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8002af8:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <LCD_Init+0x10c>)
 8002afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002afe:	801a      	strh	r2, [r3, #0]
 8002b00:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <LCD_Init+0x10c>)
 8002b02:	881a      	ldrh	r2, [r3, #0]
 8002b04:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <LCD_Init+0x110>)
 8002b06:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8002b08:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <LCD_Init+0x114>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]

	GPIO_Init(GPIO_MODE_OUTPUT_PP);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7ff febc 	bl	800288c <GPIO_Init>

	LCD_Reset();
 8002b14:	f000 f96c 	bl	8002df0 <LCD_Reset>
	HAL_Delay(50);
 8002b18:	2032      	movs	r0, #50	; 0x32
 8002b1a:	f7fd fdc3 	bl	80006a4 <HAL_Delay>

	LCD_CS_ACTIVE();
 8002b1e:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <LCD_Init+0x118>)
 8002b20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b24:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined (ILI9328)
	uint8_t i = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8002b2a:	e01d      	b.n	8002b68 <LCD_Init+0xa0>
		a = ILI932x_regValues[i++];
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	71fa      	strb	r2, [r7, #7]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <LCD_Init+0x11c>)
 8002b36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002b3a:	80bb      	strh	r3, [r7, #4]
		d = ILI932x_regValues[i++];
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	71fa      	strb	r2, [r7, #7]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <LCD_Init+0x11c>)
 8002b46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002b4a:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8002b4c:	88bb      	ldrh	r3, [r7, #4]
 8002b4e:	2bff      	cmp	r3, #255	; 0xff
 8002b50:	d104      	bne.n	8002b5c <LCD_Init+0x94>
			HAL_Delay(d);
 8002b52:	887b      	ldrh	r3, [r7, #2]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fda5 	bl	80006a4 <HAL_Delay>
 8002b5a:	e005      	b.n	8002b68 <LCD_Init+0xa0>
		} else {
			LCD_Write16Register16(a, d);
 8002b5c:	887a      	ldrh	r2, [r7, #2]
 8002b5e:	88bb      	ldrh	r3, [r7, #4]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff82 	bl	8002a6c <LCD_Write16Register16>
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2b65      	cmp	r3, #101	; 0x65
 8002b6c:	d9de      	bls.n	8002b2c <LCD_Init+0x64>
		}
	}
	LCD_SetRotation(m_rotation);
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <LCD_Init+0xfc>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fa18 	bl	8002fa8 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <LCD_Init+0xf4>)
 8002b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <LCD_Init+0xf8>)
 8002b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2100      	movs	r1, #0
 8002b92:	2000      	movs	r0, #0
 8002b94:	f000 f976 	bl	8002e84 <LCD_SetAddrWindow>
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif

	LCD_CS_IDLE();
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <LCD_Init+0x118>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f000 f8e4 	bl	8002d6c <LCD_FillScreen>
	LCD_SetTextSize(0);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f000 fc05 	bl	80033b4 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 8002baa:	2100      	movs	r1, #0
 8002bac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002bb0:	f000 fc1a 	bl	80033e8 <LCD_SetTextColor>
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	200000b0 	.word	0x200000b0
 8002bc0:	200000b2 	.word	0x200000b2
 8002bc4:	200000bd 	.word	0x200000bd
 8002bc8:	200000b4 	.word	0x200000b4
 8002bcc:	200000b6 	.word	0x200000b6
 8002bd0:	200000bc 	.word	0x200000bc
 8002bd4:	200000ba 	.word	0x200000ba
 8002bd8:	200000b8 	.word	0x200000b8
 8002bdc:	200000be 	.word	0x200000be
 8002be0:	40020400 	.word	0x40020400
 8002be4:	080046a4 	.word	0x080046a4

08002be8 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	80bb      	strh	r3, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8002bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	db51      	blt.n	8002ca6 <LCD_DrawPixel+0xbe>
 8002c02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db4d      	blt.n	8002ca6 <LCD_DrawPixel+0xbe>
 8002c0a:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <LCD_DrawPixel+0xc8>)
 8002c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	da46      	bge.n	8002ca6 <LCD_DrawPixel+0xbe>
 8002c18:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <LCD_DrawPixel+0xcc>)
 8002c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c1e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	da3f      	bge.n	8002ca6 <LCD_DrawPixel+0xbe>

	LCD_CS_ACTIVE();
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <LCD_DrawPixel+0xd0>)
 8002c28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c2c:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	int16_t t;
	switch (m_rotation) {
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <LCD_DrawPixel+0xd4>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d00d      	beq.n	8002c52 <LCD_DrawPixel+0x6a>
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d017      	beq.n	8002c6a <LCD_DrawPixel+0x82>
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d120      	bne.n	8002c80 <LCD_DrawPixel+0x98>
	case 1:
		t = x;
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 8002c42:	88bb      	ldrh	r3, [r7, #4]
 8002c44:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	80fb      	strh	r3, [r7, #6]
		y = t;
 8002c4c:	89fb      	ldrh	r3, [r7, #14]
 8002c4e:	80bb      	strh	r3, [r7, #4]
		break;
 8002c50:	e016      	b.n	8002c80 <LCD_DrawPixel+0x98>
	case 2:
		x = TFTWIDTH - 1 - x;
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8002c5c:	88bb      	ldrh	r3, [r7, #4]
 8002c5e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c62:	3301      	adds	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	80bb      	strh	r3, [r7, #4]
		break;
 8002c68:	e00a      	b.n	8002c80 <LCD_DrawPixel+0x98>
	case 3:
		t = x;
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	81fb      	strh	r3, [r7, #14]
		x = y;
 8002c6e:	88bb      	ldrh	r3, [r7, #4]
 8002c70:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 8002c72:	89fb      	ldrh	r3, [r7, #14]
 8002c74:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c78:	3301      	adds	r3, #1
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	80bb      	strh	r3, [r7, #4]
		break;
 8002c7e:	bf00      	nop
	}
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	4619      	mov	r1, r3
 8002c84:	2020      	movs	r0, #32
 8002c86:	f7ff fef1 	bl	8002a6c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8002c8a:	88bb      	ldrh	r3, [r7, #4]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	2021      	movs	r0, #33	; 0x21
 8002c90:	f7ff feec 	bl	8002a6c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	4619      	mov	r1, r3
 8002c98:	2022      	movs	r0, #34	; 0x22
 8002c9a:	f7ff fee7 	bl	8002a6c <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif

	LCD_CS_IDLE();
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <LCD_DrawPixel+0xd0>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	619a      	str	r2, [r3, #24]
 8002ca4:	e000      	b.n	8002ca8 <LCD_DrawPixel+0xc0>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8002ca6:	bf00      	nop
}
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200000b0 	.word	0x200000b0
 8002cb4:	200000b2 	.word	0x200000b2
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	200000bd 	.word	0x200000bd

08002cc0 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	80fb      	strh	r3, [r7, #6]
#if defined(SSD1297)
	uint8_t red = LCD_Color565_to_R(color);
	uint8_t green = LCD_Color565_to_G(color);
	uint8_t blue = LCD_Color565_to_B(color);
#else
	uint8_t hi = color >> 8, lo = color;
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	73bb      	strb	r3, [r7, #14]
#endif

	LCD_CS_ACTIVE();
 8002cd8:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <LCD_Flood+0xa4>)
 8002cda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cde:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	2022      	movs	r0, #34	; 0x22
 8002ce6:	f7ff fec1 	bl	8002a6c <LCD_Write16Register16>
#elif defined(HX8357D)
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif
	len--;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	603b      	str	r3, [r7, #0]
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
#else
	if (hi == lo) {
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d128      	bne.n	8002d4a <LCD_Flood+0x8a>
#endif
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (len--) {
 8002cf8:	e019      	b.n	8002d2e <LCD_Flood+0x6e>
#if defined(SSD1297)
			LCD_WR_STROBE();
#endif
			LCD_WR_STROBE();
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <LCD_Flood+0xa8>)
 8002cfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d00:	619a      	str	r2, [r3, #24]
 8002d02:	2002      	movs	r0, #2
 8002d04:	f7ff fdb0 	bl	8002868 <delay>
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <LCD_Flood+0xa8>)
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	619a      	str	r2, [r3, #24]
 8002d0e:	2002      	movs	r0, #2
 8002d10:	f7ff fdaa 	bl	8002868 <delay>
			LCD_WR_STROBE();
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <LCD_Flood+0xa8>)
 8002d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d1a:	619a      	str	r2, [r3, #24]
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f7ff fda3 	bl	8002868 <delay>
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <LCD_Flood+0xa8>)
 8002d24:	2202      	movs	r2, #2
 8002d26:	619a      	str	r2, [r3, #24]
 8002d28:	2002      	movs	r0, #2
 8002d2a:	f7ff fd9d 	bl	8002868 <delay>
		while (len--) {
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	603a      	str	r2, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e0      	bne.n	8002cfa <LCD_Flood+0x3a>
 8002d38:	e00c      	b.n	8002d54 <LCD_Flood+0x94>
#if defined(SSD1297)
			LCD_Write8(red);
			LCD_Write8(green);
			LCD_Write8(blue);
#else
			LCD_Write8(hi);
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fe3d 	bl	80029bc <LCD_Write8>
			LCD_Write8(lo);
 8002d42:	7bbb      	ldrb	r3, [r7, #14]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fe39 	bl	80029bc <LCD_Write8>
		while (len--) {
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	603a      	str	r2, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f2      	bne.n	8002d3a <LCD_Flood+0x7a>
#endif
		}
	}

	LCD_CS_IDLE();
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <LCD_Flood+0xa4>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	619a      	str	r2, [r3, #24]
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020000 	.word	0x40020000

08002d6c <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	80fb      	strh	r3, [r7, #6]
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 8002d76:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <LCD_FillScreen+0x7c>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d00d      	beq.n	8002d9a <LCD_FillScreen+0x2e>
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d011      	beq.n	8002da6 <LCD_FillScreen+0x3a>
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d004      	beq.n	8002d90 <LCD_FillScreen+0x24>
	default:
		x = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	81bb      	strh	r3, [r7, #12]
		break;
 8002d8e:	e010      	b.n	8002db2 <LCD_FillScreen+0x46>
	case 1:
		x = TFTWIDTH - 1;
 8002d90:	23ef      	movs	r3, #239	; 0xef
 8002d92:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	81bb      	strh	r3, [r7, #12]
		break;
 8002d98:	e00b      	b.n	8002db2 <LCD_FillScreen+0x46>
	case 2:
		x = TFTWIDTH - 1;
 8002d9a:	23ef      	movs	r3, #239	; 0xef
 8002d9c:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8002d9e:	f240 133f 	movw	r3, #319	; 0x13f
 8002da2:	81bb      	strh	r3, [r7, #12]
		break;
 8002da4:	e005      	b.n	8002db2 <LCD_FillScreen+0x46>
	case 3:
		x = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8002daa:	f240 133f 	movw	r3, #319	; 0x13f
 8002dae:	81bb      	strh	r3, [r7, #12]
		break;
 8002db0:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <LCD_FillScreen+0x80>)
 8002db4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002db8:	619a      	str	r2, [r3, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 8002dba:	89fb      	ldrh	r3, [r7, #14]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	2020      	movs	r0, #32
 8002dc0:	f7ff fe54 	bl	8002a6c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8002dc4:	89bb      	ldrh	r3, [r7, #12]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	2021      	movs	r0, #33	; 0x21
 8002dca:	f7ff fe4f 	bl	8002a6c <LCD_Write16Register16>
#endif
	LCD_CS_IDLE();
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <LCD_FillScreen+0x80>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	619a      	str	r2, [r3, #24]
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff70 	bl	8002cc0 <LCD_Flood>
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	200000bd 	.word	0x200000bd
 8002dec:	40020400 	.word	0x40020400

08002df0 <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <LCD_Reset+0x88>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <LCD_Reset+0x8c>)
 8002dfe:	2210      	movs	r2, #16
 8002e00:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <LCD_Reset+0x8c>)
 8002e04:	2202      	movs	r2, #2
 8002e06:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 8002e08:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <LCD_Reset+0x8c>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	619a      	str	r2, [r3, #24]

	LCD_RST_ACTIVE();
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <LCD_Reset+0x90>)
 8002e10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e14:	619a      	str	r2, [r3, #24]
	HAL_Delay(2);
 8002e16:	2002      	movs	r0, #2
 8002e18:	f7fd fc44 	bl	80006a4 <HAL_Delay>
	LCD_RST_IDLE();
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <LCD_Reset+0x90>)
 8002e1e:	2202      	movs	r2, #2
 8002e20:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 8002e22:	2078      	movs	r0, #120	; 0x78
 8002e24:	f7fd fc3e 	bl	80006a4 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 8002e28:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <LCD_Reset+0x88>)
 8002e2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e2e:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <LCD_Reset+0x8c>)
 8002e32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e36:	619a      	str	r2, [r3, #24]
	LCD_Write8(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff fdbf 	bl	80029bc <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) LCD_WR_STROBE(); // Three extra 0x00s
 8002e3e:	2300      	movs	r3, #0
 8002e40:	71fb      	strb	r3, [r7, #7]
 8002e42:	e00f      	b.n	8002e64 <LCD_Reset+0x74>
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <LCD_Reset+0x8c>)
 8002e46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e4a:	619a      	str	r2, [r3, #24]
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	f7ff fd0b 	bl	8002868 <delay>
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <LCD_Reset+0x8c>)
 8002e54:	2202      	movs	r2, #2
 8002e56:	619a      	str	r2, [r3, #24]
 8002e58:	2002      	movs	r0, #2
 8002e5a:	f7ff fd05 	bl	8002868 <delay>
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	3301      	adds	r3, #1
 8002e62:	71fb      	strb	r3, [r7, #7]
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d9ec      	bls.n	8002e44 <LCD_Reset+0x54>
	LCD_CS_IDLE();
 8002e6a:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <LCD_Reset+0x88>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	619a      	str	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40020800 	.word	0x40020800

08002e84 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4623      	mov	r3, r4
 8002e94:	80fb      	strh	r3, [r7, #6]
 8002e96:	4603      	mov	r3, r0
 8002e98:	80bb      	strh	r3, [r7, #4]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	807b      	strh	r3, [r7, #2]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <LCD_SetAddrWindow+0x11c>)
 8002ea4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ea8:	619a      	str	r2, [r3, #24]
		done in any direction, the current screen rotation is applied
		because some users find it disconcerting when a fill does not
		occur top-to-bottom.
	*/
	int x, y, t;
	switch (m_rotation) {
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <LCD_SetAddrWindow+0x120>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d01c      	beq.n	8002eec <LCD_SetAddrWindow+0x68>
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d037      	beq.n	8002f26 <LCD_SetAddrWindow+0xa2>
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d004      	beq.n	8002ec4 <LCD_SetAddrWindow+0x40>
	default:
		x = x1;
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	617b      	str	r3, [r7, #20]
		y = y1;
 8002ebe:	88bb      	ldrh	r3, [r7, #4]
 8002ec0:	613b      	str	r3, [r7, #16]
		break;
 8002ec2:	e046      	b.n	8002f52 <LCD_SetAddrWindow+0xce>
	case 1:
		t = y1;
 8002ec4:	88bb      	ldrh	r3, [r7, #4]
 8002ec6:	60fb      	str	r3, [r7, #12]
		y1 = x1;
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	80bb      	strh	r3, [r7, #4]
		x1 = TFTWIDTH - 1 - y2;
 8002ecc:	883b      	ldrh	r3, [r7, #0]
 8002ece:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002ed2:	80fb      	strh	r3, [r7, #6]
		y2 = x2;
 8002ed4:	887b      	ldrh	r3, [r7, #2]
 8002ed6:	803b      	strh	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002ee0:	807b      	strh	r3, [r7, #2]
		x = x2;
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	617b      	str	r3, [r7, #20]
		y = y1;
 8002ee6:	88bb      	ldrh	r3, [r7, #4]
 8002ee8:	613b      	str	r3, [r7, #16]
		break;
 8002eea:	e032      	b.n	8002f52 <LCD_SetAddrWindow+0xce>
	case 2:
		t = x1;
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	60fb      	str	r3, [r7, #12]
		x1 = TFTWIDTH - 1 - x2;
 8002ef0:	887b      	ldrh	r3, [r7, #2]
 8002ef2:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002ef6:	80fb      	strh	r3, [r7, #6]
		x2 = TFTWIDTH - 1 - t;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002f00:	807b      	strh	r3, [r7, #2]
		t = y1;
 8002f02:	88bb      	ldrh	r3, [r7, #4]
 8002f04:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - y2;
 8002f06:	883b      	ldrh	r3, [r7, #0]
 8002f08:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	80bb      	strh	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002f18:	3301      	adds	r3, #1
 8002f1a:	803b      	strh	r3, [r7, #0]
		x = x2;
 8002f1c:	887b      	ldrh	r3, [r7, #2]
 8002f1e:	617b      	str	r3, [r7, #20]
		y = y2;
 8002f20:	883b      	ldrh	r3, [r7, #0]
 8002f22:	613b      	str	r3, [r7, #16]
		break;
 8002f24:	e015      	b.n	8002f52 <LCD_SetAddrWindow+0xce>
	case 3:
		t = x1;
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	60fb      	str	r3, [r7, #12]
		x1 = y1;
 8002f2a:	88bb      	ldrh	r3, [r7, #4]
 8002f2c:	80fb      	strh	r3, [r7, #6]
		y1 = TFTHEIGHT - 1 - x2;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002f34:	3301      	adds	r3, #1
 8002f36:	80bb      	strh	r3, [r7, #4]
		x2 = y2;
 8002f38:	883b      	ldrh	r3, [r7, #0]
 8002f3a:	807b      	strh	r3, [r7, #2]
		y2 = TFTHEIGHT - 1 - t;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002f44:	3301      	adds	r3, #1
 8002f46:	803b      	strh	r3, [r7, #0]
		x = x1;
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	617b      	str	r3, [r7, #20]
		y = y2;
 8002f4c:	883b      	ldrh	r3, [r7, #0]
 8002f4e:	613b      	str	r3, [r7, #16]
		break;
 8002f50:	bf00      	nop
	}
#if defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V)
	LCD_Write16Register16(ILI932X_HOR_START_AD, x1); // Set address window
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	4619      	mov	r1, r3
 8002f56:	2050      	movs	r0, #80	; 0x50
 8002f58:	f7ff fd88 	bl	8002a6c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_HOR_END_AD, x2);
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	2051      	movs	r0, #81	; 0x51
 8002f62:	f7ff fd83 	bl	8002a6c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_START_AD, y1);
 8002f66:	88bb      	ldrh	r3, [r7, #4]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	2052      	movs	r0, #82	; 0x52
 8002f6c:	f7ff fd7e 	bl	8002a6c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_END_AD, y2);
 8002f70:	883b      	ldrh	r3, [r7, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	2053      	movs	r0, #83	; 0x53
 8002f76:	f7ff fd79 	bl	8002a6c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x); // Set address counter to top left
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	4619      	mov	r1, r3
 8002f80:	2020      	movs	r0, #32
 8002f82:	f7ff fd73 	bl	8002a6c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	2021      	movs	r0, #33	; 0x21
 8002f8e:	f7ff fd6d 	bl	8002a6c <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
	}
#endif
	LCD_CS_IDLE();
 8002f92:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <LCD_SetAddrWindow+0x11c>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	619a      	str	r2, [r3, #24]
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd90      	pop	{r4, r7, pc}
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	200000bd 	.word	0x200000bd

08002fa8 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b28      	ldr	r3, [pc, #160]	; (800305c <LCD_SetRotation+0xb4>)
 8002fbc:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8002fbe:	4b27      	ldr	r3, [pc, #156]	; (800305c <LCD_SetRotation+0xb4>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d009      	beq.n	8002fda <LCD_SetRotation+0x32>
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d007      	beq.n	8002fda <LCD_SetRotation+0x32>
	default:
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <LCD_SetRotation+0xb8>)
 8002fcc:	22f0      	movs	r2, #240	; 0xf0
 8002fce:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 8002fd0:	4b24      	ldr	r3, [pc, #144]	; (8003064 <LCD_SetRotation+0xbc>)
 8002fd2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fd6:	801a      	strh	r2, [r3, #0]
		break;
 8002fd8:	e007      	b.n	8002fea <LCD_SetRotation+0x42>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8002fda:	4b21      	ldr	r3, [pc, #132]	; (8003060 <LCD_SetRotation+0xb8>)
 8002fdc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fe0:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <LCD_SetRotation+0xbc>)
 8002fe4:	22f0      	movs	r2, #240	; 0xf0
 8002fe6:	801a      	strh	r2, [r3, #0]
		break;
 8002fe8:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8002fea:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <LCD_SetRotation+0xc0>)
 8002fec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ff0:	619a      	str	r2, [r3, #24]
#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
    uint16_t t;
    switch(m_rotation) {
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	; (800305c <LCD_SetRotation+0xb4>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d00b      	beq.n	8003012 <LCD_SetRotation+0x6a>
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d00d      	beq.n	800301a <LCD_SetRotation+0x72>
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d003      	beq.n	800300a <LCD_SetRotation+0x62>
		default: t = 0x1030; break;
 8003002:	f241 0330 	movw	r3, #4144	; 0x1030
 8003006:	81fb      	strh	r3, [r7, #14]
 8003008:	e00b      	b.n	8003022 <LCD_SetRotation+0x7a>
		case 1: t = 0x1028; break;
 800300a:	f241 0328 	movw	r3, #4136	; 0x1028
 800300e:	81fb      	strh	r3, [r7, #14]
 8003010:	e007      	b.n	8003022 <LCD_SetRotation+0x7a>
		case 2: t = 0x1000; break;
 8003012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003016:	81fb      	strh	r3, [r7, #14]
 8003018:	e003      	b.n	8003022 <LCD_SetRotation+0x7a>
		case 3: t = 0x1018; break;
 800301a:	f241 0318 	movw	r3, #4120	; 0x1018
 800301e:	81fb      	strh	r3, [r7, #14]
 8003020:	bf00      	nop
    }
    LCD_Write16Register16(ILI932X_ENTRY_MOD, t); // MADCTL
 8003022:	89fb      	ldrh	r3, [r7, #14]
 8003024:	4619      	mov	r1, r3
 8003026:	2003      	movs	r0, #3
 8003028:	f7ff fd20 	bl	8002a6c <LCD_Write16Register16>
    // For 932X, init default full-screen address window:
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <LCD_SetRotation+0xb8>)
 800302e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <LCD_SetRotation+0xbc>)
 800303a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29b      	uxth	r3, r3
 8003044:	2100      	movs	r1, #0
 8003046:	2000      	movs	r0, #0
 8003048:	f7ff ff1c 	bl	8002e84 <LCD_SetAddrWindow>
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_CS_IDLE();
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <LCD_SetRotation+0xc0>)
 800304e:	2201      	movs	r2, #1
 8003050:	619a      	str	r2, [r3, #24]
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200000bd 	.word	0x200000bd
 8003060:	200000b0 	.word	0x200000b0
 8003064:	200000b2 	.word	0x200000b2
 8003068:	40020400 	.word	0x40020400

0800306c <LCD_DrawChar>:
 * \param bg		Background color
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b08b      	sub	sp, #44	; 0x2c
 8003070:	af00      	add	r7, sp, #0
 8003072:	4604      	mov	r4, r0
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4623      	mov	r3, r4
 800307c:	80fb      	strh	r3, [r7, #6]
 800307e:	4603      	mov	r3, r0
 8003080:	80bb      	strh	r3, [r7, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	70fb      	strb	r3, [r7, #3]
 8003086:	4613      	mov	r3, r2
 8003088:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
	uint8_t *pchar;
	uint32_t line = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 8003092:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003096:	4a65      	ldr	r2, [pc, #404]	; (800322c <LCD_DrawChar+0x1c0>)
 8003098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309c:	88db      	ldrh	r3, [r3, #6]
 800309e:	82fb      	strh	r3, [r7, #22]
	width = fonts[fontindex]->Width;
 80030a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80030a4:	4a61      	ldr	r2, [pc, #388]	; (800322c <LCD_DrawChar+0x1c0>)
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	889b      	ldrh	r3, [r3, #4]
 80030ac:	82bb      	strh	r3, [r7, #20]

	if ((x >= m_width) || // Clip right
 80030ae:	4b60      	ldr	r3, [pc, #384]	; (8003230 <LCD_DrawChar+0x1c4>)
 80030b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	f280 80b2 	bge.w	8003222 <LCD_DrawChar+0x1b6>
		(y >= m_height) || // Clip bottom
 80030be:	4b5d      	ldr	r3, [pc, #372]	; (8003234 <LCD_DrawChar+0x1c8>)
 80030c0:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 80030c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	f280 80aa 	bge.w	8003222 <LCD_DrawChar+0x1b6>
		((x + width - 1) < 0) || // Clip left
 80030ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030d2:	8abb      	ldrh	r3, [r7, #20]
 80030d4:	4413      	add	r3, r2
 80030d6:	3b01      	subs	r3, #1
		(y >= m_height) || // Clip bottom
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f2c0 80a2 	blt.w	8003222 <LCD_DrawChar+0x1b6>
		((y + height - 1) < 0))   // Clip top
 80030de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80030e2:	8afb      	ldrh	r3, [r7, #22]
 80030e4:	4413      	add	r3, r2
 80030e6:	3b01      	subs	r3, #1
		((x + width - 1) < 0) || // Clip left
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f2c0 809a 	blt.w	8003222 <LCD_DrawChar+0x1b6>
		return;

	bytes = (width + 7) / 8;
 80030ee:	8abb      	ldrh	r3, [r7, #20]
 80030f0:	3307      	adds	r3, #7
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	da00      	bge.n	80030f8 <LCD_DrawChar+0x8c>
 80030f6:	3307      	adds	r3, #7
 80030f8:	10db      	asrs	r3, r3, #3
 80030fa:	827b      	strh	r3, [r7, #18]
	if (c < ' ') c = ' ';
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	2b1f      	cmp	r3, #31
 8003100:	d802      	bhi.n	8003108 <LCD_DrawChar+0x9c>
 8003102:	2320      	movs	r3, #32
 8003104:	70fb      	strb	r3, [r7, #3]
 8003106:	e004      	b.n	8003112 <LCD_DrawChar+0xa6>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	2b7e      	cmp	r3, #126	; 0x7e
 800310c:	d901      	bls.n	8003112 <LCD_DrawChar+0xa6>
 800310e:	2320      	movs	r3, #32
 8003110:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	3b20      	subs	r3, #32
 8003116:	8afa      	ldrh	r2, [r7, #22]
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	8a7a      	ldrh	r2, [r7, #18]
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	61bb      	str	r3, [r7, #24]
	offset = 8 * bytes - width;
 8003124:	8a7b      	ldrh	r3, [r7, #18]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	b2da      	uxtb	r2, r3
 800312c:	8abb      	ldrh	r3, [r7, #20]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	747b      	strb	r3, [r7, #17]

	for (uint32_t i = 0; i < height; i++) {
 8003134:	2300      	movs	r3, #0
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	e06e      	b.n	8003218 <LCD_DrawChar+0x1ac>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 800313a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800313e:	4a3b      	ldr	r2, [pc, #236]	; (800322c <LCD_DrawChar+0x1c0>)
 8003140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	441a      	add	r2, r3
 800314a:	8abb      	ldrh	r3, [r7, #20]
 800314c:	3307      	adds	r3, #7
 800314e:	2b00      	cmp	r3, #0
 8003150:	da00      	bge.n	8003154 <LCD_DrawChar+0xe8>
 8003152:	3307      	adds	r3, #7
 8003154:	10db      	asrs	r3, r3, #3
 8003156:	4619      	mov	r1, r3
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	fb03 f301 	mul.w	r3, r3, r1
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
		switch (bytes) {
 8003162:	8a7b      	ldrh	r3, [r7, #18]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d002      	beq.n	800316e <LCD_DrawChar+0x102>
 8003168:	2b02      	cmp	r3, #2
 800316a:	d004      	beq.n	8003176 <LCD_DrawChar+0x10a>
 800316c:	e00c      	b.n	8003188 <LCD_DrawChar+0x11c>
		case 1:
			line = pchar[0];
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8003174:	e016      	b.n	80031a4 <LCD_DrawChar+0x138>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	3201      	adds	r2, #1
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8003186:	e00d      	b.n	80031a4 <LCD_DrawChar+0x138>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3301      	adds	r3, #1
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	4313      	orrs	r3, r2
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	3202      	adds	r2, #2
 800319c:	7812      	ldrb	r2, [r2, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80031a2:	bf00      	nop
		}
		for (uint32_t j = 0; j < width; j++) {
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	e029      	b.n	80031fe <LCD_DrawChar+0x192>
			if (line & (1 << (width - j + offset - 1))) {
 80031aa:	8aba      	ldrh	r2, [r7, #20]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	1ad2      	subs	r2, r2, r3
 80031b0:	7c7b      	ldrb	r3, [r7, #17]
 80031b2:	4413      	add	r3, r2
 80031b4:	3b01      	subs	r3, #1
 80031b6:	2201      	movs	r2, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <LCD_DrawChar+0x174>
				LCD_DrawPixel((x + j), y, color);
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	4413      	add	r3, r2
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	b21b      	sxth	r3, r3
 80031d2:	883a      	ldrh	r2, [r7, #0]
 80031d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fd05 	bl	8002be8 <LCD_DrawPixel>
 80031de:	e00b      	b.n	80031f8 <LCD_DrawChar+0x18c>
			} else {
				LCD_DrawPixel((x + j), y, bg);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	4413      	add	r3, r2
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	b21b      	sxth	r3, r3
 80031ec:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80031ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fcf8 	bl	8002be8 <LCD_DrawPixel>
		for (uint32_t j = 0; j < width; j++) {
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	3301      	adds	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	8abb      	ldrh	r3, [r7, #20]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	429a      	cmp	r2, r3
 8003204:	d3d1      	bcc.n	80031aa <LCD_DrawChar+0x13e>
			}
		}
		y++;
 8003206:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800320a:	b29b      	uxth	r3, r3
 800320c:	3301      	adds	r3, #1
 800320e:	b29b      	uxth	r3, r3
 8003210:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	3301      	adds	r3, #1
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	8afb      	ldrh	r3, [r7, #22]
 800321a:	6a3a      	ldr	r2, [r7, #32]
 800321c:	429a      	cmp	r2, r3
 800321e:	d38c      	bcc.n	800313a <LCD_DrawChar+0xce>
 8003220:	e000      	b.n	8003224 <LCD_DrawChar+0x1b8>
		return;
 8003222:	bf00      	nop
	}
}
 8003224:	372c      	adds	r7, #44	; 0x2c
 8003226:	46bd      	mov	sp, r7
 8003228:	bd90      	pop	{r4, r7, pc}
 800322a:	bf00      	nop
 800322c:	20000010 	.word	0x20000010
 8003230:	200000b0 	.word	0x200000b0
 8003234:	200000b2 	.word	0x200000b2

08003238 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8003238:	b40f      	push	{r0, r1, r2, r3}
 800323a:	b5b0      	push	{r4, r5, r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8003240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003244:	60bb      	str	r3, [r7, #8]
	vsprintf(buf, fmt, lst);
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	6a39      	ldr	r1, [r7, #32]
 800324a:	4850      	ldr	r0, [pc, #320]	; (800338c <LCD_Printf+0x154>)
 800324c:	f000 fbd6 	bl	80039fc <vsiprintf>
	va_end(lst);
	
	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 8003250:	4b4f      	ldr	r3, [pc, #316]	; (8003390 <LCD_Printf+0x158>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b4f      	ldr	r3, [pc, #316]	; (8003394 <LCD_Printf+0x15c>)
 8003258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325c:	88db      	ldrh	r3, [r3, #6]
 800325e:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 8003260:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <LCD_Printf+0x158>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <LCD_Printf+0x15c>)
 8003268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326c:	889b      	ldrh	r3, [r3, #4]
 800326e:	80bb      	strh	r3, [r7, #4]

	p = buf;
 8003270:	4b46      	ldr	r3, [pc, #280]	; (800338c <LCD_Printf+0x154>)
 8003272:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8003274:	e07d      	b.n	8003372 <LCD_Printf+0x13a>
		if (*p == '\n') {
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b0a      	cmp	r3, #10
 800327c:	d10e      	bne.n	800329c <LCD_Printf+0x64>
			m_cursor_y += height;
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	b29a      	uxth	r2, r3
 8003282:	4b45      	ldr	r3, [pc, #276]	; (8003398 <LCD_Printf+0x160>)
 8003284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003288:	b29b      	uxth	r3, r3
 800328a:	4413      	add	r3, r2
 800328c:	b29b      	uxth	r3, r3
 800328e:	b21a      	sxth	r2, r3
 8003290:	4b41      	ldr	r3, [pc, #260]	; (8003398 <LCD_Printf+0x160>)
 8003292:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8003294:	4b41      	ldr	r3, [pc, #260]	; (800339c <LCD_Printf+0x164>)
 8003296:	2200      	movs	r2, #0
 8003298:	801a      	strh	r2, [r3, #0]
 800329a:	e067      	b.n	800336c <LCD_Printf+0x134>
		} else if (*p == '\r') {
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b0d      	cmp	r3, #13
 80032a2:	d103      	bne.n	80032ac <LCD_Printf+0x74>
			m_cursor_x = 0;
 80032a4:	4b3d      	ldr	r3, [pc, #244]	; (800339c <LCD_Printf+0x164>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	801a      	strh	r2, [r3, #0]
 80032aa:	e05f      	b.n	800336c <LCD_Printf+0x134>
		} else if (*p == '\t') {
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b09      	cmp	r3, #9
 80032b2:	d10d      	bne.n	80032d0 <LCD_Printf+0x98>
			m_cursor_x += width * 4;
 80032b4:	88bb      	ldrh	r3, [r7, #4]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	4b37      	ldr	r3, [pc, #220]	; (800339c <LCD_Printf+0x164>)
 80032be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	b21a      	sxth	r2, r3
 80032ca:	4b34      	ldr	r3, [pc, #208]	; (800339c <LCD_Printf+0x164>)
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	e04d      	b.n	800336c <LCD_Printf+0x134>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
				LCD_Flood(m_textbgcolor, (long) m_width * height);
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 80032d0:	4b31      	ldr	r3, [pc, #196]	; (8003398 <LCD_Printf+0x160>)
 80032d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <LCD_Printf+0x168>)
 80032da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032de:	4619      	mov	r1, r3
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	1acb      	subs	r3, r1, r3
 80032e6:	429a      	cmp	r2, r3
 80032e8:	db02      	blt.n	80032f0 <LCD_Printf+0xb8>
				m_cursor_y = 0;
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <LCD_Printf+0x160>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
#endif
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 80032f0:	4b2a      	ldr	r3, [pc, #168]	; (800339c <LCD_Printf+0x164>)
 80032f2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80032f6:	4b28      	ldr	r3, [pc, #160]	; (8003398 <LCD_Printf+0x160>)
 80032f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	781c      	ldrb	r4, [r3, #0]
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <LCD_Printf+0x16c>)
 8003302:	881d      	ldrh	r5, [r3, #0]
 8003304:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <LCD_Printf+0x170>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	4a21      	ldr	r2, [pc, #132]	; (8003390 <LCD_Printf+0x158>)
 800330a:	7812      	ldrb	r2, [r2, #0]
 800330c:	9201      	str	r2, [sp, #4]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	462b      	mov	r3, r5
 8003312:	4622      	mov	r2, r4
 8003314:	f7ff feaa 	bl	800306c <LCD_DrawChar>
			m_cursor_x += width;
 8003318:	88bb      	ldrh	r3, [r7, #4]
 800331a:	b29a      	uxth	r2, r3
 800331c:	4b1f      	ldr	r3, [pc, #124]	; (800339c <LCD_Printf+0x164>)
 800331e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003322:	b29b      	uxth	r3, r3
 8003324:	4413      	add	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	b21a      	sxth	r2, r3
 800332a:	4b1c      	ldr	r3, [pc, #112]	; (800339c <LCD_Printf+0x164>)
 800332c:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <LCD_Printf+0x174>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01a      	beq.n	800336c <LCD_Printf+0x134>
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <LCD_Printf+0x164>)
 8003338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800333c:	461a      	mov	r2, r3
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <LCD_Printf+0x178>)
 8003340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003344:	4619      	mov	r1, r3
 8003346:	88bb      	ldrh	r3, [r7, #4]
 8003348:	b29b      	uxth	r3, r3
 800334a:	1acb      	subs	r3, r1, r3
 800334c:	429a      	cmp	r2, r3
 800334e:	dd0d      	ble.n	800336c <LCD_Printf+0x134>
				m_cursor_y += height;
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	b29a      	uxth	r2, r3
 8003354:	4b10      	ldr	r3, [pc, #64]	; (8003398 <LCD_Printf+0x160>)
 8003356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800335a:	b29b      	uxth	r3, r3
 800335c:	4413      	add	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	b21a      	sxth	r2, r3
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <LCD_Printf+0x160>)
 8003364:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <LCD_Printf+0x164>)
 8003368:	2200      	movs	r2, #0
 800336a:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3301      	adds	r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f47f af7d 	bne.w	8003276 <LCD_Printf+0x3e>
	}
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003386:	b004      	add	sp, #16
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	200000c0 	.word	0x200000c0
 8003390:	200000bc 	.word	0x200000bc
 8003394:	20000010 	.word	0x20000010
 8003398:	200000b6 	.word	0x200000b6
 800339c:	200000b4 	.word	0x200000b4
 80033a0:	200000b2 	.word	0x200000b2
 80033a4:	200000b8 	.word	0x200000b8
 80033a8:	200000ba 	.word	0x200000ba
 80033ac:	200000be 	.word	0x200000be
 80033b0:	200000b0 	.word	0x200000b0

080033b4 <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 80033be:	2201      	movs	r2, #1
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d305      	bcc.n	80033d2 <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <LCD_SetTextSize+0x30>)
 80033ce:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 80033d0:	e002      	b.n	80033d8 <LCD_SetTextSize+0x24>
		m_font = s;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <LCD_SetTextSize+0x30>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	7013      	strb	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	200000bc 	.word	0x200000bc

080033e8 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	460a      	mov	r2, r1
 80033f2:	80fb      	strh	r3, [r7, #6]
 80033f4:	4613      	mov	r3, r2
 80033f6:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 80033f8:	4a05      	ldr	r2, [pc, #20]	; (8003410 <LCD_SetTextColor+0x28>)
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 80033fe:	4a05      	ldr	r2, [pc, #20]	; (8003414 <LCD_SetTextColor+0x2c>)
 8003400:	88bb      	ldrh	r3, [r7, #4]
 8003402:	8013      	strh	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	200000b8 	.word	0x200000b8
 8003414:	200000ba 	.word	0x200000ba

08003418 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341e:	f107 0314 	add.w	r3, r7, #20
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	60da      	str	r2, [r3, #12]
 800342c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	4b35      	ldr	r3, [pc, #212]	; (8003508 <MX_GPIO_Init+0xf0>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a34      	ldr	r2, [pc, #208]	; (8003508 <MX_GPIO_Init+0xf0>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b32      	ldr	r3, [pc, #200]	; (8003508 <MX_GPIO_Init+0xf0>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <MX_GPIO_Init+0xf0>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a2d      	ldr	r2, [pc, #180]	; (8003508 <MX_GPIO_Init+0xf0>)
 8003454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <MX_GPIO_Init+0xf0>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <MX_GPIO_Init+0xf0>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a26      	ldr	r2, [pc, #152]	; (8003508 <MX_GPIO_Init+0xf0>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <MX_GPIO_Init+0xf0>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <MX_GPIO_Init+0xf0>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <MX_GPIO_Init+0xf0>)
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <MX_GPIO_Init+0xf0>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800349e:	2200      	movs	r2, #0
 80034a0:	2120      	movs	r1, #32
 80034a2:	481a      	ldr	r0, [pc, #104]	; (800350c <MX_GPIO_Init+0xf4>)
 80034a4:	f7fd fb98 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80034a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <MX_GPIO_Init+0xf8>)
 80034b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	4815      	ldr	r0, [pc, #84]	; (8003514 <MX_GPIO_Init+0xfc>)
 80034be:	f7fd f9f9 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034c2:	230c      	movs	r3, #12
 80034c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ce:	2303      	movs	r3, #3
 80034d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034d2:	2307      	movs	r3, #7
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	480b      	ldr	r0, [pc, #44]	; (800350c <MX_GPIO_Init+0xf4>)
 80034de:	f7fd f9e9 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80034e2:	2320      	movs	r3, #32
 80034e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	4804      	ldr	r0, [pc, #16]	; (800350c <MX_GPIO_Init+0xf4>)
 80034fa:	f7fd f9db 	bl	80008b4 <HAL_GPIO_Init>

}
 80034fe:	bf00      	nop
 8003500:	3728      	adds	r7, #40	; 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	40020000 	.word	0x40020000
 8003510:	10210000 	.word	0x10210000
 8003514:	40020800 	.word	0x40020800

08003518 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800351c:	4b12      	ldr	r3, [pc, #72]	; (8003568 <MX_I2C1_Init+0x50>)
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <MX_I2C1_Init+0x54>)
 8003520:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <MX_I2C1_Init+0x50>)
 8003524:	4a12      	ldr	r2, [pc, #72]	; (8003570 <MX_I2C1_Init+0x58>)
 8003526:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <MX_I2C1_Init+0x50>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <MX_I2C1_Init+0x50>)
 8003530:	2200      	movs	r2, #0
 8003532:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <MX_I2C1_Init+0x50>)
 8003536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800353a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <MX_I2C1_Init+0x50>)
 800353e:	2200      	movs	r2, #0
 8003540:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <MX_I2C1_Init+0x50>)
 8003544:	2200      	movs	r2, #0
 8003546:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003548:	4b07      	ldr	r3, [pc, #28]	; (8003568 <MX_I2C1_Init+0x50>)
 800354a:	2200      	movs	r2, #0
 800354c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <MX_I2C1_Init+0x50>)
 8003550:	2200      	movs	r2, #0
 8003552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003554:	4804      	ldr	r0, [pc, #16]	; (8003568 <MX_I2C1_Init+0x50>)
 8003556:	f7fd fb59 	bl	8000c0c <HAL_I2C_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003560:	f000 f91a 	bl	8003798 <Error_Handler>
  }

}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200001d0 	.word	0x200001d0
 800356c:	40005400 	.word	0x40005400
 8003570:	000186a0 	.word	0x000186a0

08003574 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <HAL_I2C_MspInit+0x84>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d12c      	bne.n	80035f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_I2C_MspInit+0x88>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4a17      	ldr	r2, [pc, #92]	; (80035fc <HAL_I2C_MspInit+0x88>)
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	6313      	str	r3, [r2, #48]	; 0x30
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_I2C_MspInit+0x88>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035b8:	2312      	movs	r3, #18
 80035ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035bc:	2301      	movs	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c0:	2303      	movs	r3, #3
 80035c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035c4:	2304      	movs	r3, #4
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	4619      	mov	r1, r3
 80035ce:	480c      	ldr	r0, [pc, #48]	; (8003600 <HAL_I2C_MspInit+0x8c>)
 80035d0:	f7fd f970 	bl	80008b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_I2C_MspInit+0x88>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	4a07      	ldr	r2, [pc, #28]	; (80035fc <HAL_I2C_MspInit+0x88>)
 80035de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035e2:	6413      	str	r3, [r2, #64]	; 0x40
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_I2C_MspInit+0x88>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80035f0:	bf00      	nop
 80035f2:	3728      	adds	r7, #40	; 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40005400 	.word	0x40005400
 80035fc:	40023800 	.word	0x40023800
 8003600:	40020400 	.word	0x40020400

08003604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800360a:	f7fc ffd9 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800360e:	f000 f851 	bl	80036b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003612:	f7ff ff01 	bl	8003418 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003616:	f7ff ff7f 	bl	8003518 <MX_I2C1_Init>
  LCD_Init();
 800361a:	f7ff fa55 	bl	8002ac8 <LCD_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //writting_config
  if (HAL_I2C_Mem_Write(&hi2c1, EEPROM_DEVICE_ADDRESS , 0x00 , I2C_MEMADD_SIZE_16BIT, str , strlen((char *) str) ,100 )== HAL_OK)
 800361e:	481e      	ldr	r0, [pc, #120]	; (8003698 <main+0x94>)
 8003620:	f7fc fdf6 	bl	8000210 <strlen>
 8003624:	4603      	mov	r3, r0
 8003626:	b29b      	uxth	r3, r3
 8003628:	2264      	movs	r2, #100	; 0x64
 800362a:	9202      	str	r2, [sp, #8]
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <main+0x94>)
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	2310      	movs	r3, #16
 8003634:	2200      	movs	r2, #0
 8003636:	21a0      	movs	r1, #160	; 0xa0
 8003638:	4818      	ldr	r0, [pc, #96]	; (800369c <main+0x98>)
 800363a:	f7fd fc1f 	bl	8000e7c <HAL_I2C_Mem_Write>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <main+0x48>
		{
			  LCD_Printf(" written \n");
 8003644:	4816      	ldr	r0, [pc, #88]	; (80036a0 <main+0x9c>)
 8003646:	f7ff fdf7 	bl	8003238 <LCD_Printf>
 800364a:	e002      	b.n	8003652 <main+0x4e>
		  }
  else{
	  LCD_Printf("error in writting");
 800364c:	4815      	ldr	r0, [pc, #84]	; (80036a4 <main+0xa0>)
 800364e:	f7ff fdf3 	bl	8003238 <LCD_Printf>
  }
  //device_verfyinhg
  /* Wait till device ready */
  		while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_DEVICE_ADDRESS, 10, 100) != HAL_OK);
 8003652:	bf00      	nop
 8003654:	2364      	movs	r3, #100	; 0x64
 8003656:	220a      	movs	r2, #10
 8003658:	21a0      	movs	r1, #160	; 0xa0
 800365a:	4810      	ldr	r0, [pc, #64]	; (800369c <main+0x98>)
 800365c:	f7fd ff2e 	bl	80014bc <HAL_I2C_IsDeviceReady>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f6      	bne.n	8003654 <main+0x50>
  		LCD_Printf("ok\n");
 8003666:	4810      	ldr	r0, [pc, #64]	; (80036a8 <main+0xa4>)
 8003668:	f7ff fde6 	bl	8003238 <LCD_Printf>
  //reading_verification
  if (HAL_I2C_Mem_Read(&hi2c1, EEPROM_DEVICE_ADDRESS ,0x00 , I2C_MEMADD_SIZE_16BIT, buf, sizeof(buf) ,100 )== HAL_OK){
 800366c:	2364      	movs	r3, #100	; 0x64
 800366e:	9302      	str	r3, [sp, #8]
 8003670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <main+0xa8>)
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2310      	movs	r3, #16
 800367c:	2200      	movs	r2, #0
 800367e:	21a0      	movs	r1, #160	; 0xa0
 8003680:	4806      	ldr	r0, [pc, #24]	; (800369c <main+0x98>)
 8003682:	f7fd fcf5 	bl	8001070 <HAL_I2C_Mem_Read>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d103      	bne.n	8003694 <main+0x90>

        	   LCD_Printf(" it has been read \n%s\n", buf );
 800368c:	4907      	ldr	r1, [pc, #28]	; (80036ac <main+0xa8>)
 800368e:	4808      	ldr	r0, [pc, #32]	; (80036b0 <main+0xac>)
 8003690:	f7ff fdd2 	bl	8003238 <LCD_Printf>
           }

  while (1)
 8003694:	e7fe      	b.n	8003694 <main+0x90>
 8003696:	bf00      	nop
 8003698:	20000014 	.word	0x20000014
 800369c:	200001d0 	.word	0x200001d0
 80036a0:	080041f4 	.word	0x080041f4
 80036a4:	08004200 	.word	0x08004200
 80036a8:	08004214 	.word	0x08004214
 80036ac:	20000228 	.word	0x20000228
 80036b0:	08004218 	.word	0x08004218

080036b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b094      	sub	sp, #80	; 0x50
 80036b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ba:	f107 031c 	add.w	r3, r7, #28
 80036be:	2234      	movs	r2, #52	; 0x34
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f97c 	bl	80039c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036c8:	f107 0308 	add.w	r3, r7, #8
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036d8:	2300      	movs	r3, #0
 80036da:	607b      	str	r3, [r7, #4]
 80036dc:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <SystemClock_Config+0xdc>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	4a2b      	ldr	r2, [pc, #172]	; (8003790 <SystemClock_Config+0xdc>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6413      	str	r3, [r2, #64]	; 0x40
 80036e8:	4b29      	ldr	r3, [pc, #164]	; (8003790 <SystemClock_Config+0xdc>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f4:	2300      	movs	r3, #0
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4b26      	ldr	r3, [pc, #152]	; (8003794 <SystemClock_Config+0xe0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a25      	ldr	r2, [pc, #148]	; (8003794 <SystemClock_Config+0xe0>)
 80036fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b23      	ldr	r3, [pc, #140]	; (8003794 <SystemClock_Config+0xe0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003710:	2302      	movs	r3, #2
 8003712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003714:	2301      	movs	r3, #1
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003718:	2310      	movs	r3, #16
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800371c:	2302      	movs	r3, #2
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003720:	2300      	movs	r3, #0
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003724:	2308      	movs	r3, #8
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003728:	23b4      	movs	r3, #180	; 0xb4
 800372a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800372c:	2302      	movs	r3, #2
 800372e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003730:	2302      	movs	r3, #2
 8003732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003734:	2302      	movs	r3, #2
 8003736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003738:	f107 031c 	add.w	r3, r7, #28
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fe39 	bl	80023b4 <HAL_RCC_OscConfig>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003748:	f000 f826 	bl	8003798 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800374c:	f7fe fb3c 	bl	8001dc8 <HAL_PWREx_EnableOverDrive>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003756:	f000 f81f 	bl	8003798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800375a:	230f      	movs	r3, #15
 800375c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800375e:	2302      	movs	r3, #2
 8003760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800376a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800376c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003770:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	2105      	movs	r1, #5
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe fb75 	bl	8001e68 <HAL_RCC_ClockConfig>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003784:	f000 f808 	bl	8003798 <Error_Handler>
  }
}
 8003788:	bf00      	nop
 800378a:	3750      	adds	r7, #80	; 0x50
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40023800 	.word	0x40023800
 8003794:	40007000 	.word	0x40007000

08003798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_MspInit+0x4c>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <HAL_MspInit+0x4c>)
 80037b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037bc:	6453      	str	r3, [r2, #68]	; 0x44
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_MspInit+0x4c>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_MspInit+0x4c>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <HAL_MspInit+0x4c>)
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_MspInit+0x4c>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80037e6:	2007      	movs	r0, #7
 80037e8:	f7fd f830 	bl	800084c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800

080037f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380a:	e7fe      	b.n	800380a <HardFault_Handler+0x4>

0800380c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <MemManage_Handler+0x4>

08003812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003816:	e7fe      	b.n	8003816 <BusFault_Handler+0x4>

08003818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800381c:	e7fe      	b.n	800381c <UsageFault_Handler+0x4>

0800381e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800384c:	f7fc ff0a 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}

08003854 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <_sbrk+0x50>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <_sbrk+0x16>
		heap_end = &end;
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <_sbrk+0x50>)
 8003866:	4a10      	ldr	r2, [pc, #64]	; (80038a8 <_sbrk+0x54>)
 8003868:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <_sbrk+0x50>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <_sbrk+0x50>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4413      	add	r3, r2
 8003878:	466a      	mov	r2, sp
 800387a:	4293      	cmp	r3, r2
 800387c:	d907      	bls.n	800388e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800387e:	f000 f875 	bl	800396c <__errno>
 8003882:	4602      	mov	r2, r0
 8003884:	230c      	movs	r3, #12
 8003886:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	e006      	b.n	800389c <_sbrk+0x48>
	}

	heap_end += incr;
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <_sbrk+0x50>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <_sbrk+0x50>)
 8003898:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800389a:	68fb      	ldr	r3, [r7, #12]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	200001c0 	.word	0x200001c0
 80038a8:	20000330 	.word	0x20000330

080038ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <SystemInit+0x60>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	4a15      	ldr	r2, [pc, #84]	; (800390c <SystemInit+0x60>)
 80038b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <SystemInit+0x64>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a12      	ldr	r2, [pc, #72]	; (8003910 <SystemInit+0x64>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038cc:	4b10      	ldr	r3, [pc, #64]	; (8003910 <SystemInit+0x64>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <SystemInit+0x64>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <SystemInit+0x64>)
 80038d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80038dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <SystemInit+0x64>)
 80038e4:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <SystemInit+0x68>)
 80038e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <SystemInit+0x64>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a08      	ldr	r2, [pc, #32]	; (8003910 <SystemInit+0x64>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <SystemInit+0x64>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <SystemInit+0x60>)
 80038fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003900:	609a      	str	r2, [r3, #8]
#endif
}
 8003902:	bf00      	nop
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00
 8003910:	40023800 	.word	0x40023800
 8003914:	24003010 	.word	0x24003010

08003918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003950 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800391c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800391e:	e003      	b.n	8003928 <LoopCopyDataInit>

08003920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003926:	3104      	adds	r1, #4

08003928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003928:	480b      	ldr	r0, [pc, #44]	; (8003958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800392c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800392e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003930:	d3f6      	bcc.n	8003920 <CopyDataInit>
  ldr  r2, =_sbss
 8003932:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003934:	e002      	b.n	800393c <LoopFillZerobss>

08003936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003938:	f842 3b04 	str.w	r3, [r2], #4

0800393c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800393e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003940:	d3f9      	bcc.n	8003936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003942:	f7ff ffb3 	bl	80038ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003946:	f000 f817 	bl	8003978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800394a:	f7ff fe5b 	bl	8003604 <main>
  bx  lr    
 800394e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003950:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003954:	080047cc 	.word	0x080047cc
  ldr  r0, =_sdata
 8003958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800395c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8003960:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8003964:	2000032c 	.word	0x2000032c

08003968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003968:	e7fe      	b.n	8003968 <ADC_IRQHandler>
	...

0800396c <__errno>:
 800396c:	4b01      	ldr	r3, [pc, #4]	; (8003974 <__errno+0x8>)
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000030 	.word	0x20000030

08003978 <__libc_init_array>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	4e0d      	ldr	r6, [pc, #52]	; (80039b0 <__libc_init_array+0x38>)
 800397c:	4c0d      	ldr	r4, [pc, #52]	; (80039b4 <__libc_init_array+0x3c>)
 800397e:	1ba4      	subs	r4, r4, r6
 8003980:	10a4      	asrs	r4, r4, #2
 8003982:	2500      	movs	r5, #0
 8003984:	42a5      	cmp	r5, r4
 8003986:	d109      	bne.n	800399c <__libc_init_array+0x24>
 8003988:	4e0b      	ldr	r6, [pc, #44]	; (80039b8 <__libc_init_array+0x40>)
 800398a:	4c0c      	ldr	r4, [pc, #48]	; (80039bc <__libc_init_array+0x44>)
 800398c:	f000 fc26 	bl	80041dc <_init>
 8003990:	1ba4      	subs	r4, r4, r6
 8003992:	10a4      	asrs	r4, r4, #2
 8003994:	2500      	movs	r5, #0
 8003996:	42a5      	cmp	r5, r4
 8003998:	d105      	bne.n	80039a6 <__libc_init_array+0x2e>
 800399a:	bd70      	pop	{r4, r5, r6, pc}
 800399c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039a0:	4798      	blx	r3
 80039a2:	3501      	adds	r5, #1
 80039a4:	e7ee      	b.n	8003984 <__libc_init_array+0xc>
 80039a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039aa:	4798      	blx	r3
 80039ac:	3501      	adds	r5, #1
 80039ae:	e7f2      	b.n	8003996 <__libc_init_array+0x1e>
 80039b0:	080047c4 	.word	0x080047c4
 80039b4:	080047c4 	.word	0x080047c4
 80039b8:	080047c4 	.word	0x080047c4
 80039bc:	080047c8 	.word	0x080047c8

080039c0 <memset>:
 80039c0:	4402      	add	r2, r0
 80039c2:	4603      	mov	r3, r0
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d100      	bne.n	80039ca <memset+0xa>
 80039c8:	4770      	bx	lr
 80039ca:	f803 1b01 	strb.w	r1, [r3], #1
 80039ce:	e7f9      	b.n	80039c4 <memset+0x4>

080039d0 <_vsiprintf_r>:
 80039d0:	b500      	push	{lr}
 80039d2:	b09b      	sub	sp, #108	; 0x6c
 80039d4:	9100      	str	r1, [sp, #0]
 80039d6:	9104      	str	r1, [sp, #16]
 80039d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039dc:	9105      	str	r1, [sp, #20]
 80039de:	9102      	str	r1, [sp, #8]
 80039e0:	4905      	ldr	r1, [pc, #20]	; (80039f8 <_vsiprintf_r+0x28>)
 80039e2:	9103      	str	r1, [sp, #12]
 80039e4:	4669      	mov	r1, sp
 80039e6:	f000 f86d 	bl	8003ac4 <_svfiprintf_r>
 80039ea:	9b00      	ldr	r3, [sp, #0]
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	b01b      	add	sp, #108	; 0x6c
 80039f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80039f6:	bf00      	nop
 80039f8:	ffff0208 	.word	0xffff0208

080039fc <vsiprintf>:
 80039fc:	4613      	mov	r3, r2
 80039fe:	460a      	mov	r2, r1
 8003a00:	4601      	mov	r1, r0
 8003a02:	4802      	ldr	r0, [pc, #8]	; (8003a0c <vsiprintf+0x10>)
 8003a04:	6800      	ldr	r0, [r0, #0]
 8003a06:	f7ff bfe3 	b.w	80039d0 <_vsiprintf_r>
 8003a0a:	bf00      	nop
 8003a0c:	20000030 	.word	0x20000030

08003a10 <__ssputs_r>:
 8003a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a14:	688e      	ldr	r6, [r1, #8]
 8003a16:	429e      	cmp	r6, r3
 8003a18:	4682      	mov	sl, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	4690      	mov	r8, r2
 8003a1e:	4699      	mov	r9, r3
 8003a20:	d837      	bhi.n	8003a92 <__ssputs_r+0x82>
 8003a22:	898a      	ldrh	r2, [r1, #12]
 8003a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a28:	d031      	beq.n	8003a8e <__ssputs_r+0x7e>
 8003a2a:	6825      	ldr	r5, [r4, #0]
 8003a2c:	6909      	ldr	r1, [r1, #16]
 8003a2e:	1a6f      	subs	r7, r5, r1
 8003a30:	6965      	ldr	r5, [r4, #20]
 8003a32:	2302      	movs	r3, #2
 8003a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a38:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a3c:	f109 0301 	add.w	r3, r9, #1
 8003a40:	443b      	add	r3, r7
 8003a42:	429d      	cmp	r5, r3
 8003a44:	bf38      	it	cc
 8003a46:	461d      	movcc	r5, r3
 8003a48:	0553      	lsls	r3, r2, #21
 8003a4a:	d530      	bpl.n	8003aae <__ssputs_r+0x9e>
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	f000 fb2b 	bl	80040a8 <_malloc_r>
 8003a52:	4606      	mov	r6, r0
 8003a54:	b950      	cbnz	r0, 8003a6c <__ssputs_r+0x5c>
 8003a56:	230c      	movs	r3, #12
 8003a58:	f8ca 3000 	str.w	r3, [sl]
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6c:	463a      	mov	r2, r7
 8003a6e:	6921      	ldr	r1, [r4, #16]
 8003a70:	f000 faa8 	bl	8003fc4 <memcpy>
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7e:	81a3      	strh	r3, [r4, #12]
 8003a80:	6126      	str	r6, [r4, #16]
 8003a82:	6165      	str	r5, [r4, #20]
 8003a84:	443e      	add	r6, r7
 8003a86:	1bed      	subs	r5, r5, r7
 8003a88:	6026      	str	r6, [r4, #0]
 8003a8a:	60a5      	str	r5, [r4, #8]
 8003a8c:	464e      	mov	r6, r9
 8003a8e:	454e      	cmp	r6, r9
 8003a90:	d900      	bls.n	8003a94 <__ssputs_r+0x84>
 8003a92:	464e      	mov	r6, r9
 8003a94:	4632      	mov	r2, r6
 8003a96:	4641      	mov	r1, r8
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	f000 fa9e 	bl	8003fda <memmove>
 8003a9e:	68a3      	ldr	r3, [r4, #8]
 8003aa0:	1b9b      	subs	r3, r3, r6
 8003aa2:	60a3      	str	r3, [r4, #8]
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	441e      	add	r6, r3
 8003aa8:	6026      	str	r6, [r4, #0]
 8003aaa:	2000      	movs	r0, #0
 8003aac:	e7dc      	b.n	8003a68 <__ssputs_r+0x58>
 8003aae:	462a      	mov	r2, r5
 8003ab0:	f000 fb54 	bl	800415c <_realloc_r>
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d1e2      	bne.n	8003a80 <__ssputs_r+0x70>
 8003aba:	6921      	ldr	r1, [r4, #16]
 8003abc:	4650      	mov	r0, sl
 8003abe:	f000 faa5 	bl	800400c <_free_r>
 8003ac2:	e7c8      	b.n	8003a56 <__ssputs_r+0x46>

08003ac4 <_svfiprintf_r>:
 8003ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac8:	461d      	mov	r5, r3
 8003aca:	898b      	ldrh	r3, [r1, #12]
 8003acc:	061f      	lsls	r7, r3, #24
 8003ace:	b09d      	sub	sp, #116	; 0x74
 8003ad0:	4680      	mov	r8, r0
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	4616      	mov	r6, r2
 8003ad6:	d50f      	bpl.n	8003af8 <_svfiprintf_r+0x34>
 8003ad8:	690b      	ldr	r3, [r1, #16]
 8003ada:	b96b      	cbnz	r3, 8003af8 <_svfiprintf_r+0x34>
 8003adc:	2140      	movs	r1, #64	; 0x40
 8003ade:	f000 fae3 	bl	80040a8 <_malloc_r>
 8003ae2:	6020      	str	r0, [r4, #0]
 8003ae4:	6120      	str	r0, [r4, #16]
 8003ae6:	b928      	cbnz	r0, 8003af4 <_svfiprintf_r+0x30>
 8003ae8:	230c      	movs	r3, #12
 8003aea:	f8c8 3000 	str.w	r3, [r8]
 8003aee:	f04f 30ff 	mov.w	r0, #4294967295
 8003af2:	e0c8      	b.n	8003c86 <_svfiprintf_r+0x1c2>
 8003af4:	2340      	movs	r3, #64	; 0x40
 8003af6:	6163      	str	r3, [r4, #20]
 8003af8:	2300      	movs	r3, #0
 8003afa:	9309      	str	r3, [sp, #36]	; 0x24
 8003afc:	2320      	movs	r3, #32
 8003afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b02:	2330      	movs	r3, #48	; 0x30
 8003b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b08:	9503      	str	r5, [sp, #12]
 8003b0a:	f04f 0b01 	mov.w	fp, #1
 8003b0e:	4637      	mov	r7, r6
 8003b10:	463d      	mov	r5, r7
 8003b12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b16:	b10b      	cbz	r3, 8003b1c <_svfiprintf_r+0x58>
 8003b18:	2b25      	cmp	r3, #37	; 0x25
 8003b1a:	d13e      	bne.n	8003b9a <_svfiprintf_r+0xd6>
 8003b1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b20:	d00b      	beq.n	8003b3a <_svfiprintf_r+0x76>
 8003b22:	4653      	mov	r3, sl
 8003b24:	4632      	mov	r2, r6
 8003b26:	4621      	mov	r1, r4
 8003b28:	4640      	mov	r0, r8
 8003b2a:	f7ff ff71 	bl	8003a10 <__ssputs_r>
 8003b2e:	3001      	adds	r0, #1
 8003b30:	f000 80a4 	beq.w	8003c7c <_svfiprintf_r+0x1b8>
 8003b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b36:	4453      	add	r3, sl
 8003b38:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3a:	783b      	ldrb	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 809d 	beq.w	8003c7c <_svfiprintf_r+0x1b8>
 8003b42:	2300      	movs	r3, #0
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295
 8003b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b4c:	9304      	str	r3, [sp, #16]
 8003b4e:	9307      	str	r3, [sp, #28]
 8003b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b54:	931a      	str	r3, [sp, #104]	; 0x68
 8003b56:	462f      	mov	r7, r5
 8003b58:	2205      	movs	r2, #5
 8003b5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003b5e:	4850      	ldr	r0, [pc, #320]	; (8003ca0 <_svfiprintf_r+0x1dc>)
 8003b60:	f7fc fb5e 	bl	8000220 <memchr>
 8003b64:	9b04      	ldr	r3, [sp, #16]
 8003b66:	b9d0      	cbnz	r0, 8003b9e <_svfiprintf_r+0xda>
 8003b68:	06d9      	lsls	r1, r3, #27
 8003b6a:	bf44      	itt	mi
 8003b6c:	2220      	movmi	r2, #32
 8003b6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b72:	071a      	lsls	r2, r3, #28
 8003b74:	bf44      	itt	mi
 8003b76:	222b      	movmi	r2, #43	; 0x2b
 8003b78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b7c:	782a      	ldrb	r2, [r5, #0]
 8003b7e:	2a2a      	cmp	r2, #42	; 0x2a
 8003b80:	d015      	beq.n	8003bae <_svfiprintf_r+0xea>
 8003b82:	9a07      	ldr	r2, [sp, #28]
 8003b84:	462f      	mov	r7, r5
 8003b86:	2000      	movs	r0, #0
 8003b88:	250a      	movs	r5, #10
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b90:	3b30      	subs	r3, #48	; 0x30
 8003b92:	2b09      	cmp	r3, #9
 8003b94:	d94d      	bls.n	8003c32 <_svfiprintf_r+0x16e>
 8003b96:	b1b8      	cbz	r0, 8003bc8 <_svfiprintf_r+0x104>
 8003b98:	e00f      	b.n	8003bba <_svfiprintf_r+0xf6>
 8003b9a:	462f      	mov	r7, r5
 8003b9c:	e7b8      	b.n	8003b10 <_svfiprintf_r+0x4c>
 8003b9e:	4a40      	ldr	r2, [pc, #256]	; (8003ca0 <_svfiprintf_r+0x1dc>)
 8003ba0:	1a80      	subs	r0, r0, r2
 8003ba2:	fa0b f000 	lsl.w	r0, fp, r0
 8003ba6:	4318      	orrs	r0, r3
 8003ba8:	9004      	str	r0, [sp, #16]
 8003baa:	463d      	mov	r5, r7
 8003bac:	e7d3      	b.n	8003b56 <_svfiprintf_r+0x92>
 8003bae:	9a03      	ldr	r2, [sp, #12]
 8003bb0:	1d11      	adds	r1, r2, #4
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	9103      	str	r1, [sp, #12]
 8003bb6:	2a00      	cmp	r2, #0
 8003bb8:	db01      	blt.n	8003bbe <_svfiprintf_r+0xfa>
 8003bba:	9207      	str	r2, [sp, #28]
 8003bbc:	e004      	b.n	8003bc8 <_svfiprintf_r+0x104>
 8003bbe:	4252      	negs	r2, r2
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	9207      	str	r2, [sp, #28]
 8003bc6:	9304      	str	r3, [sp, #16]
 8003bc8:	783b      	ldrb	r3, [r7, #0]
 8003bca:	2b2e      	cmp	r3, #46	; 0x2e
 8003bcc:	d10c      	bne.n	8003be8 <_svfiprintf_r+0x124>
 8003bce:	787b      	ldrb	r3, [r7, #1]
 8003bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd2:	d133      	bne.n	8003c3c <_svfiprintf_r+0x178>
 8003bd4:	9b03      	ldr	r3, [sp, #12]
 8003bd6:	1d1a      	adds	r2, r3, #4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	9203      	str	r2, [sp, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bfb8      	it	lt
 8003be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003be4:	3702      	adds	r7, #2
 8003be6:	9305      	str	r3, [sp, #20]
 8003be8:	4d2e      	ldr	r5, [pc, #184]	; (8003ca4 <_svfiprintf_r+0x1e0>)
 8003bea:	7839      	ldrb	r1, [r7, #0]
 8003bec:	2203      	movs	r2, #3
 8003bee:	4628      	mov	r0, r5
 8003bf0:	f7fc fb16 	bl	8000220 <memchr>
 8003bf4:	b138      	cbz	r0, 8003c06 <_svfiprintf_r+0x142>
 8003bf6:	2340      	movs	r3, #64	; 0x40
 8003bf8:	1b40      	subs	r0, r0, r5
 8003bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8003bfe:	9b04      	ldr	r3, [sp, #16]
 8003c00:	4303      	orrs	r3, r0
 8003c02:	3701      	adds	r7, #1
 8003c04:	9304      	str	r3, [sp, #16]
 8003c06:	7839      	ldrb	r1, [r7, #0]
 8003c08:	4827      	ldr	r0, [pc, #156]	; (8003ca8 <_svfiprintf_r+0x1e4>)
 8003c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c0e:	2206      	movs	r2, #6
 8003c10:	1c7e      	adds	r6, r7, #1
 8003c12:	f7fc fb05 	bl	8000220 <memchr>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d038      	beq.n	8003c8c <_svfiprintf_r+0x1c8>
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <_svfiprintf_r+0x1e8>)
 8003c1c:	bb13      	cbnz	r3, 8003c64 <_svfiprintf_r+0x1a0>
 8003c1e:	9b03      	ldr	r3, [sp, #12]
 8003c20:	3307      	adds	r3, #7
 8003c22:	f023 0307 	bic.w	r3, r3, #7
 8003c26:	3308      	adds	r3, #8
 8003c28:	9303      	str	r3, [sp, #12]
 8003c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2c:	444b      	add	r3, r9
 8003c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c30:	e76d      	b.n	8003b0e <_svfiprintf_r+0x4a>
 8003c32:	fb05 3202 	mla	r2, r5, r2, r3
 8003c36:	2001      	movs	r0, #1
 8003c38:	460f      	mov	r7, r1
 8003c3a:	e7a6      	b.n	8003b8a <_svfiprintf_r+0xc6>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	3701      	adds	r7, #1
 8003c40:	9305      	str	r3, [sp, #20]
 8003c42:	4619      	mov	r1, r3
 8003c44:	250a      	movs	r5, #10
 8003c46:	4638      	mov	r0, r7
 8003c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c4c:	3a30      	subs	r2, #48	; 0x30
 8003c4e:	2a09      	cmp	r2, #9
 8003c50:	d903      	bls.n	8003c5a <_svfiprintf_r+0x196>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0c8      	beq.n	8003be8 <_svfiprintf_r+0x124>
 8003c56:	9105      	str	r1, [sp, #20]
 8003c58:	e7c6      	b.n	8003be8 <_svfiprintf_r+0x124>
 8003c5a:	fb05 2101 	mla	r1, r5, r1, r2
 8003c5e:	2301      	movs	r3, #1
 8003c60:	4607      	mov	r7, r0
 8003c62:	e7f0      	b.n	8003c46 <_svfiprintf_r+0x182>
 8003c64:	ab03      	add	r3, sp, #12
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	4622      	mov	r2, r4
 8003c6a:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <_svfiprintf_r+0x1ec>)
 8003c6c:	a904      	add	r1, sp, #16
 8003c6e:	4640      	mov	r0, r8
 8003c70:	f3af 8000 	nop.w
 8003c74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c78:	4681      	mov	r9, r0
 8003c7a:	d1d6      	bne.n	8003c2a <_svfiprintf_r+0x166>
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	065b      	lsls	r3, r3, #25
 8003c80:	f53f af35 	bmi.w	8003aee <_svfiprintf_r+0x2a>
 8003c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c86:	b01d      	add	sp, #116	; 0x74
 8003c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c8c:	ab03      	add	r3, sp, #12
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	4622      	mov	r2, r4
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <_svfiprintf_r+0x1ec>)
 8003c94:	a904      	add	r1, sp, #16
 8003c96:	4640      	mov	r0, r8
 8003c98:	f000 f882 	bl	8003da0 <_printf_i>
 8003c9c:	e7ea      	b.n	8003c74 <_svfiprintf_r+0x1b0>
 8003c9e:	bf00      	nop
 8003ca0:	08004788 	.word	0x08004788
 8003ca4:	0800478e 	.word	0x0800478e
 8003ca8:	08004792 	.word	0x08004792
 8003cac:	00000000 	.word	0x00000000
 8003cb0:	08003a11 	.word	0x08003a11

08003cb4 <_printf_common>:
 8003cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb8:	4691      	mov	r9, r2
 8003cba:	461f      	mov	r7, r3
 8003cbc:	688a      	ldr	r2, [r1, #8]
 8003cbe:	690b      	ldr	r3, [r1, #16]
 8003cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	bfb8      	it	lt
 8003cc8:	4613      	movlt	r3, r2
 8003cca:	f8c9 3000 	str.w	r3, [r9]
 8003cce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	b112      	cbz	r2, 8003cde <_printf_common+0x2a>
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f8c9 3000 	str.w	r3, [r9]
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	0699      	lsls	r1, r3, #26
 8003ce2:	bf42      	ittt	mi
 8003ce4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ce8:	3302      	addmi	r3, #2
 8003cea:	f8c9 3000 	strmi.w	r3, [r9]
 8003cee:	6825      	ldr	r5, [r4, #0]
 8003cf0:	f015 0506 	ands.w	r5, r5, #6
 8003cf4:	d107      	bne.n	8003d06 <_printf_common+0x52>
 8003cf6:	f104 0a19 	add.w	sl, r4, #25
 8003cfa:	68e3      	ldr	r3, [r4, #12]
 8003cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	42ab      	cmp	r3, r5
 8003d04:	dc28      	bgt.n	8003d58 <_printf_common+0xa4>
 8003d06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	3300      	adds	r3, #0
 8003d0e:	bf18      	it	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	0692      	lsls	r2, r2, #26
 8003d14:	d42d      	bmi.n	8003d72 <_printf_common+0xbe>
 8003d16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d1a:	4639      	mov	r1, r7
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	47c0      	blx	r8
 8003d20:	3001      	adds	r0, #1
 8003d22:	d020      	beq.n	8003d66 <_printf_common+0xb2>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	68e5      	ldr	r5, [r4, #12]
 8003d28:	f8d9 2000 	ldr.w	r2, [r9]
 8003d2c:	f003 0306 	and.w	r3, r3, #6
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	bf08      	it	eq
 8003d34:	1aad      	subeq	r5, r5, r2
 8003d36:	68a3      	ldr	r3, [r4, #8]
 8003d38:	6922      	ldr	r2, [r4, #16]
 8003d3a:	bf0c      	ite	eq
 8003d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d40:	2500      	movne	r5, #0
 8003d42:	4293      	cmp	r3, r2
 8003d44:	bfc4      	itt	gt
 8003d46:	1a9b      	subgt	r3, r3, r2
 8003d48:	18ed      	addgt	r5, r5, r3
 8003d4a:	f04f 0900 	mov.w	r9, #0
 8003d4e:	341a      	adds	r4, #26
 8003d50:	454d      	cmp	r5, r9
 8003d52:	d11a      	bne.n	8003d8a <_printf_common+0xd6>
 8003d54:	2000      	movs	r0, #0
 8003d56:	e008      	b.n	8003d6a <_printf_common+0xb6>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	4652      	mov	r2, sl
 8003d5c:	4639      	mov	r1, r7
 8003d5e:	4630      	mov	r0, r6
 8003d60:	47c0      	blx	r8
 8003d62:	3001      	adds	r0, #1
 8003d64:	d103      	bne.n	8003d6e <_printf_common+0xba>
 8003d66:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6e:	3501      	adds	r5, #1
 8003d70:	e7c3      	b.n	8003cfa <_printf_common+0x46>
 8003d72:	18e1      	adds	r1, r4, r3
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	2030      	movs	r0, #48	; 0x30
 8003d78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d7c:	4422      	add	r2, r4
 8003d7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d86:	3302      	adds	r3, #2
 8003d88:	e7c5      	b.n	8003d16 <_printf_common+0x62>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	4639      	mov	r1, r7
 8003d90:	4630      	mov	r0, r6
 8003d92:	47c0      	blx	r8
 8003d94:	3001      	adds	r0, #1
 8003d96:	d0e6      	beq.n	8003d66 <_printf_common+0xb2>
 8003d98:	f109 0901 	add.w	r9, r9, #1
 8003d9c:	e7d8      	b.n	8003d50 <_printf_common+0x9c>
	...

08003da0 <_printf_i>:
 8003da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003da4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003da8:	460c      	mov	r4, r1
 8003daa:	7e09      	ldrb	r1, [r1, #24]
 8003dac:	b085      	sub	sp, #20
 8003dae:	296e      	cmp	r1, #110	; 0x6e
 8003db0:	4617      	mov	r7, r2
 8003db2:	4606      	mov	r6, r0
 8003db4:	4698      	mov	r8, r3
 8003db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003db8:	f000 80b3 	beq.w	8003f22 <_printf_i+0x182>
 8003dbc:	d822      	bhi.n	8003e04 <_printf_i+0x64>
 8003dbe:	2963      	cmp	r1, #99	; 0x63
 8003dc0:	d036      	beq.n	8003e30 <_printf_i+0x90>
 8003dc2:	d80a      	bhi.n	8003dda <_printf_i+0x3a>
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	f000 80b9 	beq.w	8003f3c <_printf_i+0x19c>
 8003dca:	2958      	cmp	r1, #88	; 0x58
 8003dcc:	f000 8083 	beq.w	8003ed6 <_printf_i+0x136>
 8003dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003dd8:	e032      	b.n	8003e40 <_printf_i+0xa0>
 8003dda:	2964      	cmp	r1, #100	; 0x64
 8003ddc:	d001      	beq.n	8003de2 <_printf_i+0x42>
 8003dde:	2969      	cmp	r1, #105	; 0x69
 8003de0:	d1f6      	bne.n	8003dd0 <_printf_i+0x30>
 8003de2:	6820      	ldr	r0, [r4, #0]
 8003de4:	6813      	ldr	r3, [r2, #0]
 8003de6:	0605      	lsls	r5, r0, #24
 8003de8:	f103 0104 	add.w	r1, r3, #4
 8003dec:	d52a      	bpl.n	8003e44 <_printf_i+0xa4>
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da03      	bge.n	8003dfe <_printf_i+0x5e>
 8003df6:	222d      	movs	r2, #45	; 0x2d
 8003df8:	425b      	negs	r3, r3
 8003dfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003dfe:	486f      	ldr	r0, [pc, #444]	; (8003fbc <_printf_i+0x21c>)
 8003e00:	220a      	movs	r2, #10
 8003e02:	e039      	b.n	8003e78 <_printf_i+0xd8>
 8003e04:	2973      	cmp	r1, #115	; 0x73
 8003e06:	f000 809d 	beq.w	8003f44 <_printf_i+0x1a4>
 8003e0a:	d808      	bhi.n	8003e1e <_printf_i+0x7e>
 8003e0c:	296f      	cmp	r1, #111	; 0x6f
 8003e0e:	d020      	beq.n	8003e52 <_printf_i+0xb2>
 8003e10:	2970      	cmp	r1, #112	; 0x70
 8003e12:	d1dd      	bne.n	8003dd0 <_printf_i+0x30>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	f043 0320 	orr.w	r3, r3, #32
 8003e1a:	6023      	str	r3, [r4, #0]
 8003e1c:	e003      	b.n	8003e26 <_printf_i+0x86>
 8003e1e:	2975      	cmp	r1, #117	; 0x75
 8003e20:	d017      	beq.n	8003e52 <_printf_i+0xb2>
 8003e22:	2978      	cmp	r1, #120	; 0x78
 8003e24:	d1d4      	bne.n	8003dd0 <_printf_i+0x30>
 8003e26:	2378      	movs	r3, #120	; 0x78
 8003e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e2c:	4864      	ldr	r0, [pc, #400]	; (8003fc0 <_printf_i+0x220>)
 8003e2e:	e055      	b.n	8003edc <_printf_i+0x13c>
 8003e30:	6813      	ldr	r3, [r2, #0]
 8003e32:	1d19      	adds	r1, r3, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6011      	str	r1, [r2, #0]
 8003e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e40:	2301      	movs	r3, #1
 8003e42:	e08c      	b.n	8003f5e <_printf_i+0x1be>
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6011      	str	r1, [r2, #0]
 8003e48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e4c:	bf18      	it	ne
 8003e4e:	b21b      	sxthne	r3, r3
 8003e50:	e7cf      	b.n	8003df2 <_printf_i+0x52>
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	6825      	ldr	r5, [r4, #0]
 8003e56:	1d18      	adds	r0, r3, #4
 8003e58:	6010      	str	r0, [r2, #0]
 8003e5a:	0628      	lsls	r0, r5, #24
 8003e5c:	d501      	bpl.n	8003e62 <_printf_i+0xc2>
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	e002      	b.n	8003e68 <_printf_i+0xc8>
 8003e62:	0668      	lsls	r0, r5, #25
 8003e64:	d5fb      	bpl.n	8003e5e <_printf_i+0xbe>
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	4854      	ldr	r0, [pc, #336]	; (8003fbc <_printf_i+0x21c>)
 8003e6a:	296f      	cmp	r1, #111	; 0x6f
 8003e6c:	bf14      	ite	ne
 8003e6e:	220a      	movne	r2, #10
 8003e70:	2208      	moveq	r2, #8
 8003e72:	2100      	movs	r1, #0
 8003e74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e78:	6865      	ldr	r5, [r4, #4]
 8003e7a:	60a5      	str	r5, [r4, #8]
 8003e7c:	2d00      	cmp	r5, #0
 8003e7e:	f2c0 8095 	blt.w	8003fac <_printf_i+0x20c>
 8003e82:	6821      	ldr	r1, [r4, #0]
 8003e84:	f021 0104 	bic.w	r1, r1, #4
 8003e88:	6021      	str	r1, [r4, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d13d      	bne.n	8003f0a <_printf_i+0x16a>
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	f040 808e 	bne.w	8003fb0 <_printf_i+0x210>
 8003e94:	4665      	mov	r5, ip
 8003e96:	2a08      	cmp	r2, #8
 8003e98:	d10b      	bne.n	8003eb2 <_printf_i+0x112>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	07db      	lsls	r3, r3, #31
 8003e9e:	d508      	bpl.n	8003eb2 <_printf_i+0x112>
 8003ea0:	6923      	ldr	r3, [r4, #16]
 8003ea2:	6862      	ldr	r2, [r4, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	bfde      	ittt	le
 8003ea8:	2330      	movle	r3, #48	; 0x30
 8003eaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003eb2:	ebac 0305 	sub.w	r3, ip, r5
 8003eb6:	6123      	str	r3, [r4, #16]
 8003eb8:	f8cd 8000 	str.w	r8, [sp]
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	aa03      	add	r2, sp, #12
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	f7ff fef6 	bl	8003cb4 <_printf_common>
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d14d      	bne.n	8003f68 <_printf_i+0x1c8>
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	b005      	add	sp, #20
 8003ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ed6:	4839      	ldr	r0, [pc, #228]	; (8003fbc <_printf_i+0x21c>)
 8003ed8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003edc:	6813      	ldr	r3, [r2, #0]
 8003ede:	6821      	ldr	r1, [r4, #0]
 8003ee0:	1d1d      	adds	r5, r3, #4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6015      	str	r5, [r2, #0]
 8003ee6:	060a      	lsls	r2, r1, #24
 8003ee8:	d50b      	bpl.n	8003f02 <_printf_i+0x162>
 8003eea:	07ca      	lsls	r2, r1, #31
 8003eec:	bf44      	itt	mi
 8003eee:	f041 0120 	orrmi.w	r1, r1, #32
 8003ef2:	6021      	strmi	r1, [r4, #0]
 8003ef4:	b91b      	cbnz	r3, 8003efe <_printf_i+0x15e>
 8003ef6:	6822      	ldr	r2, [r4, #0]
 8003ef8:	f022 0220 	bic.w	r2, r2, #32
 8003efc:	6022      	str	r2, [r4, #0]
 8003efe:	2210      	movs	r2, #16
 8003f00:	e7b7      	b.n	8003e72 <_printf_i+0xd2>
 8003f02:	064d      	lsls	r5, r1, #25
 8003f04:	bf48      	it	mi
 8003f06:	b29b      	uxthmi	r3, r3
 8003f08:	e7ef      	b.n	8003eea <_printf_i+0x14a>
 8003f0a:	4665      	mov	r5, ip
 8003f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f10:	fb02 3311 	mls	r3, r2, r1, r3
 8003f14:	5cc3      	ldrb	r3, [r0, r3]
 8003f16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	2900      	cmp	r1, #0
 8003f1e:	d1f5      	bne.n	8003f0c <_printf_i+0x16c>
 8003f20:	e7b9      	b.n	8003e96 <_printf_i+0xf6>
 8003f22:	6813      	ldr	r3, [r2, #0]
 8003f24:	6825      	ldr	r5, [r4, #0]
 8003f26:	6961      	ldr	r1, [r4, #20]
 8003f28:	1d18      	adds	r0, r3, #4
 8003f2a:	6010      	str	r0, [r2, #0]
 8003f2c:	0628      	lsls	r0, r5, #24
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	d501      	bpl.n	8003f36 <_printf_i+0x196>
 8003f32:	6019      	str	r1, [r3, #0]
 8003f34:	e002      	b.n	8003f3c <_printf_i+0x19c>
 8003f36:	066a      	lsls	r2, r5, #25
 8003f38:	d5fb      	bpl.n	8003f32 <_printf_i+0x192>
 8003f3a:	8019      	strh	r1, [r3, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6123      	str	r3, [r4, #16]
 8003f40:	4665      	mov	r5, ip
 8003f42:	e7b9      	b.n	8003eb8 <_printf_i+0x118>
 8003f44:	6813      	ldr	r3, [r2, #0]
 8003f46:	1d19      	adds	r1, r3, #4
 8003f48:	6011      	str	r1, [r2, #0]
 8003f4a:	681d      	ldr	r5, [r3, #0]
 8003f4c:	6862      	ldr	r2, [r4, #4]
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4628      	mov	r0, r5
 8003f52:	f7fc f965 	bl	8000220 <memchr>
 8003f56:	b108      	cbz	r0, 8003f5c <_printf_i+0x1bc>
 8003f58:	1b40      	subs	r0, r0, r5
 8003f5a:	6060      	str	r0, [r4, #4]
 8003f5c:	6863      	ldr	r3, [r4, #4]
 8003f5e:	6123      	str	r3, [r4, #16]
 8003f60:	2300      	movs	r3, #0
 8003f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f66:	e7a7      	b.n	8003eb8 <_printf_i+0x118>
 8003f68:	6923      	ldr	r3, [r4, #16]
 8003f6a:	462a      	mov	r2, r5
 8003f6c:	4639      	mov	r1, r7
 8003f6e:	4630      	mov	r0, r6
 8003f70:	47c0      	blx	r8
 8003f72:	3001      	adds	r0, #1
 8003f74:	d0aa      	beq.n	8003ecc <_printf_i+0x12c>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	079b      	lsls	r3, r3, #30
 8003f7a:	d413      	bmi.n	8003fa4 <_printf_i+0x204>
 8003f7c:	68e0      	ldr	r0, [r4, #12]
 8003f7e:	9b03      	ldr	r3, [sp, #12]
 8003f80:	4298      	cmp	r0, r3
 8003f82:	bfb8      	it	lt
 8003f84:	4618      	movlt	r0, r3
 8003f86:	e7a3      	b.n	8003ed0 <_printf_i+0x130>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	464a      	mov	r2, r9
 8003f8c:	4639      	mov	r1, r7
 8003f8e:	4630      	mov	r0, r6
 8003f90:	47c0      	blx	r8
 8003f92:	3001      	adds	r0, #1
 8003f94:	d09a      	beq.n	8003ecc <_printf_i+0x12c>
 8003f96:	3501      	adds	r5, #1
 8003f98:	68e3      	ldr	r3, [r4, #12]
 8003f9a:	9a03      	ldr	r2, [sp, #12]
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	42ab      	cmp	r3, r5
 8003fa0:	dcf2      	bgt.n	8003f88 <_printf_i+0x1e8>
 8003fa2:	e7eb      	b.n	8003f7c <_printf_i+0x1dc>
 8003fa4:	2500      	movs	r5, #0
 8003fa6:	f104 0919 	add.w	r9, r4, #25
 8003faa:	e7f5      	b.n	8003f98 <_printf_i+0x1f8>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ac      	bne.n	8003f0a <_printf_i+0x16a>
 8003fb0:	7803      	ldrb	r3, [r0, #0]
 8003fb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fba:	e76c      	b.n	8003e96 <_printf_i+0xf6>
 8003fbc:	08004799 	.word	0x08004799
 8003fc0:	080047aa 	.word	0x080047aa

08003fc4 <memcpy>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	1e43      	subs	r3, r0, #1
 8003fc8:	440a      	add	r2, r1
 8003fca:	4291      	cmp	r1, r2
 8003fcc:	d100      	bne.n	8003fd0 <memcpy+0xc>
 8003fce:	bd10      	pop	{r4, pc}
 8003fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fd8:	e7f7      	b.n	8003fca <memcpy+0x6>

08003fda <memmove>:
 8003fda:	4288      	cmp	r0, r1
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	eb01 0302 	add.w	r3, r1, r2
 8003fe2:	d807      	bhi.n	8003ff4 <memmove+0x1a>
 8003fe4:	1e42      	subs	r2, r0, #1
 8003fe6:	4299      	cmp	r1, r3
 8003fe8:	d00a      	beq.n	8004000 <memmove+0x26>
 8003fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fee:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ff2:	e7f8      	b.n	8003fe6 <memmove+0xc>
 8003ff4:	4283      	cmp	r3, r0
 8003ff6:	d9f5      	bls.n	8003fe4 <memmove+0xa>
 8003ff8:	1881      	adds	r1, r0, r2
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	42d3      	cmn	r3, r2
 8003ffe:	d100      	bne.n	8004002 <memmove+0x28>
 8004000:	bd10      	pop	{r4, pc}
 8004002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004006:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800400a:	e7f7      	b.n	8003ffc <memmove+0x22>

0800400c <_free_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4605      	mov	r5, r0
 8004010:	2900      	cmp	r1, #0
 8004012:	d045      	beq.n	80040a0 <_free_r+0x94>
 8004014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004018:	1f0c      	subs	r4, r1, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	bfb8      	it	lt
 800401e:	18e4      	addlt	r4, r4, r3
 8004020:	f000 f8d2 	bl	80041c8 <__malloc_lock>
 8004024:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <_free_r+0x98>)
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	4610      	mov	r0, r2
 800402a:	b933      	cbnz	r3, 800403a <_free_r+0x2e>
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	6014      	str	r4, [r2, #0]
 8004030:	4628      	mov	r0, r5
 8004032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004036:	f000 b8c8 	b.w	80041ca <__malloc_unlock>
 800403a:	42a3      	cmp	r3, r4
 800403c:	d90c      	bls.n	8004058 <_free_r+0x4c>
 800403e:	6821      	ldr	r1, [r4, #0]
 8004040:	1862      	adds	r2, r4, r1
 8004042:	4293      	cmp	r3, r2
 8004044:	bf04      	itt	eq
 8004046:	681a      	ldreq	r2, [r3, #0]
 8004048:	685b      	ldreq	r3, [r3, #4]
 800404a:	6063      	str	r3, [r4, #4]
 800404c:	bf04      	itt	eq
 800404e:	1852      	addeq	r2, r2, r1
 8004050:	6022      	streq	r2, [r4, #0]
 8004052:	6004      	str	r4, [r0, #0]
 8004054:	e7ec      	b.n	8004030 <_free_r+0x24>
 8004056:	4613      	mov	r3, r2
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	b10a      	cbz	r2, 8004060 <_free_r+0x54>
 800405c:	42a2      	cmp	r2, r4
 800405e:	d9fa      	bls.n	8004056 <_free_r+0x4a>
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	1858      	adds	r0, r3, r1
 8004064:	42a0      	cmp	r0, r4
 8004066:	d10b      	bne.n	8004080 <_free_r+0x74>
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	4401      	add	r1, r0
 800406c:	1858      	adds	r0, r3, r1
 800406e:	4282      	cmp	r2, r0
 8004070:	6019      	str	r1, [r3, #0]
 8004072:	d1dd      	bne.n	8004030 <_free_r+0x24>
 8004074:	6810      	ldr	r0, [r2, #0]
 8004076:	6852      	ldr	r2, [r2, #4]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	4401      	add	r1, r0
 800407c:	6019      	str	r1, [r3, #0]
 800407e:	e7d7      	b.n	8004030 <_free_r+0x24>
 8004080:	d902      	bls.n	8004088 <_free_r+0x7c>
 8004082:	230c      	movs	r3, #12
 8004084:	602b      	str	r3, [r5, #0]
 8004086:	e7d3      	b.n	8004030 <_free_r+0x24>
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	1821      	adds	r1, r4, r0
 800408c:	428a      	cmp	r2, r1
 800408e:	bf04      	itt	eq
 8004090:	6811      	ldreq	r1, [r2, #0]
 8004092:	6852      	ldreq	r2, [r2, #4]
 8004094:	6062      	str	r2, [r4, #4]
 8004096:	bf04      	itt	eq
 8004098:	1809      	addeq	r1, r1, r0
 800409a:	6021      	streq	r1, [r4, #0]
 800409c:	605c      	str	r4, [r3, #4]
 800409e:	e7c7      	b.n	8004030 <_free_r+0x24>
 80040a0:	bd38      	pop	{r3, r4, r5, pc}
 80040a2:	bf00      	nop
 80040a4:	200001c4 	.word	0x200001c4

080040a8 <_malloc_r>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	1ccd      	adds	r5, r1, #3
 80040ac:	f025 0503 	bic.w	r5, r5, #3
 80040b0:	3508      	adds	r5, #8
 80040b2:	2d0c      	cmp	r5, #12
 80040b4:	bf38      	it	cc
 80040b6:	250c      	movcc	r5, #12
 80040b8:	2d00      	cmp	r5, #0
 80040ba:	4606      	mov	r6, r0
 80040bc:	db01      	blt.n	80040c2 <_malloc_r+0x1a>
 80040be:	42a9      	cmp	r1, r5
 80040c0:	d903      	bls.n	80040ca <_malloc_r+0x22>
 80040c2:	230c      	movs	r3, #12
 80040c4:	6033      	str	r3, [r6, #0]
 80040c6:	2000      	movs	r0, #0
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
 80040ca:	f000 f87d 	bl	80041c8 <__malloc_lock>
 80040ce:	4a21      	ldr	r2, [pc, #132]	; (8004154 <_malloc_r+0xac>)
 80040d0:	6814      	ldr	r4, [r2, #0]
 80040d2:	4621      	mov	r1, r4
 80040d4:	b991      	cbnz	r1, 80040fc <_malloc_r+0x54>
 80040d6:	4c20      	ldr	r4, [pc, #128]	; (8004158 <_malloc_r+0xb0>)
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	b91b      	cbnz	r3, 80040e4 <_malloc_r+0x3c>
 80040dc:	4630      	mov	r0, r6
 80040de:	f000 f863 	bl	80041a8 <_sbrk_r>
 80040e2:	6020      	str	r0, [r4, #0]
 80040e4:	4629      	mov	r1, r5
 80040e6:	4630      	mov	r0, r6
 80040e8:	f000 f85e 	bl	80041a8 <_sbrk_r>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d124      	bne.n	800413a <_malloc_r+0x92>
 80040f0:	230c      	movs	r3, #12
 80040f2:	6033      	str	r3, [r6, #0]
 80040f4:	4630      	mov	r0, r6
 80040f6:	f000 f868 	bl	80041ca <__malloc_unlock>
 80040fa:	e7e4      	b.n	80040c6 <_malloc_r+0x1e>
 80040fc:	680b      	ldr	r3, [r1, #0]
 80040fe:	1b5b      	subs	r3, r3, r5
 8004100:	d418      	bmi.n	8004134 <_malloc_r+0x8c>
 8004102:	2b0b      	cmp	r3, #11
 8004104:	d90f      	bls.n	8004126 <_malloc_r+0x7e>
 8004106:	600b      	str	r3, [r1, #0]
 8004108:	50cd      	str	r5, [r1, r3]
 800410a:	18cc      	adds	r4, r1, r3
 800410c:	4630      	mov	r0, r6
 800410e:	f000 f85c 	bl	80041ca <__malloc_unlock>
 8004112:	f104 000b 	add.w	r0, r4, #11
 8004116:	1d23      	adds	r3, r4, #4
 8004118:	f020 0007 	bic.w	r0, r0, #7
 800411c:	1ac3      	subs	r3, r0, r3
 800411e:	d0d3      	beq.n	80040c8 <_malloc_r+0x20>
 8004120:	425a      	negs	r2, r3
 8004122:	50e2      	str	r2, [r4, r3]
 8004124:	e7d0      	b.n	80040c8 <_malloc_r+0x20>
 8004126:	428c      	cmp	r4, r1
 8004128:	684b      	ldr	r3, [r1, #4]
 800412a:	bf16      	itet	ne
 800412c:	6063      	strne	r3, [r4, #4]
 800412e:	6013      	streq	r3, [r2, #0]
 8004130:	460c      	movne	r4, r1
 8004132:	e7eb      	b.n	800410c <_malloc_r+0x64>
 8004134:	460c      	mov	r4, r1
 8004136:	6849      	ldr	r1, [r1, #4]
 8004138:	e7cc      	b.n	80040d4 <_malloc_r+0x2c>
 800413a:	1cc4      	adds	r4, r0, #3
 800413c:	f024 0403 	bic.w	r4, r4, #3
 8004140:	42a0      	cmp	r0, r4
 8004142:	d005      	beq.n	8004150 <_malloc_r+0xa8>
 8004144:	1a21      	subs	r1, r4, r0
 8004146:	4630      	mov	r0, r6
 8004148:	f000 f82e 	bl	80041a8 <_sbrk_r>
 800414c:	3001      	adds	r0, #1
 800414e:	d0cf      	beq.n	80040f0 <_malloc_r+0x48>
 8004150:	6025      	str	r5, [r4, #0]
 8004152:	e7db      	b.n	800410c <_malloc_r+0x64>
 8004154:	200001c4 	.word	0x200001c4
 8004158:	200001c8 	.word	0x200001c8

0800415c <_realloc_r>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	4607      	mov	r7, r0
 8004160:	4614      	mov	r4, r2
 8004162:	460e      	mov	r6, r1
 8004164:	b921      	cbnz	r1, 8004170 <_realloc_r+0x14>
 8004166:	4611      	mov	r1, r2
 8004168:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800416c:	f7ff bf9c 	b.w	80040a8 <_malloc_r>
 8004170:	b922      	cbnz	r2, 800417c <_realloc_r+0x20>
 8004172:	f7ff ff4b 	bl	800400c <_free_r>
 8004176:	4625      	mov	r5, r4
 8004178:	4628      	mov	r0, r5
 800417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800417c:	f000 f826 	bl	80041cc <_malloc_usable_size_r>
 8004180:	42a0      	cmp	r0, r4
 8004182:	d20f      	bcs.n	80041a4 <_realloc_r+0x48>
 8004184:	4621      	mov	r1, r4
 8004186:	4638      	mov	r0, r7
 8004188:	f7ff ff8e 	bl	80040a8 <_malloc_r>
 800418c:	4605      	mov	r5, r0
 800418e:	2800      	cmp	r0, #0
 8004190:	d0f2      	beq.n	8004178 <_realloc_r+0x1c>
 8004192:	4631      	mov	r1, r6
 8004194:	4622      	mov	r2, r4
 8004196:	f7ff ff15 	bl	8003fc4 <memcpy>
 800419a:	4631      	mov	r1, r6
 800419c:	4638      	mov	r0, r7
 800419e:	f7ff ff35 	bl	800400c <_free_r>
 80041a2:	e7e9      	b.n	8004178 <_realloc_r+0x1c>
 80041a4:	4635      	mov	r5, r6
 80041a6:	e7e7      	b.n	8004178 <_realloc_r+0x1c>

080041a8 <_sbrk_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4c06      	ldr	r4, [pc, #24]	; (80041c4 <_sbrk_r+0x1c>)
 80041ac:	2300      	movs	r3, #0
 80041ae:	4605      	mov	r5, r0
 80041b0:	4608      	mov	r0, r1
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	f7ff fb4e 	bl	8003854 <_sbrk>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_sbrk_r+0x1a>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_sbrk_r+0x1a>
 80041c0:	602b      	str	r3, [r5, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	20000328 	.word	0x20000328

080041c8 <__malloc_lock>:
 80041c8:	4770      	bx	lr

080041ca <__malloc_unlock>:
 80041ca:	4770      	bx	lr

080041cc <_malloc_usable_size_r>:
 80041cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d0:	1f18      	subs	r0, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bfbc      	itt	lt
 80041d6:	580b      	ldrlt	r3, [r1, r0]
 80041d8:	18c0      	addlt	r0, r0, r3
 80041da:	4770      	bx	lr

080041dc <_init>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	bf00      	nop
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr

080041e8 <_fini>:
 80041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ea:	bf00      	nop
 80041ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ee:	bc08      	pop	{r3}
 80041f0:	469e      	mov	lr, r3
 80041f2:	4770      	bx	lr
